,text,code,task_id,test_list
0," this function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","```javascript
const R = 3;
const C = 3;

function minCost(cost, m, n) {
    let tc = Array.from({ length: R }, () => Array(C).fill(0));
    tc[0][0] = cost[0][0];
    
    for (let i = 1; i <= m; i++) {
        tc[i][0] = tc[i - 1][0] + cost[i][0];
    }
    
    for (let j = 1; j <= n; j++) {
        tc[0][j] = tc[0][j - 1] + cost[0][j];
    }
    
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            tc[i][j] = Math.min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j];
        }
    }
    
    return tc[m][n];
}
```",1,"```javascript
['console.assert(min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) === 8)', 'console.assert(min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) === 12)', 'console.assert(min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) === 16)']
```"
1, this function to find the similar elements from the given two tuple lists.,"```javascript
function similarElements(testTup1, testTup2) {
    const res = [...new Set(testTup1)].filter(value => new Set(testTup2).has(value));
    return [res];
}
```",2,"```javascript
console.assert(similar_elements([3, 4, 5, 6], [5, 7, 4, 10]).toString() === [4, 5].toString());
console.assert(similar_elements([1, 2, 3, 4], [5, 4, 3, 7]).toString() === [3, 4].toString());
console.assert(similar_elements([11, 12, 14, 13], [17, 15, 14, 13]).toString() === [13, 14].toString());
```"
2, this   function to identify non-prime numbers.,"```javascript
function isNotPrime(n) {
    let result = false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            result = true;
        }
    }
    return result;
}
```",3,"```javascript
console.assert(is_not_prime(2) === false);
console.assert(is_not_prime(10) === true);
console.assert(is_not_prime(35) === true);
```"
3, this function to find the largest integers from a given list of numbers using heap queue algorithm.,"```javascript
function heapQueueLargest(nums, n) {
  return nums.sort((a, b) => b - a).slice(0, n);
}
```",4,"```javascript
['console.assert(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3).toString() === [85, 75, 65].toString())', 'console.assert(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2).toString() === [85, 75].toString())', 'console.assert(heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5).toString() === [85, 75, 65, 58, 35].toString())']
```"
4, this function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"```javascript
function countWays(n) { 
    let A = new Array(n + 1).fill(0); 
    let B = new Array(n + 1).fill(0); 
    A[0] = 1; 
    A[1] = 0; 
    B[0] = 0; 
    B[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        A[i] = A[i - 2] + 2 * B[i - 1]; 
        B[i] = A[i - 1] + B[i - 2]; 
    } 
    return [A[n]]; 
}
```",5,"```javascript
console.assert(count_ways(2) === 3);
console.assert(count_ways(8) === 153);
console.assert(count_ways(12) === 2131);
```"
5, this   function to check whether the two numbers differ at one bit position only or not.,"```javascript
function isPowerOfTwo(x) { 
    return x && !(x & (x - 1)); 
}

function differAtOneBitPos(a, b) { 
    return isPowerOfTwo(a ^ b); 
}
```",6,"```javascript
['console.assert(differ_At_One_Bit_Pos(13,9) === true)', 'console.assert(differ_At_One_Bit_Pos(15,8) === false)', 'console.assert(differ_At_One_Bit_Pos(2,4) === false)']
```"
6, this function to find all words which are at least 4 characters long in a string by using regex.,"```javascript
function findCharLong(text) {
  return text.match(/\b\w{4,}\b/g);
}
```",7,"```javascript
console.assert(find_char_long('Please move back to stream').toString() === ['Please', 'move', 'back', 'stream'].toString());
console.assert(find_char_long('Jing Eco and Tech').toString() === ['Jing', 'Tech'].toString());
console.assert(find_char_long('Jhingai wulu road Zone 3').toString() === ['Jhingai', 'wulu', 'road', 'Zone'].toString());
```"
7, this function to find squares of individual elements in a list using lambda function.,"```javascript
function squareNums(nums) {
    const squareNums = nums.map(x => x ** 2);
    return squareNums;
}
```",8,"```javascript
['console.assert(JSON.stringify(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([1, 4, 9, 16, 25, 36, 49, 64, 81, 100])', 'console.assert(JSON.stringify(square_nums([10,20,30])) === JSON.stringify([100,400,900]))', 'console.assert(JSON.stringify(square_nums([12,15])) === JSON.stringify([144,225]))']
```"
8, this   function to find the minimum number of rotations required to get the same string.,"```javascript
function findRotations(str) {
    let tmp = str + str;
    let n = str.length;
    for (let i = 1; i <= n; i++) {
        let substring = tmp.slice(i, i + n);
        if (str === substring) {
            return i;
        }
    }
    return n;
}
```",9,"```javascript
console.assert(find_Rotations(""aaaa"") === 1);
console.assert(find_Rotations(""ab"") === 2);
console.assert(find_Rotations(""abc"") === 3);
```"
9, this function to get the n smallest items from a dataset.,"```javascript
function smallNNum(list1, n) {
  return list1.sort((a, b) => a - b).slice(0, n);
}
```",10,"```javascript
['console.assert(small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2).toString() === [10, 20].toString())', 'console.assert(small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5).toString() === [10, 20, 20, 40, 50].toString())', 'console.assert(small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3).toString() === [10, 20, 20].toString())']
```"
10, this   function to remove first and last occurrence of a given character from the string.,"```javascript
function remove_Occ(s, ch) { 
    for (let i = 0; i < s.length; i++) { 
        if (s[i] === ch) { 
            s = s.slice(0, i) + s.slice(i + 1); 
            break; 
        } 
    } 
    for (let i = s.length - 1; i >= 0; i--) {  
        if (s[i] === ch) { 
            s = s.slice(0, i) + s.slice(i + 1); 
            break; 
        } 
    } 
    return s; 
}
```",11,"```javascript
['console.assert(remove_Occ(""hello"",""l"") === ""heo"")', 'console.assert(remove_Occ(""abcda"",""a"") === ""bcd"")', 'console.assert(remove_Occ(""PHP"",""P"") === ""H"")']
```"
11, this function to sort a given matrix in ascending order according to the sum of its rows.,"```javascript
function sortMatrix(M) {
    const result = M.sort((a, b) => a.reduce((acc, val) => acc + val, 0) - b.reduce((acc, val) => acc + val, 0));
    return result;
}
```",12,"```javascript
['console.assert(JSON.stringify(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])) === JSON.stringify([[1, 1, 1], [1, 2, 3], [2, 4, 5]]);', 
 'console.assert(JSON.stringify(sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])) === JSON.stringify([[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);', 
 'console.assert(JSON.stringify(sort_matrix([[5,8,9],[6,4,3],[2,1,4]])) === JSON.stringify([[2, 1, 4], [6, 4, 3], [5, 8, 9]]);']
```"
12, this function to count the most common words in a dictionary.,"```javascript
function countCommon(words) {
  const wordCounts = {};
  words.forEach(word => {
    wordCounts[word] = (wordCounts[word] || 0) + 1;
  });

  const topFour = Object.entries(wordCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 4);
  
  return topFour;
}
```",13,"```javascript
assert(count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', ""black"", 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', ""orange"", 'red']) === [['pink', 6], ['black', 5], ['white', 5], ['red', 4]]);
assert(count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) === [['one', 4], ['two', 2], ['three', 2], ['four', 1]]);
assert(count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) === [['Apple', 2], ['Amazon', 2], ['Netflix', 2], ['Facebook', 1]]);
```"
13, this   function to find the volume of a triangular prism.,"```javascript
function findVolume(l, b, h) {
    return (l * b * h) / 2;
}
```",14,"```javascript
['console.assert(find_Volume(10, 8, 6) === 240)', 'console.assert(find_Volume(3, 2, 2) === 6)', 'console.assert(find_Volume(1, 2, 1) === 1)'];
```"
14, this function to split a string at lowercase letters.,"```javascript
function splitLowerString(text) {
    return text.match(/[a-z][^a-z]*/g);
}
```",15,"```javascript
['console.assert(split_lowerstring(""AbCd"").toString() === [\'bC\',\'d\'].toString())', 'console.assert(split_lowerstring("" "").toString() === [\'y\', \'t\', \'h\', \'o\', \'n\'].toString())', 'console.assert(split_lowerstring(""Programming"").toString() === [\'r\', \'o\', \'g\', \'r\', \'a\', \'m\', \'m\', \'i\', \'n\', \'g\'].toString())']
```"
15, this function to find sequences of lowercase letters joined with an underscore.,"```javascript
function textLowercaseUnderscore(text) {
    const patterns = /^[a-z]+_[a-z]+$/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",16,"```javascript
console.assert(text_lowercase_underscore(""aab_cbbbc"") === 'Found a match!');
console.assert(text_lowercase_underscore(""aab_Abbbc"") === 'Not matched!');
console.assert(text_lowercase_underscore(""Aaab_abbbc"") === 'Not matched!');
```"
16, this function to find the perimeter of a square.,"```javascript
function squarePerimeter(a) {
  const perimeter = 4 * a;
  return perimeter;
}
```",17,"```javascript
['console.assert(square_perimeter(10) === 40)', 'console.assert(square_perimeter(5) === 20)', 'console.assert(square_perimeter(4) === 16)']
```"
17, this function to remove characters from the first string which are present in the second string.,"```javascript
const NO_OF_CHARS = 256;

function strToList(string) {
    let temp = [];
    for (let x of string) {
        temp.push(x);
    }
    return temp;
}

function lstToString(list) {
    return list.join('');
}

function getCharCountArray(string) {
    let count = new Array(NO_OF_CHARS).fill(0);
    for (let i of string) {
        count[i.charCodeAt(0)] += 1;
    }
    return count;
}

function removeDirtyChars(string, secondString) {
    let count = getCharCountArray(secondString);
    let ipInd = 0;
    let resInd = 0;
    let temp = '';
    let strList = strToList(string);
    
    while (ipInd !== strList.length) {
        temp = strList[ipInd];
        if (count[temp.charCodeAt(0)] === 0) {
            strList[resInd] = strList[ipInd];
            resInd += 1;
        }
        ipInd += 1;
    }
    return lstToString(strList.slice(0, resInd));
}
```",18,"```javascript
['console.assert(remove_dirty_chars(""probasscurve"", ""pros"") === ""bacuve"");', 'console.assert(remove_dirty_chars(""digitalindia"", ""talent"") === ""digiidi"");', 'console.assert(remove_dirty_chars(""exoticmiles"", ""toxic"") === ""emles"");']
```"
18, this function to find whether a given array of integers contains any duplicate element.,"```javascript
function testDuplicate(arrayNums) {
    const numsSet = new Set(arrayNums);
    return arrayNums.length !== numsSet.size;
}
```",19,"```javascript
console.assert(test_duplicate([1, 2, 3, 4, 5]) === false);
console.assert(test_duplicate([1, 2, 3, 4, 4]) === true);
console.assert(test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5]) === true);
```"
19, this function to check if the given number is woodball or not.,"```javascript
function isWoodall(x) {
    if (x % 2 == 0) {
        return false;
    }
    if (x == 1) {
        return true;
    }
    x = x + 1;
    let p = 0;
    while (x % 2 == 0) {
        x = x / 2;
        p = p + 1;
        if (p == x) {
            return true;
        }
    }
    return false;
}
```",20,"```javascript
console.assert(is_woodall(383) === true);
console.assert(is_woodall(254) === false);
console.assert(is_woodall(200) === false);
```"
20, this function to find m number of multiples of n.,"```javascript
function multiples_of_num(m, n) {
    let multiples_of_num = [];
    for (let i = n; i <= (m + 1) * n; i += n) {
        multiples_of_num.push(i);
    }
    return multiples_of_num;
}
```",21,"```javascript
['console.assert(multiples_of_num(4,3).toString() === [3,6,9,12].toString())', 'console.assert(multiples_of_num(2,5).toString() === [5,10].toString())', 'console.assert(multiples_of_num(9,2).toString() === [2,4,6,8,10,12,14,16,18].toString())']
```"
21, this function to find the first duplicate element in a given array of integers.,"```javascript
function findFirstDuplicate(nums) {
    let numSet = new Set();
    let noDuplicate = -1;

    for (let i = 0; i < nums.length; i++) {
        if (numSet.has(nums[i])) {
            return nums[i];
        } else {
            numSet.add(nums[i]);
        }
    }

    return noDuplicate;
}
```",22,"```javascript
['console.assert(find_first_duplicate([1, 2, 3, 4, 4, 5]) === 4)', 'console.assert(find_first_duplicate([1, 2, 3, 4]) === -1)', 'console.assert(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]) === 1)']
```"
22, this   function to find the maximum sum of elements of list in a list of lists.,"```javascript
function maximum_Sum(list1) { 
    let maxi = -100000;
    for (let x of list1) { 
        let sum = 0; 
        for (let y of x) { 
            sum += y;      
        }
        maxi = Math.max(sum, maxi);     
    }
    return maxi; 
}
```",23,"```javascript
['console.assert(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) === 33)', 'console.assert(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) === 6)', 'console.assert(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) === 19)'];
```"
23, this function to convert the given binary number to its decimal equivalent.,"```javascript
function binaryToDecimal(binary) {
    let decimal = 0, i = 0;
    while (binary !== 0) {
        let dec = binary % 10;
        decimal += dec * Math.pow(2, i);
        binary = Math.floor(binary / 10);
        i++;
    }
    return decimal;
}
```",24,"```javascript
['console.assert(binary_to_decimal(100) === 4)', 'console.assert(binary_to_decimal(1011) === 11)', 'console.assert(binary_to_decimal(1101101) === 109)']
```"
24, this   function to find the product of non-repeated elements in a given array.,"```javascript
function find_Product(arr, n) { 
    arr.sort(); 
    let prod = 1; 
    for (let i = 0; i < n; i++) { 
        if (arr[i - 1] !== arr[i]) { 
            prod *= arr[i]; 
        } 
    } 
    return prod; 
}
```",25,"```javascript
['console.assert(find_Product([1,1,2,3]) === 6)', 'console.assert(find_Product([1,2,3,1,1]) === 6)', 'console.assert(find_Product([1,1,4,5,6]) === 120)']
```"
25, this function to check if the given tuple list has all k elements.,"```javascript
function checkKElements(testList, K) {
  let res = true;
  for (let tup of testList) {
    for (let ele of tup) {
      if (ele !== K) {
        res = false;
      }
    }
  }
  return res;
}
```",26,"```javascript
console.assert(check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4)], 4) === true);
console.assert(check_k_elements([(7, 7, 7), (7, 7)], 7) === true);
console.assert(check_k_elements([(9, 9), (9, 9, 9, 9)], 7) === false);
```"
26, this   function to remove all digits from a list of strings.,"```javascript
function remove(list) {
    var pattern = /[0-9]/;
    list = list.map(function(i) {
        return i.replace(pattern, '');
    });
    return list;
}
```",27,"```javascript
console.assert(remove(['4words', '3letters', '4digits']).toString() == ['words', 'letters', 'digits'].toString());
console.assert(remove(['28Jan','12Jan','11Jan']).toString() == ['Jan','Jan','Jan'].toString());
console.assert(remove(['wonder1','wonder2','wonder3']).toString() == ['wonder','wonder','wonder'].toString());
```"
27, this   function to find binomial co-efficient.,"```javascript
function binomial_Coeff(n, k) { 
    if (k > n) { 
        return 0; 
    } 
    if (k === 0 || k === n) { 
        return 1; 
    } 
    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k); 
}
```",28,"```javascript
['console.assert(binomial_Coeff(5, 2) === 10)', 'console.assert(binomial_Coeff(4, 3) === 4)', 'console.assert(binomial_Coeff(3, 2) === 3)']
```"
28, this   function to find the element occurring odd number of times.,"```javascript
function getOddOccurrence(arr, arr_size) {
    for (let i = 0; i < arr_size; i++) {
        let count = 0;
        for (let j = 0; j < arr_size; j++) {
            if (arr[i] === arr[j]) {
                count++;
            }
        }
        if (count % 2 !== 0) {
            return arr[i];
        }
    }
    return -1;
}
```",29,"```javascript
['console.assert(get_Odd_Occurrence([1,2,3,1,2,3,1]) === 1)', 'console.assert(get_Odd_Occurrence([1,2,3,2,3,1,3]) === 3)', 'console.assert(get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2]) === 5)']
```"
29, this   function to count all the substrings starting and ending with same characters.,"```javascript
function checkEquality(s) { 
    return (s.charCodeAt(0) === s.charCodeAt(s.length - 1)); 
}

function countSubstringWithEqualEnds(s) { 
    let result = 0; 
    let n = s.length; 
    for (let i = 0; i < n; i++) { 
        for (let j = 1; j <= n - i; j++) {  
            if (checkEquality(s.substring(i, i + j))) { 
                result++; 
            } 
        } 
    } 
    return result; 
}
```",30,"```javascript
['console.assert(count_Substring_With_Equal_Ends(""abc"") === 3)', 'console.assert(count_Substring_With_Equal_Ends(""abcda"") === 6)', 'console.assert(count_Substring_With_Equal_Ends(""ab"") === 2)']
```"
30, this function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"```javascript
function func(nums, k) {
    const d = {};
    for (const row of nums) {
        for (const i of row) {
            d[i] = (d[i] || 0) + 1;
        }
    }
    const temp = [];
    for (const [key, v] of Object.entries(d)) {
        if (temp.length < k) {
            temp.push([v, key]);
            if (temp.length === k) {
                temp.sort(([a], [b]) => a - b);
            }
        } else {
            if (v > temp[0][0]) {
                temp.shift();
                temp.push([v, key]);
                temp.sort(([a], [b]) => a - b);
            }
        }
    }
    const result = [];
    while (temp.length) {
        const [v, key] = temp.shift();
        result.push(key);
    }
    return result;
}
```",31,"```javascript
['console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3).toString() === [5, 7, 1].toString())', 'console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1).toString() === [1].toString())', 'console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5).toString() === [6, 5, 7, 8, 1].toString())']
```"
31, this   function to find the largest prime factor of a given number.,"```javascript
function maxPrimeFactors(n) { 
    let maxPrime = -1; 
    while (n % 2 === 0) { 
        maxPrime = 2; 
        n >>= 1;    
    } 
    for (let i = 3; i <= Math.sqrt(n); i += 2) { 
        while (n % i === 0) { 
            maxPrime = i; 
            n /= i; 
        } 
    } 
    if (n > 2) { 
        maxPrime = n;  
    } 
    return Math.floor(maxPrime); 
}
```",32,"```javascript
['console.assert(max_Prime_Factors(15) === 5)', 'console.assert(max_Prime_Factors(6) === 3)', 'console.assert(max_Prime_Factors(2) === 2)'];
```"
32, this   function to convert a decimal number to binary number.,"```javascript
function decimalToBinary(N) {
    let B_Number = 0;
    let cnt = 0;
    while (N !== 0) {
        let rem = N % 2;
        let c = Math.pow(10, cnt);
        B_Number += rem * c;
        N = Math.floor(N / 2);
        cnt++;
    }
    return B_Number;
}
```",33,"```javascript
['console.assert(decimal_To_Binary(10) === 1010)', 'console.assert(decimal_To_Binary(1) === 1)', 'console.assert(decimal_To_Binary(20) === 10100)']
```"
33, this   function to find the missing number in a sorted array.,"```javascript
function findMissing(ar, N) { 
    let l = 0; 
    let r = N - 1; 
    while (l <= r) {  
        let mid = Math.floor((l + r) / 2); 
        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) { 
            return mid + 1;  
        } else if (ar[mid] !== mid + 1) { 
            r = mid - 1; 
        } else { 
            l = mid + 1; 
        } 
    } 
    return -1; 
}
```",34,"```javascript
['console.assert(find_missing([1,2,3,5]) === 4)', 'console.assert(find_missing([1,3,4,5]) === 2)', 'console.assert(find_missing([1,2,3,5,6,7]) === 4)']
```"
34, this function to find the n-th rectangular number.,"```javascript
function findRectNum(n) {
  return n * (n + 1);
}
```",35,"```javascript
['console.assert(find_rect_num(4) === 20)', 'console.assert(find_rect_num(5) === 30)', 'console.assert(find_rect_num(6) === 42)'];
```"
35, this   function to find the nth digit in the proper fraction of two given numbers.,"```javascript
function find_Nth_Digit(p, q, N) {  
    while (N > 0) { 
        N -= 1;  
        p *= 10;  
        res = Math.floor(p / q);  
        p %= q;  
    } 
    return res;  
}
```",36,"```javascript
['console.assert(find_Nth_Digit(1, 2, 1) === 5)', 'console.assert(find_Nth_Digit(3, 5, 1) === 6)', 'console.assert(find_Nth_Digit(5, 6, 5) === 3)'];
```"
36, this function to sort a given mixed list of integers and strings.,"```javascript
function sortMixedList(mixedList) {
    const intPart = mixedList.filter(i => typeof i === 'number').sort((a, b) => a - b);
    const strPart = mixedList.filter(i => typeof i === 'string').sort();
    return intPart.concat(strPart);
}
```",37,"```javascript
[""console.assert(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]).toString() === [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white'].toString())"", ""console.assert(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]).toString() === [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white'].toString())"", ""console.assert(sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1]).toString() === [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white'].toString())""]
```"
37, this function to find the division of first even and odd number of a given list.,"```javascript
function divEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) || -1;
    const firstOdd = list1.find(el => el % 2 !== 0) || -1;
    return firstEven / firstOdd;
}
```",38,"```javascript
['console.assert(div_even_odd([1,3,5,7,4,1,6,8]) === 4)', 'console.assert(div_even_odd([1,2,3,4,5,6,7,8,9,10]) === 2)', 'console.assert(div_even_odd([1,5,7,9,10]) === 10)']
```"
38, this function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"```javascript
function rearrangeString(S) {
    const ctr = {};
    for (const char of S) {
        ctr[char] = (ctr[char] || 0) + 1;
    }
    
    const heap = Object.entries(ctr).map(([key, value]) => [-value, key]);
    heapify(heap);
    
    if (-heap[0][0] * 2 > S.length + 1) {
        return """";
    }
    
    const ans = [];
    while (heap.length >= 2) {
        const [nct1, char1] = heapPop(heap);
        const [nct2, char2] = heapPop(heap);
        ans.push(char1, char2);
        
        if (nct1 + 1) heapPush(heap, [nct1 + 1, char1]);
        if (nct2 + 1) heapPush(heap, [nct2 + 1, char2]);
    }
    
    return ans.join("""") + (heap.length ? heap[0][1] : """");
}

function heapify(arr) {
    for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {
        heapifyDown(arr, i);
    }
}

function heapifyDown(heap, idx) {
    const left = 2 * idx + 1;
    const right = 2 * idx + 2;
    let largest = idx;

    if (left < heap.length && heap[left][0] > heap[largest][0]) {
        largest = left;
    }
    if (right < heap.length && heap[right][0] > heap[largest][0]) {
        largest = right;
    }
    if (largest !== idx) {
        [heap[idx], heap[largest]] = [heap[largest], heap[idx]];
        heapifyDown(heap, largest);
    }
}

function heapPop(heap) {
    const top = heap[0];
    heap[0] = heap[heap.length - 1];
    heap.pop();
    heapifyDown(heap, 0);
    return top;
}

function heapPush(heap, value) {
    heap.push(value);
    let idx = heap.length - 1;
    while (idx > 0) {
        const parent = Math.floor((idx - 1) / 2);
        if (heap[idx][0] > heap[parent][0]) {
            [heap[idx], heap[parent]] = [heap[parent], heap[idx]];
            idx = parent;
        } else {
            break;
        }
    }
}
```",39,"```javascript
['console.assert(rearange_string(""aab"") === ""aba"")', 'console.assert(rearange_string(""aabb"") === ""abab"")', 'console.assert(rearange_string(""abccdd"") === ""cdabcd"")']
```"
39, this function to find frequency of the elements in a given list of lists using collections module.,"```javascript
function freqElement(nums) {
  const result = {};
  nums.flat().forEach(num => {
    result[num] = (result[num] || 0) + 1;
  });
  return result;
}
```",40,"```javascript
console.assert(JSON.stringify(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])) === JSON.stringify({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}));
console.assert(JSON.stringify(freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}));
console.assert(JSON.stringify(freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])) === JSON.stringify({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}));
```"
40, this function to filter even numbers using lambda function.,"```javascript
function filterEvenNumbers(nums) {
    const evenNums = nums.filter(x => x % 2 === 0);
    return evenNums;
}
```",41,"```javascript
['console.assert(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [2, 4, 6, 8, 10].toString())', 'console.assert(filter_evennumbers([10,20,45,67,84,93]).toString() === [10,20,84].toString())', 'console.assert(filter_evennumbers([5,7,9,8,6,4,3]).toString() === [8,6,4].toString())']
```"
41, this   function to find the sum of repeated elements in a given array.,"```javascript
function findSum(arr, n) {
    return arr.filter(x => arr.filter(y => y === x).length > 1).reduce((a, b) => a + b, 0);
}
```",42,"```javascript
['console.assert(find_Sum([1,2,3,1,1,4,5,6],8) === 3)', 'console.assert(find_Sum([1,2,3,1,1],5) === 3)', 'console.assert(find_Sum([1,1,2],3) === 2)']
```"
42, this function to find sequences of lowercase letters joined with an underscore using regex.,"```javascript
function textMatch(text) {
  const patterns = /^[a-z]+_[a-z]+$/;
  if (patterns.test(text)) {
    return 'Found a match!';
  } else {
    return 'Not matched!';
  }
}
```",43,"```javascript
['console.assert(text_match(""aab_cbbbc"") === ""Found a match!"");', 'console.assert(text_match(""aab_Abbbc"") === ""Not matched!"");', 'console.assert(text_match(""Aaab_abbbc"") === ""Not matched!"");']
```"
43, this function that matches a word at the beginning of a string.,"```javascript
function textMatchString(text) {
    const patterns = /^\w+/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",44,"```javascript
['console.assert(text_match_string(""  "") === ""Not matched!"");', 'console.assert(text_match_string("" "") === ""Found a match!"");', 'console.assert(text_match_string(""  lang"") === ""Not matched!"");']
```"
44, this function to find the gcd of the given array elements.,"```javascript
function findGCD(x, y) {
    while (y) {
        let temp = y;
        y = x % y;
        x = temp;
    }
    return x;
}

function getGCD(l) {
    let num1 = l[0];
    let num2 = l[1];
    let gcd = findGCD(num1, num2);
    for (let i = 2; i < l.length; i++) {
        gcd = findGCD(gcd, l[i]);
    }
    return gcd;
}
```",45,"```javascript
['console.assert(get_gcd([2, 4, 6, 8, 16]) === 2)', 'console.assert(get_gcd([1, 2, 3]) === 1)', 'console.assert(get_gcd([2, 4, 6, 8]) === 2)']
```"
45, this   function to determine whether all the numbers are different from each other are not.,"```javascript
function testDistinct(data) {
  return data.length === new Set(data).size;
}
```",46,"```javascript
console.assert(test_distinct([1,5,7,9]) === true);
console.assert(test_distinct([2,4,5,5,7,9]) === false);
console.assert(test_distinct([1,2,3]) === true);
```"
46, this   function to find the last digit when factorial of a divides factorial of b.,"```javascript
function compute_Last_Digit(A, B) {
    let variable = 1;
    if (A === B) {
        return 1;
    } else if ((B - A) >= 5) {
        return 0;
    } else {
        for (let i = A + 1; i <= B; i++) {
            variable = (variable * (i % 10)) % 10;
        }
        return variable % 10;
    }
}
```",47,"```javascript
['console.assert(compute_Last_Digit(2, 4) === 2)', 'console.assert(compute_Last_Digit(6, 8) === 6)', 'console.assert(compute_Last_Digit(1, 2) === 2)'];
```"
47, this   function to set all odd bits of a given number.,"```javascript
function oddBitSetNumber(n) {
    let count = 0, res = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 0) {
            res |= (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return (n | res);
}
```",48,"```javascript
console.assert(odd_bit_set_number(10) === 15);
console.assert(odd_bit_set_number(20) === 21);
console.assert(odd_bit_set_number(30) === 31);
```"
48, this function to extract every first or specified element from a given two-dimensional list.,"```javascript
function specifiedElement(nums, N) {
    const result = nums.map(i => i[N]);
    return result;
}
```",49,"```javascript
['assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)===[1, 4, 7]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)===[3, 6, 9]', 'assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)===[2,5,1]']
```"
49, this function to find the list with minimum length using lambda function.,"```javascript
function minLengthList(inputList) {
    const minLength = Math.min(...inputList.map(x => x.length));
    const minList = inputList.reduce((a, b) => a.length <= b.length ? a : b);
    return [minLength, minList];
}
```",50,"```javascript
console.assert(min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === [1, [0]]);
console.assert(min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]) === [1, [1]]);
console.assert(min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]]) === [2, [1, 2]]);
```"
50, this function to print check if the triangle is equilateral or not.,"```javascript
function checkEquilateral(x, y, z) {
  if (x === y && y === z) {
    return true;
  } else {
    return false;
  }
}
```",51,"```javascript
['console.assert(check_equilateral(6, 8, 12) === false)', 'console.assert(check_equilateral(6, 6, 12) === false)', 'console.assert(check_equilateral(6, 6, 6) === true)']
```"
51, this function to caluclate area of a parallelogram.,"```javascript
function parallelogramArea(b, h) {
  const area = b * h;
  return area;
}
```",52,"```javascript
['console.assert(parallelogram_area(10, 20) === 200)', 'console.assert(parallelogram_area(15, 20) === 300)', 'console.assert(parallelogram_area(8, 9) === 72)']
```"
52, this   function to check whether the first and last characters of a given string are equal or not.,"```javascript
function check_Equality(str) {
  if (str[0] === str[str.length - 1]) {
    return ""Equal"";
  } else {
    return ""Not Equal"";
  }
}
```",53,"```javascript
['console.assert(check_Equality(""abcda"") === ""Equal"")', 'console.assert(check_Equality(""ab"") === ""Not Equal"")', 'console.assert(check_Equality(""mad"") === ""Not Equal"")']
```"
53, this function to sort the given array by using counting sort.,"```javascript
function countingSort(myList) {
    let maxValue = 0;
    for (let i = 0; i < myList.length; i++) {
        if (myList[i] > maxValue) {
            maxValue = myList[i];
        }
    }
    let buckets = new Array(maxValue + 1).fill(0);
    for (let i of myList) {
        buckets[i]++;
    }
    let i = 0;
    for (let j = 0; j <= maxValue; j++) {
        for (let a = 0; a < buckets[j]; a++) {
            myList[i] = j;
            i++;
        }
    }
    return myList;
}
```",54,"```javascript
['console.assert(JSON.stringify(counting_sort([1,23,4,5,6,7,8])) === JSON.stringify([1, 4, 5, 6, 7, 8, 23])', 'console.assert(JSON.stringify(counting_sort([12, 9, 28, 33, 69, 45])) === JSON.stringify([9, 12, 28, 33, 45, 69])', 'console.assert(JSON.stringify(counting_sort([8, 4, 14, 3, 2, 1])) === JSON.stringify([1, 2, 3, 4, 8, 14])']
```"
54, this function to find t-nth term of geometric series.,"```javascript
function tn_gp(a, n, r) {
  const tn = a * Math.pow(r, n - 1);
  return tn;
}
```",55,"```javascript
['console.assert(tn_gp(1, 5, 2) === 16)', 'console.assert(tn_gp(1, 5, 4) === 256)', 'console.assert(tn_gp(2, 6, 3) === 486)']
```"
55, this   function to check if a given number is one less than twice its reverse.,"```javascript
function rev(num) {    
    let rev_num = 0;
    while (num > 0) {  
        rev_num = (rev_num * 10 + num % 10); 
        num = Math.floor(num / 10);  
    }
    return rev_num;  
}

function check(n) {    
    return (2 * rev(n) === n + 1);
}
```",56,"```javascript
['console.assert(check(70) === false)', 'console.assert(check(23) === false)', 'console.assert(check(73) === true)']
```"
56, this   function to find the largest number that can be formed with the given digits.,"```javascript
function findMaxNum(arr, n) {
    arr.sort((a, b) => b - a);
    let num = arr[0];
    for (let i = 1; i < n; i++) {
        num = num * 10 + arr[i];
    }
    return num;
}
```",57,"```javascript
['console.assert(find_Max_Num([1,2,3]) === 321)', 'console.assert(find_Max_Num([4,5,6,1]) === 6541)', 'console.assert(find_Max_Num([1,2,3,9]) === 9321)']
```"
57, this   function to check whether the given two integers have opposite sign or not.,"```javascript
function opposite_Signs(x, y) { 
    return (x ^ y) < 0; 
}
```",58,"```javascript
console.assert(opposite_Signs(1, -2) === true);
console.assert(opposite_Signs(3, 2) === false);
console.assert(opposite_Signs(-10, -10) === false);
```"
58, this function to find the nth octagonal number.,"```javascript
function isOctagonal(n) {
    return 3 * n * n - 2 * n;
}
```",59,"```javascript
['console.assert(is_octagonal(5) === 65)', 'console.assert(is_octagonal(10) === 280)', 'console.assert(is_octagonal(15) === 645)'];
```"
59, this function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"```javascript
function max_len_sub(arr, n) {
    let mls = [];
    let max = 0;
    for (let i = 0; i < n; i++) {
        mls.push(1);
    }
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {
                mls[i] = mls[j] + 1;
            }
        }
    }
    for (let i = 0; i < n; i++) {
        if (max < mls[i]) {
            max = mls[i];
        }
    }
    return max;
}
```",60,"```javascript
['console.assert(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) === 5)', 'console.assert(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) === 4)', 'console.assert(max_len_sub([9, 11, 13, 15, 18], 5) === 1)']
```"
60, this   function to count number of substrings with the sum of digits equal to their length.,"```javascript
function countSubstrings(s, n) {
    let count = 0, sum = 0;
    const mp = new Map();
    mp.set(0, 1);
    
    for (let i = 0; i < n; i++) {
        sum += s.charCodeAt(i) - '0'.charCodeAt(0);
        count += (mp.get(sum - (i + 1)) || 0);
        mp.set(sum - (i + 1), (mp.get(sum - (i + 1)) || 0) + 1);
    }
    
    return count;
}
```",61,"```javascript
[""console.assert(count_Substrings('112112', 6) === 6)"", ""console.assert(count_Substrings('111', 3) === 6)"", ""console.assert(count_Substrings('1101112', 7) === 12)""];
```"
61, this   function to find smallest number in a list.,"```javascript
function smallestNum(xs) {
  return Math.min(...xs);
}
```",62,"```javascript
['console.assert(smallestNum([10, 20, 1, 45, 99]) === 1)', 'console.assert(smallestNum([1, 2, 3]) === 1)', 'console.assert(smallestNum([45, 46, 50, 60]) === 45)']
```"
62, this function to find the maximum difference between available pairs in the given tuple list.,"```javascript
function max_difference(test_list) {
    let temp = test_list.map(([a, b]) => Math.abs(b - a));
    let res = Math.max(...temp);
    return res;
}
```",63,"```javascript
console.assert(max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) === 7);
console.assert(max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) === 15);
console.assert(max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) === 23);
```"
63, this function to sort a list of tuples using lambda.,"```javascript
function subjectMarks(subjectmarks) {
    subjectmarks.sort((a, b) => a[1] - b[1]);
    return subjectmarks;
}
```",64,"```javascript
[""console.assert(JSON.stringify(subject_marks([['English', 88], ['Science', 90], ['Maths', 97], ['Social sciences', 82]])) === JSON.stringify([['Social sciences', 82], ['English', 88], ['Science', 90], ['Maths', 97]])"", ""console.assert(JSON.stringify(subject_marks([['Telugu', 49], ['Hindhi', 54], ['Social', 33]])) === JSON.stringify([['Social', 33], ['Telugu', 49], ['Hindhi', 54]])"", ""console.assert(JSON.stringify(subject_marks([['Physics', 96], ['Chemistry', 97], ['Biology', 45]])) === JSON.stringify([['Biology', 45], ['Physics', 96], ['Chemistry', 97]])""]
```"
64, this function of recursion list sum.,"```javascript
function recursiveListSum(dataList) {
    let total = 0;
    for (let element of dataList) {
        if (Array.isArray(element)) {
            total += recursiveListSum(element);
        } else {
            total += element;
        }
    }
    return total;
}
```",65,"```javascript
['console.assert(recursiveListSum([1, 2, [3, 4], [5, 6]]) === 21)', 'console.assert(recursiveListSum([7, 10, [15, 14], [19, 41]]) === 106)', 'console.assert(recursiveListSum([10, 20, [30, 40], [50, 60]]) === 210)']
```"
65, this   function to count positive numbers in a list.,"```javascript
function posCount(list) {
  let posCount = 0;
  for (let num of list) {
    if (num >= 0) {
      posCount++;
    }
  }
  return posCount;
}
```",66,"```javascript
['console.assert(pos_count([1,-2,3,-4]) === 2)', 'console.assert(pos_count([3,4,5,-1]) === 3)', 'console.assert(pos_count([1,2,3,4]) === 4)']
```"
66, this function to find the number of ways to partition a set of bell numbers.,"```javascript
function bellNumber(n) {
    const bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    bell[0][0] = 1;
    for (let i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        for (let j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    return bell[n][0];
}
```",67,"```javascript
['console.assert(bell_number(2) === 2)', 'console.assert(bell_number(10) === 115975)', 'console.assert(bell_number(56) === 6775685320645824322581483068371419745979053216268760300)']
```"
67, this   function to check whether the given array is monotonic or not.,"```javascript
function isMonotonic(A) {
    return (A.every((val, i) => i === 0 || A[i - 1] <= val) || 
            A.every((val, i) => i === 0 || A[i - 1] >= val));
}
```",68,"```javascript
console.assert(is_Monotonic([6, 5, 4, 4]) === true);
console.assert(is_Monotonic([1, 2, 2, 3]) === true);
console.assert(is_Monotonic([1, 3, 2]) === false);
```"
68, this function to check whether a list contains the given sublist or not.,"```javascript
function isSublist(l, s) {
    let subSet = false;
    if (s.length === 0) {
        subSet = true;
    } else if (s.length === l.length) {
        subSet = true;
    } else if (s.length > l.length) {
        subSet = false;
    } else {
        for (let i = 0; i < l.length; i++) {
            if (l[i] === s[0]) {
                let n = 1;
                while (n < s.length && l[i + n] === s[n]) {
                    n++;
                }
                if (n === s.length) {
                    subSet = true;
                }
            }
        }
    }
    return subSet;
}
```",69,"```javascript
['console.assert(is_sublist([2,4,3,5,7],[3,7]) === false)', 'console.assert(is_sublist([2,4,3,5,7],[4,3]) === true)', 'console.assert(is_sublist([2,4,3,5,7],[1,6]) === false)']
```"
69, this function to find whether all the given tuples have equal length or not.,"```javascript
function findEqualTuple(input, k) {
  let flag = 1;
  for (let tuple of input) {
    if (tuple.length !== k) {
      flag = 0;
      break;
    }
  }
  return flag;
}

function getEqual(input, k) {
  if (findEqualTuple(input, k) === 1) {
    return ""All tuples have same length"";
  } else {
    return ""All tuples do not have same length"";
  }
}
```",70,"```javascript
[""console.assert(get_equal([(11, 22, 33), (44, 55, 66)], 3) === 'All tuples have same length')"", ""console.assert(get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) === 'All tuples do not have same length')"", ""console.assert(get_equal([(1, 2), (3, 4)], 2) === 'All tuples have same length')""]
```"
70, this function to sort a list of elements using comb sort.,"```javascript
function combSort(nums) {
    let shrinkFact = 1.3;
    let gaps = nums.length;
    let swapped = true;
    let i = 0;
    while (gaps > 1 || swapped) {
        gaps = Math.floor(gaps / shrinkFact);
        swapped = false;
        i = 0;
        while (gaps + i < nums.length) {
            if (nums[i] > nums[i + gaps]) {
                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];
                swapped = true;
            }
            i++;
        }
    }
    return nums;
}
```",71,"```javascript
['console.assert(comb_sort([5, 15, 37, 25, 79]).toString() === [5, 15, 25, 37, 79].toString())', 
 'console.assert(comb_sort([41, 32, 15, 19, 22]).toString() === [15, 19, 22, 32, 41].toString())', 
 'console.assert(comb_sort([99, 15, 13, 47]).toString() === [13, 15, 47, 99].toString())']
```"
71, this   function to check whether the given number can be represented as difference of two squares or not.,"```javascript
function dif_Square(n) { 
    if (n % 4 != 2) { 
        return true; 
    } 
    return false; 
}
```",72,"```javascript
['console.assert(dif_Square(5) === true)', 'console.assert(dif_Square(10) === false)', 'console.assert(dif_Square(15) === true)']
```"
72, this function to split the given string with multiple delimiters by using regex.,"```javascript
function multipleSplit(text) {
  return text.split(/; |, |\*|\n/);
}
```",73,"```javascript
console.assert(multiple_split('Forces of the \ndarkness*are coming into the play.') === ['Forces of the ', 'darkness', 'are coming into the play.']);
console.assert(multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') === ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']);
console.assert(multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') === ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']);
```"
73, this function to check whether it follows the sequence given in the patterns array.,"```javascript
function isSamePatterns(colors, patterns) {
    if (colors.length !== patterns.length) {
        return false;
    }
    let sdict = {};
    let pset = new Set();
    let sset = new Set();
    
    for (let i = 0; i < patterns.length; i++) {
        pset.add(patterns[i]);
        sset.add(colors[i]);
        if (!(patterns[i] in sdict)) {
            sdict[patterns[i]] = [];
        }

        let keys = sdict[patterns[i]];
        keys.push(colors[i]);
        sdict[patterns[i]] = keys;
    }

    if (pset.size !== sset.size) {
        return false;
    }

    for (let values of Object.values(sdict)) {
        for (let j = 0; j < values.length - 1; j++) {
            if (values[j] !== values[j + 1]) {
                return false;
            }
        }
    }

    return true;
}
```",74,"```javascript
console.assert(is_samepatterns([""red"", ""green"", ""green""], [""a"", ""b"", ""b""]) === true);
console.assert(is_samepatterns([""red"", ""green"", ""greenn""], [""a"", ""b"", ""b""]) === false);
console.assert(is_samepatterns([""red"", ""green"", ""greenn""], [""a"", ""b""]) === false);
```"
74, this function to find tuples which have all elements divisible by k from the given list of tuples.,"```javascript
function findTuples(testList, K) {
    const res = testList.filter(sub => sub.every(ele => ele % K === 0));
    return res.toString();
}
```",75,"```javascript
console.assert(find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) === '[(6, 24, 12)]');
console.assert(find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) === '[(5, 25, 30)]');
console.assert(find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) === '[(8, 16, 4)]');
```"
75, this   function to count the number of squares in a rectangle.,"```javascript
function count_Squares(m, n) {
    if (n < m) {
        let temp = m;
        m = n;
        n = temp;
    }
    return (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2);
}
```",76,"```javascript
['console.assert(count_Squares(4,3) === 20)', 'console.assert(count_Squares(2,2) === 5)', 'console.assert(count_Squares(1,1) === 1)']
```"
76, this   function to find the difference between sum of even and odd digits.,"```javascript
function is_Diff(n) {
    return (n % 11 === 0);
}
```",77,"```javascript
['console.assert(is_Diff(12345) === false)', 'console.assert(is_Diff(1212112) === true)', 'console.assert(is_Diff(1212) === false)']
```"
77, this   function to find number of integers with odd number of set bits.,"```javascript
function count_With_Odd_SetBits(n) { 
    if (n % 2 !== 0) { 
        return (n + 1) / 2; 
    }
    let count = n.toString(2).split('0').join('').length; 
    let ans = n / 2; 
    if (count % 2 !== 0) { 
        ans += 1; 
    }
    return ans; 
}
```",78,"```javascript
['console.assert(count_With_Odd_SetBits(5) == 3)', 'console.assert(count_With_Odd_SetBits(10) == 5)', 'console.assert(count_With_Odd_SetBits(15) == 8)']
```"
78, this   function to check whether the length of the word is odd or not.,"```javascript
function word_len(s) {
    s = s.split(' ');
    for (let word of s) {
        if (word.length % 2 !== 0) {
            return true;
        } else {
            return false;
        }
    }
}
```",79,"```javascript
['console.assert(word_len(""Hadoop"") === false)', 'console.assert(word_len(""great"") === true)', 'console.assert(word_len(""structure"") === true)'];
```"
79, this function to find the nth tetrahedral number.,"```javascript
function tetrahedralNumber(n) {
    return (n * (n + 1) * (n + 2)) / 6;
}
```",80,"```javascript
console.assert(tetrahedral_number(5) === 35.0);
console.assert(tetrahedral_number(6) === 56.0);
console.assert(tetrahedral_number(7) === 84.0);
```"
80, this function to zip the two given tuples.,"```javascript
function zip_tuples(test_tup1, test_tup2) {
    let res = [];
    for (let i = 0; i < test_tup1.length; i++) {
        res.push([test_tup1[i], test_tup2[i % test_tup2.length]]);
    }
    return res;
}
```",81,"```javascript
['console.assert(JSON.stringify(zip_tuples([7, 8, 4, 5, 9, 10], [1, 5, 6])) === JSON.stringify([[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]))', 'console.assert(JSON.stringify(zip_tuples([8, 9, 5, 6, 10, 11], [2, 6, 7])) === JSON.stringify([[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]))', 'console.assert(JSON.stringify(zip_tuples([9, 10, 6, 7, 11, 12], [3, 7, 8])) === JSON.stringify([[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]))']
```"
81, this function to find the volume of a sphere.,"```javascript
function volume_sphere(r) {
  let volume = (4/3) * Math.PI * r * r * r;
  return volume;
}
```",82,"```javascript
['console.assert(volume_sphere(10) === 4188.790204786391)', 'console.assert(volume_sphere(25) === 65449.84694978735)', 'console.assert(volume_sphere(20) === 33510.32163829113)']
```"
82, this   function to find the character made by adding all the characters of the given string.,"```javascript
function get_Char(strr) {  
    let summ = 0;  
    for (let i = 0; i < strr.length; i++) {  
        summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1);  
    }  
    if (summ % 26 === 0) {  
        return 'z'.charCodeAt(0);  
    } else {  
        summ = summ % 26;  
        return String.fromCharCode('a'.charCodeAt(0) + summ - 1);  
    }  
}
```",83,"```javascript
['console.assert(get_Char(""abc"") === ""f"")', 'console.assert(get_Char(""gfg"") === ""t"")', 'console.assert(get_Char(""ab"") === ""c"")']
```"
83, this function to find the n-th number in newman conway sequence.,"```javascript
function sequence(n) {
    if (n === 1 || n === 2) {
        return 1;
    } else {
        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));
    }
}
```",84,"```javascript
['console.assert(sequence(10) === 6)', 'console.assert(sequence(2) === 1)', 'console.assert(sequence(3) === 2)']
```"
84, this function to find the surface area of a sphere.,"```javascript
function surfacearea_sphere(r) {
  var surfacearea = 4 * Math.PI * r * r;
  return surfacearea;
}
```",85,"```javascript
['console.assert(surfacearea_sphere(10) === 1256.6370614359173)', 'console.assert(surfacearea_sphere(15) === 2827.4333882308138)', 'console.assert(surfacearea_sphere(20) === 5026.548245743669)']
```"
85, this function to find nth centered hexagonal number.,"```javascript
function centeredHexagonalNumber(n) {
  return 3 * n * (n - 1) + 1;
}
```",86,"```javascript
console.assert(centered_hexagonal_number(10) === 271);
console.assert(centered_hexagonal_number(2) === 7);
console.assert(centered_hexagonal_number(9) === 217);
```"
86, this function to merge three dictionaries into a single expression.,"```javascript
function mergeDictionariesThree(dict1, dict2, dict3) {
    const mergedDict = Object.assign({}, dict1, dict2, dict3);
    return mergedDict;
}
```",87,"```javascript
['console.assert(JSON.stringify(mergeDictionariesThree({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" }, { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })) === JSON.stringify({ 'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange' }));', 
 'console.assert(JSON.stringify(mergeDictionariesThree({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" }, { ""L"": ""lavender"", ""B"": ""Blue"" })) === JSON.stringify({ 'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender' }));', 
 'console.assert(JSON.stringify(mergeDictionariesThree({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""L"": ""lavender"", ""B"": ""Blue"" }, { ""G"": ""Green"", ""W"": ""White"" })) === JSON.stringify({ 'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White' }));']
```"
87, this function to get the frequency of the elements in a list.,"```javascript
function freqCount(list1) {
  const freqCount = {};
  list1.forEach(item => {
    freqCount[item] = (freqCount[item] || 0) + 1;
  });
  return freqCount;
}
```",88,"```javascript
['console.assert(JSON.stringify(freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])) === JSON.stringify({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}))', 'console.assert(JSON.stringify(freq_count([1,2,3,4,3,2,4,1,3,1,4])) === JSON.stringify({1:3, 2:2, 3:3, 4:3}))', 'console.assert(JSON.stringify(freq_count([5,6,7,4,9,10,4,5,6,7,9,5])) === JSON.stringify({10:1, 5:3, 6:2, 7:2, 4:2, 9:2}))']
```"
88, this function to find the closest smaller number than n.,"```javascript
function closestNum(N) {
  return N - 1;
}
```",89,"```javascript
console.assert(closest_num(11) === 10);
console.assert(closest_num(7) === 6);
console.assert(closest_num(12) === 11);
```"
89, this   function to find the length of the longest word.,"```javascript
function lenLog(list1) {
    let max = list1[0].length;
    for (let i of list1) {
        if (i.length > max) {
            max = i.length;
        }
    }
    return [max];
}
```",90,"```javascript
['console.assert(len_log(["" "",""PHP"",""bigdata""]) === 7)', 'console.assert(len_log([""a"",""ab"",""abc""]) === 3)', 'console.assert(len_log([""small"",""big"",""tall""]) === 5)']
```"
90, this function to check if a substring is present in a given list of string values.,"```javascript
function findSubstring(str1, subStr) {
    return str1.some(s => s.includes(subStr));
}
```",91,"```javascript
console.assert(find_substring([""red"", ""black"", ""white"", ""green"", ""orange""], ""ack"") === true);
console.assert(find_substring([""red"", ""black"", ""white"", ""green"", ""orange""], ""abc"") === false);
console.assert(find_substring([""red"", ""black"", ""white"", ""green"", ""orange""], ""ange"") === true);
```"
91, this function to check whether the given number is undulating or not.,"```javascript
function isUndulating(n) {
    if (n.length <= 2) {
        return false;
    }
    for (let i = 2; i < n.length; i++) {
        if (n[i - 2] !== n[i]) {
            return false;
        }
    }
    return true;
}
```",92,"```javascript
['console.assert(is_undulating(""1212121"") === true)', 'console.assert(is_undulating(""1991"") === false)', 'console.assert(is_undulating(""121"") === true)']
```"
92, this function to calculate the value of 'a' to the power 'b'.,"```javascript
function power(a, b) {
    if (b === 0) {
        return 1;
    } else if (a === 0) {
        return 0;
    } else if (b === 1) {
        return a;
    } else {
        return a * power(a, b - 1);
    }
}
```",93,"```javascript
['console.assert(power(3, 4) === 81), console.assert(power(2, 3) === 8), console.assert(power(5, 5) === 3125)'];
```"
93, this function to extract the index minimum value record from the given tuples.,"```javascript
function index_minimum(test_list) {
  const res = test_list.reduce((min, current) => current[1] < min[1] ? current : min);
  return res[0];
}
```",94,"```javascript
assert(index_minimum([['Rash', 143], ['Manjeet', 200], ['Varsha', 100]]) === 'Varsha');
assert(index_minimum([['Yash', 185], ['Dawood', 125], ['Sanya', 175]]) === 'Dawood');
assert(index_minimum([['Sai', 345], ['Salman', 145], ['Ayesha', 96]]) === 'Ayesha');
```"
94, this   function to find the minimum length of sublist.,"```javascript
function Find_Min_Length(lst) {
    const minLength = Math.min(...lst.map(x => x.length));
    return [minLength];
}
```",95,"```javascript
console.assert(Find_Min_Length([[1],[1,2]]) == 1);
console.assert(Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2);
console.assert(Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3);
```"
95, this   function to find the number of divisors of a given integer.,"```javascript
function divisor(n) {
  let x = 0;
  for (let i = 1; i < n + 1; i++) {
    if (n % i === 0) {
      x++;
    }
  }
  return x;
}
```",96,"```javascript
['console.assert(divisor(15) === 4)', 'console.assert(divisor(12) === 6)', 'console.assert(divisor(9) === 3)'];
```"
96, this function to find frequency count of list of lists.,"```javascript
function frequencyLists(list1) {
    list1 = [].concat(...list1);
    let dicData = {};
    for (let num of list1) {
        if (dicData.hasOwnProperty(num)) {
            dicData[num] += 1;
        } else {
            dicData[num] = 1;
        }
    }
    return dicData;
}
```",97,"```javascript
['console.assert(JSON.stringify(frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])) === JSON.stringify({1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}));', 
 'console.assert(JSON.stringify(frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}));', 
 'console.assert(JSON.stringify(frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])) === JSON.stringify({20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}));']
```"
97, this function to multiply all the numbers in a list and divide with the length of the list.,"```javascript
function multiplyNum(numbers) {
    let total = 1;
    for (let x of numbers) {
        total *= x;
    }
    return total / numbers.length;
}
```",98,"```javascript
['console.assert(multiply_num(8, 2, 3, -1, 7) === -67.2)', 'console.assert(multiply_num(-10, -20, -30) === -2000.0)', 'console.assert(multiply_num(19, 15, 18) === 1710.0)']
```"
98, this function to convert the given decimal number to its binary equivalent.,"```javascript
function decimalToBinary(n) {
  return n.toString(2);
}
```",99,"```javascript
[""console.assert(decimal_to_binary(8) === '1000')"", ""console.assert(decimal_to_binary(18) === '10010')"", ""console.assert(decimal_to_binary(7) === '111')""]
```"
99, this function to find the next smallest palindrome of a specified number.,"```javascript
function next_smallest_palindrome(num) {
    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {
        if (i.toString() === i.toString().split('').reverse().join('')) {
            return i;
        }
    }
}
```",100,"```javascript
console.assert(next_smallest_palindrome(99) === 101);
console.assert(next_smallest_palindrome(1221) === 1331);
console.assert(next_smallest_palindrome(120) === 121);
```"
100, this function to find the kth element in the given array.,"```javascript
function kth_element(arr, n, k) {
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
      }
    }
  }
  return arr[k - 1];
}
```",101,"```javascript
['console.assert(kth_element([12,3,5,7,19], 5, 2) === 3)', 'console.assert(kth_element([17,24,8,23], 4, 3) === 8)', 'console.assert(kth_element([16,21,25,36,4], 5, 4) === 36)']
```"
101, this function to convert snake case string to camel case string.,"```javascript
function snakeToCamel(word) {
    return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');
}
```",102,"```javascript
[""console.assert(snake_to_camel(' _program') === ' Program')"", ""console.assert(snake_to_camel(' _language') === ' Language')"", ""console.assert(snake_to_camel('programming_language') === 'ProgrammingLanguage')""]
```"
102," this function to find eulerian number a(n, m).","```javascript
function eulerian_num(n, m) { 
    if (m >= n || n === 0) { 
        return 0; 
    } 
    if (m === 0) { 
        return 1; 
    } 
    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)); 
}
```",103,"```javascript
['console.assert(eulerian_num(3, 1) === 4)', 'console.assert(eulerian_num(4, 1) === 11)', 'console.assert(eulerian_num(5, 3) === 26)']
```"
103, this function to sort each sublist of strings in a given list of lists using lambda function.,"```javascript
function sortSublists(inputList) {
    return inputList.map(x => x.sort((a, b) => a[0] - b[0]));
}
```",104,"```javascript
['console.assert(sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))===[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']])', 'console.assert(sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))===[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']])', 'console.assert(sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))===[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']])']
```"
104, this   function to count true booleans in the given list.,"```javascript
function count(lst) {
    return lst.reduce((a, b) => a + b, 0);
}
```",105,"```javascript
['console.assert(count([true,false,true]) === 2)', 'console.assert(count([false,false]) === 0)', 'console.assert(count([true,true,true]) === 3)']
```"
105, this function to add the given list to the given tuples.,"```javascript
function addLists(testList, testTup) {
    let res = [...testTup, ...testList];
    return res;
}
```",106,"```javascript
['console.assert(add_lists([5, 6, 7], [9, 10]).toString() === [9, 10, 5, 6, 7].toString())', 'console.assert(add_lists([6, 7, 8], [10, 11]).toString() === [10, 11, 6, 7, 8].toString())', 'console.assert(add_lists([7, 8, 9], [11, 12]).toString() === [11, 12, 7, 8, 9].toString())']
```"
106, this   function to count hexadecimal numbers for a given range.,"```javascript
function count_Hexadecimal(L, R) {
    let count = 0;
    for (let i = L; i <= R; i++) {
        if (i >= 10 && i <= 15) {
            count += 1;
        } else if (i > 15) {
            let k = i;
            while (k !== 0) {
                if (k % 16 >= 10) {
                    count += 1;
                }
                k = Math.floor(k / 16);
            }
        }
    }
    return count;
}
```",107,"```javascript
['console.assert(count_Hexadecimal(10, 15) === 6)', 'console.assert(count_Hexadecimal(2, 4) === 0)', 'console.assert(count_Hexadecimal(15, 16) === 1)'];
```"
107, this function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"```javascript
function mergeSortedList(num1, num2, num3) {
  num1 = num1.sort((a, b) => a - b);
  num2 = num2.sort((a, b) => a - b);
  num3 = num3.sort((a, b) => a - b);
  return Array.from(new Set([...num1, ...num2, ...num3].sort((a, b) => a - b)));
}
```",108,"```javascript
['console.assert(JSON.stringify(merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])) === JSON.stringify([4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154]), 
 'console.assert(JSON.stringify(merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])) === JSON.stringify([1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]), 
 'console.assert(JSON.stringify(merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])) === JSON.stringify([1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])'];
```"
108, this   function to find the count of rotations of a binary string with odd value.,"```javascript
function odd_Equivalent(s, n) { 
    let count = 0; 
    for (let i = 0; i < n; i++) { 
        if (s[i] === '1') { 
            count++; 
        } 
    } 
    return [count]; 
}
```",109,"```javascript
console.assert(odd_Equivalent(""011001"", 6) === 3);
console.assert(odd_Equivalent(""11011"", 5) === 4);
console.assert(odd_Equivalent(""1010"", 4) === 2);
```"
109, this function to extract the ranges that are missing from the given list with the given start range and end range values.,"```javascript
function extractMissing(testList, strtVal, stopVal) {
  let res = [];
  for (let sub of testList) {
    if (sub[0] > strtVal) {
      res.push([strtVal, sub[0]]);
      strtVal = sub[1];
    }
  }
  if (strtVal < stopVal) {
    res.push([strtVal, stopVal]);
  }
  return res;
}
```",110,"```javascript
console.assert(JSON.stringify(extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)) === JSON.stringify([(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]));
console.assert(JSON.stringify(extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)) === JSON.stringify([(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]));
console.assert(JSON.stringify(extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)) === JSON.stringify([(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]));
```"
110, this function to find common elements in given nested lists. * list item * list item * list item * list item,"```javascript
function commonInNestedLists(nestedlist) {
    const result = [...new Set(nestedlist.reduce((acc, curr) => acc.filter(x => curr.includes(x)), nestedlist[0])))];
    return result;
}
```",111,"```javascript
['console.assert(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])===[18, 12]);', 'console.assert(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])===[5, 23]);', 'console.assert(common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])===[4]);']
```"
111, this   function to find the perimeter of a cylinder.,"```javascript
function perimeter(diameter, height) {
    return 2 * (diameter + height);
}
```",112,"```javascript
['console.assert(perimeter(2, 4) === 12)', 'console.assert(perimeter(1, 2) === 6)', 'console.assert(perimeter(3, 1) === 8)']
```"
112, this function to check if a string represents an integer or not.,"```javascript
function checkInteger(text) {
    text = text.trim();
    if (text.length < 1) {
        return null;
    } else {
        if ([...text].every((char, i) => ""0123456789"".includes(char))) {
            return true;
        } else if ((text[0] === '+' || text[0] === '-') && 
                   [...text].every((char, i) => i === 0 || ""0123456789"".includes(char))) {
            return true;
        } else {
            return false;
        }
    }
}
```",113,"```javascript
['console.assert(check_integer("" "") === false)', 'console.assert(check_integer(""1"") === true)', 'console.assert(check_integer(""12345"") === true)']
```"
113, this function to assign frequency to each tuple in the given tuple list.,"```javascript
function assignFreq(testList) {
    const res = Object.entries(testList.reduce((acc, key) => {
        acc[key] = (acc[key] || 0) + 1;
        return acc;
    }, {}));
    return res.map(([key, val]) => [key, val]);
}
```",114,"```javascript
console.assert(assign_freq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]]) === '[[6, 5, 8, 3], [2, 7, 2], [9, 1]]');
console.assert(assign_freq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]]) === '[[4, 2, 4, 2], [7, 1, 2], [4, 8, 1], [9, 2, 1]]');
console.assert(assign_freq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]]) === '[[11, 13, 10, 1], [17, 21, 2], [4, 2, 3, 2], [9, 2, 1]]');
```"
114, this function to check whether all dictionaries in a list are empty or not.,"```javascript
function empty_dit(list1) {
    const empty_dit = list1.every(d => !d);
    return empty_dit;
}
```",115,"```javascript
assert(empty_dit([{}, {}, {}]) === true);
assert(empty_dit([{1, 2}, {}, {}]) === false);
assert(empty_dit({}) === true);
```"
115, this function to convert a given tuple of positive integers into an integer.,"```javascript
function tupleToInt(nums) {
    const result = parseInt(nums.join(''), 10);
    return result;
}
```",116,"```javascript
['console.assert(tupleToInt([1,2,3]) === 123)', 'console.assert(tupleToInt([4,5,6]) === 456)', 'console.assert(tupleToInt([5,6,7]) === 567)']
```"
116, this function to convert all possible convertible elements in the list to float.,"```javascript
function listToFloat(testList) {
    let res = [];
    for (let tup of testList) {
        let temp = [];
        for (let ele of tup) {
            if (isNaN(ele)) {
                temp.push(ele);
            } else {
                temp.push(parseFloat(ele));
            }
        }
        res.push([temp[0], temp[1]]);
    }
    return JSON.stringify(res);
}
```",117,"```javascript
['console.assert(JSON.stringify(list_to_float([[""3"", ""4""], [""1"", ""26.45""], [""7.32"", ""8""], [""4"", ""8""]])) === \'[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]\'', 'console.assert(JSON.stringify(list_to_float([[""4"", ""4""], [""2"", ""27""], [""4.12"", ""9""], [""7"", ""11""]])) === \'[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]\'', 'console.assert(JSON.stringify(list_to_float([[""6"", ""78""], [""5"", ""26.45""], [""1.33"", ""4""], [""82"", ""13""]])) === \'[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]\''];
```"
117,[link text](https:// [link text](https:// [link text](https://))) this function to convert a string to a list.,"```javascript
function stringToList(string) {
    let lst = string.split("" "");
    return lst;
}
```",118,"```javascript
['console.assert(stringToList(""  programming"").toString() === [\' \',\'programming\'].toString())', 'console.assert(stringToList(""lists tuples strings"").toString() === [\'lists\',\'tuples\',\'strings\'].toString())', 'console.assert(stringToList("" this program"").toString() === [\'write\',\'a\',\'program\'].toString())']
```"
118, this   function to find the element that appears only once in a sorted array.,"```javascript
function search(arr, n) {
    let XOR = 0;
    for (let i = 0; i < n; i++) {
        XOR = XOR ^ arr[i];
    }
    return XOR;
}
```",119,"```javascript
console.assert(search([1,1,2,2,3],5) === 3);
console.assert(search([1,1,3,3,4,4,5,5,7,7,8],11) === 8);
console.assert(search([1,2,2,3,3,4,4],7) === 1);
```"
119, this function to find the maximum product from the pairs of tuples within a given list.,"```javascript
function maxProductTuple(list1) {
    const resultMax = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));
    return resultMax;
}
```",120,"```javascript
['console.assert(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) === 36)', 'console.assert(max_product_tuple([(10, 20), (15, 2), (5, 10)]) === 200)', 'console.assert(max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) === 484)']
```"
120, this function to find the triplet with sum of the given array,"```javascript
function checkTriplet(A, n, sum, count) {
    if (count === 3 && sum === 0) {
        return true;
    }
    if (count === 3 || n === 0 || sum < 0) {
        return false;
    }
    return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) ||
           checkTriplet(A, n - 1, sum, count);
}
```",121,"```javascript
console.assert(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) === true);
console.assert(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) === false);
console.assert(check_triplet([10, 4, 2, 3, 5], 5, 15, 0) === true);
```"
121, this function to find n’th smart number.,"```javascript
const MAX = 3000; 
function smartNumber(n) { 
    const primes = new Array(MAX).fill(0); 
    const result = []; 
    for (let i = 2; i < MAX; i++) { 
        if (primes[i] === 0) { 
            primes[i] = 1; 
            let j = i * 2; 
            while (j < MAX) { 
                primes[j] -= 1; 
                if ((primes[j] + 3) === 0) { 
                    result.push(j); 
                } 
                j += i; 
            } 
        } 
    } 
    result.sort((a, b) => a - b); 
    return result[n - 1]; 
}
```",122,"```javascript
console.assert(smartNumber(1) === 30);
console.assert(smartNumber(50) === 273);
console.assert(smartNumber(1000) === 2664);
```"
122, this function to sum all amicable numbers from 1 to a specified number.,"```javascript
function amicableNumbersSum(limit) {
    if (typeof limit !== 'number' || !Number.isInteger(limit)) {
        return ""Input is not an integer!"";
    }
    if (limit < 1) {
        return ""Input must be bigger than 0!"";
    }
    const amicables = new Set();
    for (let num = 2; num <= limit; num++) {
        if (amicables.has(num)) {
            continue;
        }
        const sumFact = Array.from({ length: num - 1 }, (_, i) => i + 1)
                             .filter(fact => num % fact === 0)
                             .reduce((a, b) => a + b, 0);
        const sumFact2 = Array.from({ length: sumFact - 1 }, (_, i) => i + 1)
                              .filter(fact => sumFact % fact === 0)
                              .reduce((a, b) => a + b, 0);
        if (num === sumFact2 && num !== sumFact) {
            amicables.add(num);
            amicables.add(sumFact2);
        }
    }
    return Array.from(amicables).reduce((a, b) => a + b, 0);
}
```",123,"```javascript
['console.assert(amicable_numbers_sum(999) === 504)', 'console.assert(amicable_numbers_sum(9999) === 31626)', 'console.assert(amicable_numbers_sum(99) === 0)'];
```"
123, this function to get the angle of a complex number.,"```javascript
function angleComplex(a, b) {
  const cn = a + b * Math.I;
  const angle = Math.atan2(b, a);
  return [angle];
}
```",124,"```javascript
['console.assert(angle_complex(0, 1j) === 1.5707963267948966)', 'console.assert(angle_complex(2, 1j) === 0.4636476090008061)', 'console.assert(angle_complex(0, 2j) === 1.5707963267948966)']
```"
124, this function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"```javascript
function findLength(string, n) {
    let currentSum = 0;
    let maxSum = 0;
    for (let i = 0; i < n; i++) {
        currentSum += (string[i] === '0' ? 1 : -1);
        if (currentSum < 0) {
            currentSum = 0;
        }
        maxSum = Math.max(currentSum, maxSum);
    }
    return maxSum || 0;
}
```",125,"```javascript
['console.assert(find_length(""11000010001"", 11) === 6)', 'console.assert(find_length(""10111"", 5) === 1)', 'console.assert(find_length(""11011101100101"", 14) === 2)']
```"
125, this   function to find the sum of common divisors of two given numbers.,"```javascript
function sum(a, b) {
    let sum = 0;
    for (let i = 1; i < Math.min(a, b); i++) {
        if (a % i === 0 && b % i === 0) {
            sum += i;
        }
    }
    return sum;
}
```",126,"```javascript
['console.assert(sum(10, 15) === 6)', 'console.assert(sum(100, 150) === 93)', 'console.assert(sum(4, 6) === 3)']
```"
126, this function to multiply two integers without using the * operator in  .,"```javascript
function multiplyInt(x, y) {
    if (y < 0) {
        return -multiplyInt(x, -y);
    } else if (y === 0) {
        return 0;
    } else if (y === 1) {
        return x;
    } else {
        return x + multiplyInt(x, y - 1);
    }
}
```",127,"```javascript
['console.assert(multiply_int(10, 20) === 200)', 'console.assert(multiply_int(5, 10) === 50)', 'console.assert(multiply_int(4, 8) === 32)']
```"
127, this function to shortlist words that are longer than n from a given list of words.,"```javascript
function longWords(n, str) {
    let wordLen = [];
    let txt = str.split("" "");
    for (let x of txt) {
        if (x.length > n) {
            wordLen.push(x);
        }
    }
    return wordLen;
}
```",128,"```javascript
['console.assert(long_words(3,""  is a programming language"").toString()===["" "",""programming"",""language""].toString())', 'console.assert(long_words(2,""writing a program"").toString()===[""writing"",""program""].toString())', 'console.assert(long_words(5,""sorting list"").toString()===[""sorting""].toString())']
```"
128, this function to calculate magic square.,"```javascript
function magicSquareTest(myMatrix) {
    const iSize = myMatrix[0].length;
    const sumList = [];
    sumList.push(...myMatrix.map(lines => lines.reduce((a, b) => a + b, 0)));

    for (let col = 0; col < iSize; col++) {
        sumList.push(myMatrix.reduce((acc, row) => acc + row[col], 0));
    }

    let result1 = 0;
    for (let i = 0; i < iSize; i++) {
        result1 += myMatrix[i][i];
    }
    sumList.push(result1);

    let result2 = 0;
    for (let i = iSize - 1; i >= 0; i--) {
        result2 += myMatrix[i][i];
    }
    sumList.push(result2);

    if (new Set(sumList).size > 1) {
        return false;
    }
    return true;
}
```",129,"```javascript
console.assert(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) === true);
console.assert(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) === true);
console.assert(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) === false);
```"
129, this function to find the item with maximum frequency in a given list.,"```javascript
function maxOccurrences(nums) {
    const dict = {};
    for (let i of nums) {
        dict[i] = (dict[i] || 0) + 1;
    }
    return Object.entries(dict).reduce((max, current) => current[1] > max[1] ? current : max);
}
```",130,"```javascript
['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)']
```"
130, this   function to reverse only the vowels of a given string.,"```javascript
function reverseVowels(str1) {
    let vowels = """";
    for (let char of str1) {
        if (""aeiouAEIOU"".includes(char)) {
            vowels += char;
        }
    }
    let resultString = """";
    for (let char of str1) {
        if (""aeiouAEIOU"".includes(char)) {
            resultString += vowels[vowels.length - 1];
            vowels = vowels.slice(0, -1);
        } else {
            resultString += char;
        }
    }
    return resultString;
}
```",131,"```javascript
['console.assert(reverseVowels("" "") === "" "")', 'console.assert(reverseVowels(""USA"") === ""ASU"")', 'console.assert(reverseVowels(""ab"") === ""ab"")']
```"
131, this function to convert tuple to a string.,"```javascript
function tup_string(tup1) {
    var str = tup1.join('');
    return str;
}
```",132,"```javascript
['console.assert(tup_string([""e"", ""x"", ""e"", ""r"", ""c"", ""i"", ""s"", ""e"", ""s""]) === ""exercises"")', 'console.assert(tup_string([""p"", ""y"", ""t"", ""h"", ""o"", ""n""]) === "" "")', 'console.assert(tup_string([""p"", ""r"", ""o"", ""g"", ""r"", ""a"", ""m""]) === ""program"")']
```"
132, this function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"```javascript
function sumNegativenum(nums) {
    const sumNegativenum = nums.filter(num => num < 0);
    return sumNegativenum.reduce((acc, num) => acc + num, 0);
}
```",133,"```javascript
console.assert(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) === -32);
console.assert(sum_negativenum([10, 15, -14, 13, -18, 12, -20]) === -52);
console.assert(sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) === -894);
```"
133, this   function to check whether the last element of given array is even or odd after performing an operation p times.,"```javascript
function check_last(arr, n, p) {
    let _sum = 0;
    for (let i = 0; i < n; i++) {
        _sum += arr[i];
    }
    if (p === 1) {
        if (_sum % 2 === 0) {
            return ""ODD"";
        } else {
            return ""EVEN"";
        }
    }
    return ""EVEN"";
}
```",134,"```javascript
['console.assert(check_last([5,7,10],3,1) === ""ODD"")', 'console.assert(check_last([2,3],2,3) === ""EVEN"")', 'console.assert(check_last([1,2,3],3,1) === ""ODD"")']
```"
134, this function to find the nth hexagonal number.,"```javascript
function hexagonal_num(n) {
    return n * (2 * n - 1);
}
```",135,"```javascript
console.assert(hexagonal_num(10) == 190);
console.assert(hexagonal_num(5) == 45);
console.assert(hexagonal_num(7) == 91);
```"
135, this function to calculate electricity bill.,"```javascript
function cal_electbill(units) {
    let amount;
    let surcharge;
    
    if (units < 50) {
        amount = units * 2.60;
        surcharge = 25;
    } else if (units <= 100) {
        amount = 130 + ((units - 50) * 3.25);
        surcharge = 35;
    } else if (units <= 200) {
        amount = 130 + 162.50 + ((units - 100) * 5.26);
        surcharge = 45;
    } else {
        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);
        surcharge = 75;
    }
    
    let total = amount + surcharge;
    return [total];
}
```",136,"```javascript
['console.assert(cal_electbill(75) === 246.25)', 'console.assert(cal_electbill(265) === 1442.75)', 'console.assert(cal_electbill(100) === 327.5)']
```"
136, this function to find the ration of zeroes in an array of integers.,"```javascript
function zero_count(nums) {
    const n = nums.length;
    let n1 = 0;
    for (const x of nums) {
        if (x === 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
```",137,"```javascript
['console.assert(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.15);', 'console.assert(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.00);', 'console.assert(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.00);']
```"
137, this   function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"```javascript
function is_Sum_Of_Powers_Of_Two(n) { 
    if (n % 2 === 1) { 
        return false; 
    } else { 
        return true; 
    } 
}
```",138,"```javascript
console.assert(is_Sum_Of_Powers_Of_Two(10) === true);
console.assert(is_Sum_Of_Powers_Of_Two(7) === false);
console.assert(is_Sum_Of_Powers_Of_Two(14) === true);
```"
138, this function to find the circumference of a circle.,"```javascript
function circleCircumference(r) {
    let perimeter = 2 * 3.1415 * r;
    return perimeter;
}
```",139,"```javascript
['console.assert(circle_circumference(10) === 62.830000000000005)', 'console.assert(circle_circumference(5) === 31.415000000000003)', 'console.assert(circle_circumference(4) === 25.132)']
```"
139, this function to extract elements that occur singly in the given tuple list.,"```javascript
function extractSingly(testList) {
    let res = [];
    let temp = new Set();
    for (let inner of testList) {
        for (let ele of inner) {
            if (!temp.has(ele)) {
                temp.add(ele);
                res.push(ele);
            }
        }
    }
    return res;
}
```",140,"```javascript
['console.assert(extractSingly([[3, 4, 5], [4, 5, 7], [1, 4]]) === [3, 4, 5, 7, 1])', 'console.assert(extractSingly([[1, 2, 3], [4, 2, 3], [7, 8]]) === [1, 2, 3, 4, 7, 8])', 'console.assert(extractSingly([[7, 8, 9], [10, 11, 12], [10, 11]]) === [7, 8, 9, 10, 11, 12])']
```"
140, this function to sort a list of elements using pancake sort.,"```javascript
function pancakeSort(nums) {
    let arrLen = nums.length;
    while (arrLen > 1) {
        const mi = nums.indexOf(Math.max(...nums.slice(0, arrLen)));
        nums = nums.slice(mi).reverse().concat(nums.slice(mi + 1));
        nums = nums.slice(0, arrLen).reverse().concat(nums.slice(arrLen));
        arrLen--;
    }
    return nums;
}
```",141,"```javascript
['console.assert(pancake_sort([15, 79, 25, 38, 69]).toString() === [15, 25, 38, 69, 79].toString())', 'console.assert(pancake_sort([98, 12, 54, 36, 85]).toString() === [12, 36, 54, 85, 98].toString())', 'console.assert(pancake_sort([41, 42, 32, 12, 23]).toString() === [12, 23, 32, 41, 42].toString())']
```"
141, this function to count the same pair in three given lists.,"```javascript
function countSamePair(list1, list2, list3) {
    let result = 0;
    for (let i = 0; i < list1.length; i++) {
        if (list1[i] === list2[i] && list2[i] === list3[i]) {
            result++;
        }
    }
    return result;
}
```",142,"```javascript
['console.assert(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])===3)', 
 'console.assert(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])===4)', 
 'console.assert(count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])===5)']
```"
142, this function to find number of lists present in the given tuple.,"```javascript
function findLists(Input) {
    if (Array.isArray(Input)) {
        return 1;
    } else {
        return Input.length;
    }
}
```",143,"```javascript
['console.assert(find_lists([1, 2, 3, 4], [5, 6, 7, 8]) === 2)', 'console.assert(find_lists([1, 2], [3, 4], [5, 6]) === 3)', 'console.assert(find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1]) === 1)']
```"
143, this   function to find the sum of absolute differences in all pairs of the given array.,"```javascript
function sum_Pairs(arr, n) { 
    let sum = 0; 
    for (let i = n - 1; i >= 0; i--) { 
        sum += i * arr[i] - (n - 1 - i) * arr[i]; 
    } 
    return sum; 
}
```",144,"```javascript
['console.assert(sum_Pairs([1,8,9,15,16],5) === 74)', 'console.assert(sum_Pairs([1,2,3,4],4) === 10)', 'console.assert(sum_Pairs([1,2,3,4,5,7,9,11,14],9) === 188)']
```"
144, this   function to find the maximum difference between any two elements in a given array.,"```javascript
function max_Abs_Diff(arr, n) { 
    let minEle = arr[0]; 
    let maxEle = arr[0]; 
    for (let i = 1; i < n; i++) { 
        minEle = Math.min(minEle, arr[i]); 
        maxEle = Math.max(maxEle, arr[i]); 
    } 
    return [maxEle - minEle]; 
}
```",145,"```javascript
['console.assert(max_Abs_Diff([2,1,5,3], 4) === 4)', 'console.assert(max_Abs_Diff([9,3,2,5,1], 5) === 8)', 'console.assert(max_Abs_Diff([3,2,1], 3) === 2)']
```"
145, this function to find the ascii value of total characters in a string.,"```javascript
function asciiValueString(str1) {
  for (let i = 0; i < str1.length; i++) {
    return str1.charCodeAt(i);
  }
}
```",146,"```javascript
['console.assert(ascii_value_string("" "") === 112)', 'console.assert(ascii_value_string(""Program"") === 80)', 'console.assert(ascii_value_string(""Language"") === 76)'];
```"
146, this function to find the maximum total path sum in the given triangle.,"```javascript
function maxPathSum(tri, m, n) {
    for (let i = m - 1; i >= 0; i--) {
        for (let j = 0; j <= i; j++) {
            if (tri[i + 1][j] > tri[i + 1][j + 1]) {
                tri[i][j] += tri[i + 1][j];
            } else {
                tri[i][j] += tri[i + 1][j + 1];
            }
        }
    }
    return [tri[0][0]];
}
```",147,"```javascript
['console.assert(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) === 14)', 'console.assert(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) === 24)', 'console.assert(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) === 53)'];
```"
147, this function to divide a number into two parts such that the sum of digits is maximum.,"```javascript
function sumDigitsSingle(x) {
    let ans = 0;
    while (x) {
        ans += x % 10;
        x = Math.floor(x / 10);
    }
    return ans;
}

function closest(x) {
    let ans = 0;
    while (ans * 10 + 9 <= x) {
        ans = ans * 10 + 9;
    }
    return ans;
}

function sumDigitsTwoParts(N) {
    const A = closest(N);
    return sumDigitsSingle(A) + sumDigitsSingle(N - A);
}
```",148,"```javascript
['console.assert(sum_digits_twoparts(35) === 17)', 'console.assert(sum_digits_twoparts(7) === 7)', 'console.assert(sum_digits_twoparts(100) === 19)']
```"
148, this function to find the longest subsequence such that the difference between adjacents is one for the given array.,"```javascript
function longestSubseqWithDiffOne(arr, n) { 
    let dp = new Array(n).fill(1); 
    for (let i = 0; i < n; i++) { 
        for (let j = 0; j < i; j++) { 
            if ((arr[i] === arr[j] + 1) || (arr[i] === arr[j] - 1)) { 
                dp[i] = Math.max(dp[i], dp[j] + 1); 
            } 
        } 
    } 
    let result = 1; 
    for (let i = 0; i < n; i++) { 
        if (result < dp[i]) { 
            result = dp[i]; 
        } 
    } 
    return result; 
}
```",149,"```javascript
['console.assert(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) === 6)', 'console.assert(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) === 3)', 'console.assert(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) === 7)']
```"
149, this   function to find whether the given number is present in the infinite sequence or not.,"```javascript
function does_Contain_B(a, b, c) {
    if (a === b) {
        return true;
    }
    if ((b - a) * c > 0 && (b - a) % c === 0) {
        return true;
    }
    return false;
}
```",150,"```javascript
['console.assert(does_Contain_B(1,7,3) === true)', 'console.assert(does_Contain_B(1,-3,5) === false)', 'console.assert(does_Contain_B(3,2,5) === false)']
```"
150, this   function to check whether the given number is co-prime or not.,"```javascript
function gcd(p, q) {
    while (q !== 0) {
        [p, q] = [q, p % q];
    }
    return p;
}

function isCoprime(x, y) {
    return gcd(x, y) === 1;
}
```",151,"```javascript
['console.assert(is_coprime(17, 13) === true)', 'console.assert(is_coprime(15, 21) === false)', 'console.assert(is_coprime(25, 45) === false)']
```"
151, this function to sort the given array by using merge sort.,"```javascript
function merge(a, b) {
    let c = [];
    while (a.length !== 0 && b.length !== 0) {
        if (a[0] < b[0]) {
            c.push(a[0]);
            a.splice(0, 1);
        } else {
            c.push(b[0]);
            b.splice(0, 1);
        }
    }
    if (a.length === 0) {
        c = c.concat(b);
    } else {
        c = c.concat(a);
    }
    return c;
}

function mergeSort(x) {
    if (x.length === 0 || x.length === 1) {
        return x;
    } else {
        let middle = Math.floor(x.length / 2);
        let a = mergeSort(x.slice(0, middle));
        let b = mergeSort(x.slice(middle));
        return merge(a, b);
    }
}
```",152,"```javascript
['console.assert(JSON.stringify(merge_sort([3, 4, 2, 6, 5, 7, 1, 9])) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 9])', 'console.assert(JSON.stringify(merge_sort([7, 25, 45, 78, 11, 33, 19])) === JSON.stringify([7, 11, 19, 25, 33, 45, 78])', 'console.assert(JSON.stringify(merge_sort([3, 1, 4, 9, 8])) === JSON.stringify([1, 3, 4, 8, 9])']
```"
152, this function to find the vertex of a parabola.,"```javascript
function parabolaVertex(a, b, c) {
  const vertex = ((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a)));
  return vertex;
}
```",153,"```javascript
['console.assert(parabola_vertex(5, 3, 2)[0] === -0.3 && parabola_vertex(5, 3, 2)[1] === 1.55)', 
 'console.assert(parabola_vertex(9, 8, 4)[0] === -0.4444444444444444 && parabola_vertex(9, 8, 4)[1] === 2.2222222222222223)', 
 'console.assert(parabola_vertex(2, 4, 6)[0] === -1.0 && parabola_vertex(2, 4, 6)[1] === 4.0)'];
```"
153, this function to extract every specified element from a given two dimensional list.,"```javascript
function specifiedElement(nums, N) {
    let result = nums.map(i => i[N]);
    return result;
}
```",154,"```javascript
['console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) === JSON.stringify([1, 4, 7])', 'console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) === JSON.stringify([3, 6, 9])', 'console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) === JSON.stringify([2, 2, 5])'];
```"
154, this   function to toggle all even bits of a given number.,"```javascript
function evenBitToggleNumber(n) {
    let res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 1) {
            res |= (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return n ^ res;
}
```",155,"```javascript
['console.assert(even_bit_toggle_number(10) === 0)', 'console.assert(even_bit_toggle_number(20) === 30)', 'console.assert(even_bit_toggle_number(30) === 20)']
```"
155, this function to convert a tuple of string values to a tuple of integer values.,"```javascript
function tupleIntStr(tupleStr) {
    const result = tupleStr.map(x => [parseInt(x[0]), parseInt(x[1])]);
    return [result];
}
```",156,"```javascript
console.assert(tuple_int_str([['333', '33'], ['1416', '55']]).toString() === [[333, 33], [1416, 55]].toString());
console.assert(tuple_int_str([['999', '99'], ['1000', '500']]).toString() === [[999, 99], [1000, 500]].toString());
console.assert(tuple_int_str([['666', '66'], ['1500', '555']]).toString() === [[666, 66], [1500, 555]].toString());
```"
156, this function to reflect the run-length encoding from a list.,"```javascript
function encodeList(list1) {
    const grouped = [];
    let count = 1;
    for (let i = 1; i <= list1.length; i++) {
        if (list1[i] === list1[i - 1]) {
            count++;
        } else {
            if (count > 0) {
                grouped.push([count, list1[i - 1]]);
            }
            count = 1;
        }
    }
    return grouped;
}
```",157,"```javascript
['assert encode_list([1, 1, 2, 3, 4, 4.3, 5, 1]) == [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]', ""assert encode_list('automatically') == [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']"", ""assert encode_list(' ') == [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]""];
```"
157, this   function to find k number of operations required to make all elements equal.,"```javascript
function min_Ops(arr, n, k) { 
    const max1 = Math.max(...arr); 
    let res = 0; 
    for (let i = 0; i < n; i++) {  
        if ((max1 - arr[i]) % k !== 0) { 
            return -1; 
        } else { 
            res += (max1 - arr[i]) / k; 
        } 
    } 
    return Math.floor(res); 
}
```",158,"```javascript
['console.assert(min_Ops([2,2,2,2],4,3) === 0)', 'console.assert(min_Ops([4,2,6,8],4,3) === -1)', 'console.assert(min_Ops([21,33,9,45,63],5,6) === 24)']
```"
158, this function to print the season for the given month and day.,"```javascript
function monthSeason(month, days) {
    let season;
    if (month === 'January' || month === 'February' || month === 'March') {
        season = 'winter';
    } else if (month === 'April' || month === 'May' || month === 'June') {
        season = 'spring';
    } else if (month === 'July' || month === 'August' || month === 'September') {
        season = 'summer';
    } else {
        season = 'autumn';
    }

    if (month === 'March' && days > 19) {
        season = 'spring';
    } else if (month === 'June' && days > 20) {
        season = 'summer';
    } else if (month === 'September' && days > 21) {
        season = 'autumn';
    } else if (month === 'October' && days > 21) {
        season = 'autumn';
    } else if (month === 'November' && days > 21) {
        season = 'autumn';
    } else if (month === 'December' && days > 20) {
        season = 'winter';
    }

    return season;
}
```",159,"```javascript
[""console.assert(month_season('January', 4) === 'winter')"", ""console.assert(month_season('October', 28) === 'autumn')"", ""console.assert(month_season('June', 6) === 'spring')""]
```"
159, this function to find x and y that satisfies ax + by = n.,"```javascript
function solution(a, b, n) {
    let i = 0;
    while (i * a <= n) {
        if ((n - (i * a)) % b === 0) {
            return [""x = "", i, "", y = "", Math.floor((n - (i * a)) / b)];
        }
        i++;
    }
    return [""No solution""];
}
```",160,"```javascript
console.assert(solution(2, 3, 7) === 'x = 2, y = 1');
console.assert(solution(4, 2, 7) === 'No solution');
console.assert(solution(1, 13, 17) === 'x = 4, y = 1');
```"
160, this function to remove all elements from a given list present in another list.,"```javascript
function removeElements(list1, list2) {
    let result = list1.filter(x => !list2.includes(x));
    return result;
}
```",161,"```javascript
['console.assert(JSON.stringify(removeElements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])) === JSON.stringify([1, 3, 5, 7, 9, 10])', 'console.assert(JSON.stringify(removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])) === JSON.stringify([2, 4, 6, 8, 9, 10])', 'console.assert(JSON.stringify(removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])) === JSON.stringify([1, 2, 3, 4, 6, 8, 9, 10])'];
```"
161, this function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"```javascript
function sumSeries(n) {
  if (n < 1) {
    return 0;
  } else {
    return n + sumSeries(n - 2);
  }
}
```",162,"```javascript
['console.assert(sum_series(6) === 12)', 'console.assert(sum_series(10) === 30)', 'console.assert(sum_series(9) === 25)']
```"
162, this function to calculate the area of a regular polygon.,"```javascript
function areaPolygon(s, l) {
  const area = s * (l ** 2) / (4 * Math.tan(Math.PI / s));
  return area;
}
```",163,"```javascript
['console.assert(area_polygon(4,20) === 400.00000000000006)', 'console.assert(area_polygon(10,15) === 1731.1969896610804)', 'console.assert(area_polygon(9,7) === 302.90938549487214'];
```"
163, this   function to check whether the sum of divisors are same or not.,"```javascript
function divSum(n) { 
    let sum = 1; 
    let i = 2; 
    while (i * i <= n) { 
        if (n % i === 0) { 
            sum += i + Math.floor(n / i); 
        } 
        i++; 
    } 
    return sum; 
}

function areEquivalent(num1, num2) { 
    return divSum(num1) === divSum(num2); 
}
```",164,"```javascript
['console.assert(areEquivalent(36, 57) === false)', 'console.assert(areEquivalent(2, 4) === false)', 'console.assert(areEquivalent(23, 47) === true)']
```"
164, this   function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"```javascript
function countCharPosition(str1) {
    let countChars = 0;
    for (let i = 0; i < str1.length; i++) {
        if ((i === str1.charCodeAt(i) - 'A'.charCodeAt(0)) || 
            (i === str1.charCodeAt(i) - 'a'.charCodeAt(0))) {
            countChars += 1;
        }
    }
    return countChars;
}
```",165,"```javascript
['console.assert(count_char_position(""xbcefg"") === 2)', 'console.assert(count_char_position(""ABcED"") === 3)', 'console.assert(count_char_position(""AbgdeF"") === 5)'];
```"
165, this   function to count the pairs with xor as an even number.,"```javascript
function findEvenPair(A, N) {
    let evenPair = 0;
    for (let i = 0; i < N; i++) {
        for (let j = i + 1; j < N; j++) {
            if ((A[i] ^ A[j]) % 2 === 0) {
                evenPair++;
            }
        }
    }
    return evenPair;
}
```",166,"```javascript
['console.assert(find_even_Pair([5,4,7,2,1],5) === 4)', 'console.assert(find_even_Pair([7,2,8,1,0,5,11],7) === 9)', 'console.assert(find_even_Pair([1,2,3],3) === 1)']
```"
166, this   function to find smallest power of 2 greater than or equal to n.,"```javascript
function nextPowerOf2(n) { 
    let count = 0; 
    if (n && !(n & (n - 1))) { 
        return n;   
    } 
    while (n !== 0) { 
        n >>= 1; 
        count++; 
    } 
    return 1 << count; 
}
```",167,"```javascript
['console.assert(next_Power_Of_2(0) === 1)', 'console.assert(next_Power_Of_2(5) === 8)', 'console.assert(next_Power_Of_2(17) === 32)']
```"
167, this   function to find the frequency of a number in a given array.,"```javascript
function frequency(a, x) { 
    let count = 0;  
    for (let i of a) { 
        if (i === x) count++; 
    } 
    return [count]; 
}
```",168,"```javascript
['console.assert(frequency([1,2,3],4) === 0)', 'console.assert(frequency([1,2,2,3,3,3,4],3) === 3)', 'console.assert(frequency([0,1,2,3,1,2],1) === 2)']
```"
168, this function to calculate the nth pell number.,"```javascript
function getPell(n) {
    if (n <= 2) {
        return n;
    }
    let a = 1;
    let b = 2;
    for (let i = 3; i <= n; i++) {
        let c = 2 * b + a;
        a = b;
        b = c;
    }
    return b;
}
```",169,"```javascript
['console.assert(get_pell(4) === 12)', 'console.assert(get_pell(7) === 169)', 'console.assert(get_pell(8) === 408)']
```"
169, this function to find sum of the numbers in a list between the indices of a specified range.,"```javascript
function sumRangeList(list1, m, n) {
    let sumRange = 0;
    for (let i = m; i <= n; i++) {
        sumRange += list1[i];
    }
    return sumRange;
}
```",170,"```javascript
['console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) === 29)', 'console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) === 16)', 'console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) === 38)']
```"
170, this function to find the perimeter of a pentagon.,"```javascript
function perimeterPentagon(a) {
  let perimeter = (5 * a);
  return perimeter;
}
```",171,"```javascript
['console.assert(perimeter_pentagon(5) === 25)', 'console.assert(perimeter_pentagon(10) === 50)', 'console.assert(perimeter_pentagon(15) === 75)']
```"
171, this function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"```javascript
function countOccurrence(s) {
  let count = 0;
  for (let i = 0; i < s.length - 2; i++) {
    if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {
      count++;
    }
  }
  return count;
}
```",172,"```javascript
['console.assert(count_occurance(""letstdlenstdporstd"") === 3)', 'console.assert(count_occurance(""truststdsolensporsd"") === 1)', 'console.assert(count_occurance(""makestdsostdworthit"") === 2)']
```"
172, this function to remove everything except alphanumeric characters from a string.,"```javascript
function removeSplChar(text) { 
    const pattern = /[\W_]+/g;
    return text.replace(pattern, '');
}
```",173,"```javascript
[""console.assert(remove_splchar('   @#&^%$*program123') === (' program123'))"", ""console.assert(remove_splchar('  %^$@!^&*()  programming24%$^^()    language') === (' programming24language'))"", ""console.assert(remove_splchar('    ^%&^()(+_)(_^&67)                  program') === (' 67program')""]
```"
173, this function to group a sequence of key-value pairs into a dictionary of lists.,"```javascript
function groupKeyValue(l) {
    const result = {};
    for (const [k, v] of l) {
        result.setdefault(k, []).push(v);
    }
    return result;
}
```",174,"```javascript
console.assert(JSON.stringify(group_keyvalue([['yellow', 1], ['blue', 2], ['yellow', 3], ['blue', 4], ['red', 1]])) === JSON.stringify({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}));
console.assert(JSON.stringify(group_keyvalue([[' ', 1], [' ', 2], [' ', 3], [' ', 4], [' ', 5]])) === JSON.stringify({' ': [1, 2, 3, 4, 5]}));
console.assert(JSON.stringify(group_keyvalue([['yellow', 100], ['blue', 200], ['yellow', 300], ['blue', 400], ['red', 100]])) === JSON.stringify({'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}));
```"
174, this function to verify validity of a string of parentheses.,"```javascript
function is_valid_parenthese(str1) {
    let stack = [];
    let pchar = { ""("": "")"", ""{"": ""}"", ""["": ""]"" };
    for (let parenthese of str1) {
        if (pchar.hasOwnProperty(parenthese)) {
            stack.push(parenthese);
        } else if (stack.length === 0 || pchar[stack.pop()] !== parenthese) {
            return false;
        }
    }
    return stack.length === 0;
}
```",175,"```javascript
console.assert(is_valid_parenthese(""(){}[]"") === true);
console.assert(is_valid_parenthese(""()[{)}"") === false);
console.assert(is_valid_parenthese(""()"") === true);
```"
175, this function to find the perimeter of a triangle.,"```javascript
function perimeterTriangle(a, b, c) {
  const perimeter = a + b + c;
  return perimeter;
}
```",176,"```javascript
['console.assert(perimeter_triangle(10, 20, 30) === 60)', 'console.assert(perimeter_triangle(3, 4, 5) === 12)', 'console.assert(perimeter_triangle(25, 35, 45) === 105)']
```"
176, this   function to find two distinct numbers such that their lcm lies within the given range.,"```javascript
function answer(L, R) { 
    if (2 * L <= R) { 
        return [L, 2 * L]; 
    } else { 
        return [-1]; 
    } 
}
```",177,"```javascript
['console.assert(answer(3,8) === (3,6))', 'console.assert(answer(2,6) === (2,4))', 'console.assert(answer(1,3) === (1,2))']
```"
177, this function to search some literals strings in a string.,"```javascript
function stringLiterals(patterns, text) {
  for (let pattern of patterns) {
    if (new RegExp(pattern).test(text)) {
      return 'Matched!';
    } else {
      return 'Not Matched!';
    }
  }
}
```",178,"```javascript
[""console.assert(string_literals(['language'],'  language') === 'Matched!')"", ""console.assert(string_literals(['program'],'  language') === 'Not Matched!')"", ""console.assert(string_literals([' '],'programming language') === 'Not Matched!')""]
```"
178, this function to find if the given number is a keith number or not.,"```javascript
function isNumKeith(x) {
    let terms = [];
    let temp = x;
    let n = 0;

    while (temp > 0) {
        terms.push(temp % 10);
        temp = Math.floor(temp / 10);
        n++;
    }
    
    terms.reverse();
    let nextTerm = 0;
    let i = n;

    while (nextTerm < x) {
        nextTerm = 0;
        for (let j = 1; j <= n; j++) {
            nextTerm += terms[i - j];
        }
        terms.push(nextTerm);
        i++;
    }
    
    return nextTerm === x;
}
```",179,"```javascript
console.assert(is_num_keith(14) === true);
console.assert(is_num_keith(12) === false);
console.assert(is_num_keith(197) === true);
```"
179, this function to calculate distance between two points using latitude and longitude.,"```javascript
function distanceLatLong(slat, slon, elat, elon) {
    const dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));
    return dist;
}
```",180,"```javascript
['console.assert(distance_lat_long(23.5, 67.5, 25.5, 69.5) === 12179.372041317429)', 'console.assert(distance_lat_long(10.5, 20.5, 30.5, 40.5) === 6069.397933300514)', 'console.assert(distance_lat_long(10, 20, 30, 40) === 6783.751974994595)']
```"
180, this function to find the longest common prefix in the given set of strings.,"```javascript
function commonPrefixUtil(str1, str2) {
    let result = """";
    let n1 = str1.length;
    let n2 = str2.length;
    let i = 0;
    let j = 0;

    while (i <= n1 - 1 && j <= n2 - 1) {
        if (str1[i] !== str2[j]) {
            break;
        }
        result += str1[i];
        i++;
        j++;
    }
    return result;
}

function commonPrefix(arr, n) {
    let prefix = arr[0];
    for (let i = 1; i < n; i++) {
        prefix = commonPrefixUtil(prefix, arr[i]);
    }
    return prefix;
}
```",181,"```javascript
['console.assert(common_prefix([""tablets"", ""tables"", ""taxi"", ""tamarind""], 4) === ""ta"")', 'console.assert(common_prefix([""apples"", ""ape"", ""april""], 3) === ""ap"")', 'console.assert(common_prefix([""teens"", ""teenager"", ""teenmar""], 3) === ""teen"")']
```"
181," this function to find uppercase, lowercase, special character and numeric values using regex.","```javascript
function findCharacter(string) {
  const uppercaseCharacters = string.match(/[A-Z]/g) || [];
  const lowercaseCharacters = string.match(/[a-z]/g) || [];
  const numericalCharacters = string.match(/[0-9]/g) || [];
  const specialCharacters = string.match(/[,.!?]/g) || [];
  return [uppercaseCharacters, lowercaseCharacters, numericalCharacters, specialCharacters];
}
```",182,"```javascript
['console.assert(find_character(""ThisIsGeeksforGeeks"") === ([""T"", ""I"", ""G"", ""G""], [""h"", ""i"", ""s"", ""s"", ""e"", ""e"", ""k"", ""s"", ""f"", ""o"", ""r"", ""e"", ""e"", ""k"", ""s""], [], []))', 'console.assert(find_character(""Hithere2"") === ([""H""], [""i"", ""t"", ""h"", ""e"", ""r"", ""e""], [""2""], []))', 'console.assert(find_character(""HeyFolks32"") === ([""H"", ""F""], [""e"", ""y"", ""o"", ""l"", ""k"", ""s""], [""3"", ""2""], []))']
```"
182, this function to count all the distinct pairs having a difference of k in any array.,"```javascript
function countPairs(arr, n, k) {
  let count = 0;
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      if (arr[i] - arr[j] === k || arr[j] - arr[i] === k) {
        count++;
      }
    }
  }
  return count;
}
```",183,"```javascript
['console.assert(count_pairs([1, 5, 3, 4, 2], 5, 3) === 2)', 'console.assert(count_pairs([8, 12, 16, 4, 0, 20], 6, 4) === 5)', 'console.assert(count_pairs([2, 4, 1, 3, 4], 5, 2) === 3)']
```"
183, this function to find all the values in a list that are greater than a specified number.,"```javascript
function greaterSpecificNum(list, num) {
    const greaterSpecificNum = list.every(x => x >= num);
    return greaterSpecificNum;
}
```",184,"```javascript
['console.assert(greater_specificnum([220, 330, 500], 200) === true)', 'console.assert(greater_specificnum([12, 17, 21], 20) === false)', 'console.assert(greater_specificnum([1, 2, 3, 4], 10) === false)']
```"
184, this function to find the focus of a parabola.,"```javascript
function parabolaFocus(a, b, c) {
    let focus = [(-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a))];
    return focus;
}
```",185,"```javascript
['console.assert(parabola_focus(5,3,2)[0] === -0.3 && parabola_focus(5,3,2)[1] === 1.6)', 'console.assert(parabola_focus(9,8,4)[0] === -0.4444444444444444 && parabola_focus(9,8,4)[1] === 2.25)', 'console.assert(parabola_focus(2,4,6)[0] === -1.0 && parabola_focus(2,4,6)[1] === 4.125)']
```"
185, this function to search some literals strings in a string by using regex.,"```javascript
function checkLiterals(text, patterns) {
  for (let pattern of patterns) {
    if (new RegExp(pattern).test(text)) {
      return 'Matched!';
    } else {
      return 'Not Matched!';
    }
  }
}
```",186,"```javascript
[""console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']) === 'Matched!')"", ""console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']) === 'Not Matched!')"", ""console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']) === 'Matched!')""]
```"
186, this function to find the longest common subsequence for the given two sequences.,"```javascript
function longestCommonSubsequence(X, Y, m, n) {
    if (m === 0 || n === 0) {
        return 0;
    } else if (X[m - 1] === Y[n - 1]) {
        return 1 + longestCommonSubsequence(X, Y, m - 1, n - 1);
    } else {
        return Math.max(longestCommonSubsequence(X, Y, m, n - 1), longestCommonSubsequence(X, Y, m - 1, n));
    }
}
```",187,"```javascript
['console.assert(longest_common_subsequence(""AGGTAB"", ""GXTXAYB"", 6, 7) === 4)', 'console.assert(longest_common_subsequence(""ABCDGH"", ""AEDFHR"", 6, 6) === 3)', 'console.assert(longest_common_subsequence(""AXYT"", ""AYZX"", 4, 4) === 2)']
```"
187, this   function to check whether the given number can be represented by product of two squares or not.,"```javascript
function prod_Square(n) {
    for (let i = 2; i <= n; i++) {
        if (i * i < (n + 1)) {
            for (let j = 2; j <= n; j++) {
                if ((i * i * j * j) === n) {
                    return true;
                }
            }
        }
    }
    return false;
}
```",188,"```javascript
console.assert(prod_Square(25) === false);
console.assert(prod_Square(30) === false);
console.assert(prod_Square(16) === true);
```"
188, this   function to find the first missing positive number.,"```javascript
function firstMissingPositive(arr, n) {
    let ptr = 0;
    for (let i = 0; i < n; i++) {
        if (arr[i] === 1) {
            ptr = 1;
            break;
        }
    }
    if (ptr === 0) {
        return 1;
    }
    for (let i = 0; i < n; i++) {
        if (arr[i] <= 0 || arr[i] > n) {
            arr[i] = 1;
        }
    }
    for (let i = 0; i < n; i++) {
        arr[(arr[i] - 1) % n] += n;
    }
    for (let i = 0; i < n; i++) {
        if (arr[i] <= n) {
            return i + 1;
        }
    }
    return n + 1;
}
```",189,"```javascript
console.assert(first_Missing_Positive([1,2,3,-1,5],5) === 4);
console.assert(first_Missing_Positive([0,-1,-2,1,5,8],6) === 2);
console.assert(first_Missing_Positive([0,1,2,5,-8],5) === 3);
```"
189, this   function to count the number of integral co-ordinates that lie inside a square.,"```javascript
function count_Intgral_Points(x1, y1, x2, y2) { 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)); 
}
```",190,"```javascript
console.assert(count_Intgral_Points(1, 1, 4, 4) === 4);
console.assert(count_Intgral_Points(1, 2, 1, 2) === 1);
console.assert(count_Intgral_Points(4, 2, 6, 4) === 1);
```"
190, this function to check whether the given month name contains 30 days or not.,"```javascript
function checkMonthNumber(monthName3) {
  if (monthName3 === ""April"" || monthName3 === ""June"" || monthName3 === ""September"" || monthName3 === ""November"") {
    return true;
  } else {
    return false;
  }
}
```",191,"```javascript
['console.assert(check_monthnumber(""February"") === false)', 'console.assert(check_monthnumber(""June"") === true)', 'console.assert(check_monthnumber(""April"") === true)']
```"
191, this   function to check whether a string has atleast one letter and one number.,"```javascript
function check_String(str) {
    let flag_l = false;
    let flag_n = false;
    for (let i of str) {
        if (isNaN(i) === false) {
            flag_n = true;
        }
        if (isNaN(i) === true) {
            flag_l = true;
        }
    }
    return flag_l && flag_n;
}
```",192,"```javascript
[""console.assert(check_String('thishasboth29') === true)"", ""console.assert(check_String(' ') === false)"", ""console.assert(check_String('string') === false)""]
```"
192, this function to remove the duplicates from the given tuple.,"```javascript
function removeTuple(testTup) {
  let res = [...new Set(testTup)];
  return res;
}
```",193,"```javascript
['console.assert(removeTuple([1, 3, 5, 2, 3, 5, 1, 1, 3]).toString() === [1, 2, 3, 5].toString())', 'console.assert(removeTuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8]).toString() === [2, 3, 4, 5, 6, 7, 8].toString())', 'console.assert(removeTuple([11, 12, 13, 11, 11, 12, 14, 13]).toString() === [11, 12, 13, 14].toString())']
```"
193, this   function to convert octal number to decimal number.,"```javascript
function octal_To_Decimal(n) {  
    let num = n; 
    let dec_value = 0; 
    let base = 1; 
    let temp = num; 
    while (temp) { 
        let last_digit = temp % 10; 
        temp = Math.floor(temp / 10); 
        dec_value += last_digit * base; 
        base = base * 8; 
    } 
    return dec_value; 
}
```",194,"```javascript
console.assert(octal_To_Decimal(25) === 21);
console.assert(octal_To_Decimal(30) === 24);
console.assert(octal_To_Decimal(40) === 32);
```"
194, this   function to find the first position of an element in a sorted array.,"```javascript
function first(arr, x, n) {
    let low = 0;
    let high = n - 1;
    let res = -1;  
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        if (arr[mid] > x) {
            high = mid - 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            res = mid;
            high = mid - 1;
        }
    }
    return res;
}
```",195,"```javascript
['console.assert(first([1,2,3,4,5,6,6],6,6) === 5)', 'console.assert(first([1,2,2,2,3,2,2,4,2],2,9) === 1)', 'console.assert(first([1,2,3],1,3) === 0)']
```"
195, this function to remove all the tuples with length k.,"```javascript
function removeTuples(testList, K) {
  let res = testList.filter(ele => ele.length !== K);
  return res;
}
```",196,"```javascript
['console.assert(remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1).toString() === [(4, 5), (8, 6, 7), (3, 4, 6, 7)].toString())', 'console.assert(remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2).toString() === [(1, 2, 3), (3, 4, 6, 7)].toString())', 'console.assert(remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3).toString() === [(4, 3), (1,)].toString())'];
```"
196, this function to perform the exponentiation of the given two tuples.,"```javascript
function find_exponentio(test_tup1, test_tup2) {
  let res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));
  return res;
}
```",197,"```javascript
['console.assert(find_exponentio([10, 4, 5, 6], [5, 6, 7, 5]) === 100000, 4096, 78125, 7776)', 
 'console.assert(find_exponentio([11, 5, 6, 7], [6, 7, 8, 6]) === 1771561, 78125, 1679616, 117649)', 
 'console.assert(find_exponentio([12, 6, 7, 8], [7, 8, 9, 7]) === 35831808, 1679616, 40353607, 2097152)'];
```"
197, this function to find the largest triangle that can be inscribed in an ellipse.,"```javascript
function largestTriangle(a, b) {
    if (a < 0 || b < 0) {
        return -1;
    }
    var area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);
    return area;
}
```",198,"```javascript
['console.assert(largest_triangle(4,2) === 10.392304845413264)', 'console.assert(largest_triangle(5,7) === 4.639421805988064)', 'console.assert(largest_triangle(9,1) === 105.2220865598093)']
```"
198, this   function to find highest power of 2 less than or equal to given number.,"```javascript
function highestPowerOf2(n) { 
    let res = 0; 
    for (let i = n; i > 0; i--) {  
        if ((i & (i - 1)) === 0) { 
            res = i; 
            break;      
        }      
    } 
    return res; 
}
```",199,"```javascript
['console.assert(highest_Power_of_2(10) === 8)', 'console.assert(highest_Power_of_2(19) === 16)', 'console.assert(highest_Power_of_2(32) === 32)']
```"
199, this function to find all index positions of the maximum values in a given list.,"```javascript
function positionMax(list1) {
    const maxVal = Math.max(...list1);
    const maxResult = list1.map((j, i) => j === maxVal ? i : -1).filter(i => i !== -1);
    return [maxResult];
}
```",200,"```javascript
['console.assert(JSON.stringify(position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])) === JSON.stringify([7])', 'console.assert(JSON.stringify(position_max([1,2,2,2,4,4,4,5,5,5,5])) === JSON.stringify([7,8,9,10])', 'console.assert(JSON.stringify(position_max([2,1,5,6,8,3,4,9,10,11,8,12])) === JSON.stringify([11])']
```"
200, this   function to check whether the elements in a list are same or not.,"```javascript
function chkList(lst) { 
    return new Set(lst).size === 1; 
}
```",201,"```javascript
[""console.assert(chkList(['one', 'one', 'one']) === true)"", ""console.assert(chkList(['one', 'Two', 'Three']) === false)"", ""console.assert(chkList(['bigdata', ' ', 'Django']) === false)""]
```"
201, this function to remove even characters in a string.,"```javascript
function removeEven(str1) {
    let str2 = '';
    for (let i = 1; i <= str1.length; i++) {
        if (i % 2 !== 0) {
            str2 += str1[i - 1];
        }
    }
    return str2;
}
```",202,"```javascript
['console.assert(remove_even("" "") === ""pto"")', 'console.assert(remove_even(""program"") === ""porm"")', 'console.assert(remove_even(""language"") === ""lnug"")']
```"
202, this   function to find the hamming distance between given two integers.,"```javascript
function hammingDistance(n1, n2) {
    let x = n1 ^ n2;
    let setBits = 0;
    while (x > 0) {
        setBits += x & 1;
        x >>= 1;
    }
    return setBits;
}
```",203,"```javascript
['console.assert(hamming_Distance(4, 8) === 2)', 'console.assert(hamming_Distance(2, 4) === 2)', 'console.assert(hamming_Distance(1, 2) === 2)'];
```"
203, this   function to count the occurrence of a given character in a string.,"```javascript
function count(s, c) {
    let res = 0;
    for (let i = 0; i < s.length; i++) {
        if (s[i] === c) {
            res++;
        }
    }
    return res;
}
```",204,"```javascript
console.assert(count(""abcc"", ""c"") == 2);
console.assert(count(""ababca"", ""a"") == 3);
console.assert(count(""mnmm0pm"", ""m"") == 4);
```"
204, this function to find the inversions of tuple elements in the given tuple list.,"```javascript
function inversionElements(testTup) {
    const res = Array.from(testTup, x => ~x);
    return [res];
}
```",205,"```javascript
['console.assert(inversionElements([7, 8, 9, 1, 10, 7]).toString() === (-8, -9, -10, -2, -11, -8).toString())', 'console.assert(inversionElements([2, 4, 5, 6, 1, 7]).toString() === (-3, -5, -6, -7, -2, -8).toString())', 'console.assert(inversionElements([8, 9, 11, 14, 12, 13]).toString() === (-9, -10, -12, -15, -13, -14).toString())']
```"
205, this function to perform the adjacent element concatenation in the given tuples.,"```javascript
function concatenateElements(testTup) {
    let res = Array.from({length: testTup.length - 1}, (_, i) => testTup[i] + testTup[i + 1]);
    return res;
}
```",206,"```javascript
console.assert(concatenate_elements([""DSP "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""UTS""]) === ['DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS']);
console.assert(concatenate_elements([""RES "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""QESR""]) === ['RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR']);
console.assert(concatenate_elements([""MSAM"", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""SKD""]) === ['MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD']);
```"
206, this function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"```javascript
function findLongestRepeatingSubseq(str) {
    const n = str.length;
    const dp = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    
    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= n; j++) {
            if (str[i - 1] === str[j - 1] && i !== j) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
            }
        }
    }
    return dp[n][n];
}
```",207,"```javascript
console.assert(findLongestRepeatingSubseq(""AABEBCDD"") === 3);
console.assert(findLongestRepeatingSubseq(""aabb"") === 2);
console.assert(findLongestRepeatingSubseq(""aab"") === 1);
```"
207, this function to check the given decimal with a precision of 2 by using regex.,"```javascript
function isDecimal(num) {
  const numFetch = /^[0-9]+(\.[0-9]{1,2})?$/;
  const result = numFetch.test(num);
  return [result];
}
```",208,"```javascript
[""console.assert(is_decimal('123.11') === true)"", ""console.assert(is_decimal('0.21') === true)"", ""console.assert(is_decimal('123.1214') === false)""]
```"
208, this function to delete the smallest element from the given heap and then insert a new item.,"```javascript
function heapReplace(heap, a) {
  heap.sort((x, y) => x - y);
  heap[0] = a;
  heap.sort((x, y) => x - y);
  return heap;
}
```",209,"```javascript
['console.assert(heap_replace([25, 44, 68, 21, 39, 23, 89], 21).toString() === [21, 25, 23, 44, 39, 68, 89].toString())', 'console.assert(heap_replace([25, 44, 68, 21, 39, 23, 89], 110).toString() === [23, 25, 68, 44, 39, 110, 89].toString())', 'console.assert(heap_replace([25, 44, 68, 21, 39, 23, 89], 500).toString() === [23, 25, 68, 44, 39, 500, 89].toString())']
```"
209," this function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","```javascript
function isAllowedSpecificChar(string) {
    const getChar = /[^a-zA-Z0-9.]/;
    const result = getChar.test(string);
    return !result;
}
```",210,"```javascript
assert(is_allowed_specific_char(""ABCDEFabcdef123450"") === true);
assert(is_allowed_specific_char(""*&%@#!}{"") === false);
assert(is_allowed_specific_char(""HELLOhowareyou98765"") === true);
```"
210, this   function to count numbers whose oth and nth bits are set.,"```javascript
function count_Num(n) { 
    if (n === 1) { 
        return 1; 
    } 
    let count = Math.pow(2, n - 2); 
    return count; 
}
```",211,"```javascript
['console.assert(count_Num(2) === 1)', 'console.assert(count_Num(3) === 2)', 'console.assert(count_Num(1) === 1)'];
```"
211, this   function to find the sum of fourth power of n natural numbers.,"```javascript
function fourthPowerSum(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += (i * i * i * i);
    }
    return sum;
}
```",212,"```javascript
console.assert(fourth_Power_Sum(2) === 17);
console.assert(fourth_Power_Sum(4) === 354);
console.assert(fourth_Power_Sum(6) === 2275);
```"
212, this function to perform the concatenation of two string tuples.,"```javascript
function concatenateStrings(testTup1, testTup2) {
    let res = testTup1.map((ele1, index) => ele1 + testTup2[index]);
    return res;
}
```",213,"```javascript
['console.assert(concatenate_strings([""Manjeet"", ""Nikhil"", ""Akshat""], ["" Singh"", "" Meherwal"", "" Garg""]) === [""Manjeet Singh"", ""Nikhil Meherwal"", ""Akshat Garg""])', 'console.assert(concatenate_strings([""Shaik"", ""Ayesha"", ""Sanya""], ["" Dawood"", "" Begum"", "" Singh""]) === [""Shaik Dawood"", ""Ayesha Begum"", ""Sanya Singh""])', 'console.assert(concatenate_strings([""Harpreet"", ""Priyanka"", ""Muskan""], [""Kour"", "" Agarwal"", ""Sethi""]) === [""HarpreetKour"", ""Priyanka Agarwal"", ""MuskanSethi""])']
```"
213, this function to convert radians to degrees.,"```javascript
function degree_radian(radian) {
    var degree = radian * (180 / Math.PI);
    return degree;
}
```",214,"```javascript
['console.assert(degree_radian(90) === 5156.620156177409)', 'console.assert(degree_radian(60) === 3437.746770784939)', 'console.assert(degree_radian(120) === 6875.493541569878)']
```"
214, this function to decode a run-length encoded given list.,"```javascript
function decodeList(alist) {
    function aux(g) {
        if (Array.isArray(g)) {
            return [[g[1], [...Array(g[0]).keys()]]];
        } else {
            return [[g, [0]]];
        }
    }
    return [].concat(...alist.map(g => aux(g).flatMap(([x, R]) => R.map(i => x))));
}
```",215,"```javascript
['console.assert(decode_list([[2, 1], 2, 3, [2, 4], 5, 1]) === [1, 1, 2, 3, 4, 4, 5, 1]', ""console.assert(decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']) === ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y'])"", ""console.assert(decode_list(['p', 'y', 't', 'h', 'o', 'n']) === ['p', 'y', 't', 'h', 'o', 'n'])""]
```"
215, this function to check if a nested list is a subset of another nested list.,"```javascript
function checkSubsetList(list1, list2) {
    let l1 = list1[0], l2 = list2[0];
    let exist = true;
    for (let i of list2) {
        if (!list1.includes(i)) {
            exist = false;
        }
    }
    return [exist];
}
```",216,"```javascript
['console.assert(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) === false)', 
 'console.assert(check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) === true)', 
 'console.assert(check_subset_list([[""a"", ""b""], [""e""], [""c"", ""d""]], [[""g""]]) === false)']
```"
216, this   function to find the first repeated character in a given string.,"```javascript
function firstRepeatedChar(str) {
    let h = {};
    for (let ch of str) {
        if (h[ch]) {
            return ch;
        } else {
            h[ch] = 0;
        }
    }
    return '\0';
}
```",217,"```javascript
['console.assert(first_Repeated_Char(""Google"") === ""o"")', 'console.assert(first_Repeated_Char(""data"") === ""a"")', 'console.assert(first_Repeated_Char("" "") === ""\\0"")']
```"
217, this   function to find the minimum operations required to make two numbers equal.,"```javascript
function min_Operations(A, B) {  
    if (A > B) { 
        [A, B] = [B, A];  
    } 
    B = B / gcd(A, B);  
    return B - 1; 
}

function gcd(x, y) {
    while (y !== 0) {
        let temp = y;
        y = x % y;
        x = temp;
    }
    return x;
}
```",218,"```javascript
['console.assert(min_Operations(2, 4) === 1)', 'console.assert(min_Operations(4, 10) === 4)', 'console.assert(min_Operations(1, 4) === 3)'];
```"
218, this function to extract maximum and minimum k elements in the given tuple.,"```javascript
function extractMinMax(testTup, K) {
  let res = [];
  testTup = Array.from(testTup);
  let temp = testTup.sort((a, b) => a - b);
  for (let idx = 0; idx < temp.length; idx++) {
    let val = temp[idx];
    if (idx < K || idx >= temp.length - K) {
      res.push(val);
    }
  }
  res = Array.from(res);
  return [res];
}
```",219,"```javascript
['console.assert(JSON.stringify(extract_min_max([5, 20, 3, 7, 6, 8], 2)) === JSON.stringify([3, 5, 8, 20])', 
 'console.assert(JSON.stringify(extract_min_max([4, 5, 6, 1, 2, 7], 3)) === JSON.stringify([1, 2, 4, 5, 6, 7])', 
 'console.assert(JSON.stringify(extract_min_max([2, 3, 4, 8, 9, 11, 7], 4)) === JSON.stringify([2, 3, 4, 7, 8, 9, 11])']
```"
219," this function to replace maximum n occurrences of spaces, commas, or dots with a colon.","```javascript
function replaceMaxSpecialChar(text, n) {
    return text.replace(/[,.\s]/g, "":"", n);
}
```",220,"```javascript
[""console.assert(replace_max_specialchar('  language, Programming language.', 2) === ' :language: Programming language.')"", ""console.assert(replace_max_specialchar('a b c,d e f', 3) === 'a:b:c:d e f')"", ""console.assert(replace_max_specialchar('ram reshma,ram rahim', 1) === 'ram:reshma,ram rahim')""]
```"
220, this   function to find the first even number in a given list of numbers.,"```javascript
function firstEven(nums) {
    const firstEven = nums.find(el => el % 2 === 0) || -1;
    return firstEven;
}
```",221,"```javascript
console.assert(first_even([1, 3, 5, 7, 4, 1, 6, 8]) === 4);
console.assert(first_even([2, 3, 4]) === 2);
console.assert(first_even([5, 6, 7]) === 6);
```"
221, this function to check if all the elements in tuple have same data type or not.,"```javascript
function checkType(testTuple) {
  let res = true;
  for (let ele of testTuple) {
    if (typeof ele !== typeof testTuple[0]) {
      res = false;
      break;
    }
  }
  return res;
}
```",222,"```javascript
['console.assert(check_type([5, 6, 7, 3, 5, 6]) === true)', 'console.assert(check_type([1, 2, ""4""]) === false)', 'console.assert(check_type([3, 2, 1, 4, 5]) === true)']
```"
222, this function to check for majority element in the given sorted array.,"```javascript
function isMajority(arr, n, x) {
    const i = binarySearch(arr, 0, n - 1, x);
    if (i === -1) {
        return false;
    }
    if ((i + Math.floor(n / 2) <= (n - 1)) && arr[i + Math.floor(n / 2)] === x) {
        return true;
    } else {
        return false;
    }
}

function binarySearch(arr, low, high, x) {
    if (high >= low) {
        const mid = Math.floor((low + high) / 2);
        if ((mid === 0 || x > arr[mid - 1]) && (arr[mid] === x)) {
            return mid;
        } else if (x > arr[mid]) {
            return binarySearch(arr, mid + 1, high, x);
        } else {
            return binarySearch(arr, low, mid - 1, x);
        }
    }
    return -1;
}
```",223,"```javascript
console.assert(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) === true);
console.assert(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) === false);
console.assert(is_majority([1, 1, 1, 2, 2], 5, 1) === true);
```"
223, this   function to count set bits of a given number.,"```javascript
function countSetBits(n) {
    let count = 0;
    while (n) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}
```",224,"```javascript
['console.assert(count_Set_Bits(2) === 1)', 'console.assert(count_Set_Bits(4) === 1)', 'console.assert(count_Set_Bits(6) === 2)']
```"
224, this   function to find the minimum element in a sorted and rotated array.,"```javascript
function findMin(arr, low, high) {
    while (low < high) {
        let mid = low + Math.floor((high - low) / 2);
        if (arr[mid] === arr[high]) {
            high -= 1;
        } else if (arr[mid] > arr[high]) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    return arr[high];
}
```",225,"```javascript
['console.assert(find_Min([1,2,3,4,5],0,4) === 1)', 'console.assert(find_Min([4,6,8],0,2) === 4)', 'console.assert(find_Min([2,3,5,7,9],0,4) === 2)']
```"
225, this   function to remove the characters which have odd index values of a given string.,"```javascript
function oddValuesString(str) {
  let result = """";
  for (let i = 0; i < str.length; i++) {
    if (i % 2 === 0) {
      result += str[i];
    }
  }
  return result;
}
```",226,"```javascript
[""console.assert(odd_values_string('abcdef') === 'ace')"", ""console.assert(odd_values_string(' ') === 'pto')"", ""console.assert(odd_values_string('data') === 'dt')""]
```"
226, this function to find minimum of three numbers.,"```javascript
function minOfThree(a, b, c) {
    let smallest;
    if (a <= b && a <= c) {
        smallest = a;
    } else if (b <= a && b <= c) {
        smallest = b;
    } else {
        smallest = c;
    }
    return smallest;
}
```",227,"```javascript
['console.assert(min_of_three(10, 20, 0) === 0)', 'console.assert(min_of_three(19, 15, 18) === 15)', 'console.assert(min_of_three(-10, -20, -30) === -30)']
```"
227, this   function to check whether all the bits are unset in the given range or not.,"```javascript
function allBitsSetInTheGivenRange(n, l, r) {
    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));
    let new_num = n & num;
    if (new_num === 0) {
        return true;
    }
    return false;
}
```",228,"```javascript
console.assert(all_Bits_Set_In_The_Given_Range(4, 1, 2) === true);
console.assert(all_Bits_Set_In_The_Given_Range(17, 2, 4) === true);
console.assert(all_Bits_Set_In_The_Given_Range(39, 4, 6) === false);
```"
228, this function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"```javascript
function reArrangeArray(arr, n) {
  let j = 0;
  for (let i = 0; i < n; i++) {
    if (arr[i] < 0) {
      let temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
      j++;
    }
  }
  return arr;
}
```",229,"```javascript
['console.assert(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9).toString() === [-1, -3, -7, 4, 5, 6, 2, 8, 9].toString())', 'console.assert(re_arrange_array([12, -14, -26, 13, 15], 5).toString() === [-14, -26, 12, 13, 15].toString())', 'console.assert(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7).toString() === [-42, -39, -78, 10, 24, 36, 85].toString())']
```"
229, this function to replace blank spaces with any character in a string.,"```javascript
function replace_blank(str1, char) {
    let str2 = str1.replace(/ /g, char);
    return str2;
}
```",230,"```javascript
['console.assert(replace_blank(""hello people"",\'@\')===(""hello@people""));', 'console.assert(replace_blank(""  program language"",\'$\')===("" $program$language""));', 'console.assert(replace_blank(""blank space"",""-"")===(""blank-space""));']
```"
230, this function to find the maximum sum in the given right triangle of numbers.,"```javascript
function max_sum(tri, n) { 
    if (n > 1) { 
        tri[1][1] = tri[1][1] + tri[0][0]; 
        tri[1][0] = tri[1][0] + tri[0][0]; 
    }
    for (let i = 2; i < n; i++) { 
        tri[i][0] = tri[i][0] + tri[i - 1][0]; 
        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; 
        for (let j = 1; j < i; j++) { 
            if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) { 
                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]; 
            } else { 
                tri[i][j] = tri[i][j] + tri[i - 1][j]; 
            } 
        } 
    }
    return Math.max(...tri[n - 1]); 
}
```",231,"```javascript
['console.assert(max_sum([[1], [2,1], [3,3,2]], 3) === 6)', 'console.assert(max_sum([[1], [1, 2], [4, 1, 12]], 3) === 15)', 'console.assert(max_sum([[2], [3,2], [13,23,12]], 3) === 28)']
```"
231, this function to get the n largest items from a dataset.,"```javascript
function larg_nnum(list1, n) {
    return list1.sort((a, b) => b - a).slice(0, n);
}
```",232,"```javascript
['console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2).toString() === [100, 90].toString())', 'console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5).toString() === [100, 90, 80, 70, 60].toString())', 'console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3).toString() === [100, 90, 80].toString())']
```"
232, this function to find the lateral surface area of a cylinder.,"```javascript
function lateralsurface_cylinder(r, h) {
    let lateralsurface = 2 * 3.1415 * r * h;
    return lateralsurface;
}
```",233,"```javascript
['console.assert(lateralsuface_cylinder(10, 5) === 314.15000000000003)', 'console.assert(lateralsuface_cylinder(4, 5) === 125.66000000000001)', 'console.assert(lateralsuface_cylinder(4, 10) === 251.32000000000002)']
```"
233, this function to find the volume of a cube.,"```javascript
function volumeCube(l) {
  var volume = l * l * l;
  return volume;
}
```",234,"```javascript
['console.assert(volume_cube(3) === 27)', 'console.assert(volume_cube(2) === 8)', 'console.assert(volume_cube(5) === 125)']
```"
234, this   function to set all even bits of a given number.,"```javascript
function evenBitSetNumber(n) {
    let count = 0, res = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 1) {
            res |= (1 << count);
        }
        count += 1;
        temp >>= 1;
    }
    return (n | res);
}
```",235,"```javascript
['console.assert(even_bit_set_number(10) === 10)', 'console.assert(even_bit_set_number(20) === 30)', 'console.assert(even_bit_set_number(30) === 30)']
```"
235, this   function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"```javascript
function No_of_Triangle(N, K) {
    if (N < K) {
        return -1;
    } else {
        let Tri_up = ((N - K + 1) * (N - K + 2)) / 2;
        let Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) / 2;
        return Tri_up + Tri_down;
    }
}
```",236,"```javascript
['console.assert(No_of_Triangle(4, 2) === 7)', 'console.assert(No_of_Triangle(4, 3) === 3)', 'console.assert(No_of_Triangle(1, 3) === -1)']
```"
236, this function to check the occurrences of records which occur similar times in the given tuples.,"```javascript
function checkOccurrences(testList) {
  const res = {};
  testList.map(arr => arr.sort().toString()).forEach(ele => {
    res[ele] = (res[ele] || 0) + 1;
  });
  return res;
}
```",237,"```javascript
console.assert(JSON.stringify(check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])) === JSON.stringify({(1, 3): 2, (2, 5): 2, (3, 6): 1}));
console.assert(JSON.stringify(check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])) === JSON.stringify({(2, 4): 2, (3, 6): 2, (4, 7): 1}));
console.assert(JSON.stringify(check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])) === JSON.stringify({(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}));
```"
237, this   function to count number of non-empty substrings of a given string.,"```javascript
function number_of_substrings(str) {
    const str_len = str.length;
    return Math.floor(str_len * (str_len + 1) / 2);
}
```",238,"```javascript
['console.assert(number_of_substrings(""abc"") === 6)', 'console.assert(number_of_substrings(""abcd"") === 10)', 'console.assert(number_of_substrings(""abcde"") === 15)']
```"
238, this function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"```javascript
function getTotalNumberOfSequences(m, n) {
    let T = Array.from(Array(m + 1), () => Array(n + 1).fill(0));
    for (let i = 0; i <= m; i++) {
        for (let j = 0; j <= n; j++) {
            if (i === 0 || j === 0) {
                T[i][j] = 0;
            } else if (i < j) {
                T[i][j] = 0;
            } else if (j === 1) {
                T[i][j] = i;
            } else {
                T[i][j] = T[i - 1][j] + T[Math.floor(i / 2)][j - 1];
            }
        }
    }
    return [T[m][n]];
}
```",239,"```javascript
console.assert(get_total_number_of_sequences(10, 4) === 4);
console.assert(get_total_number_of_sequences(5, 2) === 6);
console.assert(get_total_number_of_sequences(16, 3) === 84);
```"
239, this function to replace the last element of the list with another list.,"```javascript
function replaceList(list1, list2) {
    list1.splice(-1, 1, ...list2);
    return list1;
}
```",240,"```javascript
['console.assert(replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]).toString() === [1, 3, 5, 7, 9, 2, 4, 6, 8].toString())', 'console.assert(replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8]).toString() === [1, 2, 3, 4, 5, 6, 7, 8].toString())', 'console.assert(replace_list([""red"", ""blue"", ""green""], [""yellow""]).toString() === [""red"", ""blue"", ""yellow""].toString())']
```"
240, this function to generate a 3d array having each element as '*'.,"```javascript
function array_3d(m, n, o) {
    let array_3d = Array.from({ length: o }, () => 
        Array.from({ length: n }, () => 
            Array.from({ length: m }, () => '*')
        )
    );
    return array_3d;
}
```",241,"```javascript
console.assert(JSON.stringify(array_3d(6, 4, 3)) === JSON.stringify([[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]));
console.assert(JSON.stringify(array_3d(5, 3, 4)) === JSON.stringify([[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]);
console.assert(JSON.stringify(array_3d(1, 2, 3)) === JSON.stringify([[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]);
```"
241, this function to count total characters in a string.,"```javascript
function countCharac(str1) {
  let total = 0;
  for (let i of str1) {
    total += 1;
  }
  return total;
}
```",242,"```javascript
['console.assert(count_charac(""  programming"") === 18)', 'console.assert(count_charac(""language"") === 8)', 'console.assert(count_charac(""words"") === 5)'];
```"
242, this function to sort the given list based on the occurrence of first element of tuples.,"```javascript
function sortOnOccurrence(lst) {
    const dct = {};
    for (const [i, j] of lst) {
        if (!dct[i]) {
            dct[i] = [];
        }
        dct[i].push(j);
    }
    return Object.entries(dct).map(([i, j]) => [i, ...Array.from(new Set(j)), j.length]);
}
```",243,"```javascript
[""console.assert(sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) === [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)])"", ""console.assert(sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) === [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)])"", ""console.assert(sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) === [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)])""]
```"
243, this   function to find the next perfect square greater than a given number.,"```javascript
function nextPerfectSquare(N) {
    let nextN = Math.floor(Math.sqrt(N)) + 1;
    return nextN * nextN;
}
```",244,"```javascript
console.assert(next_Perfect_Square(35) === 36);
console.assert(next_Perfect_Square(6) === 9);
console.assert(next_Perfect_Square(9) === 16);
```"
244, this function to find the maximum sum of bi-tonic sub-sequence for the given array.,"```javascript
function maxSum(arr, n) {
    let MSIBS = arr.slice();
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {
                MSIBS[i] = MSIBS[j] + arr[i];
            }
        }
    }
    let MSDBS = arr.slice();
    for (let i = 1; i <= n; i++) {
        for (let j = 1; j < i; j++) {
            if (arr[arr.length - i] > arr[arr.length - j] && MSDBS[arr.length - i] < MSDBS[arr.length - j] + arr[arr.length - i]) {
                MSDBS[arr.length - i] = MSDBS[arr.length - j] + arr[arr.length - i];
            }
        }
    }
    let max_sum = Number.NEGATIVE_INFINITY;
    for (let k = 0; k < n; k++) {
        max_sum = Math.max(max_sum, MSIBS[k] + MSDBS[arr.length - k - 1] - arr[k]);
    }
    return max_sum;
}
```",245,"```javascript
console.assert(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) === 194);
console.assert(max_sum([80, 60, 30, 40, 20, 10], 6) === 210);
console.assert(max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8) === 138);
```"
245, this function for computing square roots using the babylonian method.,"```javascript
function babylonianSquareroot(number) {
    if (number === 0) {
        return 0;
    }
    let g = number / 2.0;
    let g2 = g + 1;
    while (g !== g2) {
        let n = number / g;
        g2 = g;
        g = (g + n) / 2;
    }
    return g;
}
```",246,"```javascript
['console.assert(babylonian_squareroot(10) === 3.162277660168379)', 'console.assert(babylonian_squareroot(2) === 1.414213562373095)', 'console.assert(babylonian_squareroot(9) === 3.0)']
```"
246, this function to find the longest palindromic subsequence in the given string.,"```javascript
function lps(str) { 
    const n = str.length; 
    const L = Array.from({ length: n }, () => Array(n).fill(0)); 
    for (let i = 0; i < n; i++) { 
        L[i][i] = 1; 
    } 
    for (let cl = 2; cl <= n; cl++) { 
        for (let i = 0; i <= n - cl; i++) { 
            const j = i + cl - 1; 
            if (str[i] === str[j] && cl === 2) { 
                L[i][j] = 2; 
            } else if (str[i] === str[j]) { 
                L[i][j] = L[i + 1][j - 1] + 2; 
            } else { 
                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]); 
            } 
        } 
    } 
    return [L[0][n - 1]]; 
}
```",247,"```javascript
['console.assert(lps(""TENS FOR TENS"") === 5)', 'console.assert(lps(""CARDIO FOR CARDS"") === 7)', 'console.assert(lps(""PART OF THE JOURNEY IS PART"") === 9)']
```"
247, this function to calculate the harmonic sum of n-1.,"```javascript
function harmonicSum(n) {
  if (n < 2) {
    return 1;
  } else {
    return 1 / n + harmonicSum(n - 1);
  }
}
```",248,"```javascript
['console.assert(harmonic_sum(7) === 2.5928571428571425)', 'console.assert(harmonic_sum(4) === 2.083333333333333)', 'console.assert(harmonic_sum(19) === 3.547739657143682)']
```"
248, this function to find the intersection of two arrays using lambda function.,"```javascript
function intersectionArray(array_nums1, array_nums2) {
    const result = array_nums2.filter(x => array_nums1.includes(x));
    return result;
}
```",249,"```javascript
['console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]).toString() === [1, 2, 8, 9].toString())', 'console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9]).toString() === [3,5,7,9].toString())', 'console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40]).toString() === [10].toString())']
```"
249, this   function to count the occcurences of an element in a tuple.,"```javascript
function count_X(tup, x) {
    let count = 0;
    for (let ele of tup) {
        if (ele === x) {
            count++;
        }
    }
    return count;
}
```",250,"```javascript
['console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) === 0)', 'console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) === 3)', 'console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) === 4)']
```"
250, this function to insert an element before each element of a list.,"```javascript
function insertElement(list, element) {
    list = [].concat(...list.map(elt => [element, elt]));
    return list;
}
```",251,"```javascript
[""console.assert(insert_element(['Red', 'Green', 'Black'], 'c').toString() === ['c', 'Red', 'c', 'Green', 'c', 'Black'].toString())"", ""console.assert(insert_element([' ', 'java'], 'program').toString() === ['program', ' ', 'program', 'java'].toString())"", ""console.assert(insert_element(['happy', 'sad'], 'laugh').toString() === ['laugh', 'happy', 'laugh', 'sad'].toString())""]
```"
251, this   function to convert complex numbers to polar coordinates.,"```javascript
function convert(numbers) {    
  let num = Math.sqrt(numbers.re * numbers.re + numbers.im * numbers.im);
  let angle = Math.atan2(numbers.im, numbers.re);
  return [num, angle];
}
```",252,"```javascript
['console.assert(convert(1) == (1.0, 0.0))', 'console.assert(convert(4) == (4.0, 0.0))', 'console.assert(convert(5) == (5.0, 0.0))'];
```"
252, this   function to count integers from a given list.,"```javascript
function countInteger(list1) {
    let ctr = 0;
    for (let i of list1) {
        if (typeof i === 'number' && Number.isInteger(i)) {
            ctr++;
        }
    }
    return ctr;
}
```",253,"```javascript
[""console.assert(count_integer([1,2,'abc',1.2]) === 2)"", 'console.assert(count_integer([1,2,3]) === 3)', 'console.assert(count_integer([1,1.2,4,5.1]) === 2)']
```"
253, this function to find all words starting with 'a' or 'e' in a given string.,"```javascript
function words_ae(text) {
    return text.match(/[ae]\w+/g);
}
```",254,"```javascript
['console.assert(words_ae(""  programe"").equals([""ame""]));', 'console.assert(words_ae(""  programe language"").equals([""ame"", ""anguage""]));', 'console.assert(words_ae(""assert statement"").equals([""assert"", ""atement""]));']
```"
254, this function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"```javascript
function combinationsColors(l, n) {
    function* combinationsWithReplacement(arr, n) {
        const results = [];
        const indices = Array(n).fill(0);
        
        while (true) {
            results.push(indices.map(i => arr[i]));
            let i = n - 1;
            while (i >= 0 && indices[i] === arr.length - 1) {
                i--;
            }
            if (i < 0) break;
            indices[i]++;
            for (let j = i + 1; j < n; j++) {
                indices[j] = indices[i];
            }
        }
        return results;
    }
    return Array.from(combinationsWithReplacement(l, n));
}
```",255,"```javascript
console.assert(JSON.stringify(combinations_colors([""Red"", ""Green"", ""Blue""], 1)) === JSON.stringify([['Red'], ['Green'], ['Blue']]));
console.assert(JSON.stringify(combinations_colors([""Red"", ""Green"", ""Blue""], 2)) === JSON.stringify([['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]));
console.assert(JSON.stringify(combinations_colors([""Red"", ""Green"", ""Blue""], 3)) === JSON.stringify([['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]));
```"
255, this   function to count the number of prime numbers less than a given non-negative number.,"```javascript
function countPrimesNums(n) {
    let ctr = 0;
    for (let num = 0; num < n; num++) {
        if (num <= 1) {
            continue;
        }
        for (let i = 2; i < num; i++) {
            if (num % i === 0) {
                break;
            }
        }
        ctr++;
    }
    return ctr;
}
```",256,"```javascript
console.assert(count_Primes_nums(5) === 2);
console.assert(count_Primes_nums(10) === 4);
console.assert(count_Primes_nums(100) === 25);
```"
256, this function to swap two numbers.,"```javascript
function swapNumbers(a, b) {
    let temp = a;
    a = b;
    b = temp;
    return [a, b];
}
```",257,"```javascript
['console.assert(swap_numbers(10, 20)[0] === 20 && swap_numbers(10, 20)[1] === 10)', 'console.assert(swap_numbers(15, 17)[0] === 17 && swap_numbers(15, 17)[1] === 15)', 'console.assert(swap_numbers(100, 200)[0] === 200 && swap_numbers(100, 200)[1] === 100)'];
```"
257, this function to find number of odd elements in the given list using lambda function.,"```javascript
function countOdd(arrayNums) {
    const countOdd = arrayNums.filter(x => x % 2 !== 0).length;
    return countOdd;
}
```",258,"```javascript
console.assert(count_odd([1, 2, 3, 5, 7, 8, 10]) === 4);
console.assert(count_odd([10, 15, 14, 13, -18, 12, -20]) === 2);
console.assert(count_odd([1, 2, 4, 8, 9]) === 2);
```"
258, this function to maximize the given two tuples.,"```javascript
function maximizeElements(testTup1, testTup2) {
    let res = testTup1.map((tup1, index) => 
        tup1.map((a, i) => Math.max(a, testTup2[index][i]))
    );
    return res;
}
```",259,"```javascript
['console.assert(JSON.stringify(maximize_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[6, 7], [4, 9], [2, 9], [7, 10]]);', 'console.assert(JSON.stringify(maximize_elements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[7, 8], [5, 10], [3, 10], [8, 11]]);', 'console.assert(JSON.stringify(maximize_elements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[8, 9], [6, 11], [4, 11], [9, 12]]);']
```"
259, this function to find the nth newman–shanks–williams prime number.,"```javascript
function newmanPrime(n) {
    if (n === 0 || n === 1) {
        return 1;
    }
    return 2 * newmanPrime(n - 1) + newmanPrime(n - 2);
}
```",260,"```javascript
['console.assert(newman_prime(3) === 7)', 'console.assert(newman_prime(4) === 17)', 'console.assert(newman_prime(5) === 41)'];
```"
260, this function to perform mathematical division operation across the given tuples.,"```javascript
function divisionElements(testTup1, testTup2) {
    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));
    return res;
}
```",261,"```javascript
console.assert(JSON.stringify(division_elements([10, 4, 6, 9], [5, 2, 3, 3])) === JSON.stringify([2, 2, 2, 3]));
console.assert(JSON.stringify(division_elements([12, 6, 8, 16], [6, 3, 4, 4])) === JSON.stringify([2, 2, 2, 4]));
console.assert(JSON.stringify(division_elements([20, 14, 36, 18], [5, 7, 6, 9])) === JSON.stringify([4, 2, 6, 2]));
```"
261, this function to split a given list into two parts where the length of the first part of the list is given.,"```javascript
function splitTwoParts(list1, L) {
    return [list1.slice(0, L), list1.slice(L)];
}
```",262,"```javascript
['console.assert(split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3).toString() === ([1, 1, 2].toString() + ',' + [3, 4, 4, 5, 1].toString()))', ""console.assert(split_two_parts(['a', 'b', 'c', 'd'], 2).toString() === (['a', 'b'].toString() + ',' + ['c', 'd'].toString()))"", ""console.assert(split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4).toString() === (['p', 'y', 't', 'h'].toString() + ',' + ['o', 'n'].toString()))""]
```"
262, this function to merge two dictionaries.,"```javascript
function mergeDict(d1, d2) {
    let d = Object.assign({}, d1);
    Object.assign(d, d2);
    return d;
}
```",263,"```javascript
[""console.assert(JSON.stringify(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})) === JSON.stringify({'x': 300, 'y': 200, 'a': 100, 'b': 200}));"", ""console.assert(JSON.stringify(merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})) === JSON.stringify({'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}));"", ""console.assert(JSON.stringify(merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})) === JSON.stringify({'x': 30, 'y': 40, 'a': 10, 'b': 20}));""]
```"
263, this function to calculate a dog's age in dog's years.,"```javascript
function dogAge(h_age) {
    if (h_age < 0) {
        exit();
    } else if (h_age <= 2) {
        var d_age = h_age * 10.5;
    } else {
        var d_age = 21 + (h_age - 2) * 4;
    }
    return d_age;
}
```",264,"```javascript
['console.assert(dog_age(12) === 61)', 'console.assert(dog_age(15) === 73)', 'console.assert(dog_age(24) === 109)']
```"
264, this function to split a list for every nth element.,"```javascript
function listSplit(S, step) {
    return Array.from({ length: step }, (_, i) => S.slice(i, S.length).filter((_, index) => index % step === i));
}
```",265,"```javascript
[""console.assert(JSON.stringify(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)) === JSON.stringify([['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]));"", 
""console.assert(JSON.stringify(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)) === JSON.stringify([[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]));"", 
""console.assert(JSON.stringify(list_split([' ', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)) === JSON.stringify([[' ', 'C', 'DBMS'], ['java', 'C++', 'SQL']]));""]
```"
265, this function to find the lateral surface area of a cube.,"```javascript
function lateralsurface_cube(l) {
  const LSA = 4 * (l * l);
  return LSA;
}
```",266,"```javascript
['console.assert(lateralsurface_cube(5) === 100)', 'console.assert(lateralsurface_cube(9) === 324)', 'console.assert(lateralsurface_cube(10) === 400)']
```"
266, this   function to find the sum of squares of first n odd natural numbers.,"```javascript
function square_Sum(n) {
    return Math.floor(n * (4 * n * n - 1) / 3);
}
```",267,"```javascript
['console.assert(square_Sum(2) === 10)', 'console.assert(square_Sum(3) === 35)', 'console.assert(square_Sum(4) === 84)']
```"
267, this function to find the n'th star number.,"```javascript
function findStarNum(n) { 
    return (6 * n * (n - 1) + 1); 
}
```",268,"```javascript
['console.assert(find_star_num(3) === 37)', 'console.assert(find_star_num(4) === 73)', 'console.assert(find_star_num(5) === 121)']
```"
268, this function to find the ascii value of a character.,"```javascript
function ascii_value(k) {
  let ch = k;
  return ch.charCodeAt(0);
}
```",269,"```javascript
[""console.assert(ascii_value('A') === 65)"", ""console.assert(ascii_value('R') === 82)"", ""console.assert(ascii_value('S') === 83)""]
```"
269, this   function to find the sum of even numbers at even positions.,"```javascript
function sumEvenAndEvenIndex(arr, n) {  
    let sum = 0;  
    for (let i = 0; i < n; i += 2) {  
        if (arr[i] % 2 === 0) {  
            sum += arr[i];  
        }  
    }  
    return sum;  
}
```",270,"```javascript
['console.assert(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6) === 30)', 'console.assert(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10) === 26)', 'console.assert(sum_even_and_even_index([5, 6, 12, 1], 4) === 12)']
```"
270, this   function to find the sum of fifth power of first n even natural numbers.,"```javascript
function evenPowerSum(n) { 
    let sum = 0; 
    for (let i = 1; i <= n; i++) { 
        let j = 2 * i; 
        sum += (j * j * j * j * j); 
    } 
    return sum; 
}
```",271,"```javascript
['console.assert(even_Power_Sum(2) === 1056)', 'console.assert(even_Power_Sum(3) === 8832)', 'console.assert(even_Power_Sum(1) === 32)']
```"
271, this function to perfom the rear element extraction from list of tuples records.,"```javascript
function rearExtract(testList) {
    let res = testList.map(lis => lis[lis.length - 1]);
    return res;
}
```",272,"```javascript
console.assert(rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) === [21, 20, 19]);
console.assert(rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) === [36, 25, 45]);
console.assert(rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) === [14, 36, 56]);
```"
272, this function to substract the contents of one tuple with corresponding index of other tuple.,"```javascript
function subtractElements(test_tup1, test_tup2) {
  const res = test_tup1.map((value, index) => value - test_tup2[index]);
  return res;
}
```",273,"```javascript
['console.assert(substract_elements([10, 4, 5], [2, 5, 18]).toString() === [8, -1, -13].toString())', 'console.assert(substract_elements([11, 2, 3], [24, 45 ,16]).toString() === [-13, -43, -13].toString())', 'console.assert(substract_elements([7, 18, 9], [10, 11, 12]).toString() === [-3, 7, -3].toString())']
```"
273, this   function to find sum of even index binomial coefficients.,"```javascript
function evenBinomialCoeffSum(n) { 
    return 1 << (n - 1); 
}
```",274,"```javascript
['console.assert(even_binomial_Coeff_Sum(4) === 8)', 'console.assert(even_binomial_Coeff_Sum(6) === 32)', 'console.assert(even_binomial_Coeff_Sum(2) === 2)'];
```"
274, this   function to find the position of the last removed element from the given array.,"```javascript
function getPosition(a, n, m) {
    for (let i = 0; i < n; i++) {
        a[i] = Math.floor(a[i] / m) + (a[i] % m !== 0 ? 1 : 0);
    }
    let result = -1, maxx = -1;
    for (let i = n - 1; i >= 0; i--) {
        if (maxx < a[i]) {
            maxx = a[i];
            result = i;
        }
    }
    return [result + 1];
}
```",275,"```javascript
['console.assert(get_Position([2,5,4],3,2) === 2)', 'console.assert(get_Position([4,3],2,2) === 2)', 'console.assert(get_Position([1,2,3,4],4,1) === 4)']
```"
275, this function to find the volume of a cylinder.,"```javascript
function volumeCylinder(r, h) {
  let volume = 3.1415 * r * r * h;
  return volume;
}
```",276,"```javascript
['console.assert(volume_cylinder(10, 5) === 1570.7500000000002)', 'console.assert(volume_cylinder(4, 5) === 251.32000000000002)', 'console.assert(volume_cylinder(4, 10) === 502.64000000000004)']
```"
276, this function to filter a dictionary based on values.,"```javascript
function dictFilter(dict, n) {
    let result = {};
    for (let [key, value] of Object.entries(dict)) {
        if (value >= n) {
            result[key] = value;
        }
    }
    return result;
}
```",277,"```javascript
[""console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)) === JSON.stringify({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190})"", ""console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)) === JSON.stringify({'Alden Cantrell': 180, 'Pierre Cox': 190})"", ""console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)) === JSON.stringify({'Pierre Cox': 190})""]
```"
277, this function to find the element count that occurs before the record in the given tuple.,"```javascript
function countFirstElements(testTup) {
    for (let count = 0; count < testTup.length; count++) {
        const ele = testTup[count];
        if (Array.isArray(ele)) {
            break;
        }
    }
    return count;
}
```",278,"```javascript
['console.assert(count_first_elements([1, 5, 7, [4, 6], 10]) === 3)', 'console.assert(count_first_elements([2, 9, [5, 7], 11]) === 2)', 'console.assert(count_first_elements([11, 15, 5, 8, [2, 3], 8]) === 4)']
```"
278, this function to find the nth decagonal number.,"```javascript
function isNumDecagonal(n) {
    return 4 * n * n - 3 * n;
}
```",279,"```javascript
console.assert(is_num_decagonal(3) === 27);
console.assert(is_num_decagonal(7) === 175);
console.assert(is_num_decagonal(10) === 370);
```"
279, this function to search an element in the given array by using sequential search.,"```javascript
function sequentialSearch(dlist, item) {
    let pos = 0;
    let found = false;
    while (pos < dlist.length && !found) {
        if (dlist[pos] === item) {
            found = true;
        } else {
            pos = pos + 1;
        }
    }
    return [found, pos];
}
```",280,"```javascript
['console.assert(sequential_search([11,23,58,31,56,77,43,12,65,19],31)[0] === true && sequential_search([11,23,58,31,56,77,43,12,65,19],31)[1] === 3)', 'console.assert(sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)[0] === true && sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)[1] === 7)', 'console.assert(sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)[0] === true && sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)[1] === 6)']
```"
280, this   function to check if the elements of a given list are unique or not.,"```javascript
function allUnique(testList) {
    return testList.length === new Set(testList).size;
}
```",281,"```javascript
['console.assert(allUnique([1,2,3]) === true)', 'console.assert(allUnique([1,2,1,2]) === false)', 'console.assert(allUnique([1,2,3,4,5]) === true)']
```"
281, this function to substaract two lists using map and lambda function.,"```javascript
function subList(nums1, nums2) {
  const result = nums1.map((x, index) => x - nums2[index]);
  return result;
}
```",282,"```javascript
['console.assert(JSON.stringify(sub_list([1, 2, 3],[4,5,6])) === JSON.stringify([-3,-3,-3])', 'console.assert(JSON.stringify(sub_list([1,2],[3,4])) === JSON.stringify([-2,-2])', 'console.assert(JSON.stringify(sub_list([90,120],[50,70])) === JSON.stringify([40,50])']
```"
282, this   function to check whether the frequency of each digit is less than or equal to the digit itself.,"```javascript
function validate(n) {
    for (let i = 0; i < 10; i++) {
        let temp = n;
        let count = 0;
        while (temp) {
            if (temp % 10 === i) {
                count++;
            }
            if (count > i) {
                return false;
            }
            temp = Math.floor(temp / 10);
        }
    }
    return true;
}
```",283,"```javascript
['console.assert(validate(1234) === true)', 'console.assert(validate(51241) === false)', 'console.assert(validate(321) === true)'];
```"
283, this function to check whether all items of a list are equal to a given string.,"```javascript
function checkElement(list, element) {
  const checkElement = list.every(v => v === element);
  return checkElement;
}
```",284,"```javascript
['console.assert(check_element([""green"", ""orange"", ""black"", ""white""], ""blue"") === false)', 'console.assert(check_element([1, 2, 3, 4], 7) === false)', 'console.assert(check_element([""green"", ""green"", ""green"", ""green""], ""green"") === true)']
```"
284, this function that matches a string that has an a followed by two to three 'b'.,"```javascript
function textMatchTwoThree(text) {
    const patterns = /ab{2,3}/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",285,"```javascript
['console.assert(text_match_two_three(""ac"") === ""Not matched!"")', 'console.assert(text_match_two_three(""dc"") === ""Not matched!"")', 'console.assert(text_match_two_three(""abbbba"") === ""Found a match!"")']
```"
285, this function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"```javascript
function maxSubArraySumRepeated(a, n, k) { 
    let maxSoFar = -2147483648; 
    let maxEndingHere = 0; 
    for (let i = 0; i < n * k; i++) { 
        maxEndingHere += a[i % n]; 
        if (maxSoFar < maxEndingHere) { 
            maxSoFar = maxEndingHere; 
        } 
        if (maxEndingHere < 0) { 
            maxEndingHere = 0; 
        } 
    } 
    return maxSoFar; 
}
```",286,"```javascript
console.assert(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) === 30);
console.assert(max_sub_array_sum_repeated([-1, 10, 20], 3, 2) === 59);
console.assert(max_sub_array_sum_repeated([-1, -2, -3], 3, 3) === -1);
```"
286, this   function to find the sum of squares of first n even natural numbers.,"```javascript
function square_Sum(n) {  
    return Math.floor(2 * n * (n + 1) * (2 * n + 1) / 3);
}
```",287,"```javascript
['console.assert(square_Sum(2) === 20)', 'console.assert(square_Sum(3) === 56)', 'console.assert(square_Sum(4) === 120)'];
```"
287, this function to count array elements having modular inverse under given prime number p equal to itself.,"```javascript
function modular_inverse(arr, N, P) {
    let current_element = 0;
    for (let i = 0; i < N; i++) {
        if ((arr[i] * arr[i]) % P === 1) {
            current_element++;
        }
    }
    return [current_element];
}
```",288,"```javascript
['console.assert(modular_inverse([1, 6, 4, 5], 4, 7) === 2)', 'console.assert(modular_inverse([1, 3, 8, 12, 12], 5, 13) === 3)', 'console.assert(modular_inverse([2, 3, 4, 5], 4, 6) === 1)']
```"
288, this   function to calculate the number of odd days in a given year.,"```javascript
function oddDays(N) {
    const hund1 = Math.floor(N / 100);
    const hund4 = Math.floor(N / 400);
    let leap = Math.floor(N / 4);
    let ordd = N - leap;
    if (hund1) {
        ordd += hund1;
        leap -= hund1;
    }
    if (hund4) {
        ordd -= hund4;
        leap += hund4;
    }
    const days = ordd + leap * 2;
    const odd = days % 7;
    return [odd];
}
```",289,"```javascript
['console.assert(odd_Days(100) === 5)', 'console.assert(odd_Days(50) === 6)', 'console.assert(odd_Days(75) === 2)'];
```"
289, this function to find the list of lists with maximum length.,"```javascript
function max_length(list1) {
    const max_length = Math.max(...list1.map(x => x.length));
    const max_list = list1.reduce((a, b) => a.length > b.length ? a : b);
    return [max_length, max_list];
}
```",290,"```javascript
console.assert(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === (3, [13, 15, 17]));
console.assert(max_length([[1], [5, 7], [10, 12, 14, 15]]) === (4, [10, 12, 14, 15]));
console.assert(max_length([[5], [15, 20, 25]]) === (3, [15, 20, 25]));
```"
290, this function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"```javascript
function countNoOfWays(n, k) {
    const dp = new Array(n + 1).fill(0);
    const total = k;
    const mod = 1000000007;
    dp[1] = k;
    dp[2] = k * k;

    for (let i = 3; i <= n; i++) {
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;
    }
    return [dp[n]];
}
```",291,"```javascript
['console.assert(count_no_of_ways(2, 4) === 16)', 'console.assert(count_no_of_ways(3, 2) === 6)', 'console.assert(count_no_of_ways(4, 4) === 228)']
```"
291, this   function to find quotient of two numbers.,"```javascript
function find(n, m) {
    let q = Math.floor(n / m);
    return q;
}
```",292,"```javascript
assert(find(10, 3) === 3);
assert(find(4, 2) === 2);
assert(find(20, 5) === 4);
```"
292, this function to find the third side of a right angled triangle.,"```javascript
function otherside_rightangle(w, h) {
  let s = Math.sqrt((w * w) + (h * h));
  return s;
}
```",293,"```javascript
['console.assert(otherside_rightangle(7,8) === 10.63014581273465)', 'console.assert(otherside_rightangle(3,4) === 5)', 'console.assert(otherside_rightangle(7,15) === 16.55294535724685']
```"
293, this function to find the maximum value in a given heterogeneous list.,"```javascript
function maxVal(listVal) {
    let maxVal = Math.max(...listVal.filter(i => typeof i === 'number'));
    return maxVal;
}
```",294,"```javascript
[""console.assert(max_val([' ', 3, 2, 4, 5, 'version']) === 5)"", ""console.assert(max_val([' ', 15, 20, 25]) === 25)"", ""console.assert(max_val([' ', 30, 20, 40, 50, 'version']) === 50)""]
```"
294, this function to return the sum of all divisors of a number.,"```javascript
function sumDiv(number) {
    let divisors = [1];
    for (let i = 2; i < number; i++) {
        if (number % i === 0) {
            divisors.push(i);
        }
    }
    return divisors.reduce((a, b) => a + b, 0);
}
```",295,"```javascript
['console.assert(sum_div(8) === 7)', 'console.assert(sum_div(12) === 16)', 'console.assert(sum_div(7) === 1)']
```"
295, this   function to count inversions in an array.,"```javascript
function get_Inv_Count(arr, n) { 
    let inv_count = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] > arr[j]) { 
                inv_count++; 
            } 
        } 
    } 
    return inv_count; 
}
```",296,"```javascript
['console.assert(get_Inv_Count([1,20,6,4,5]) === 5)', 'console.assert(get_Inv_Count([1,2,1],3) === 1)', 'console.assert(get_Inv_Count([1,2,5,6,1],5) === 3)']
```"
296, this function to flatten a given nested list structure.,"```javascript
function flattenList(list1) {
    let resultList = [];
    if (!list1) return resultList;
    let stack = [Array.from(list1)];
  
    while (stack.length) {
        let cNum = stack.pop();
        let next = cNum.pop();
        if (cNum.length) stack.push(cNum);
        if (Array.isArray(next)) {
            if (next.length) stack.push(Array.from(next));
        } else {
            resultList.push(next);
        }
    }
    resultList.reverse();
    return resultList;
}
```",297,"```javascript
['console.assert(flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) === [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])', 'console.assert(flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) === [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])', 'console.assert(flattenList([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) === [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])']
```"
297, this function to find the nested list elements which are present in another list.,"```javascript
function intersectionNestedLists(l1, l2) {
    const result = l2.map(lst => lst.filter(n => l1.includes(n)));
    return result;
}
```",298,"```javascript
assert(intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) === [[12], [7, 11], [1, 5, 8]]);
assert(intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) === [[], []]);
assert(intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]) === [['john'], ['john'], ['john'], []]);
```"
298, this function to calculate the maximum aggregate from the list of tuples.,"```javascript
function maxAggregate(stdata) {
    const temp = {};
    for (const [name, marks] of stdata) {
        temp[name] = (temp[name] || 0) + marks;
    }
    return Object.entries(temp).reduce((max, curr) => curr[1] > max[1] ? curr : max);
}
```",299,"```javascript
console.assert(JSON.stringify(max_aggregate([['Juan Whelan', 90], ['Sabah Colley', 88], ['Peter Nichols', 7], ['Juan Whelan', 122], ['Sabah Colley', 84]])) === JSON.stringify(['Juan Whelan', 212]));
console.assert(JSON.stringify(max_aggregate([['Juan Whelan', 50], ['Sabah Colley', 48], ['Peter Nichols', 37], ['Juan Whelan', 22], ['Sabah Colley', 14]])) === JSON.stringify(['Juan Whelan', 72]));
console.assert(JSON.stringify(max_aggregate([['Juan Whelan', 10], ['Sabah Colley', 20], ['Peter Nichols', 30], ['Juan Whelan', 40], ['Sabah Colley', 50]])) === JSON.stringify(['Sabah Colley', 70]));
```"
299, this function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"```javascript
function countBinarySeq(n) {
    let nCr = 1;
    let res = 1;
    for (let r = 1; r <= n; r++) {
        nCr = (nCr * (n + 1 - r)) / r;
        res += nCr * nCr;
    }
    return res;
}
```",300,"```javascript
['console.assert(count_binary_seq(1) === 2.0)', 'console.assert(count_binary_seq(2) === 6.0)', 'console.assert(count_binary_seq(3) === 20.0)'];
```"
300, this function to find the depth of a dictionary.,"```javascript
function dictDepth(d) {
    if (typeof d === 'object' && d !== null && !Array.isArray(d)) {
        return 1 + (Object.keys(d).length > 0 ? Math.max(...Object.values(d).map(dictDepth)) : 0);
    }
    return 0;
}
```",301,"```javascript
[""console.assert(dict_depth({'a':1, 'b': {'c': {'d': {}}}}) === 4)"", ""console.assert(dict_depth({'a':1, 'b': {'c':' '}}) === 2)"", ""console.assert(dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) === 3)""]
```"
301, this   function to find the most significant bit number which is also a set bit.,"```javascript
function set_Bit_Number(n) {
    if (n === 0) {
        return 0;
    }
    let msb = 0;
    n = Math.floor(n / 2);
    while (n > 0) {
        n = Math.floor(n / 2);
        msb += 1;
    }
    return (1 << msb);
}
```",302,"```javascript
['console.assert(set_Bit_Number(6) === 4)', 'console.assert(set_Bit_Number(10) === 8)', 'console.assert(set_Bit_Number(18) === 16)'];
```"
302, this   function to check whether the count of inversion of two types are same or not.,"```javascript
function solve(a, n) {   
    let mx = -Infinity;
    for (let j = 1; j < n; j++) {  
        if (mx > a[j]) {  
            return false;  
        }  
        mx = Math.max(mx, a[j - 1]);    
    }  
    return true; 
}
```",303,"```javascript
['console.assert(solve([1,0,2],3) === true)', 'console.assert(solve([1,2,0],3) === false)', 'console.assert(solve([1,2,1],3) === true)']
```"
303, this   function to find element at a given index after number of rotations.,"```javascript
function find_Element(arr, ranges, rotations, index) {  
    for (let i = rotations - 1; i >= 0; i--) { 
        let left = ranges[i][0]; 
        let right = ranges[i][1]; 
        if (left <= index && right >= index) { 
            if (index === left) { 
                index = right; 
            } else { 
                index = index - 1; 
            } 
        } 
    } 
    return arr[index]; 
}
```",304,"```javascript
['console.assert(find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) === 3)', 
 'console.assert(find_Element([1,2,3,4],[[0,1],[0,2]],1,2) === 3)', 
 'console.assert(find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) === 1)']
```"
304, this function to match two words from a list of words starting with letter 'p'.,"```javascript
function startWithP(words) {
    for (let w of words) {
        let m = w.match(/(P\w+)\W(P\w+)/);
        if (m) {
            return [m[1], m[2]];
        }
    }
}
```",305,"```javascript
['console.assert(start_withp([""  PHP"", ""Java JavaScript""]) === ("" "", ""PHP""))', 'console.assert(start_withp([""  Programming"", ""Java Programming""]) === ("" "", ""Programming""))', 'console.assert(start_withp([""Pqrst Pqr"", ""qrstuv""]) === (""Pqrst"", ""Pqr""))']
```"
305," this function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","```javascript
function maxSumIncreasingSubseq(a, n, index, k) {
    let dp = Array.from({ length: n }, () => Array(n).fill(0));
    for (let i = 0; i < n; i++) {
        if (a[i] > a[0]) {
            dp[0][i] = a[i] + a[0];
        } else {
            dp[0][i] = a[i];
        }
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (a[j] > a[i] && j > i) {
                if (dp[i - 1][i] + a[j] > dp[i - 1][j]) {
                    dp[i][j] = dp[i - 1][i] + a[j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    return [dp[index][k]];
}
```",306,"```javascript
console.assert(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) === 11);
console.assert(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) === 7);
console.assert(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) === 71);
```"
306, this function to get a colon of a tuple.,"```javascript
function colonTuplex(tuplex, m, n) {
  let tuplexColon = JSON.parse(JSON.stringify(tuplex));
  tuplexColon[m].push(n);
  return tuplexColon;
}
```",307,"```javascript
['console.assert(colon_tuplex([""HELLO"", 5, [], true], 2, 50) === [""HELLO"", 5, [50], true]);', 'console.assert(colon_tuplex([""HELLO"", 5, [], true], 2, 100) === [""HELLO"", 5, [100], true]);', 'console.assert(colon_tuplex([""HELLO"", 5, [], true], 2, 500) === [""HELLO"", 5, [500], true]);']
```"
307, this function to find the specified number of largest products from two given lists.,"```javascript
function largeProduct(nums1, nums2, N) {
    const result = [...nums1.flatMap(x => nums2.map(y => x * y))].sort((a, b) => b - a).slice(0, N);
    return result;
}
```",308,"```javascript
['console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)) === JSON.stringify([60, 54, 50])', 
 'console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)) === JSON.stringify([60, 54, 50, 48])', 
 'console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)) === JSON.stringify([60, 54, 50, 48, 45])'];
```"
308, this   function to find the maximum of two numbers.,"```javascript
function maximum(a, b) {
    if (a >= b) {
        return a;
    } else {
        return b;
    }
}
```",309,"```javascript
['console.assert(maximum(5,10) === 10)', 'console.assert(maximum(-1,-2) === -1)', 'console.assert(maximum(9,7) === 9)']
```"
309, this function to convert a given string to a tuple.,"```javascript
function stringToTuple(str1) {
    let result = Array.from(str1).filter(x => !x.isspace());
    return [result];
}
```",310,"```javascript
console.assert(string_to_tuple(""  3.0"") === ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'));
console.assert(string_to_tuple(""item1"") === ('i', 't', 'e', 'm', '1'));
console.assert(string_to_tuple(""15.10"") === ('1', '5', '.', '1', '0'));
```"
310, this   function to set the left most unset bit.,"```javascript
function setLeftMostUnsetBit(n) {
    if (!(n & (n + 1))) {
        return n;
    }
    let pos = 0, temp = n, count = 0;
    while (temp) {
        if (!(temp & 1)) {
            pos = count;
        }
        count += 1; 
        temp >>= 1;
    }
    return (n | (1 << pos));
}
```",311,"```javascript
console.assert(set_left_most_unset_bit(10) === 14);
console.assert(set_left_most_unset_bit(12) === 14);
console.assert(set_left_most_unset_bit(15) === 15);
```"
311, this function to find the volume of a cone.,"```javascript
function volumeCone(r, h) {
  var volume = (1.0 / 3) * Math.PI * r * r * h;
  return volume;
}
```",312,"```javascript
['console.assert(volume_cone(5,12) === 314.15926535897927)', 'console.assert(volume_cone(10,15) === 1570.7963267948965)', 'console.assert(volume_cone(19,17) === 6426.651371693521']
```"
312, this   function to print positive numbers in a list.,"```javascript
function pos_nos(list1) {
  for (let num of list1) {
    if (num >= 0) {
      return num;
    }
  }
}
```",313,"```javascript
['console.assert(JSON.stringify(pos_nos([-1,-2,1,2])) === JSON.stringify([1,2]), ""Test case failed"")', 'console.assert(JSON.stringify(pos_nos([3,4,-5])) === JSON.stringify([3,4]), ""Test case failed"")', 'console.assert(JSON.stringify(pos_nos([-2,-3,1])) === JSON.stringify([1]), ""Test case failed"")']
```"
313, this function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"```javascript
function maxSumRectangularGrid(grid, n) {
    let incl = Math.max(grid[0][0], grid[1][0]);
    let excl = 0;
    for (let i = 1; i < n; i++) {
        let excl_new = Math.max(excl, incl);
        incl = excl + Math.max(grid[0][i], grid[1][i]);
        excl = excl_new;
    }
    return Math.max(excl, incl);
}
```",314,"```javascript
console.assert(max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3) === 7);
console.assert(max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5) === 24);
console.assert(max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5) === 81);
```"
314, this   function to find the first maximum length of even word.,"```javascript
function find_Max_Len_Even(str) {
    let n = str.length;
    let i = 0;
    let currlen = 0;
    let maxlen = 0;
    let st = -1;

    while (i < n) {
        if (str[i] === ' ') {
            if (currlen % 2 === 0) {
                if (maxlen < currlen) {
                    maxlen = currlen;
                    st = i - currlen;
                }
            }
            currlen = 0;
        } else {
            currlen += 1;
        }
        i += 1;
    }

    if (currlen % 2 === 0) {
        if (maxlen < currlen) {
            maxlen = currlen;
            st = i - currlen;
        }
    }

    if (st === -1) {
        return ""-1"";
    }
    return str.substring(st, st + maxlen);
}
```",315,"```javascript
['console.assert(find_Max_Len_Even(""  language"") === ""language"")', 'console.assert(find_Max_Len_Even(""maximum even length"") === ""length"")', 'console.assert(find_Max_Len_Even(""eve"") === ""-1"")']
```"
315, this function to find the index of the last occurrence of a given number in a sorted array.,"```javascript
function findLastOccurrence(A, x) {
    let left = 0, right = A.length - 1;
    let result = -1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (x === A[mid]) {
            result = mid;
            left = mid + 1;
        } else if (x < A[mid]) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}
```",316,"```javascript
['console.assert(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 3)', 'console.assert(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) === 9)', 'console.assert(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) === 6)']
```"
316, this function to reflect the modified run-length encoding from a list.,"```javascript
function modifiedEncode(alist) {
    function ctrEle(el) {
        if (el.length > 1) return [el.length, el[0]];
        else return el[0];
    }

    const grouped = [];
    let currentKey = null;
    let currentGroup = [];

    alist.forEach((item) => {
        if (item !== currentKey) {
            if (currentGroup.length > 0) {
                grouped.push(ctrEle(currentGroup));
            }
            currentKey = item;
            currentGroup = [item];
        } else {
            currentGroup.push(item);
        }
    });

    if (currentGroup.length > 0) {
        grouped.push(ctrEle(currentGroup));
    }

    return grouped;
}
```",317,"```javascript
['console.assert(modified_encode([1, 1, 2, 3, 4, 4, 5, 1]).toString() === [[2, 1], 2, 3, [2, 4], 5, 1].toString())', 'console.assert(modified_encode(""automatically"").toString() === [""a"", ""u"", ""t"", ""o"", ""m"", ""a"", ""t"", ""i"", ""c"", ""a"", [2, ""l""], ""y""].toString())', 'console.assert(modified_encode("" "").toString() === [""p"", ""y"", ""t"", ""h"", ""o"", ""n""].toString())']
```"
317, this   function to find the maximum volume of a cuboid with given sum of sides.,"```javascript
function maxVolume(s) {
    let maxvalue = 0;
    for (let i = 1; i < s - 1; i++) {
        for (let j = 1; j < s; j++) {
            let k = s - i - j;
            maxvalue = Math.max(maxvalue, i * j * k);
        }
    }
    return maxvalue;
}
```",318,"```javascript
['console.assert(max_volume(8) === 18)', 'console.assert(max_volume(4) === 2)', 'console.assert(max_volume(1) === 0)']
```"
318, this function to find all five characters long word in the given string by using regex.,"```javascript
function findLongWord(text) {
  return text.match(/\b\w{5}\b/g);
}
```",319,"```javascript
console.assert(find_long_word('Please move back to strem').toString() === ['strem'].toString());
console.assert(find_long_word('4K Ultra HD streaming player').toString() === ['Ultra'].toString());
console.assert(find_long_word('Streaming Media Player').toString() === ['Media'].toString());
```"
319, this function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"```javascript
function sumDifference(n) {
    let sumOfSquares = 0;
    let squareOfSum = 0;
    for (let num = 1; num <= n; num++) {
        sumOfSquares += num * num;
        squareOfSum += num;
    }
    squareOfSum = squareOfSum ** 2;
    return squareOfSum - sumOfSquares;
}
```",320,"```javascript
['console.assert(sum_difference(12) === 5434)', 'console.assert(sum_difference(20) === 41230)', 'console.assert(sum_difference(54) === 2151270)']
```"
320, this function to find the demlo number for the given number.,"```javascript
function find_demlo(s) {
    let l = s.length;
    let res = """";
    for (let i = 1; i <= l; i++) {
        res += i.toString();
    }
    for (let i = l - 1; i > 0; i--) {
        res += i.toString();
    }
    return res;
}
```",321,"```javascript
['console.assert(find_demlo(""111111"") === ""12345654321"")', 'console.assert(find_demlo(""1111"") === ""1234321"")', 'console.assert(find_demlo(""13333122222"") === ""123456789101110987654321"")']
```"
321, this function to find all index positions of the minimum values in a given list.,"```javascript
function positionMin(list1) {
    const minVal = Math.min(...list1);
    const minResult = list1.map((j, i) => j === minVal ? i : -1).filter(i => i !== -1);
    return [minResult];
}
```",322,"```javascript
['console.assert(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54]).toString() === [3,11].toString())', 
 'console.assert(position_min([1,2,2,2,4,4,4,5,5,5,5]).toString() === [0].toString())', 
 'console.assert(position_min([2,1,5,6,8,3,4,9,10,11,8,12]).toString() === [1].toString())']
```"
322, this function to re-arrange the given array in alternating positive and negative items.,"```javascript
function rightRotate(arr, n, outOfPlace, cur) {
    let temp = arr[cur];
    for (let i = cur; i > outOfPlace; i--) {
        arr[i] = arr[i - 1];
    }
    arr[outOfPlace] = temp;
    return arr;
}

function reArrange(arr, n) {
    let outOfPlace = -1;
    for (let index = 0; index < n; index++) {
        if (outOfPlace >= 0) {
            if ((arr[index] >= 0 && arr[outOfPlace] < 0) || (arr[index] < 0 && arr[outOfPlace] >= 0)) {
                arr = rightRotate(arr, n, outOfPlace, index);
                if (index - outOfPlace > 2) {
                    outOfPlace += 2;
                } else {
                    outOfPlace = -1;
                }
            }
        }
        if (outOfPlace === -1) {
            if ((arr[index] >= 0 && index % 2 === 0) || (arr[index] < 0 && index % 2 === 1)) {
                outOfPlace = index;
            }
        }
    }
    return arr;
}
```",323,"```javascript
console.assert(JSON.stringify(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) === JSON.stringify([-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]));
console.assert(JSON.stringify(re_arrange([1, 2, 3, -4, -1, 4], 6)) === JSON.stringify([-4, 1, -1, 2, 3, 4]));
console.assert(JSON.stringify(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)) === JSON.stringify([-4, 4, -3, 7, -9, 9, 77, 5]));
```"
323, this function to extract the sum of alternate chains of tuples.,"```javascript
function sumOfAlternates(testTuple) {
    let sum1 = 0;
    let sum2 = 0;
    for (let idx = 0; idx < testTuple.length; idx++) {
        let ele = testTuple[idx];
        if (idx % 2) {
            sum1 += ele;
        } else {
            sum2 += ele;
        }
    }
    return [[sum1], [sum2]];
}
```",324,"```javascript
console.assert(sum_of_alternates([5, 6, 3, 6, 10, 34]) === [46, 18]);
console.assert(sum_of_alternates([1, 2, 3, 4, 5]) === [6, 9]);
console.assert(sum_of_alternates([6, 7, 8, 9, 4, 5]) === [21, 18]);
```"
324, this   function to find the minimum number of squares whose sum is equal to a given number.,"```javascript
function getMinSquares(n) {
    if (n <= 3) {
        return n;
    }
    let res = n;
    for (let x = 1; x <= n; x++) {
        let temp = x * x;
        if (temp > n) {
            break;
        } else {
            res = Math.min(res, 1 + getMinSquares(n - temp));
        }
    }
    return res;
}
```",325,"```javascript
['console.assert(get_Min_Squares(6) === 3)', 'console.assert(get_Min_Squares(2) === 2)', 'console.assert(get_Min_Squares(4) === 1)']
```"
325, this function to get the word with most number of occurrences in the given strings list.,"```javascript
function mostOccurrences(testList) {
  const temp = {};
  for (const sub of testList) {
    for (const wrd of sub.split("" "")) {
      temp[wrd] = (temp[wrd] || 0) + 1;
    }
  }
  const res = Object.keys(temp).reduce((a, b) => (temp[a] > temp[b] ? a : b));
  return [String(res)];
}
```",326,"```javascript
['console.assert(most_occurrences([""UTS is best for RTF"", ""RTF love UTS""]) === ""UTS"")', 'console.assert(most_occurrences([""Its been a great year"", ""this year is so worse"", ""this year is okay""]) === ""year"")', 'console.assert(most_occurrences([""Families can be reunited"", ""people can be reunited"", ""Tasks can be achieved ""]) === ""can"")']
```"
326, this function to print check if the triangle is isosceles or not.,"```javascript
function checkIsosceles(x, y, z) {
  if (x === y || y === z || z === x) {
    return true;
  } else {
    return false;
  }
}
```",327,"```javascript
['console.assert(check_isosceles(6, 8, 12) === false)', 'console.assert(check_isosceles(6, 6, 12) === true)', 'console.assert(check_isosceles(6, 16, 20) === false)']
```"
327, this function to rotate a given list by specified number of items to the left direction.,"```javascript
function rotateLeft(list1, m, n) {
  let result = list1.slice(m).concat(list1.slice(0, n));
  return result;
}
```",328,"```javascript
['console.assert(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4).toString() === [4, 5, 6, 7, 8, 9, 10, 1, 2, 3].toString())', 
 'console.assert(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2).toString() === [3, 4, 5, 6, 7, 8, 9, 10, 1, 2].toString())', 
 'console.assert(rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2).toString() === [6, 7, 8, 9, 10, 1, 2].toString())']
```"
328, this   function to count negative numbers in a list.,"```javascript
function negCount(arr) {
  let negCount = 0;
  for (let num of arr) {
    if (num <= 0) {
      negCount += 1;
    }
  }
  return negCount;
}
```",329,"```javascript
console.assert(neg_count([-1, -2, 3, -4, -5]) === 4);
console.assert(neg_count([1, 2, 3]) === 0);
console.assert(neg_count([1, 2, -3, -10, 20]) === 2);
```"
329," this function to find all three, four, five characters long words in the given string by using regex.","```javascript
function findChar(text) {
  return text.match(/\b\w{3,5}\b/g);
}
```",330,"```javascript
[""console.assert(findChar('For the four consumer complaints contact manager AKR reddy').toString() === ['For', 'the', 'four', 'AKR', 'reddy'].toString())"", ""console.assert(findChar('Certain service are subject to change MSR').toString() === ['are', 'MSR'].toString())"", ""console.assert(findChar('Third party legal desclaimers').toString() === ['Third', 'party', 'legal'].toString())""]
```"
330, this   function to count unset bits of a given number.,"```javascript
function countUnsetBits(n) { 
    let count = 0; 
    let x = 1; 
    while (x < n + 1) { 
        if ((x & n) === 0) { 
            count++; 
        } 
        x = x << 1; 
    } 
    return count; 
}
```",331,"```javascript
['console.assert(count_unset_bits(2) === 1)', 'console.assert(count_unset_bits(4) === 2)', 'console.assert(count_unset_bits(6) === 1)']
```"
331, this function to count character frequency of a given string.,"```javascript
function charFrequency(str1) {
    let dict = {};
    for (let n of str1) {
        if (n in dict) {
            dict[n] += 1;
        } else {
            dict[n] = 1;
        }
    }
    return dict;
}
```",332,"```javascript
[""console.assert(char_frequency(' ').toString() === {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}.toString())"", ""console.assert(char_frequency('program').toString() === {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}.toString())"", ""console.assert(char_frequency('language').toString() === {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}.toString())""]
```"
332, this   function to sort a list according to the second element in sublist.,"```javascript
function Sort(sub_li) {
    sub_li.sort((a, b) => a[1] - b[1]);
    return sub_li;
}
```",333,"```javascript
[""console.assert(JSON.stringify(Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])) === JSON.stringify([['b', 5], ['a', 10], ['d', 15], ['c', 20]]);"", ""console.assert(JSON.stringify(Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])) === JSON.stringify([['256', 5], ['452', 10], ['135', 15], ['100', 20]]);"", ""console.assert(JSON.stringify(Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])) === JSON.stringify([['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]);""]
```"
333, this   function to check whether the triangle is valid or not if sides are given.,"```javascript
function check_Validity(a, b, c) {  
    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { 
        return false;
    } else { 
        return true; 
    }
}
```",334,"```javascript
['console.assert(check_Validity(1, 2, 3) === false)', 'console.assert(check_Validity(2, 3, 5) === false)', 'console.assert(check_Validity(7, 10, 5) === true)'];
```"
334, this function to find the sum of arithmetic progression.,"```javascript
function ap_sum(a, n, d) {
  let total = (n * (2 * a + (n - 1) * d)) / 2;
  return total;
}
```",335,"```javascript
['console.assert(ap_sum(1,5,2) === 25)', 'console.assert(ap_sum(2,6,4) === 72)', 'console.assert(ap_sum(1,4,5) === 34)']
```"
335, this function to check whether the given month name contains 28 days or not.,"```javascript
function checkMonthNum(monthname1) {
  if (monthname1 === ""February"") {
    return true;
  } else {
    return false;
  }
}
```",336,"```javascript
['console.assert(check_monthnum(""February"") === true)', 'console.assert(check_monthnum(""January"") === false)', 'console.assert(check_monthnum(""March"") === false)']
```"
336," this function that matches a word at the end of a string, with optional punctuation.","```javascript
function textMatchWord(text) {
    const patterns = /\w+\S*$/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",337,"```javascript
['console.assert(text_match_word("" ."") === ""Found a match!"")', 'console.assert(text_match_word("" ."") === ""Found a match!"")', 'console.assert(text_match_word(""  lang  ."") === ""Not matched!"")']
```"
337, this   function to count the number of substrings with same first and last characters.,"```javascript
function check_Equality(s) { 
    return (s.charCodeAt(0) === s.charCodeAt(s.length - 1)); 
}

function count_Substring_With_Equal_Ends(s) { 
    let result = 0; 
    const n = s.length; 
    for (let i = 0; i < n; i++) {
        for (let j = 1; j <= n - i; j++) { 
            if (check_Equality(s.substring(i, i + j))) { 
                result++; 
            } 
        } 
    } 
    return result; 
}
```",338,"```javascript
[""console.assert(count_Substring_With_Equal_Ends('aba') === 4)"", ""console.assert(count_Substring_With_Equal_Ends('abcab') === 7)"", ""console.assert(count_Substring_With_Equal_Ends('abc') === 3)""]
```"
338, this   function to find the maximum occuring divisor in an interval.,"```javascript
function find_Divisor(x, y) {
    if (x === y) {
        return y;
    }
    return 2;
}
```",339,"```javascript
['console.assert(find_Divisor(2, 2) === 2)', 'console.assert(find_Divisor(2, 5) === 2)', 'console.assert(find_Divisor(5, 10) === 2)']
```"
339, this   function to find the sum of the three lowest positive numbers from a given list of numbers.,"```javascript
function sumThreeSmallestNums(lst) {
    return sorted(lst.filter(x => x > 0)).slice(0, 3).reduce((a, b) => a + b, 0);
}

function sorted(arr) {
    return arr.sort((a, b) => a - b);
}
```",340,"```javascript
['console.assert(sumThreeSmallestNums([10,20,30,40,50,60,7]) === 37)', 'console.assert(sumThreeSmallestNums([1,2,3,4,5]) === 6)', 'console.assert(sumThreeSmallestNums([0,1,2,3,4,5]) === 6)']
```"
340, this function to convert the given set into ordered tuples.,"```javascript
function setToTuple(s) {
  const t = Array.from(s).sort();
  return [t];
}
```",341,"```javascript
['console.assert(JSON.stringify(setToTuple(new Set([1, 2, 3, 4, 5]))) === JSON.stringify([1, 2, 3, 4, 5])', 'console.assert(JSON.stringify(setToTuple(new Set([6, 7, 8, 9, 10, 11]))) === JSON.stringify([6, 7, 8, 9, 10, 11])', 'console.assert(JSON.stringify(setToTuple(new Set([12, 13, 14, 15, 16]))) === JSON.stringify([12, 13, 14, 15, 16])']
```"
341, this function to find the smallest range that includes at-least one element from each of the given arrays.,"```javascript
class Node {
    constructor(value, listNum, index) {
        this.value = value;
        this.listNum = listNum;
        this.index = index;
    }
}

function findMinimumRange(lists) {
    let high = -Infinity;
    let p = [0, Infinity];
    let pq = [];

    for (let i = 0; i < lists.length; i++) {
        pq.push(new Node(lists[i][0], i, 0));
        high = Math.max(high, lists[i][0]);
    }

    while (true) {
        pq.sort((a, b) => a.value - b.value);
        let top = pq.shift();
        let low = top.value;
        let i = top.listNum;
        let j = top.index;

        if (high - low < p[1] - p[0]) {
            p = [low, high];
        }

        if (j === lists[i].length - 1) {
            return p;
        }

        pq.push(new Node(lists[i][j + 1], i, j + 1));
        high = Math.max(high, lists[i][j + 1]);
    }
}
```",342,"```javascript
['console.assert(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6));', 
 'console.assert(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7));', 
 'console.assert(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7));']
```"
342, this function to calculate the number of digits and letters in a string.,"```javascript
function dig_let(s) {
    let d = 0;
    let l = 0;
    for (let c of s) {
        if (/\d/.test(c)) {
            d++;
        } else if (/[a-zA-Z]/.test(c)) {
            l++;
        } else {
            continue;
        }
    }
    return [l, d];
}
```",343,"```javascript
['console.assert(dig_let("" "") === [6, 0])', 'console.assert(dig_let(""program"") === [7, 0])', 'console.assert(dig_let("" 3.0"") === [6, 2])']
```"
343, this   function to find number of elements with odd factors in a given range.,"```javascript
function count_Odd_Squares(n, m) {
    return Math.floor(Math.sqrt(m)) - Math.floor(Math.sqrt(n - 1));
}
```",344,"```javascript
['console.assert(count_Odd_Squares(5, 100) === 8)', 'console.assert(count_Odd_Squares(8, 65) === 6)', 'console.assert(count_Odd_Squares(2, 5) === 1)'];
```"
344, this function to find the difference between two consecutive numbers in a given list.,"```javascript
function diffConsecutiveNums(nums) {
    const result = nums.slice(0, nums.length - 1).map((a, i) => nums[i + 1] - a);
    return result;
}
```",345,"```javascript
['console.assert(JSON.stringify(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])) === JSON.stringify([0, 2, 1, 0, 1, 1, 1])', 
 'console.assert(JSON.stringify(diff_consecutivenums([4, 5, 8, 9, 6, 10])) === JSON.stringify([1, 3, 1, -3, 4])', 
 'console.assert(JSON.stringify(diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])) === JSON.stringify([1, 1, 1, 1, 0, 0, 0, 1, 2])']
```"
345," this function to find entringer number e(n, k).","```javascript
function zigzag(n, k) { 
    if (n === 0 && k === 0) { 
        return 1; 
    } 
    if (k === 0) { 
        return 0; 
    } 
    return zigzag(n, k - 1) + zigzag(n - 1, n - k); 
}
```",346,"```javascript
['console.assert(zigzag(4, 3) === 5)', 'console.assert(zigzag(4, 2) === 4)', 'console.assert(zigzag(3, 1) === 1)']
```"
346, this   function to count the number of squares in a rectangle.,"```javascript
function count_Squares(m, n) {
    if (n < m) {
        let temp = m;
        m = n;
        n = temp;
    }
    return (n * (n + 1) * (3 * m - n + 1)) / 6;
}
```",347,"```javascript
['console.assert(count_Squares(4,3) === 20)', 'console.assert(count_Squares(1,2) === 2)', 'console.assert(count_Squares(2,2) === 5)'];
```"
347, this function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"```javascript
function bin_coff(n, r) { 
    let val = 1; 
    if (r > (n - r)) { 
        r = (n - r); 
    } 
    for (let i = 0; i < r; i++) { 
        val *= (n - i); 
        val = Math.floor(val / (i + 1)); 
    } 
    return val; 
} 

function find_ways(M) { 
    let n = Math.floor(M / 2); 
    let a = bin_coff(2 * n, n); 
    let b = Math.floor(a / (n + 1)); 
    return b; 
}
```",348,"```javascript
['console.assert(find_ways(4) === 2)', 'console.assert(find_ways(6) === 5)', 'console.assert(find_ways(8) === 14)']
```"
348, this   function to check whether the given string is a binary string or not.,"```javascript
function check(string) {
    let p = new Set(string);
    let s = new Set(['0', '1']);
    if (s.size === p.size && [...s].every(value => p.has(value)) || p.size === 1 && (p.has('0') || p.has('1'))) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}
```",349,"```javascript
['console.assert(check(""01010101010"") === ""Yes"")', 'console.assert(check(""name0"") === ""No"")', 'console.assert(check(""101"") === ""Yes"")']
```"
349, this   function to minimize the length of the string by removing occurrence of only one character.,"```javascript
function minimum_Length(s) {
    let maxOcc = 0;
    const n = s.length;
    const arr = new Array(26).fill(0);
    
    for (let i = 0; i < n; i++) {
        arr[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;
    }
    
    for (let i = 0; i < 26; i++) {
        if (arr[i] > maxOcc) {
            maxOcc = arr[i];
        }
    }
    
    return n - maxOcc;
}
```",350,"```javascript
['console.assert(minimum_Length(""mnm"") === 1)', 'console.assert(minimum_Length(""abcda"") === 3)', 'console.assert(minimum_Length(""abcb"") === 2)']
```"
350, this   function to find the first element occurring k times in a given array.,"```javascript
function firstElement(arr, n, k) { 
    const countMap = {}; 
    for (let i = 0; i < n; i++) { 
        if (arr[i] in countMap) { 
            countMap[arr[i]] += 1; 
        } else { 
            countMap[arr[i]] = 1; 
        } 
    } 
    for (let i = 0; i < n; i++) {  
        if (countMap[arr[i]] === k) { 
            return arr[i]; 
        } 
    } 
    return -1; 
}
```",351,"```javascript
['console.assert(first_Element([0,1,2,3,4,5],6,1) === 0)', 'console.assert(first_Element([1,2,1,3,4],5,2) === 1)', 'console.assert(first_Element([2,3,4,3,5,7,1,2,3,5],10,2) === 2)']
```"
351, this   function to check whether all the characters in a given string are unique.,"```javascript
function unique_Characters(str) {
    for (let i = 0; i < str.length; i++) {
        for (let j = i + 1; j < str.length; j++) {
            if (str[i] === str[j]) {
                return false;
            }
        }
    }
    return true;
}
```",352,"```javascript
[""console.assert(unique_Characters('aba') === false)"", ""console.assert(unique_Characters('abc') === true)"", ""console.assert(unique_Characters('abab') === false)""];
```"
352, this function to remove a specified column from a given nested list.,"```javascript
function removeColumn(list1, n) {
    for (let i of list1) {
        delete i[n];
    }
    return list1;
}
```",353,"```javascript
['console.assert(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0).toString() === [[2, 3], [4, 5], [1, 1]].toString())', 'console.assert(remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2).toString() === [[1, 2], [-2, 4], [1, -1]].toString())', 'console.assert(remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0).toString() === [[3], [7], [3], [15, 17], [7], [11]].toString())']
```"
353, this function to find t-nth term of arithemetic progression.,"```javascript
function tn_ap(a, n, d) {
  const tn = a + (n - 1) * d;
  return tn;
}
```",354,"```javascript
['console.assert(tn_ap(1,5,2) === 9)', 'console.assert(tn_ap(2,6,4) === 22)', 'console.assert(tn_ap(1,4,5) === 16)']
```"
354, this   function to count the number of rectangles in a circle of radius r.,"```javascript
function count_Rectangles(radius) {
    let rectangles = 0;
    const diameter = 2 * radius;
    const diameterSquare = diameter * diameter;
    for (let a = 1; a < 2 * radius; a++) {
        for (let b = 1; b < 2 * radius; b++) {
            const diagnalLengthSquare = (a * a + b * b);
            if (diagnalLengthSquare <= diameterSquare) {
                rectangles++;
            }
        }
    }
    return rectangles;
}
```",355,"```javascript
['console.assert(count_Rectangles(2) === 8)', 'console.assert(count_Rectangles(1) === 1)', 'console.assert(count_Rectangles(0) === 0)'];
```"
355, this function to find the third angle of a triangle using two angles.,"```javascript
function findAngle(a, b) {
  let c = 180 - (a + b);
  return c;
}
```",356,"```javascript
['console.assert(find_angle(47, 89) === 44)', 'console.assert(find_angle(45, 95) === 40)', 'console.assert(find_angle(50, 40) === 90)']
```"
356, this function to find the maximum element of all the given tuple records.,"```javascript
function findMax(testList) {
    let res = Math.max(...testList.flat().map(j => parseInt(j)));
    return res;
}
```",357,"```javascript
['console.assert(find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) === 10)', 'console.assert(find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) === 11)', 'console.assert(find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) === 12)']
```"
357, this function to find modulo division of two lists using map and lambda function.,"```javascript
function moddiv_list(nums1, nums2) {
  const result = nums1.map((x, index) => x % nums2[index]);
  return [result];
}
```",358,"```javascript
['console.assert(moddiv_list([4,5,6],[1, 2, 3]).toString() == [0, 1, 0].toString())', 'console.assert(moddiv_list([3,2],[1,4]).toString() == [0, 2].toString())', 'console.assert(moddiv_list([90,120],[50,70]).toString() == [40, 50].toString())']
```"
358, this   function to check whether one root of the quadratic equation is twice of the other or not.,"```javascript
function Check_Solution(a, b, c) { 
    if (2 * b * b === 9 * a * c) { 
        return ""Yes""; 
    } else { 
        return ""No""; 
    } 
}
```",359,"```javascript
['console.assert(Check_Solution(1, 3, 2) === ""Yes"")', 'console.assert(Check_Solution(1, 2, 3) === ""No"")', 'console.assert(Check_Solution(1, -5, 6) === ""No"")']
```"
359, this function to find the n’th carol number.,"```javascript
function get_carol(n) {
    let result = (2 ** n) - 1;
    return result * result - 2;
}
```",360,"```javascript
['console.assert(get_carol(2) === 7)', 'console.assert(get_carol(4) === 223)', 'console.assert(get_carol(5) === 959)']
```"
360, this function to remove empty lists from a given list of lists.,"```javascript
function remove_empty(list1) {
  const remove_empty = list1.filter(x => x);
  return remove_empty;
}
```",361,"```javascript
[""console.assert(JSON.stringify(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])) === JSON.stringify(['Red', 'Green', [1, 2], 'Blue'])"", ""console.assert(JSON.stringify(remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])) === JSON.stringify(['Green', [1, 2], 'Blue'])"", ""console.assert(JSON.stringify(remove_empty([[], [], [], ' ',[],[], 'programming', 'language',[],[],[], [], []])) === JSON.stringify([' ', 'programming', 'language'])""]
```"
361, this   function to find the item with maximum occurrences in a given list.,"```javascript
function maxOccurrences(nums) {
    let maxVal = 0;
    let result = nums[0];
    for (let i of nums) {
        let occu = nums.filter(x => x === i).length;
        if (occu > maxVal) {
            maxVal = occu;
            result = i;
        }
    }
    return [result];
}
```",362,"```javascript
['console.assert(maxOccurrences([1,2,3,1,2,3,12,4,2]) ===  2)', 'console.assert(maxOccurrences([1,2,6,7,0,1,0,1,0]) === 1,0)', 'console.assert(maxOccurrences([1,2,3,1,2,4,1]) === 1)']
```"
362, this function to add the k elements to each element in the tuple.,"```javascript
function add_K_element(test_list, K) {
    let res = test_list.map(sub => sub.map(j => j + K));
    return res;
}
```",363,"```javascript
['console.assert(JSON.stringify(add_K_element([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)) === JSON.stringify([[5, 7, 8], [6, 8, 10], [7, 12, 5]]))', 
 'console.assert(JSON.stringify(add_K_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)) === JSON.stringify([[9, 10, 11], [12, 13, 14], [15, 16, 17]]))', 
 'console.assert(JSON.stringify(add_K_element([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)) === JSON.stringify([[20, 21, 22], [23, 24, 25], [26, 27, 28]]))']
```"
363, this function to find the number of flips required to make the given binary string a sequence of alternate characters.,"```javascript
function makeFlip(ch) { 
    return (ch === '0') ? '1' : '0'; 
}

function getFlipWithStartingCharacter(str, expected) { 
    let flipCount = 0; 
    for (let i = 0; i < str.length; i++) { 
        if (str[i] !== expected) { 
            flipCount++; 
        } 
        expected = makeFlip(expected); 
    } 
    return flipCount; 
}

function minFlipToMakeStringAlternate(str) { 
    return Math.min(getFlipWithStartingCharacter(str, '0'), getFlipWithStartingCharacter(str, '1')); 
}
```",364,"```javascript
['console.assert(min_flip_to_make_string_alternate(""0001010111"") === 2)', 'console.assert(min_flip_to_make_string_alternate(""001"") === 1)', 'console.assert(min_flip_to_make_string_alternate(""010111011"") === 2)']
```"
364, this   function to count the number of digits of a given number.,"```javascript
function countDigit(n) {
    let count = 0;
    while (n !== 0) {
        n = Math.floor(n / 10);
        count += 1;
    }
    return count;
}
```",365,"```javascript
['console.assert(count_Digit(12345) === 5)', 'console.assert(count_Digit(11223305) === 8)', 'console.assert(count_Digit(4123459) === 7)']
```"
365, this   function to find the largest product of the pair of adjacent elements from a given list of integers.,"```javascript
function adjacentNumProduct(listNums) {
    return Math.max(...listNums.map((num, i) => num * listNums[i + 1]).slice(0, -1));
}
```",366,"```javascript
['console.assert(adjacent_num_product([1,2,3,4,5,6]) === 30)', 'console.assert(adjacent_num_product([1,2,3,4,5]) === 20)', 'console.assert(adjacent_num_product([2,3]) === 6)']
```"
366, this function to check if a binary tree is balanced or not.,"```javascript
class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function getHeight(root) {
    if (root === null) {
        return 0;
    }
    return Math.max(getHeight(root.left), getHeight(root.right)) + 1;
}

function isTreeBalanced(root) {
    if (root === null) {
        return true;
    }
    const lh = getHeight(root.left);
    const rh = getHeight(root.right);
    if (Math.abs(lh - rh) <= 1 && isTreeBalanced(root.left) && isTreeBalanced(root.right)) {
        return true;
    }
    return false;
}
```",367,"```javascript
console.assert(is_tree_balanced(root) === false);
console.assert(is_tree_balanced(root1) === true);
console.assert(is_tree_balanced(root2) === false);
```"
367, this function to repeat the given tuple n times.,"```javascript
function repeat_tuples(test_tup, N) {
    var res = Array(N).fill(test_tup);
    return res;
}
```",368,"```javascript
console.assert(repeat_tuples([1, 3], 4).toString() === [[1, 3], [1, 3], [1, 3], [1, 3]].toString());
console.assert(repeat_tuples([1, 2], 3).toString() === [[1, 2], [1, 2], [1, 2]].toString());
console.assert(repeat_tuples([3, 4], 5).toString() === [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]].toString());
```"
368, this function to find the lateral surface area of cuboid,"```javascript
function lateralsurface_cuboid(l, w, h) {
    const LSA = 2 * h * (l + w);
    return LSA;
}
```",369,"```javascript
['assert lateralsurface_cuboid(8,5,6) === 156', 'assert lateralsurface_cuboid(7,9,10) === 320', 'assert lateralsurface_cuboid(10,20,30) === 1800']
```"
369, this function to sort a tuple by its float element.,"```javascript
function floatSort(price) {
    const floatSort = price.sort((a, b) => parseFloat(b[1]) - parseFloat(a[1]));
    return floatSort;
}
```",370,"```javascript
console.assert(float_sort([['item1', '12.20'], ['item2', '15.10'], ['item3', '24.5']]).toString() === [['item3', '24.5'], ['item2', '15.10'], ['item1', '12.20']].toString());
console.assert(float_sort([['item1', '15'], ['item2', '10'], ['item3', '20']]).toString() === [['item3', '20'], ['item1', '15'], ['item2', '10']].toString());
console.assert(float_sort([['item1', '5'], ['item2', '10'], ['item3', '14']]).toString() === [['item3', '14'], ['item2', '10'], ['item1', '5']].toString());
```"
370, this function to find the smallest missing element in a sorted array.,"```javascript
function smallestMissing(A, leftElement, rightElement) {
    if (leftElement > rightElement) {
        return leftElement;
    }
    const mid = leftElement + Math.floor((rightElement - leftElement) / 2);
    if (A[mid] === mid) {
        return smallestMissing(A, mid + 1, rightElement);
    } else {
        return smallestMissing(A, leftElement, mid - 1);
    }
}
```",371,"```javascript
['console.assert(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) === 7)', 'console.assert(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) === 3)', 'console.assert(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) === 0']
```"
371, this function to sort a given list of elements in ascending order using heap queue algorithm.,"```javascript
function heapAssending(nums) {
  const heapify = (arr) => {
    for (let i = Math.floor(arr.length / 2); i >= 0; i--) {
      siftDown(arr, i, arr.length);
    }
  };

  const siftDown = (arr, idx, max) => {
    let leftChildIdx = 2 * idx + 1;
    while (leftChildIdx < max) {
      let rightChildIdx = leftChildIdx + 1;
      let smallestIdx = leftChildIdx;

      if (rightChildIdx < max && arr[rightChildIdx] < arr[leftChildIdx]) {
        smallestIdx = rightChildIdx;
      }
      if (arr[smallestIdx] >= arr[idx]) {
        break;
      }
      [arr[idx], arr[smallestIdx]] = [arr[smallestIdx], arr[idx]];
      idx = smallestIdx;
      leftChildIdx = 2 * idx + 1;
    }
  };

  heapify(nums);
  const s_result = [];
  while (nums.length > 0) {
    s_result.push(nums[0]);
    nums[0] = nums[nums.length - 1];
    nums.pop();
    siftDown(nums, 0, nums.length);
  }
  return s_result;
}
```",372,"```javascript
['console.assert(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]).toString() === [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18].toString())', 'console.assert(heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58]).toString() === [14, 22, 25, 25, 35, 58, 65, 75, 85].toString())', 'console.assert(heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]).toString() === [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].toString())']
```"
372, this function to find the volume of a cuboid.,"```javascript
function volumeCuboid(l, w, h) {
  var volume = l * w * h;
  return volume;
}
```",373,"```javascript
['console.assert(volume_cuboid(1, 2, 3) === 6)', 'console.assert(volume_cuboid(5, 7, 9) === 315)', 'console.assert(volume_cuboid(10, 15, 21) === 3150)']
```"
373, this function to print all permutations of a given string including duplicates.,"```javascript
function permuteString(str) {
    if (str.length === 0) {
        return [''];
    }
    const prevList = permuteString(str.slice(1));
    const nextList = [];
    for (let i = 0; i < prevList.length; i++) {
        for (let j = 0; j <= str.length; j++) {
            const newStr = prevList[i].slice(0, j) + str[0] + prevList[i].slice(j);
            if (!nextList.includes(newStr)) {
                nextList.push(newStr);
            }
        }
    }
    return nextList;
}
```",374,"```javascript
[""console.assert(permute_string('ab').toString() === ['ab', 'ba'].toString())"", ""console.assert(permute_string('abc').toString() === ['abc', 'bac', 'bca', 'acb', 'cab', 'cba'].toString())"", ""console.assert(permute_string('abcd').toString() === ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba'].toString())""]
```"
374, this function to round the given number to the nearest multiple of a specific number.,"```javascript
function roundNum(n, m) {
    const a = Math.floor(n / m) * m;
    const b = a + m;
    return (n - a > b - n) ? b : a;
}
```",375,"```javascript
['console.assert(round_num(4722, 10) === 4720)', 'console.assert(round_num(1111, 5) === 1110)', 'console.assert(round_num(219, 2) === 218)']
```"
375, this function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"```javascript
function removeReplica(testTup) {
    let temp = new Set();
    let res = Array.from(testTup, ele => {
        if (!temp.has(ele) && temp.add(ele)) {
            return ele;
        } else {
            return 'MSP';
        }
    });
    return [res];
}
```",376,"```javascript
[""console.assert(remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7]).toString() === [1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'].toString())"", ""console.assert(remove_replica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9]).toString() === [2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP'].toString())"", ""console.assert(remove_replica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7]).toString() === [2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP'].toString())""]
```"
376, this   function to remove all occurrences of a character in a given string.,"```javascript
function remove_Char(s, c) {
    let counts = (s.match(new RegExp(c, ""g"")) || []).length;
    s = s.split('');
    while (counts) {
        s.splice(s.indexOf(c), 1);
        counts -= 1;
    }
    s = s.join('');
    return s;
}
```",377,"```javascript
['console.assert(remove_Char(""aba"",\'a\') === ""b"")', 'console.assert(remove_Char(""toggle"",\'g\') === ""tole"")', 'console.assert(remove_Char(""aabbc"",\'b\') === ""aac"")']
```"
377, this   function to shift last element to first position in the given list.,"```javascript
function moveFirst(testList) {
  testList = testList.slice(-1).concat(testList.slice(0, -1));
  return testList;
}
```",378,"```javascript
['console.assert(move_first([1,2,3,4]).toString() === [4,1,2,3].toString())', 'console.assert(move_first([0,1,2,3]).toString() === [3,0,1,2].toString())', 'console.assert(move_first([9,8,7,1]).toString() === [1,9,8,7].toString())']
```"
378, this function to find the surface area of a cuboid.,"```javascript
function surfacearea_cuboid(l, w, h) {
  const SA = 2 * (l * w + l * h + w * h);
  return SA;
}
```",379,"```javascript
['console.assert(surfacearea_cuboid(1,2,3) === 22)', 'console.assert(surfacearea_cuboid(5,7,9) === 286)', 'console.assert(surfacearea_cuboid(10,15,21) === 1350)']
```"
379, this function to generate a two-dimensional array.,"```javascript
function multiList(rownum, colnum) {
    let multiList = Array.from({ length: rownum }, () => Array(colnum).fill(0));
    for (let row = 0; row < rownum; row++) {
        for (let col = 0; col < colnum; col++) {
            multiList[row][col] = row * col;
        }
    }
    return multiList;
}
```",380,"```javascript
console.assert(multi_list(3, 4).toString() === [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]].toString());
console.assert(multi_list(5, 7).toString() === [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]].toString());
console.assert(multi_list(10, 15).toString() === [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]].toString());
```"
380, this function to sort a list of lists by a given index of the inner list.,"```javascript
function indexOnInnerList(listData, indexNo) {
    const result = listData.sort((a, b) => a[indexNo] - b[indexNo]);
    return result;
}
```",381,"```javascript
console.assert(JSON.stringify(index_on_inner_list([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0)) === JSON.stringify([['Beau Turnbull', 94, 98], ['Brady Kent', 97, 96], ['Greyson Fulton', 98, 99], ['Wyatt Knott', 91, 94]]));
console.assert(JSON.stringify(index_on_inner_list([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 1)) === JSON.stringify([['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98], ['Brady Kent', 97, 96], ['Greyson Fulton', 98, 99]]));
console.assert(JSON.stringify(index_on_inner_list([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 2)) === JSON.stringify([['Wyatt Knott', 91, 94], ['Brady Kent', 97, 96], ['Beau Turnbull', 94, 98], ['Greyson Fulton', 98, 99]]));
```"
381, this function to find the number of rotations in a circularly sorted array.,"```javascript
function findRotationCount(A) {
    let left = 0, right = A.length - 1;
    while (left <= right) {
        if (A[left] <= A[right]) {
            return left;
        }
        let mid = Math.floor((left + right) / 2);
        let next = (mid + 1) % A.length;
        let prev = (mid - 1 + A.length) % A.length;
        if (A[mid] <= A[next] && A[mid] <= A[prev]) {
            return mid;
        } else if (A[mid] <= A[right]) {
            right = mid - 1;
        } else if (A[mid] >= A[left]) {
            left = mid + 1;
        }
    }
    return -1;
}
```",382,"```javascript
['console.assert(findRotationCount([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) === 3)', 
 'console.assert(findRotationCount([8, 9, 10, 2, 5, 6]) === 3)', 
 'console.assert(findRotationCount([2, 5, 6, 8, 9, 10]) === 0)']
```"
382, this   function to toggle all odd bits of a given number.,"```javascript
function evenBitToggleNumber(n) {
    let res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 0) {
            res = res | (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return n ^ res;
}
```",383,"```javascript
['console.assert(even_bit_toggle_number(10) === 15)', 'console.assert(even_bit_toggle_number(20) === 1)', 'console.assert(even_bit_toggle_number(30) === 11)'];
```"
383, this   function to find the frequency of the smallest value in a given array.,"```javascript
function frequencyOfSmallest(n, arr) {
    let mn = arr[0];
    let freq = 1;
    for (let i = 1; i < n; i++) {
        if (arr[i] < mn) {
            mn = arr[i];
            freq = 1;
        } else if (arr[i] === mn) {
            freq++;
        }
    }
    return [freq];
}
```",384,"```javascript
['console.assert(frequency_Of_Smallest(5, [1, 2, 3, 4, 3]) === 1)', 'console.assert(frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3]) === 1)', 'console.assert(frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9]) === 3)']
```"
384, this function to find the n'th perrin number using recursion.,"```javascript
function get_perrin(n) {
  if (n === 0) {
    return 3;
  }
  if (n === 1) {
    return 0;
  }
  if (n === 2) {
    return 2;
  }
  return get_perrin(n - 2) + get_perrin(n - 3);
}
```",385,"```javascript
['console.assert(get_perrin(9) === 12)', 'console.assert(get_perrin(4) === 2)', 'console.assert(get_perrin(6) === 5)']
```"
385, this function to find out the minimum no of swaps required for bracket balancing in the given string.,"```javascript
function swapCount(s) {
    let chars = s;
    let countLeft = 0;
    let countRight = 0;
    let swap = 0;
    let imbalance = 0; 
    
    for (let i = 0; i < chars.length; i++) {
        if (chars[i] === '[') {
            countLeft += 1;
            if (imbalance > 0) {
                swap += imbalance;
                imbalance -= 1;
            }
        } else if (chars[i] === ']') {
            countRight += 1;
            imbalance = (countRight - countLeft); 
        }
    }
    return [swap];
}
```",386,"```javascript
console.assert(swap_count(""[]][]["") === 2);
console.assert(swap_count(""[[][]]"") === 0);
console.assert(swap_count(""[[][]]]["") === 1);
```"
386, this   function to check whether the hexadecimal number is even or odd.,"```javascript
function even_or_odd(N) {
    let l = N.length;
    if (N[l - 1] === '0' || N[l - 1] === '2' || 
        N[l - 1] === '4' || N[l - 1] === '6' || 
        N[l - 1] === '8' || N[l - 1] === 'A' || 
        N[l - 1] === 'C' || N[l - 1] === 'E') {
        return ""Even"";
    } else {
        return ""Odd"";
    }
}
```",387,"```javascript
['console.assert(even_or_odd(""AB3454D"") === ""Odd"")', 'console.assert(even_or_odd(""ABC"") === ""Even"")', 'console.assert(even_or_odd(""AAD"") === ""Odd"")']
```"
387, this   function to find the highest power of 2 that is less than or equal to n.,"```javascript
function highestPowerOf2(n) {
    let res = 0;
    for (let i = n; i > 0; i--) {
        if ((i & (i - 1)) === 0) {
            res = i;
            break;
        }
    }
    return res;
}
```",388,"```javascript
['console.assert(highest_Power_of_2(10) === 8)', 'console.assert(highest_Power_of_2(19) === 16)', 'console.assert(highest_Power_of_2(32) === 32)']
```"
388, this function to find the n'th lucas number.,"```javascript
function findLucas(n) {
    if (n === 0) {
        return 2;
    }
    if (n === 1) {
        return 1;
    }
    return findLucas(n - 1) + findLucas(n - 2);
}
```",389,"```javascript
['console.assert(find_lucas(9) === 76)', 'console.assert(find_lucas(4) === 7)', 'console.assert(find_lucas(3) === 4)']
```"
389, this function to insert a given string at the beginning of all items in a list.,"```javascript
function addString(list, string) {
    let addString = list.map(i => string.replace(/{}/g, i));
    return addString;
}
```",390,"```javascript
[""console.assert(add_string([1,2,3,4],'temp' + i) === ['temp1', 'temp2', 'temp3', 'temp4'])"", ""console.assert(add_string(['a','b','c','d'], ' ' + i) === [' a', ' b', ' c', ' d'])"", ""console.assert(add_string([5,6,7,8],'string' + i) === ['string5', 'string6', 'string7', 'string8'])""]
```"
390, this function to convert more than one list to nested dictionary.,"```javascript
function convertListDictionary(l1, l2, l3) {
    const result = l1.map((x, index) => ({ [x]: { [l2[index]]: l3[index] } }));
    return result;
}
```",391,"```javascript
assert(convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""], [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""], [85, 98, 89, 92]).toString() === [{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }].toString());
assert(convert_list_dictionary([""abc"", ""def"", ""ghi"", ""jkl""], ["" "", ""program"", ""language"", ""programs""], [100, 200, 300, 400]).toString() === [{ 'abc': { ' ': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }].toString());
assert(convert_list_dictionary([""A1"", ""A2"", ""A3"", ""A4""], [""java"", ""C"", ""C++"", ""DBMS""], [10, 20, 30, 40]).toString() === [{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }].toString());
```"
391," this function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","```javascript
function getMaxSum(n) {
    let res = [];
    res.push(0);
    res.push(1);
    let i = 2;
    while (i <= n) {
        res.push(Math.max(i, (res[Math.floor(i / 2)] +
                               res[Math.floor(i / 3)] +
                               res[Math.floor(i / 4)] +
                               res[Math.floor(i / 5)])));
        i++;
    }
    return res[n];
}
```",392,"```javascript
['console.assert(get_max_sum(60) === 106)', 'console.assert(get_max_sum(10) === 12)', 'console.assert(get_max_sum(2) === 2)']
```"
392, this function to find the list with maximum length using lambda function.,"```javascript
function maxLengthList(inputList) {
    let maxLength = Math.max(...inputList.map(x => x.length));
    let maxList = inputList.reduce((a, b) => a.length >= b.length ? a : b);
    return [maxLength, maxList];
}
```",393,"```javascript
console.assert(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === [3, [13, 15, 17]]);
console.assert(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) === [5, [1,2,3,4,5]]);
console.assert(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]) === [4, [6,7,8,9]]);
```"
393, this function to check if given tuple is distinct or not.,"```javascript
function checkDistinct(testTup) {
  let res = true;
  let temp = new Set();
  for (let ele of testTup) {
    if (temp.has(ele)) {
      res = false;
      break;
    }
    temp.add(ele);
  }
  return res;
}
```",394,"```javascript
console.assert(check_distinct([1, 4, 5, 6, 1, 4]) === false);
console.assert(check_distinct([1, 4, 5, 6]) === true);
console.assert(check_distinct([2, 3, 4, 5, 6]) === true);
```"
394, this   function to find the first non-repeated character in a given string.,"```javascript
function firstNonRepeatingCharacter(str1) {
  let charOrder = [];
  let ctr = {};
  for (let c of str1) {
    if (ctr[c]) {
      ctr[c] += 1;
    } else {
      ctr[c] = 1;
      charOrder.push(c);
    }
  }
  for (let c of charOrder) {
    if (ctr[c] === 1) {
      return c;
    }
  }
  return null;
}
```",395,"```javascript
['console.assert(first_non_repeating_character(""abcabc"") === null)', 'console.assert(first_non_repeating_character(""abc"") === ""a"")', 'console.assert(first_non_repeating_character(""ababc"") === ""c"")'];
```"
395, this function to check whether the given string starts and ends with the same character or not using regex.,"```javascript
const regex = /^[a-z]$|^([a-z]).*\1$/;

function checkChar(string) {
    if (regex.test(string)) {
        return ""Valid"";
    } else {
        return ""Invalid"";
    }
}
```",396,"```javascript
['console.assert(check_char(""abba"") === ""Valid"")', 'console.assert(check_char(""a"") === ""Valid"")', 'console.assert(check_char(""abcd"") === ""Invalid"")']
```"
396, this function to find the median of three specific numbers.,"```javascript
function medianNumbers(a, b, c) {
    let median;
    if (a > b) {
        if (a < c) {
            median = a;
        } else if (b > c) {
            median = b;
        } else {
            median = c;
        }
    } else {
        if (a > c) {
            median = a;
        } else if (b < c) {
            median = b;
        } else {
            median = c;
        }
    }
    return median;
}
```",397,"```javascript
['console.assert(median_numbers(25,55,65) === 55.0)', 'console.assert(median_numbers(20,10,30) === 20.0)', 'console.assert(median_numbers(15,45,75) === 45.0)'];
```"
397, this function to compute the sum of digits of each number of a given list.,"```javascript
function sumOfDigits(nums) {
  return nums.reduce((acc, n) => {
    return acc + Array.from(String(n)).reduce((sum, el) => {
      return sum + (isFinite(el) ? parseInt(el) : 0);
    }, 0);
  }, 0);
}
```",398,"```javascript
['console.assert(sum_of_digits([10, 2, 56]) === 14)', ""console.assert(sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']]) === 19)"", 'console.assert(sum_of_digits([10, 20, -4, 5, -70]) === 19)']
```"
398, this function to perform the mathematical bitwise xor operation across the given tuples.,"```javascript
function bitwiseXOR(testTup1, testTup2) {
  const res = testTup1.map((ele1, index) => ele1 ^ testTup2[index]);
  return res;
}
```",399,"```javascript
['console.assert(bitwise_xor([10, 4, 6, 9], [5, 2, 3, 3]).toString() === [15, 6, 5, 10].toString())', 'console.assert(bitwise_xor([11, 5, 7, 10], [6, 3, 4, 4]).toString() === [13, 6, 3, 14].toString())', 'console.assert(bitwise_xor([12, 6, 8, 11], [7, 4, 5, 6]).toString() === [11, 2, 13, 13].toString())']
```"
399, this function to extract the frequency of unique tuples in the given list order irrespective.,"```javascript
function extract_freq(test_list) {
    const res = new Set(test_list.map(sub => JSON.stringify(sub.sort()))).size;
    return res;
}
```",400,"```javascript
['console.assert(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) === 3)', 'console.assert(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]) === 4)', 'console.assert(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]) === 4)']
```"
400, this function to perform index wise addition of tuple elements in the given two nested tuples.,"```javascript
function addNestedTuples(test_tup1, test_tup2) {
    const res = test_tup1.map((tup1, index) => 
        tup1.map((a, j) => a + test_tup2[index][j])
    );
    return res;
}
```",401,"```javascript
['console.assert(JSON.stringify(add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[7, 10], [7, 14], [3, 10], [8, 13]]);', 
 'console.assert(JSON.stringify(add_nested_tuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[9, 12], [9, 16], [5, 12], [10, 15]]);', 
 'console.assert(JSON.stringify(add_nested_tuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[11, 14], [11, 18], [7, 14], [12, 17]]);']
```"
401, this function to compute the value of ncr%p.,"```javascript
function ncr_modp(n, r, p) {
    let C = new Array(r + 1).fill(0);
    C[0] = 1;
    for (let i = 1; i <= n; i++) {
        for (let j = Math.min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}
```",402,"```javascript
['console.assert(ncr_modp(10,2,13)===6)', 'console.assert(ncr_modp(15,12,43)===25)', 'console.assert(ncr_modp(17,9,18)===10)']
```"
402, this function to check if a url is valid or not using regex.,"```javascript
function isValidURL(str) {
    const regex = /((http|https):\/\/)(www\.)?[a-zA-Z0-9@:%._\+~#?&//=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%._\+~#?&//=]*)/;
    if (str == null) {
        return false;
    }
    return regex.test(str);
}
```",403,"```javascript
['console.assert(is_valid_URL(""https://www.google.com"") === true)', 'console.assert(is_valid_URL(""https:/www.gmail.com"") === false)', 'console.assert(is_valid_URL(""https:// www.redit.com"") === false)']
```"
403, this   function to find the minimum of two numbers.,"```javascript
function minimum(a, b) {   
    if (a <= b) { 
        return a; 
    } else { 
        return b; 
    }
}
```",404,"```javascript
['console.assert(minimum(1, 2) === 1)', 'console.assert(minimum(-5, -4) === -5)', 'console.assert(minimum(0, 0) === 0)']
```"
404, this function to check whether an element exists within a tuple.,"```javascript
function checkTuplex(tuplex, tuple1) {
  if (tuplex.includes(tuple1)) {
    return true;
  } else {
    return false;
  }
}
```",405,"```javascript
console.assert(check_tuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 'r') === true);
console.assert(check_tuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], '5') === false);
console.assert(check_tuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 3) === true);
```"
405, this   function to find the parity of a given number.,"```javascript
function find_Parity(x) { 
    let y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1) { 
        return ""Odd Parity""; 
    } 
    return ""Even Parity""; 
}
```",406,"```javascript
['console.assert(find_Parity(12) === ""Even Parity"")', 'console.assert(find_Parity(7) === ""Odd Parity"")', 'console.assert(find_Parity(10) === ""Even Parity"")']
```"
406, this function to create the next bigger number by rearranging the digits of a given number.,"```javascript
function rearrangeBigger(n) {
    let nums = Array.from(String(n));
    for (let i = nums.length - 2; i >= 0; i--) {
        if (nums[i] < nums[i + 1]) {
            let z = nums.slice(i);
            let y = Math.min(...z.filter(x => x > z[0]));
            z.splice(z.indexOf(y), 1);
            z.sort();
            nums = nums.slice(0, i).concat([y], z);
            return parseInt(nums.join(''));
        }
    }
    return false;
}
```",407,"```javascript
['console.assert(rearrange_bigger(12) === 21)', 'console.assert(rearrange_bigger(10) === false)', 'console.assert(rearrange_bigger(102) === 120)'];
```"
407, this function to find k number of pairs which consist of one element from the first array and one element from the second array.,"```javascript
function kSmallestPairs(nums1, nums2, k) {
    const queue = [];
    
    const push = (i, j) => {
        if (i < nums1.length && j < nums2.length) {
            queue.push([nums1[i] + nums2[j], i, j]);
            queue.sort((a, b) => a[0] - b[0]); // Maintain a min-heap
        }
    };

    push(0, 0);
    const pairs = [];
    
    while (queue.length > 0 && pairs.length < k) {
        const [_, i, j] = queue.shift(); // Remove the first element
        pairs.push([nums1[i], nums2[j]]);
        push(i, j + 1);
        if (j === 0) {
            push(i + 1, 0);
        }
    }
    
    return pairs;
}
```",408,"```javascript
['console.assert(k_smallest_pairs([1, 3, 7], [2, 4, 6], 2).toString() === [[1, 2], [1, 4]].toString())', 
 'console.assert(k_smallest_pairs([1, 3, 7], [2, 4, 6], 1).toString() === [[1, 2]].toString())', 
 'console.assert(k_smallest_pairs([1, 3, 7], [2, 4, 6], 7).toString() === [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]].toString())']
```"
408, this function to find the minimum product from the pairs of tuples within a given list.,"```javascript
function minProductTuple(list1) {
    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));
    return [resultMin];
}
```",409,"```javascript
console.assert(min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) === 8);
console.assert(min_product_tuple([(10, 20), (15, 2), (5, 10)]) === 30);
console.assert(min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) === 100);
```"
409, this function to find the minimum value in a given heterogeneous list.,"```javascript
function minVal(listval) {
    const minVal = Math.min(...listval.filter(i => Number.isInteger(i)));
    return minVal;
}
```",410,"```javascript
[""console.assert(min_val([' ', 3, 2, 4, 5, 'version']) === 2)"", ""console.assert(min_val([' ', 15, 20, 25]) === 15)"", ""console.assert(min_val([' ', 30, 20, 40, 50, 'version']) === 20)""]
```"
410, this function to convert the given snake case string to camel case string by using regex.,"```javascript
function snakeToCamel(word) {
  return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');
}
```",411,"```javascript
[""console.assert(snake_to_camel('android_tv') === 'AndroidTv')"", ""console.assert(snake_to_camel('google_pixel') === 'GooglePixel')"", ""console.assert(snake_to_camel('apple_watch') === 'AppleWatch')""]
```"
411, this   function to remove odd numbers from a given list.,"```javascript
function removeOdd(l) {
    for (let i of l) {
        if (i % 2 !== 0) {
            l.splice(l.indexOf(i), 1);
        }
    }
    return l;
}
```",412,"```javascript
['console.assert(remove_odd([1,2,3]).toString() === [2].toString())', 'console.assert(remove_odd([2,4,6]).toString() === [2,4,6].toString())', 'console.assert(remove_odd([10,20,3]).toString() === [10,20].toString())']
```"
412, this function to extract the nth element from a given list of tuples.,"```javascript
function extractNthElement(list1, n) {
    let result = list1.map(x => x[n]);
    return result;
}
```",413,"```javascript
[""console.assert(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0).toString() === ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'].toString())"", ""console.assert(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 2).toString() === [99, 96, 94, 98].toString())"", ""console.assert(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 1).toString() === [98, 97, 91, 94].toString())""]
```"
413, this   function to check whether the value exists in a sequence or not.,"```javascript
function overlapping(list1, list2) {  
    let c = 0;
    let d = 0;
    for (let i of list1) { 
        c++;
    }
    for (let i of list2) { 
        d++;
    }
    for (let i = 0; i < c; i++) { 
        for (let j = 0; j < d; j++) { 
            if (list1[i] === list2[j]) { 
                return 1;
            }
        }
    }
    return 0;
}
```",414,"```javascript
['console.assert(overlapping([1,2,3,4,5],[6,7,8,9]) === false)', 'console.assert(overlapping([1,2,3],[4,5,6]) === false)', 'console.assert(overlapping([1,4,5],[1,4,5]) === true)']
```"
414, this   function to find a pair with highest product from a given array of integers.,"```javascript
function max_Product(arr) { 
    let arr_len = arr.length; 
    if (arr_len < 2) { 
        return ""No pairs exists"";           
    } 
    let x = arr[0]; 
    let y = arr[1];      
    for (let i = 0; i < arr_len; i++) { 
        for (let j = i + 1; j < arr_len; j++) { 
            if (arr[i] * arr[j] > x * y) { 
                x = arr[i]; 
                y = arr[j]; 
            } 
        } 
    } 
    return [x, y]; 
}
```",415,"```javascript
['console.assert(max_Product([1,2,3,4,7,0,8,4]) ===  (7,8))', 'console.assert(max_Product([0,-1,-2,-4,5,0,-6]) === (-4,-6))', 'console.assert(max_Product([1,2,3]) === (2,3))']
```"
415, this function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"```javascript
const MAX = 1000000;
function breakSum(n) {
    const dp = new Array(n + 1).fill(0);
    dp[0] = 0;
    dp[1] = 1;
    for (let i = 2; i <= n; i++) {
        dp[i] = Math.max(dp[Math.floor(i / 2)] + dp[Math.floor(i / 3)] + dp[Math.floor(i / 4)], i);
    }
    return dp[n];
}
```",416,"```javascript
['console.assert(breakSum(12) === 13)', 'console.assert(breakSum(24) === 27)', 'console.assert(breakSum(23) === 23)']
```"
416, this function to find common first element in given list of tuple.,"```javascript
function group_tuples(Input) { 
    let out = {}; 
    for (let elem of Input) { 
        try { 
            out[elem[0]].push(...elem.slice(1)); 
        } catch (e) { 
            out[elem[0]] = Array.from(elem); 
        } 
    } 
    return Object.values(out).map(values => Array.from(values)); 
}
```",417,"```javascript
console.assert(JSON.stringify(group_tuples([['x', 'y'], ['x', 'z'], ['w', 't']])) === JSON.stringify([['x', 'y', 'z'], ['w', 't']]));
console.assert(JSON.stringify(group_tuples([['a', 'b'], ['a', 'c'], ['d', 'e']])) === JSON.stringify([['a', 'b', 'c'], ['d', 'e']]));
console.assert(JSON.stringify(group_tuples([['f', 'g'], ['f', 'g'], ['h', 'i']])) === JSON.stringify([['f', 'g', 'g'], ['h', 'i']]));
```"
417, this   function to find the sublist having maximum length.,"```javascript
function Find_Max(lst) { 
    let maxList = Math.max(...lst); 
    return maxList; 
}
```",418,"```javascript
[""console.assert(Find_Max([['A'],['A','B'],['A','B','C']]) === ['A','B','C'])"", ""console.assert(Find_Max([[1],[1,2],[1,2,3]]) === [1,2,3])"", ""console.assert(Find_Max([[1,1],[1,2,3],[1,5,6,1]]) === [1,5,6,1])""]
```"
418, this function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"```javascript
function roundAndSum(list1) {
  const length = list1.length;
  const roundAndSum = list1.map(Math.round).reduce((a, b) => a + b, 0) * length;
  return roundAndSum;
}
```",419,"```javascript
['console.assert(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) === 243)', 'console.assert(round_and_sum([5, 2, 9, 24.3, 29]) === 345)', 'console.assert(round_and_sum([25.0, 56.7, 89.2]) === 513)']
```"
419, this   function to find the cube sum of first n even natural numbers.,"```javascript
function cubeSum(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += (2 * i) * (2 * i) * (2 * i);
    }
    return sum;
}
```",420,"```javascript
['console.assert(cube_Sum(2) === 72)', 'console.assert(cube_Sum(3) === 288)', 'console.assert(cube_Sum(4) === 800)'];
```"
420, this function to concatenate each element of tuple by the delimiter.,"```javascript
function concatenateTuple(test_tup) {
    const delim = ""-"";
    let res = test_tup.map(ele => String(ele) + delim).join('');
    res = res.slice(0, res.length - delim.length);
    return String(res);
}
```",421,"```javascript
['console.assert(concatenate_tuple([""ID"", ""is"", 4, ""UTS""]) === ""ID-is-4-UTS"");', 'console.assert(concatenate_tuple([""QWE"", ""is"", 4, ""RTY""]) === ""QWE-is-4-RTY"");', 'console.assert(concatenate_tuple([""ZEN"", ""is"", 4, ""OP""]) === ""ZEN-is-4-OP"");']
```"
421, this   function to find the average of cubes of first n natural numbers.,"```javascript
function findAverageOfCube(n) {  
    let sum = 0;  
    for (let i = 1; i <= n; i++) {  
        sum += i * i * i;  
    }  
    return Math.round((sum / n) * 1e6) / 1e6;  
}
```",422,"```javascript
['console.assert(find_Average_Of_Cube(2) === 4.5)', 'console.assert(find_Average_Of_Cube(3) === 12)', 'console.assert(find_Average_Of_Cube(1) === 1)']
```"
422, this function to solve gold mine problem.,"```javascript
function getMaxGold(gold, m, n) { 
    let goldTable = Array.from({ length: m }, () => Array(n).fill(0));   
    for (let col = n - 1; col >= 0; col--) { 
        for (let row = 0; row < m; row++) {  
            let right = (col === n - 1) ? 0 : goldTable[row][col + 1]; 
            let right_up = (row === 0 || col === n - 1) ? 0 : goldTable[row - 1][col + 1]; 
            let right_down = (row === m - 1 || col === n - 1) ? 0 : goldTable[row + 1][col + 1]; 
            goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down); 
        } 
    } 
    let res = goldTable[0][0]; 
    for (let i = 1; i < m; i++) { 
        res = Math.max(res, goldTable[i][0]);  
    } 
    return res; 
}
```",423,"```javascript
['console.assert(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4) === 16)', 'console.assert(get_maxgold([[10,20],[30,40]],2,2) === 70)', 'console.assert(get_maxgold([[4,9],[3,7]],2,2) === 13)']
```"
423, this function to extract only the rear index element of each string in the given tuple.,"```javascript
function extractRear(testTuple) {
  const res = testTuple.map(sub => sub[sub.length - 1]);
  return res;
}
```",424,"```javascript
console.assert(JSON.stringify(extract_rear(['Mers', 'for', 'Vers'])) === JSON.stringify(['s', 'r', 's']));
console.assert(JSON.stringify(extract_rear(['Avenge', 'for', 'People'])) === JSON.stringify(['e', 'r', 'e']));
console.assert(JSON.stringify(extract_rear(['Gotta', 'get', 'go'])) === JSON.stringify(['a', 't', 'o']));
```"
424, this function to count the number of sublists containing a particular element.,"```javascript
function countElementInList(list1, x) {
    let ctr = 0;
    for (let i = 0; i < list1.length; i++) {
        if (list1[i].includes(x)) {
            ctr++;
        }
    }
    return ctr;
}
```",425,"```javascript
['console.assert(countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) === 3)', 'console.assert(countElementInList([[""A"", ""B""], [""A"", ""C""], [""A"", ""D"", ""E""], [""B"", ""C"", ""D""]], ""A"") === 3)', 'console.assert(countElementInList([[""A"", ""B""], [""A"", ""C""], [""A"", ""D"", ""E""], [""B"", ""C"", ""D""]], ""E"") === 1)']
```"
425, this function to filter odd numbers using lambda function.,"```javascript
function filterOddNumbers(nums) {
    const oddNums = nums.filter(x => x % 2 !== 0);
    return oddNums;
}
```",426,"```javascript
['console.assert(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [1,3,5,7,9].toString())', 'console.assert(filter_oddnumbers([10,20,45,67,84,93]).toString() === [45,67,93].toString())', 'console.assert(filter_oddnumbers([5,7,9,8,6,4,3]).toString() === [5,7,9,3].toString())']
```"
426, this function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"```javascript
function changeDateFormat(dt) {
    return dt.replace(/(\d{4})-(\d{1,2})-(\d{1,2})/, '$3-$2-$1');
}
```",427,"```javascript
['console.assert(change_date_format(""2026-01-02"") === ""02-01-2026"");', 
 'console.assert(change_date_format(""2020-11-13"") === ""13-11-2020"");', 
 'console.assert(change_date_format(""2021-04-26"") === ""26-04-2021"");']
```"
427, this function to sort the given array by using shell sort.,"```javascript
function shellSort(myList) {
    let gap = Math.floor(myList.length / 2);
    while (gap > 0) {
        for (let i = gap; i < myList.length; i++) {
            let currentItem = myList[i];
            let j = i;
            while (j >= gap && myList[j - gap] > currentItem) {
                myList[j] = myList[j - gap];
                j -= gap;
            }
            myList[j] = currentItem;
        }
        gap = Math.floor(gap / 2);
    }
    return myList;
}
```",428,"```javascript
['console.assert(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]).toString() === [2, 3, 4, 5, 12, 12, 23, 56, 81, 95].toString())', 'console.assert(shell_sort([24, 22, 39, 34, 87, 73, 68]).toString() === [22, 24, 34, 39, 68, 73, 87].toString())', 'console.assert(shell_sort([32, 30, 16, 96, 82, 83, 74]).toString() === [16, 30, 32, 74, 82, 83, 96].toString())']
```"
428, this function to extract the elementwise and tuples from the given two tuples.,"```javascript
function andTuples(testTup1, testTup2) {
  const res = testTup1.map((ele1, index) => ele1 & testTup2[index]);
  return res;
}
```",429,"```javascript
['console.assert(and_tuples([10, 4, 6, 9], [5, 2, 3, 3]).toString() === [0, 0, 2, 1].toString())', 'console.assert(and_tuples([1, 2, 3, 4], [5, 6, 7, 8]).toString() === [1, 2, 3, 0].toString())', 'console.assert(and_tuples([8, 9, 11, 12], [7, 13, 14, 17]).toString() === [0, 9, 10, 0].toString())']
```"
429, this function to find the directrix of a parabola.,"```javascript
function parabola_directrix(a, b, c) { 
  let directrix = Math.floor(c - ((b * b) + 1) * 4 * a);
  return [directrix];
}
```",430,"```javascript
['console.assert(parabola_directrix(5,3,2) === -198)', 'console.assert(parabola_directrix(9,8,4) === -2336)', 'console.assert(parabola_directrix(2,4,6) === -130)']
```"
430, this function that takes two lists and returns true if they have at least one common element.,"```javascript
function commonElement(list1, list2) {
    let result = false;
    for (let x of list1) {
        for (let y of list2) {
            if (x === y) {
                result = true;
                return [result];
            }
        }
    }
}
```",431,"```javascript
['console.assert(common_element([1,2,3,4,5], [5,6,7,8,9]) === true)', 'console.assert(common_element([1,2,3,4,5], [6,7,8,9]) === null)', 'console.assert(common_element([""a"",""b"",""c""], [""d"",""b"",""e""]) === true)']
```"
431, this function to find the median of a trapezium.,"```javascript
function median_trapezium(base1, base2, height) {
    const median = 0.5 * (base1 + base2);
    return median;
}
```",432,"```javascript
['console.assert(median_trapezium(15,25,35) === 20)', 'console.assert(median_trapezium(10,20,30) === 15)', 'console.assert(median_trapezium(6,9,4) === 7.5)']
```"
432, this function to check whether the entered number is greater than the elements of the given array.,"```javascript
function checkGreater(arr, number) {
  arr.sort((a, b) => a - b);
  if (number > arr[arr.length - 1]) {
    return 'Yes, the entered number is greater than those in the array';
  } else {
    return 'No, entered number is less than those in the array';
  }
}
```",433,"```javascript
[""console.assert(check_greater([1, 2, 3, 4, 5], 4) === 'No, entered number is less than those in the array')"", ""console.assert(check_greater([2, 3, 4, 5, 6], 8) === 'Yes, the entered number is greater than those in the array')"", ""console.assert(check_greater([9, 7, 4, 8, 6, 1], 11) === 'Yes, the entered number is greater than those in the array')""]
```"
433, this function that matches a string that has an a followed by one or more b's.,"```javascript
function textMatchOne(text) {
    const patterns = /ab+/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",434,"```javascript
['console.assert(text_match_one(""ac"") === ""Not matched!"")', 'console.assert(text_match_one(""dc"") === ""Not matched!"")', 'console.assert(text_match_one(""abba"") === ""Found a match!"")']
```"
434, this   function to find the last digit of a given number.,"```javascript
function last_Digit(n) {
    return n % 10;
}
```",435,"```javascript
['console.assert(last_Digit(123) === 3)', 'console.assert(last_Digit(25) === 5)', 'console.assert(last_Digit(30) === 0)']
```"
435, this   function to print negative numbers in a list.,"```javascript
function neg_nos(list1) {
    for (let num of list1) {
        if (num < 0) {
            return num;
        }
    }
}
```",436,"```javascript
console.assert(JSON.stringify(neg_nos([-1, 4, 5, -6])) === JSON.stringify([-1, -6]));
console.assert(JSON.stringify(neg_nos([-1, -2, 3, 4])) === JSON.stringify([-1, -2]));
console.assert(JSON.stringify(neg_nos([-7, -6, 8, 9])) === JSON.stringify([-7, -6]));
```"
436, this function to remove odd characters in a string.,"```javascript
function remove_odd(str1) {
    let str2 = '';
    for (let i = 1; i <= str1.length; i++) {
        if (i % 2 === 0) {
            str2 += str1[i - 1];
        }
    }
    return str2;
}
```",437,"```javascript
['console.assert(remove_odd("" "") === ""yhn"")', 'console.assert(remove_odd(""program"") === ""rga"")', 'console.assert(remove_odd(""language"") === ""agae"")']
```"
437, this function to count bidirectional tuple pairs.,"```javascript
function countBidirectional(testList) {
    let res = 0;
    for (let idx = 0; idx < testList.length; idx++) {
        for (let iidx = idx + 1; iidx < testList.length; iidx++) {
            if (testList[iidx][0] === testList[idx][1] && testList[idx][1] === testList[iidx][0]) {
                res += 1;
            }
        }
    }
    return res.toString();
}
```",438,"```javascript
console.assert(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) === '3');
console.assert(count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) === '2');
console.assert(count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) === '4');
```"
438, this function to convert a list of multiple integers into a single integer.,"```javascript
function multipleToSingle(L) {
    let x = parseInt(L.join(''));
    return x;
}
```",439,"```javascript
['console.assert(multiple_to_single([11, 33, 50]) === 113350)', 'console.assert(multiple_to_single([-1, 2, 3, 4, 5, 6]) === -123456)', 'console.assert(multiple_to_single([10, 15, 20, 25]) === 10152025)'];
```"
439, this function to find all adverbs and their positions in a given sentence.,"```javascript
function findAdverbPosition(text) {
    const regex = /\w+ly/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
        return [match.index, regex.lastIndex, match[0]];
    }
}
```",440,"```javascript
console.assert(find_adverb_position(""clearly!! we can see the sky"") === [0, 7, 'clearly']);
console.assert(find_adverb_position(""seriously!! there are many roses"") === [0, 9, 'seriously']);
console.assert(find_adverb_position(""unfortunately!! sita is going to home"") === [0, 13, 'unfortunately']);
```"
440, this function to find the surface area of a cube.,"```javascript
function surfacearea_cube(l) {
  var surfacearea = 6 * l * l;
  return surfacearea;
}
```",441,"```javascript
['console.assert(surfacearea_cube(5) === 150)', 'console.assert(surfacearea_cube(3) === 54)', 'console.assert(surfacearea_cube(10) === 600)']
```"
441, this function to find the ration of positive numbers in an array of integers.,"```javascript
function positiveCount(nums) {
    let n = nums.length;
    let n1 = 0;
    for (let x of nums) {
        if (x > 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
```",442,"```javascript
['console.assert(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])===0.54)', 'console.assert(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])===0.69)', 'console.assert(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])===0.56)']
```"
442, this   function to find the largest negative number from the given list.,"```javascript
function largestNeg(list1) { 
    let max = list1[0]; 
    for (let x of list1) { 
        if (x < max) { 
            max = x;  
        } 
    } 
    return max; 
}
```",443,"```javascript
['console.assert(largest_neg([1,2,3,-4,-6]) === -6)', 'console.assert(largest_neg([1,2,3,-8,-9]) === -9)', 'console.assert(largest_neg([1,2,3,4,-1]) === -1)']
```"
443, this function to trim each tuple by k in the given tuple list.,"```javascript
function trimTuple(testList, K) {
  let res = [];
  for (let ele of testList) {
    let N = ele.length;
    res.push(ele.slice(K, N - K));
  }
  return res.toString();
}
```",444,"```javascript
console.assert(JSON.stringify(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)) === '[[2], [9], [2], [2]]');
console.assert(JSON.stringify(trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)) === '[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]');
console.assert(JSON.stringify(trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)) === '[[8, 4], [8, 12], [1, 7], [6, 9]]');
```"
444, this function to perform index wise multiplication of tuple elements in the given two tuples.,"```javascript
function indexMultiplication(testTup1, testTup2) {
    let res = testTup1.map((tup1, index) => 
        tup1.map((a, i) => a * testTup2[index][i])
    );
    return res;
}
```",445,"```javascript
['console.assert(index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) === [[6, 21], [12, 45], [2, 9], [7, 30]]);', 'console.assert(index_multiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]) === [[14, 32], [20, 60], [6, 20], [16, 44]]);', 'console.assert(index_multiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]) === [[24, 45], [30, 77], [12, 33], [27, 60]]);']
```"
445, this   function to count the occurence of all elements of list in a tuple.,"```javascript
function countOccurrence(tup, lst) {
    let count = 0;
    for (let item of tup) {
        if (lst.includes(item)) {
            count++;
        }
    }
    return count;
}
```",446,"```javascript
[""console.assert(count_Occurrence(['a', 'a', 'c', 'b', 'd'], ['a', 'b']) === 3)"", ""console.assert(count_Occurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]) === 6)"", ""console.assert(count_Occurrence([1, 2, 3, 4, 5, 6], [1, 2]) === 2)""]
```"
446, this function to find cubes of individual elements in a list using lambda function.,"```javascript
function cubeNums(nums) {
    const cubeNums = nums.map(x => x ** 3);
    return cubeNums;
}
```",447,"```javascript
['console.assert(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000].toString())', 'console.assert(cube_nums([10,20,30]).toString() === [1000, 8000, 27000].toString())', 'console.assert(cube_nums([12,15]).toString() === [1728, 3375].toString())']
```"
447, this function to calculate the sum of perrin numbers.,"```javascript
function cal_sum(n) {
    let a = 3;
    let b = 0;
    let c = 2;
    if (n === 0) {
        return 3;
    }
    if (n === 1) {
        return 3;
    }
    if (n === 2) {
        return 5;
    }
    let sum = 5;
    while (n > 2) {
        let d = a + b;
        sum += d;
        a = b;
        b = c;
        c = d;
        n--;
    }
    return sum;
}
```",448,"```javascript
['console.assert(cal_sum(9) === 49)', 'console.assert(cal_sum(10) === 66)', 'console.assert(cal_sum(11) === 88)']
```"
448, this   function to check whether the triangle is valid or not if 3 points are given.,"```javascript
function check_Triangle(x1, y1, x2, y2, x3, y3) { 
    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));   
    if (a === 0) { 
        return 'No'; 
    } else { 
        return 'Yes'; 
    }
}
```",449,"```javascript
[""console.assert(check_Triangle(1,5,2,5,4,6) === 'Yes')"", ""console.assert(check_Triangle(1,1,1,4,1,5) === 'No')"", ""console.assert(check_Triangle(1,1,1,1,1,1) === 'No')""]
```"
449, this function to extract specified size of strings from a give list of string values.,"```javascript
function extractString(str, l) {
    const result = [...str].filter(e => e.length === l);
    return result;
}
```",450,"```javascript
[""console.assert(extract_string([' ', 'list', 'exercises', 'practice', 'solution'], 8).toString() === ['practice', 'solution'].toString())"", ""console.assert(extract_string([' ', 'list', 'exercises', 'practice', 'solution'], 6).toString() === [' '].toString())"", ""console.assert(extract_string([' ', 'list', 'exercises', 'practice', 'solution'], 9).toString() === ['exercises'].toString())""]
```"
450, this function to remove all whitespaces from the given string using regex.,"```javascript
function removeWhitespaces(text1) {
  return text1.replace(/\s+/g, '');
}
```",451,"```javascript
console.assert(removeWhitespaces(' Google    Flutter ') === 'GoogleFlutter');
console.assert(removeWhitespaces(' Google    Dart ') === 'GoogleDart');
console.assert(removeWhitespaces(' iOS    Swift ') === 'iOSSwift');
```"
451, this function that gives loss amount if the given amount has loss else return none.,"```javascript
function lossAmount(actualCost, saleAmount) {
  if (saleAmount > actualCost) {
    let amount = saleAmount - actualCost;
    return amount;
  } else {
    return null;
  }
}
```",452,"```javascript
['console.assert(loss_amount(1500,1200) === undefined)', 'console.assert(loss_amount(100,200) === 100)', 'console.assert(loss_amount(2000,5000) === 3000)']
```"
452, this   function to find the sum of even factors of a number.,"```javascript
function sumOfFactors(n) {
    if (n % 2 !== 0) {
        return 0;
    }
    let res = 1;
    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {
        let count = 0;
        let curr_sum = 1;
        let curr_term = 1;
        while (n % i === 0) {
            count++;
            n = Math.floor(n / i);
            if (i === 2 && count === 1) {
                curr_sum = 0;
            }
            curr_term *= i;
            curr_sum += curr_term;
        }
        res *= curr_sum;
    }
    if (n >= 2) {
        res *= (1 + n);
    }
    return res;
}
```",453,"```javascript
['console.assert(sumofFactors(18) === 26)', 'console.assert(sumofFactors(30) === 48)', 'console.assert(sumofFactors(6) === 8)'];
```"
453, this function that matches a word containing 'z'.,"```javascript
function textMatchWordz(text) {
    const patterns = /\w*z.\w*/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",454,"```javascript
['console.assert(text_match_wordz("" z."") === ""Found a match!"");', 'console.assert(text_match_wordz(""xyz."") === ""Found a match!"");', 'console.assert(text_match_wordz(""  lang  ."") === ""Not matched!"");']
```"
454, this function to check whether the given month number contains 31 days or not.,"```javascript
function check_monthnumb_number(monthnum2) {
  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {
    return true;
  } else {
    return false;
  }
}
```",455,"```javascript
['console.assert(check_monthnumb_number(5) === true)', 'console.assert(check_monthnumb_number(2) === false)', 'console.assert(check_monthnumb_number(6) === false)'];
```"
455, this function to reverse strings in a given list of string values.,"```javascript
function reverseStringList(stringList) {
    var result = stringList.map(function(x) {
        return x.split('').reverse().join('');
    });
    return result;
}
```",456,"```javascript
[""console.assert(reverseStringList(['Red', 'Green', 'Blue', 'White', 'Black']).toString() === ['deR', 'neerG', 'eulB', 'etihW', 'kcalB'].toString())"", ""console.assert(reverseStringList(['john','amal','joel','george']).toString() === ['nhoj','lama','leoj','egroeg'].toString())"", ""console.assert(reverseStringList(['jack','john','mary']).toString() === ['kcaj','nhoj','yram'].toString())""]
```"
456, this   function to find the sublist having minimum length.,"```javascript
function Find_Min(lst) {
    let minList = Math.min(...lst);
    return [minList];
}
```",457,"```javascript
['console.assert(Find_Min([[1],[1,2],[1,2,3]]) === [1])', 'console.assert(Find_Min([[1,1],[1,1,1],[1,2,7,8]]) === [1,1])', 'console.assert(Find_Min([[""x""],[""x"",""y""],[""x"",""y"",""z""]]) === [""x""])']
```"
457, this function to find the area of a rectangle.,"```javascript
function rectangleArea(l, b) {
  const area = l * b;
  return area;
}
```",458,"```javascript
['console.assert(rectangle_area(10, 20) === 200)', 'console.assert(rectangle_area(10, 5) === 50)', 'console.assert(rectangle_area(4, 2) === 8)']
```"
458, this function to remove uppercase substrings from a given string by using regex.,"```javascript
function removeUppercase(str1) {
  const removeUpper = text => text.replace(/[A-Z]/g, '');
  const result = removeUpper(str1);
  return result;
}
```",459,"```javascript
[""console.assert(remove_uppercase('cAstyoUrFavoRitETVshoWs') === 'cstyoravoitshos')"", ""console.assert(remove_uppercase('wAtchTheinTernEtrAdIo') === 'wtchheinerntrdo')"", ""console.assert(remove_uppercase('VoicESeaRchAndreComMendaTionS') === 'oiceachndreomendaion')""]
```"
459, this   function to get the first element of each sublist.,"```javascript
function Extract(lst) {
    return lst.map(item => item[0]);
}
```",460,"```javascript
['console.assert(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) === [1, 3, 6])', 'console.assert(Extract([[1,2,3],[4, 5]]) === [1,4])', 'console.assert(Extract([[9,8,1],[1,2]]) === [9,1])']
```"
460, this   function to count the upper case characters in a given string.,"```javascript
function upperCtr(str) {
    let upperCtr = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') upperCtr += 1;
    }
    return upperCtr;
}
```",461,"```javascript
[""console.assert(upper_ctr(' ') === 1)"", ""console.assert(upper_ctr('BigData') === 1)"", ""console.assert(upper_ctr('program') === 0)""]
```"
461, this function to find all possible combinations of the elements of a given list.,"```javascript
function combinationsList(list1) {
    if (list1.length === 0) {
        return [[]];
    }
    let result = [];
    for (let el of combinationsList(list1.slice(1))) {
        result.push(el);
        result.push(el.concat(list1[0]));
    }
    return result;
}
```",462,"```javascript
console.assert(JSON.stringify(combinations_list(['orange', 'red', 'green', 'blue'])) === JSON.stringify([[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]));
console.assert(JSON.stringify(combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])) === JSON.stringify([[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]));
console.assert(JSON.stringify(combinations_list(['red', 'green', 'black', 'orange'])) === JSON.stringify([[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]));
```"
462, this function to find the maximum product subarray of the given array.,"```javascript
function maxSubarrayProduct(arr) {
    const n = arr.length;
    let maxEndingHere = 1;
    let minEndingHere = 1;
    let maxSoFar = 0;
    let flag = 0;
    
    for (let i = 0; i < n; i++) {
        if (arr[i] > 0) {
            maxEndingHere = maxEndingHere * arr[i];
            minEndingHere = Math.min(minEndingHere * arr[i], 1);
            flag = 1;
        } else if (arr[i] === 0) {
            maxEndingHere = 1;
            minEndingHere = 1;
        } else {
            const temp = maxEndingHere;
            maxEndingHere = Math.max(minEndingHere * arr[i], 1);
            minEndingHere = temp * arr[i];
        }
        if (maxSoFar < maxEndingHere) {
            maxSoFar = maxEndingHere;
        }
    }
    
    if (flag === 0 && maxSoFar === 0) {
        return 0;
    }
    return maxSoFar;
}
```",463,"```javascript
['console.assert(max_subarray_product([1, -2, -3, 0, 7, -8, -2]) === 112)', 'console.assert(max_subarray_product([6, -3, -10, 0, 2]) === 180)', 'console.assert(max_subarray_product([-2, -40, 0, -2, -3]) === 80)']
```"
463, this function to check if all values are same in a dictionary.,"```javascript
function checkValue(dict, n) {
    let result = Object.values(dict).every(x => x === n);
    return [result];
}
```",464,"```javascript
console.assert(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10) === false);
console.assert(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12) === true);
console.assert(check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5) === false);
```"
464, this function to drop empty items from a given dictionary.,"```javascript
function dropEmpty(dict1) {
  dict1 = Object.fromEntries(Object.entries(dict1).filter(([key, value]) => value !== null));
  return dict1;
}
```",465,"```javascript
[""console.assert(JSON.stringify(drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': null})) === JSON.stringify({'c1': 'Red', 'c2': 'Green'}))"", ""console.assert(JSON.stringify(drop_empty({'c1': 'Red', 'c2': null, 'c3': null})) === JSON.stringify({'c1': 'Red'}))"", ""console.assert(JSON.stringify(drop_empty({'c1': null, 'c2': 'Green', 'c3': null})) === JSON.stringify({'c2': 'Green'}))""]
```"
465, this function to find the peak element in the given array.,"```javascript
function findPeakUtil(arr, low, high, n) { 
    let mid = low + Math.floor((high - low) / 2); 
    if ((mid === 0 || arr[mid - 1] <= arr[mid]) &&
        (mid === n - 1 || arr[mid + 1] <= arr[mid])) { 
        return mid; 
    } else if (mid > 0 && arr[mid - 1] > arr[mid]) { 
        return findPeakUtil(arr, low, mid - 1, n); 
    } else { 
        return findPeakUtil(arr, mid + 1, high, n); 
    } 
} 

function findPeak(arr, n) { 
    return findPeakUtil(arr, 0, n - 1, n); 
}
```",466,"```javascript
console.assert(find_peak([1, 3, 20, 4, 1, 0], 6) === 2);
console.assert(find_peak([2, 3, 4, 5, 6], 5) === 4);
console.assert(find_peak([8, 9, 11, 12, 14, 15], 6) === 5);
```"
466, this   function to convert decimal number to octal number.,"```javascript
function decimalToOctal(deciNum) {
    let octalNum = 0;
    let countval = 1;
    let dNo = deciNum;
    while (deciNum != 0) {
        let remainder = deciNum % 8;
        octalNum += remainder * countval;
        countval = countval * 10;
        deciNum = Math.floor(deciNum / 8);
    }
    return octalNum;
}
```",467,"```javascript
['console.assert(decimal_to_Octal(10) === 12)', 'console.assert(decimal_to_Octal(2) === 2)', 'console.assert(decimal_to_Octal(33) === 41)']
```"
467, this function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"```javascript
function maxProduct(arr, n) {
    let mpis = new Array(n).fill(0);
    for (let i = 0; i < n; i++) {
        mpis[i] = arr[i];
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {
                mpis[i] = mpis[j] * arr[i];
            }
        }
    }
    return Math.max(...mpis);
}
```",468,"```javascript
['console.assert(max_product([3, 100, 4, 5, 150, 6], 6) === 45000)', 'console.assert(max_product([4, 42, 55, 68, 80], 5) === 50265600)', 'console.assert(max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) === 21780000)']
```"
468, this function to find the maximum profit earned from a maximum of k stock transactions,"```javascript
function max_profit(price, k) {
    const n = price.length;
    const final_profit = Array.from({ length: k + 1 }, () => Array(n).fill(null));
    
    for (let i = 0; i <= k; i++) {
        for (let j = 0; j < n; j++) {
            if (i === 0 || j === 0) {
                final_profit[i][j] = 0;
            } else {
                let max_so_far = 0;
                for (let x = 0; x < j; x++) {
                    const curr_price = price[j] - price[x] + final_profit[i - 1][x];
                    if (max_so_far < curr_price) {
                        max_so_far = curr_price;
                    }
                }
                final_profit[i][j] = Math.max(final_profit[i][j - 1], max_so_far);
            }
        }
    }
    return final_profit[k][n - 1];
}
```",469,"```javascript
['console.assert(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) === 10)', 'console.assert(max_profit([2, 4, 7, 5, 4, 3, 5], 2) === 7)', 'console.assert(max_profit([10, 6, 8, 4, 2], 2) === 2)']
```"
469, this function to find the pairwise addition of the elements of the given tuples.,"```javascript
function add_pairwise(test_tup) {
    const res = test_tup.slice(1).map((j, index) => test_tup[index] + j);
    return [res];
}
```",470,"```javascript
['console.assert(add_pairwise([1, 5, 7, 8, 10]).toString() === [6, 12, 15, 18].toString())', 'console.assert(add_pairwise([2, 6, 8, 9, 11]).toString() === [8, 14, 17, 20].toString())', 'console.assert(add_pairwise([3, 7, 9, 10, 12]).toString() === [10, 16, 19, 22].toString())']
```"
470, this   function to find remainder of array multiplication divided by n.,"```javascript
function findRemainder(arr, lens, n) { 
    let mul = 1; 
    for (let i = 0; i < lens; i++) {  
        mul = (mul * (arr[i] % n)) % n; 
    } 
    return mul % n; 
}
```",471,"```javascript
['console.assert(find_remainder([100, 10, 5, 25, 35, 14], 6, 11) === 9)', 'console.assert(find_remainder([1, 1, 1], 3, 1) === 0)', 'console.assert(find_remainder([1, 2, 1], 3, 2) === 0)']
```"
471, this   function to check whether the given list contains consecutive numbers or not.,"```javascript
function checkConsecutive(l) {
    return JSON.stringify(l.sort((a, b) => a - b)) === JSON.stringify(Array.from({length: Math.max(...l) - Math.min(...l) + 1}, (_, i) => i + Math.min(...l)));
}
```",472,"```javascript
console.assert(check_Consecutive([1,2,3,4,5]) === true);
console.assert(check_Consecutive([1,2,3,5,6]) === false);
console.assert(check_Consecutive([1,2,1]) === false);
```"
472, this function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"```javascript
function tupleIntersection(testList1, testList2) {
    const res = new Set(testList1.map(ele => JSON.stringify([...ele].sort()))).has(new Set(testList2.map(ele => JSON.stringify([...ele].sort()))));
    return res;
}
```",473,"```javascript
assert.deepEqual(tupleIntersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]), new Set([(4, 5), (3, 4), (5, 6)]));
assert.deepEqual(tupleIntersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]), new Set([(4, 7), (1, 4)]));
assert.deepEqual(tupleIntersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]), new Set([(1, 3), (2, 3)]));
```"
473, this function to replace characters in a string.,"```javascript
function replaceChar(str1, ch, newch) {
    let str2 = str1.replace(ch, newch);
    return str2;
}
```",474,"```javascript
['assert replace_char(""polygon"", \'y\', \'l\') === (""pollgon"")', 'assert replace_char(""character"", \'c\', \'a\') === (""aharaater"")', 'assert replace_char("" "", \'l\', \'a\') === ("" "")']
```"
474, this function to sort counter by value.,"```javascript
function sortCounter(dict1) {
    const sortedCounter = Object.entries(dict1).sort((a, b) => b[1] - a[1]);
    return sortedCounter;
}
```",475,"```javascript
[""console.assert(JSON.stringify(sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})) === JSON.stringify([['Chemistry', 87], ['Physics', 83], ['Math', 81]]));"", ""console.assert(JSON.stringify(sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})) === JSON.stringify([['Math', 400], ['Physics', 300], ['Chemistry', 250]]));"", ""console.assert(JSON.stringify(sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})) === JSON.stringify([['Chemistry', 1250], ['Physics', 1000], ['Math', 900]]));""]
```"
475, this   function to find the sum of the largest and smallest value in a given array.,"```javascript
function big_sum(nums) {
    let sum = Math.max(...nums) + Math.min(...nums);
    return sum;
}
```",476,"```javascript
['console.assert(big_sum([1,2,3]) === 4)', 'console.assert(big_sum([-1,2,3,4]) === 3)', 'console.assert(big_sum([2,3,6]) === 8)']
```"
476, this   function to convert the given string to lower case.,"```javascript
function is_lower(string) {
  return string.toLowerCase();
}
```",477,"```javascript
['console.assert(is_lower(""InValid"") === ""invalid"")', 'console.assert(is_lower(""TruE"") === ""true"")', 'console.assert(is_lower(""SenTenCE"") === ""sentence"")']
```"
477, this function to remove lowercase substrings from a given string.,"```javascript
function removeLowercase(str1) {
    const removeLower = text => text.replace(/[a-z]/g, '');
    const result = removeLower(str1);
    return result;
}
```",478,"```javascript
['console.assert(remove_lowercase("" "")===(""PYTH""))', 'console.assert(remove_lowercase(""FInD"")===(""FID""))', 'console.assert(remove_lowercase(""STRinG"")===(""STRG""))']
```"
478, this   function to find the first digit of a given number.,"```javascript
function firstDigit(n) {
    while (n >= 10) {
        n = n / 10;
    }
    return Math.floor(n);
}
```",479,"```javascript
console.assert(first_Digit(123) === 1);
console.assert(first_Digit(456) === 4);
console.assert(first_Digit(12) === 1);
```"
479, this   function to find the maximum occurring character in a given string.,"```javascript
function getMaxOccuringChar(str1) {
  const ASCII_SIZE = 256;
  const ctr = new Array(ASCII_SIZE).fill(0);
  let max = -1;
  let ch = '';

  for (let i of str1) {
    ctr[i.charCodeAt(0)]++;
  }
  
  for (let i of str1) {
    if (max < ctr[i.charCodeAt(0)]) {
      max = ctr[i.charCodeAt(0)];
      ch = i;
    }
  }
  
  return [ch];
}
```",480,"```javascript
['console.assert(get_max_occuring_char(""data"") === ""a"")', 'console.assert(get_max_occuring_char(""create"") === ""e"")', 'console.assert(get_max_occuring_char(""brilliant girl"") === ""i"")']
```"
480, this function to determine if there is a subset of the given set with sum equal to the given sum.,"```javascript
function isSubsetSum(set, n, sum) {
    if (sum === 0) {
        return true;
    }
    if (n === 0) {
        return false;
    }
    if (set[n - 1] > sum) {
        return isSubsetSum(set, n - 1, sum);
    }
    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);
}
```",481,"```javascript
console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) === true);
console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) === false);
console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) === true);
```"
481, this function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"```javascript
function match(text) {
    const pattern = /^[A-Z]+[a-z]+$/;
    if (pattern.test(text)) {
        return 'Yes';
    } else {
        return 'No';
    }
}
```",482,"```javascript
['assert match(""Geeks"") === ""Yes""', 'assert match(""geeksforGeeks"") === ""Yes""', 'assert match(""geeks"") === ""No""']
```"
482, this   function to find the first natural number whose factorial is divisible by x.,"```javascript
function firstFactorialDivisibleNumber(x) {
    let i = 1;
    let fact = 1;
    for (i = 1; i < x; i++) {
        fact = fact * i;
        if (fact % x === 0) {
            break;
        }
    }
    return i;
}
```",483,"```javascript
['console.assert(first_Factorial_Divisible_Number(10) === 5)', 'console.assert(first_Factorial_Divisible_Number(15) === 5)', 'console.assert(first_Factorial_Divisible_Number(5) === 4)']
```"
483, this function to remove the matching tuples from the given two tuples.,"```javascript
function remove_matching_tuple(test_list1, test_list2) {
    let res = test_list1.filter(sub => !test_list2.includes(sub));
    return res;
}
```",484,"```javascript
console.assert(remove_matching_tuple([['Hello', 'dude'], ['How', 'are'], ['you', '?']], [['Hello', 'dude'], ['How', 'are']]).toString() === [['you', '?']].toString());
console.assert(remove_matching_tuple([['Part', 'of'], ['the', 'journey'], ['is ', 'end']], [['Journey', 'the'], ['is', 'end']]).toString() === [['Part', 'of'], ['the', 'journey'], ['is ', 'end']].toString());
console.assert(remove_matching_tuple([['Its', 'been'], ['a', 'long'], ['day', 'without']], [['a', 'long'], ['my', 'friend']]).toString() === [['Its', 'been'], ['day', 'without']].toString());
```"
484, this function to find the largest palindromic number in the given array.,"```javascript
function is_palindrome(n) {
    let divisor = 1;
    while (n / divisor >= 10) {
        divisor *= 10;
    }
    while (n !== 0) {
        const leading = Math.floor(n / divisor);
        const trailing = n % 10;
        if (leading !== trailing) {
            return false;
        }
        n = Math.floor((n % divisor) / 10);
        divisor = Math.floor(divisor / 100);
    }
    return true;
}

function largest_palindrome(A, n) {
    A.sort((a, b) => b - a);
    for (let i = n - 1; i >= 0; i--) {
        if (is_palindrome(A[i])) {
            return A[i];
        }
    }
    return -1;
}
```",485,"```javascript
console.assert(largest_palindrome([1, 232, 54545, 999991], 4) === 54545);
console.assert(largest_palindrome([1, 2, 3, 4, 5, 50], 6) === 5);
console.assert(largest_palindrome([1, 3, 7, 9, 45], 5) === 9);
```"
485, this function to compute binomial probability for the given number.,"```javascript
function nCr(n, r) {
    if (r > n / 2) {
        r = n - r;
    }
    let answer = 1;
    for (let i = 1; i <= r; i++) {
        answer *= (n - r + i);
        answer /= i;
    }
    return answer;
}

function binomialProbability(n, k, p) {
    return (nCr(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k));
}
```",486,"```javascript
console.assert(binomial_probability(10, 5, 1.0/3) === 0.13656454808718185);
console.assert(binomial_probability(11, 6, 2.0/4) === 0.2255859375);
console.assert(binomial_probability(12, 7, 3.0/5) === 0.227030335488);
```"
486, this function to sort a list of tuples in increasing order by the last element in each tuple.,"```javascript
function sortTuple(tup) {
    const lst = tup.length;
    for (let i = 0; i < lst; i++) {
        for (let j = 0; j < lst - i - 1; j++) {
            if (tup[j][tup[j].length - 1] > tup[j + 1][tup[j + 1].length - 1]) {
                let temp = tup[j];
                tup[j] = tup[j + 1];
                tup[j + 1] = temp;
            }
        }
    }
    return tup;
}
```",487,"```javascript
['console.assert(JSON.stringify(sortTuple([(1, 3), (3, 2), (2, 1)])) === JSON.stringify([(2, 1), (3, 2), (1, 3)]))', 
 'console.assert(JSON.stringify(sortTuple([(2, 4), (3, 3), (1, 1)])) === JSON.stringify([(1, 1), (3, 3), (2, 4)]))', 
 'console.assert(JSON.stringify(sortTuple([(3, 9), (6, 7), (4, 3)])) === JSON.stringify([(4, 3), (6, 7), (3, 9)]))']
```"
487, this function to find the area of a pentagon.,"```javascript
function areaPentagon(a) {
  var area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;
  return area;
}
```",488,"```javascript
['console.assert(area_pentagon(5) === 43.01193501472417)', 'console.assert(area_pentagon(10) === 172.0477400588967)', 'console.assert(area_pentagon(15) === 387.10741513251753)']
```"
488, this   function to find the frequency of the largest value in a given array.,"```javascript
function frequencyOfLargest(n, arr) {
    let mn = arr[0];
    let freq = 1;
    for (let i = 1; i < n; i++) {
        if (arr[i] > mn) {
            mn = arr[i];
            freq = 1;
        } else if (arr[i] === mn) {
            freq += 1;
        }
    }
    return [freq];
}
```",489,"```javascript
console.assert(frequency_Of_Largest(5,[1,2,3,4,4]) === 2);
console.assert(frequency_Of_Largest(3,[5,6,5]) === 1);
console.assert(frequency_Of_Largest(4,[2,7,7,7]) === 3);
```"
489, this function to extract all the pairs which are symmetric in the given tuple list.,"```javascript
function extract_symmetric(testList) {
    const temp = new Set(testList.filter((a, b) => {
        return testList.some(([x, y]) => x === b && y === a);
    }));
    const res = new Set([...temp].filter(([a, b]) => a < b));
    return res;
}
```",490,"```javascript
['console.assert(extract_symmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]]) == new Set([[8, 9], [6, 7]]);', 
 'console.assert(extract_symmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]]) == new Set([[9, 10], [7, 8]]);', 
 'console.assert(extract_symmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]]) == new Set([[8, 9], [10, 11]]);']
```"
490, this function to find the sum of geometric progression series.,"```javascript
function sum_gp(a, n, r) {
    let total = (a * (1 - Math.pow(r, n))) / (1 - r);
    return total;
}
```",491,"```javascript
['console.assert(sum_gp(1, 5, 2) === 31)', 'console.assert(sum_gp(1, 5, 4) === 341)', 'console.assert(sum_gp(2, 6, 3) === 728)']
```"
491, this function to search an element in the given array by using binary search.,"```javascript
function binarySearch(itemList, item) {
    let first = 0;
    let last = itemList.length - 1;
    let found = false;
    while (first <= last && !found) {
        let mid = Math.floor((first + last) / 2);
        if (itemList[mid] === item) {
            found = true;
        } else {
            if (item < itemList[mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    }
    return [found];
}
```",492,"```javascript
['console.assert(binary_search([1,2,3,5,8], 6) === false)', 'console.assert(binary_search([7, 8, 9, 10, 13], 10) === true)', 'console.assert(binary_search([11, 13, 14, 19, 22, 36], 23) === false)']
```"
492," this function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","```javascript
function calculatePolygons(startx, starty, endx, endy, radius) {
    const sl = (2 * radius) * Math.tan(Math.PI / 6);
    const p = sl * 0.5;
    const b = sl * Math.cos((30 * Math.PI) / 180);
    const w = b * 2;
    const h = 2 * sl;
    startx = startx - w;
    starty = starty - h;
    endx = endx + w;
    endy = endy + h;
    const origx = startx;
    const origy = starty;
    const xoffset = b;
    const yoffset = 3 * p;
    const polygons = [];
    let row = 1;
    let counter = 0;

    while (starty < endy) {
        if (row % 2 === 0) {
            startx = origx + xoffset;
        } else {
            startx = origx;
        }

        while (startx < endx) {
            const p1x = startx;
            const p1y = starty + p;
            const p2x = startx;
            const p2y = starty + (3 * p);
            const p3x = startx + b;
            const p3y = starty + h;
            const p4x = startx + w;
            const p4y = starty + (3 * p);
            const p5x = startx + w;
            const p5y = starty + p;
            const p6x = startx + b;
            const p6y = starty;

            const poly = [
                [p1x, p1y],
                [p2x, p2y],
                [p3x, p3y],
                [p4x, p4y],
                [p5x, p5y],
                [p6x, p6y],
                [p1x, p1y]
            ];
            polygons.push(poly);
            counter += 1;
            startx += w;
        }
        starty += yoffset;
        row += 1;
    }
    return [polygons];
}
```",493,"```javascript
assert calculate_polygons(1, 1, 4, 4, 3).toString() === [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]].toString();

assert calculate_polygons(5, 4, 7, 9, 8).toString() === [[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]].toString();

assert calculate_polygons(9, 6, 4, 3, 2).toString() === [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]].toString();
```"
493, this function to convert the given binary tuple to integer.,"```javascript
function binaryToInteger(testTup) {
  let res = parseInt(testTup.join(''), 2);
  return res.toString();
}
```",494,"```javascript
[""console.assert(binary_to_integer([1, 1, 0, 1, 0, 0, 1]) === '105')"", ""console.assert(binary_to_integer([0, 1, 1, 0, 0, 1, 0, 1]) === '101')"", ""console.assert(binary_to_integer([1, 1, 0, 1, 0, 1]) === '53')""]
```"
494, this function to remove lowercase substrings from a given string by using regex.,"```javascript
function removeLowercase(str1) {
  const removeLower = text => text.replace(/[a-z]/g, '');
  const result = removeLower(str1);
  return result;
}
```",495,"```javascript
console.assert(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') === 'KDALOOOHLAJSI');
console.assert(remove_lowercase('ProducTnamEstreAmIngMediAplAYer') === 'PTEAIMAAY');
console.assert(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') === 'NTYSZTNOGI');
```"
495, this function to find the smallest integers from a given list of numbers using heap queue algorithm.,"```javascript
function heapQueueSmallest(nums, n) {
    return nums.sort((a, b) => a - b).slice(0, n);
}
```",496,"```javascript
['console.assert(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3).toString() === [14, 22, 25].toString())', 
 'console.assert(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2).toString() === [14, 22].toString())', 
 'console.assert(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5).toString() === [14, 22, 22, 25, 35].toString())']
```"
496, this function to find the surface area of a cone.,"```javascript
function surfacearea_cone(r, h) {
  let l = Math.sqrt(r * r + h * h);
  let SA = Math.PI * r * (r + l);
  return SA;
}
```",497,"```javascript
['console.assert(surfacearea_cone(5, 12) === 282.7433388230814)', 'console.assert(surfacearea_cone(10, 15) === 880.5179353159282)', 'console.assert(surfacearea_cone(19, 17) === 2655.923961165254)']
```"
497, this   function to find gcd of two positive integers.,"```javascript
function gcd(x, y) {
    let gcd = 1;
    if (x % y === 0) {
        return y;
    }
    for (let k = Math.floor(y / 2); k > 0; k--) {
        if (x % k === 0 && y % k === 0) {
            gcd = k;
            break;
        }
    }
    return gcd;
}
```",498,"```javascript
['console.assert(gcd(12, 17) === 1)', 'console.assert(gcd(4, 6) === 2)', 'console.assert(gcd(2, 9) === 1)']
```"
498, this function to find the diameter of a circle.,"```javascript
function diameterCircle(r) {
    let diameter = 2 * r;
    return diameter;
}
```",499,"```javascript
['console.assert(diameter_circle(10) === 20)', 'console.assert(diameter_circle(40) === 80)', 'console.assert(diameter_circle(15) === 30)']
```"
499, this function to concatenate all elements of the given list into a string.,"```javascript
function concatenateElements(list) {
  let ans = ' ';
  for (let i of list) {
    ans += ' ' + i;
  }
  return ans;
}
```",500,"```javascript
assert(concatenate_elements(['hello','there','have','a','rocky','day']) === '  hello there have a rocky day');
assert(concatenate_elements(['Hi', 'there', 'How','are', 'you']) === '  Hi there How are you');
assert(concatenate_elements(['Part', 'of', 'the','journey', 'is', 'end']) === '  Part of the journey is end');
```"
500, this   function to find common divisor between two numbers in a given pair.,"```javascript
function ngcd(x, y) {
    let i = 1;
    let gcd = 1;
    while (i <= x && i <= y) {
        if (x % i === 0 && y % i === 0) {
            gcd = i;
        }
        i++;
    }
    return gcd;
}

function num_comm_div(x, y) {
    let n = ngcd(x, y);
    let result = 0;
    let z = Math.floor(Math.sqrt(n));
    let i = 1;
    while (i <= z) {
        if (n % i === 0) {
            result += 2;
            if (i === n / i) {
                result -= 1;
            }
        }
        i++;
    }
    return [result];
}
```",501,"```javascript
['console.assert(num_comm_div(2, 4) === 2)', 'console.assert(num_comm_div(2, 8) === 2)', 'console.assert(num_comm_div(12, 24) === 6)']
```"
501, this   function to find remainder of two numbers.,"```javascript
function find(n, m) {
  let r = n % m;
  return r;
}
```",502,"```javascript
['console.assert(find(3, 3) === 0)', 'console.assert(find(10, 3) === 1)', 'console.assert(find(16, 5) === 1)'];
```"
502, this function to add consecutive numbers of a given list.,"```javascript
function addConsecutiveNums(nums) {
    const result = nums.slice(1).map((b, i) => b + nums[i]);
    return result;
}
```",503,"```javascript
['console.assert(JSON.stringify(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])) === JSON.stringify([2, 4, 7, 8, 9, 11, 13])', 'console.assert(JSON.stringify(add_consecutive_nums([4, 5, 8, 9, 6, 10])) === JSON.stringify([9, 13, 17, 15, 16])', 'console.assert(JSON.stringify(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([3, 5, 7, 9, 11, 13, 15, 17, 19])']
```"
503, this   function to find the cube sum of first n natural numbers.,"```javascript
function sumOfSeries(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i * i * i;
    }
    return sum;
}
```",504,"```javascript
['console.assert(sum_Of_Series(5) === 225)', 'console.assert(sum_Of_Series(2) === 9)', 'console.assert(sum_Of_Series(3) === 36)'];
```"
504, this function to move all zeroes to the end of the given array.,"```javascript
function reOrder(A) {
    let k = 0;
    for (let i of A) {
        if (i) {
            A[k] = i;
            k++;
        }
    }
    for (let i = k; i < A.length; i++) {
        A[i] = 0;
    }
    return A;
}
```",505,"```javascript
['console.assert(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]).toString() === [6, 8, 2, 3, 4, 1, 0, 0, 0].toString())', 
 'console.assert(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]).toString() === [4, 2, 7, 9, 12, 0, 0, 0, 0].toString())', 
 'console.assert(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]).toString() === [3, 11, 74, 14, 1, 2, 0, 0, 0].toString())']
```"
505," this function to calculate the permutation coefficient of given p(n, k).","```javascript
function permutationCoefficient(n, k) {
    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));

    for (let i = 0; i <= n; i++) {
        for (let j = 0; j <= Math.min(i, k); j++) {
            if (j === 0) {
                P[i][j] = 1;
            } else {
                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);
            }
            if (j < k) {
                P[i][j + 1] = 0;
            }
        }
    }
    return P[n][k];
}
```",506,"```javascript
['console.assert(permutation_coefficient(10, 2) === 90)', 'console.assert(permutation_coefficient(10, 3) === 720)', 'console.assert(permutation_coefficient(10, 1) === 10)']
```"
506, this function to remove specific words from a given list.,"```javascript
function removeWords(list1, removeWords) {
    for (let word of [...list1]) {
        if (removeWords.includes(word)) {
            list1.splice(list1.indexOf(word), 1);
        }
    }
    return list1;
}
```",507,"```javascript
[""console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])) === JSON.stringify(['red', 'green', 'blue', 'black']));"", ""console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])) === JSON.stringify(['red', 'green', 'blue', 'white']));"", ""console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])) === JSON.stringify(['red', 'green', 'black', 'orange']));""]
```"
507, this function to check if the common elements between two given lists are in the same order or not.,"```javascript
function sameOrder(l1, l2) {
    const commonElements = new Set(l1.filter(e => l2.includes(e)));
    l1 = l1.filter(e => commonElements.has(e));
    l2 = l2.filter(e => commonElements.has(e));
    return [l1.length === l2.length && l1.every((val, index) => val === l2[index])];
}
```",508,"```javascript
console.assert(same_order([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""]) === true);
console.assert(same_order([""red"",""pink"",""green"",""white"",""black""],[""white"",""orange"",""pink"",""black""]) === false);
console.assert(same_order([""red"",""green"",""black"",""orange""],[""red"",""pink"",""green"",""white"",""black""]) === true);
```"
508, this   function to find the average of odd numbers till a given odd number.,"```javascript
function average_Odd(n) {
    if (n % 2 === 0) {
        return ""Invalid Input"";
        return -1;
    }
    let sm = 0;
    let count = 0;
    while (n >= 1) {
        count = count + 1;
        sm = sm + n;
        n = n - 2;
    }
    return Math.floor(sm / count);
}
```",509,"```javascript
['console.assert(average_Odd(9) === 5)', 'console.assert(average_Odd(5) === 3)', 'console.assert(average_Odd(11) === 6)']
```"
509, this function to find the number of subsequences having product smaller than k for the given non negative array.,"```javascript
function noOfSubsequences(arr, k) {
    let n = arr.length;
    let dp = Array.from({ length: k + 1 }, () => Array(n + 1).fill(0));
    
    for (let i = 1; i <= k; i++) {
        for (let j = 1; j <= n; j++) {
            dp[i][j] = dp[i][j - 1];
            if (arr[j - 1] <= i && arr[j - 1] > 0) {
                dp[i][j] += dp[Math.floor(i / arr[j - 1])][j - 1] + 1;
            }
        }
    }
    return dp[k][n];
}
```",510,"```javascript
['console.assert(no_of_subsequences([1,2,3,4], 10) === 11)', 'console.assert(no_of_subsequences([4,8,7,2], 50) === 9)', 'console.assert(no_of_subsequences([5,6,7,8], 15) === 4)']
```"
510, this   function to find minimum sum of factors of a given number.,"```javascript
function find_Min_Sum(num) {
    let sum = 0;
    let i = 2;
    while (i * i <= num) {
        while (num % i === 0) {
            sum += i;
            num /= i;
        }
        i += 1;
    }
    sum += num;
    return sum;
}
```",511,"```javascript
['console.assert(find_Min_Sum(12) === 7)', 'console.assert(find_Min_Sum(105) === 15)', 'console.assert(find_Min_Sum(2) === 2)']
```"
511, this function to count the element frequency in the mixed nested tuple.,"```javascript
function* flatten(testTuple) {
    for (const tup of testTuple) {
        if (Array.isArray(tup)) {
            yield* flatten(tup);
        } else {
            yield tup;
        }
    }
}

function countElementFreq(testTuple) {
    const res = {};
    for (const ele of flatten(testTuple)) {
        if (!(ele in res)) {
            res[ele] = 0;
        }
        res[ele] += 1;
    }
    return [res];
}
```",512,"```javascript
['console.assert(JSON.stringify(countElementFreq((5, 6, (5, 6), 7, (8, 9), 9))) === JSON.stringify({5: 2, 6: 2, 7: 1, 8: 1, 9: 2}));', 'console.assert(JSON.stringify(countElementFreq((6, 7, (6, 7), 8, (9, 10), 10))) === JSON.stringify({6: 2, 7: 2, 8: 1, 9: 1, 10: 2}));', 'console.assert(JSON.stringify(countElementFreq((7, 8, (7, 8), 9, (10, 11), 11))) === JSON.stringify({7: 2, 8: 2, 9: 1, 10: 1, 11: 2}));']
```"
512, this function to convert tuple into list by adding the given string after every element.,"```javascript
function addStr(testTup, K) {
    let res = [];
    for (let sub of testTup) {
        res.push(sub, K);
    }
    return res;
}
```",513,"```javascript
['console.assert(add_str([5, 6, 7, 4, 9], ""FDF"").toString() === [5, ""FDF"", 6, ""FDF"", 7, ""FDF"", 4, ""FDF"", 9, ""FDF""].toString())', 'console.assert(add_str([7, 8, 9, 10], ""PF"").toString() === [7, ""PF"", 8, ""PF"", 9, ""PF"", 10, ""PF""].toString())', 'console.assert(add_str([11, 14, 12, 1, 4], ""JH"").toString() === [11, ""JH"", 14, ""JH"", 12, ""JH"", 1, ""JH"", 4, ""JH""].toString())']
```"
513, this function to find the summation of tuple elements in the given tuple list.,"```javascript
function sumElements(testTup) {
    let res = testTup.reduce((a, b) => a + b, 0);
    return res;
}
```",514,"```javascript
console.assert(sumElements([7, 8, 9, 1, 10, 7]) === 42);
console.assert(sumElements([1, 2, 3, 4, 5, 6]) === 21);
console.assert(sumElements([11, 12, 13, 45, 14]) === 95);
```"
514, this function to check if there is a subset with sum divisible by m.,"```javascript
function modularSum(arr, n, m) {
    if (n > m) {
        return true;
    }
    let DP = Array(m).fill(false);
    for (let i = 0; i < n; i++) {
        if (DP[0]) {
            return true;
        }
        let temp = Array(m).fill(false);
        for (let j = 0; j < m; j++) {
            if (DP[j] === true) {
                if (DP[(j + arr[i]) % m] === false) {
                    temp[(j + arr[i]) % m] = true;
                }
            }
        }
        for (let j = 0; j < m; j++) {
            if (temp[j]) {
                DP[j] = true;
            }
        }
        DP[arr[i] % m] = true;
    }
    return DP[0];
}
```",515,"```javascript
console.assert(modular_sum([3, 1, 7, 5], 4, 6) === true);
console.assert(modular_sum([1, 7], 2, 5) === false);
console.assert(modular_sum([1, 6], 2, 5) === false);
```"
515, this function to sort a list of elements using radix sort.,"```javascript
function radixSort(nums) {
  const RADIX = 10;
  let placement = 1;
  const maxDigit = Math.max(...nums);

  while (placement < maxDigit) {
    const buckets = Array.from({ length: RADIX }, () => []);
    for (const i of nums) {
      const tmp = Math.floor((i / placement) % RADIX);
      buckets[tmp].push(i);
    }
    let a = 0;
    for (let b = 0; b < RADIX; b++) {
      const buck = buckets[b];
      for (const i of buck) {
        nums[a] = i;
        a++;
      }
    }
    placement *= RADIX;
  }
  return nums;
}
```",516,"```javascript
console.assert(radix_sort([15, 79, 25, 68, 37]).toString() === [15, 25, 37, 68, 79].toString());
console.assert(radix_sort([9, 11, 8, 7, 3, 2]).toString() === [2, 3, 7, 8, 9, 11].toString());
console.assert(radix_sort([36, 12, 24, 26, 29]).toString() === [12, 24, 26, 29, 36].toString());
```"
516, this   function to find the largest postive number from the given list.,"```javascript
function largestPos(list1) { 
    let max = list1[0]; 
    for (let x of list1) { 
        if (x > max) { 
            max = x;  
        } 
    } 
    return max; 
}
```",517,"```javascript
['console.assert(largest_pos([1,2,3,4,-1]) == 4)', 'console.assert(largest_pos([0,1,2,-5,-1,6]) == 6)', 'console.assert(largest_pos([0,0,1,0]) == 1)']
```"
517, this function to find the square root of a perfect number.,"```javascript
function sqrtRoot(num) {
    const sqrtRoot = Math.pow(num, 0.5);
    return sqrtRoot;
}
```",518,"```javascript
['console.assert(sqrt_root(4)===2)', 'console.assert(sqrt_root(16)===4)', 'console.assert(sqrt_root(400)===20)']
```"
518, this function to calculate volume of a tetrahedron.,"```javascript
function volumeTetrahedron(num) {
    const volume = (num ** 3) / (6 * Math.sqrt(2));
    return Math.round(volume * 100) / 100;
}
```",519,"```javascript
['console.assert(volume_tetrahedron(10) === 117.85)', 'console.assert(volume_tetrahedron(15) === 397.75)', 'console.assert(volume_tetrahedron(20) === 942.81)']
```"
519, this function to find the lcm of the given array elements.,"```javascript
function findLcm(num1, num2) {
    let num, den;
    if (num1 > num2) {
        num = num1;
        den = num2;
    } else {
        num = num2;
        den = num1;
    }
    let rem = num % den;
    while (rem !== 0) {
        num = den;
        den = rem;
        rem = num % den;
    }
    const gcd = den;
    const lcm = Math.floor((num1 * num2) / gcd);
    return lcm;
}

function getLcm(l) {
    let num1 = l[0];
    let num2 = l[1];
    let lcm = findLcm(num1, num2);
    for (let i = 2; i < l.length; i++) {
        lcm = findLcm(lcm, l[i]);
    }
    return lcm;
}
```",520,"```javascript
console.assert(get_lcm([2, 7, 3, 9, 4]) === 252);
console.assert(get_lcm([1, 2, 8, 3]) === 24);
console.assert(get_lcm([3, 8, 4, 10, 5]) === 120);
```"
520, this function to print check if the triangle is scalene or not.,"```javascript
function check_isosceles(x, y, z) {
  if (x !== y && y !== z && z !== x) {
    return true;
  } else {
    return false;
  }
}
```",521,"```javascript
['console.assert(check_isosceles(6, 8, 12) === true)', 'console.assert(check_isosceles(6, 6, 12) === false)', 'console.assert(check_isosceles(6, 15, 20) === true)']
```"
521, this function to find the longest bitonic subsequence for the given array.,"```javascript
function lbs(arr) { 
    let n = arr.length; 
    let lis = Array(n + 1).fill(1); 
    for (let i = 1; i < n; i++) { 
        for (let j = 0; j < i; j++) { 
            if ((arr[i] > arr[j]) && (lis[i] < lis[j] + 1)) { 
                lis[i] = lis[j] + 1; 
            } 
        } 
    } 
    let lds = Array(n + 1).fill(1); 
    for (let i = n - 2; i >= 0; i--) { 
        for (let j = n - 1; j > i; j--) { 
            if (arr[i] > arr[j] && lds[i] < lds[j] + 1) { 
                lds[i] = lds[j] + 1; 
            } 
        } 
    } 
    let maximum = lis[0] + lds[0] - 1; 
    for (let i = 1; i < n; i++) { 
        maximum = Math.max((lis[i] + lds[i] - 1), maximum); 
    } 
    return maximum; 
}
```",522,"```javascript
['console.assert(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]) === 7)', 'console.assert(lbs([1, 11, 2, 10, 4, 5, 2, 1]) === 6)', 'console.assert(lbs([80, 60, 30, 40, 20, 10]) === 5)']
```"
522," this function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","```javascript
function checkString(str1) {
    const messg = [
        str => /[A-Z]/.test(str) || 'String must have 1 upper case character.',
        str => /[a-z]/.test(str) || 'String must have 1 lower case character.',
        str => /\d/.test(str) || 'String must have 1 number.',
        str => str.length >= 7 || 'String length should be at least 8.'
    ];
    const result = messg.map(fn => fn(str1)).filter(x => x !== true);
    if (result.length === 0) {
        result.push('Valid string.');
    }
    return result;
}
```",523,"```javascript
[""console.assert(check_string(' ').toString() === ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.'].toString());"", ""console.assert(check_string('123 ').toString() === ['String must have 1 upper case character.'].toString());"", ""console.assert(check_string('123 ').toString() === ['Valid string.'].toString());""]
```"
523, this function to find the sum of maximum increasing subsequence of the given array.,"```javascript
function maxSumIncreasingSubsequence(arr, n) {
    let max = 0;
    let msis = new Array(n).fill(0);
    for (let i = 0; i < n; i++) {
        msis[i] = arr[i];
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {
                msis[i] = msis[j] + arr[i];
            }
        }
    }
    for (let i = 0; i < n; i++) {
        if (max < msis[i]) {
            max = msis[i];
        }
    }
    return max;
}
```",524,"```javascript
['console.assert(max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106)', 'console.assert(max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22)', 'console.assert(max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10)']
```"
524, this   function to check whether two given lines are parallel or not.,"```javascript
function parallelLines(line1, line2) {
    return line1[0] / line1[1] === line2[0] / line2[1];
}
```",525,"```javascript
console.assert(parallel_lines([2,3,4], [2,3,8]) === true);
console.assert(parallel_lines([2,3,4], [4,-3,8]) === false);
console.assert(parallel_lines([3,3],[5,5]) === true);
```"
525, this   function to capitalize first and last letters of each word of a given string.,"```javascript
function capitalizeFirstLastLetters(str1) {
    str1 = str1.toLowerCase();
    let result = """";
    for (let word of str1.split("" "")) {
        result += word.slice(0, -1) + word.charAt(word.length - 1).toUpperCase() + "" "";
    }
    return result.trim();
}
```",526,"```javascript
['console.assert(capitalize_first_last_letters("" "") === "" "")', 'console.assert(capitalize_first_last_letters(""bigdata"") === ""BigdatA"")', 'console.assert(capitalize_first_last_letters(""Hadoop"") === ""HadooP"")']
```"
526, this function to find all pairs in an integer array whose sum is equal to a given number.,"```javascript
function getPairsCount(arr, n, sum) {
    let count = 0; 
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] === sum) {
                count++;
            }
        }
    }
    return count;
}
```",527,"```javascript
['console.assert(get_pairs_count([1, 5, 7, -1, 5], 5, 6) === 3)', 'console.assert(get_pairs_count([1, 5, 7, -1], 4, 6) === 2)', 'console.assert(get_pairs_count([1, 1, 1, 1], 4, 2) === 6)']
```"
527, this function to find the list of lists with minimum length.,"```javascript
function minLength(list1) {
    let minLength = Math.min(...list1.map(x => x.length));
    let minList = list1.reduce((a, b) => (a.length < b.length ? a : b));
    return [minLength, minList];
}
```",528,"```javascript
['console.assert(JSON.stringify(min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([1, [0]])', 'console.assert(JSON.stringify(min_length([[1], [5, 7], [10, 12, 14, 15]])) === JSON.stringify([1, [1]])', 'console.assert(JSON.stringify(min_length([[5], [15, 20, 25]])) === JSON.stringify([1, [5]])']
```"
528, this function to find the nth jacobsthal-lucas number.,"```javascript
function jacobsthal_lucas(n) { 
    let dp = new Array(n + 1).fill(0); 
    dp[0] = 2; 
    dp[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
    } 
    return [dp[n]]; 
}
```",529,"```javascript
['console.assert(jacobsthal_lucas(5) === 31)', 'console.assert(jacobsthal_lucas(2) === 5)', 'console.assert(jacobsthal_lucas(4) === 17)']
```"
529, this function to find the ration of negative numbers in an array of integers.,"```javascript
function negativeCount(nums) {
    let n = nums.length;
    let n1 = 0;
    for (let x of nums) {
        if (x < 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
```",530,"```javascript
['console.assert(negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.31)', 'console.assert(negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.31)', 'console.assert(negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.44)']
```"
530, this function to find minimum number of coins that make a given value.,"```javascript
function minCoins(coins, m, V) { 
    if (V === 0) { 
        return 0; 
    } 
    let res = Number.MAX_VALUE; 
    for (let i = 0; i < m; i++) { 
        if (coins[i] <= V) { 
            let subRes = minCoins(coins, m, V - coins[i]); 
            if (subRes !== Number.MAX_VALUE && subRes + 1 < res) { 
                res = subRes + 1; 
            } 
        } 
    } 
    return res; 
}
```",531,"```javascript
['console.assert(min_coins([9, 6, 5, 1], 4, 11) === 2)', 'console.assert(min_coins([4, 5, 6, 7, 8, 9], 6, 9) === 1)', 'console.assert(min_coins([1, 2, 3], 3, 4) === 2)']
```"
531, this function to check if the two given strings are permutations of each other.,"```javascript
function checkPermutation(str1, str2) {
  var n1 = str1.length;
  var n2 = str2.length;
  if (n1 !== n2) {
    return false;
  }
  var a = str1.split("""").sort();
  str1 = a.join("" "");
  var b = str2.split("""").sort();
  str2 = b.join("" "");
  for (var i = 0; i < n1; i++) {
    if (str1[i] !== str2[i]) {
      return false;
    }
  }
  return true;
}
```",532,"```javascript
['console.assert(check_permutation(""abc"", ""cba"") === true)', 'console.assert(check_permutation(""test"", ""ttew"") === false)', 'console.assert(check_permutation(""xxyz"", ""yxzx"") === true)']
```"
532, this function to remove particular data type elements from the given tuple.,"```javascript
function remove_datatype(test_tuple, data_type) {
  let res = [];
  for (let ele of test_tuple) {
    if (!(ele instanceof data_type)) {
      res.push(ele);
    }
  }
  return res;
}
```",533,"```javascript
console.assert(remove_datatype([4, 5, 4, 7.7, 1.2], 'number') === [7.7, 1.2]);
console.assert(remove_datatype([7, 8, 9, ""SR""], 'string') === [7, 8, 9]);
console.assert(remove_datatype([7, 1.1, 2, 2.2], 'number') === [7, 2]);
```"
533, this function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"```javascript
function searchLiteral(pattern, text) {
    const match = text.match(pattern);
    const s = match.index;
    const e = s + match[0].length;
    return [[s, e]];
}
```",534,"```javascript
[""console.assert(search_literal(' ', '  programming language') === [0, 6])"", ""console.assert(search_literal('programming', '  programming language') === [7, 18])"", ""console.assert(search_literal('language', '  programming language') === [19, 27])""]
```"
534, this function to find the top or bottom surface area of a cylinder.,"```javascript
function topbottom_surfacearea(r) {
  let toporbottomarea = 3.1415 * r * r;
  return toporbottomarea;
}
```",535,"```javascript
['console.assert(topbottom_surfacearea(10) === 314.15000000000003)', 'console.assert(topbottom_surfacearea(5) === 78.53750000000001)', 'console.assert(topbottom_surfacearea(4) === 50.264)']
```"
535, this function to select the nth items of a list.,"```javascript
function nthItems(array, n) {
    return array.filter((_, index) => index % n === 0);
}
```",536,"```javascript
['console.assert(nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2).toString() === [1, 3, 5, 7, 9].toString())', 'console.assert(nth_items([10, 15, 19, 17, 16, 18], 3).toString() === [10, 17].toString())', 'console.assert(nth_items([14, 16, 19, 15, 17], 4).toString() === [14, 17].toString())']
```"
536, this   function to find the first repeated word in a given string.,"```javascript
function firstRepeatedWord(str1) {
  const temp = new Set();
  const words = str1.split(' ');

  for (let word of words) {
    if (temp.has(word)) {
      return word;
    } else {
      temp.add(word);
    }
  }
  return 'None';
}
```",537,"```javascript
['console.assert(first_repeated_word(""ab ca bc ab"") === ""ab"")', 'console.assert(first_repeated_word(""ab ca bc"") === null)', 'console.assert(first_repeated_word(""ab ca bc ca ab bc"") === ""ca"")']
```"
537, this   function to convert a given string list to a tuple.,"```javascript
function stringListToTuple(str1) {
    let result = Array.from(str1).filter(x => !x.isspace());
    return [result];
}
```",538,"```javascript
['console.assert(string_list_to_tuple(""  3.0"").toString() === (\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\').toString())', 'console.assert(string_list_to_tuple(""bigdata"").toString() === (\'b\', \'i\', \'g\', \'d\', \'a\', \'t\', \'a\').toString())', 'console.assert(string_list_to_tuple(""language"").toString() === (\'l\', \'a\', \'n\', \'g\', \'u\', \'a\', \'g\', \'e\').toString())']
```"
538, this function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"```javascript
function basesnum_coresspondingnum(bases_num, index) {
  const result = bases_num.map((base, i) => Math.pow(base, index[i]));
  return [result];
}
```",539,"```javascript
['console.assert(basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString()=== [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000].toString())', 'console.assert(basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70]).toString()=== [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249].toString())', 'console.assert(basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21]).toString()=== [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728].toString())']
```"
539, this   function to find the difference between highest and least frequencies in a given array.,"```javascript
function find_Diff(arr, n) {
    arr.sort();  
    let count = 0, max_count = 0, min_count = n; 
    for (let i = 0; i < (n - 1); i++) { 
        if (arr[i] === arr[i + 1]) { 
            count++; 
            continue; 
        } else { 
            max_count = Math.max(max_count, count); 
            min_count = Math.min(min_count, count); 
            count = 0; 
        }
    }
    return max_count - min_count;
}
```",540,"```javascript
['console.assert(find_Diff([1,1,2,2,7,8,4,5,1,4],10) === 2)', 'console.assert(find_Diff([1,7,9,2,3,3,1,3,3],9) === 3)', 'console.assert(find_Diff([1,2,1,2],4) === 0)']
```"
540, this function to find if the given number is abundant or not.,"```javascript
function getSum(n) {
    let sum = 0;
    let i = 1;
    while (i <= Math.sqrt(n)) {
        if (n % i === 0) {
            if (n / i === i) {
                sum += i;
            } else {
                sum += i;
                sum += (n / i);
            }
        }
        i++;
    }
    sum -= n;
    return sum;
}

function checkAbundant(n) {
    return getSum(n) > n;
}
```",541,"```javascript
console.assert(check_abundant(12) === true);
console.assert(check_abundant(15) === false);
console.assert(check_abundant(18) === true);
```"
541," this function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.","```javascript
function fillSpaces(text) {
  return text.replace(/[ ,.]/g, "":"");
}
```",542,"```javascript
console.assert(fill_spaces('Boult Curve Wireless Neckband') === 'Boult:Curve:Wireless:Neckband');
console.assert(fill_spaces('Stereo Sound Sweatproof') === 'Stereo:Sound:Sweatproof');
console.assert(fill_spaces('Probass Curve Audio') === 'Probass:Curve:Audio');
```"
542, this function to add two numbers and print number of digits of sum.,"```javascript
function countDigits(num1, num2) {
    let number = num1 + num2;
    let count = 0;
    while (number > 0) {
        number = Math.floor(number / 10);
        count += 1;
    }
    return count;
}
```",543,"```javascript
['console.assert(count_digits(9875, 10) === 4)', 'console.assert(count_digits(98759853034, 100) === 11)', 'console.assert(count_digits(1234567, 500) === 7)']
```"
543, this function to flatten the tuple list to a string.,"```javascript
function flattenTuple(testList) {
    let res = testList.flat().join(' ');
    return res;
}
```",544,"```javascript
[""console.assert(flatten_tuple([['1', '4', '6'], ['5', '8'], ['2', '9'], ['1', '10']]) === '1 4 6 5 8 2 9 1 10')"", ""console.assert(flatten_tuple([['2', '3', '4'], ['6', '9'], ['3', '2'], ['2', '11']]) === '2 3 4 6 9 3 2 2 11')"", ""console.assert(flatten_tuple([['14', '21', '9'], ['24', '19'], ['12', '29'], ['23', '17']]) === '14 21 9 24 19 12 29 23 17')""]
```"
544, this   function to toggle only first and last bits of a given number.,"```javascript
function take_L_and_F_set_bits(n) {
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    n = n | (n >> 16);
    return ((n + 1) >> 1) + 1;      
}

function toggle_F_and_L_bits(n) {  
    if (n === 1) { 
        return 0; 
    }
    return n ^ take_L_and_F_set_bits(n);
}
```",545,"```javascript
['console.assert(toggle_F_and_L_bits(10) === 3)', 'console.assert(toggle_F_and_L_bits(15) === 6)', 'console.assert(toggle_F_and_L_bits(20) === 5)'];
```"
545, this function to find the last occurrence of a character in a string.,"```javascript
function lastOccurrenceChar(string, char) {
    let flag = -1;
    for (let i = 0; i < string.length; i++) {
        if (string[i] === char) {
            flag = i;
        }
    }
    if (flag === -1) {
        return null;
    } else {
        return flag + 1;
    }
}
```",546,"```javascript
['console.assert(last_occurence_char(""hello world"",\'l\')===10)', 'console.assert(last_occurence_char(""language"",\'g\')===7)', 'console.assert(last_occurence_char(""little"",\'y\')===null)']
```"
546, this   function to find the sum of hamming distances of all consecutive numbers from o to n.,"```javascript
function Total_Hamming_Distance(n) {   
    let i = 1;
    let sum = 0;
    while (n / i > 0) {  
        sum += Math.floor(n / i);  
        i *= 2;     
    }
    return sum;
}
```",547,"```javascript
console.assert(Total_Hamming_Distance(4) === 7);
console.assert(Total_Hamming_Distance(2) === 3);
console.assert(Total_Hamming_Distance(5) === 8);
```"
547, this function to find the length of the longest increasing subsequence of the given sequence.,"```javascript
function longestIncreasingSubsequence(arr) {
    const n = arr.length;
    const longestIncreasingSubsequence = new Array(n).fill(1);
    
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && longestIncreasingSubsequence[i] < longestIncreasingSubsequence[j] + 1) {
                longestIncreasingSubsequence[i] = longestIncreasingSubsequence[j] + 1;
            }
        }
    }
    
    let maximum = 0;
    for (let i = 0; i < n; i++) {
        maximum = Math.max(maximum, longestIncreasingSubsequence[i]);
    }
    
    return maximum;
}
```",548,"```javascript
console.assert(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) === 5);
console.assert(longest_increasing_subsequence([3, 10, 2, 1, 20]) === 3);
console.assert(longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) === 4);
```"
548, this   function to find the sum of fifth power of first n odd natural numbers.,"```javascript
function oddNumSum(n) {
    let j = 0;
    let sm = 0;
    for (let i = 1; i <= n; i++) {
        j = (2 * i - 1);
        sm += (j * j * j * j * j);
    }
    return [sm];
}
```",549,"```javascript
['console.assert(odd_Num_Sum(1) === 1)', 'console.assert(odd_Num_Sum(2) === 244)', 'console.assert(odd_Num_Sum(3) === 3369)']
```"
549, this   function to find the maximum element in a sorted and rotated array.,"```javascript
function find_Max(arr, low, high) {
    if (high < low) {
        return arr[0];
    }
    if (high === low) {
        return arr[low];
    }
    let mid = low + Math.floor((high - low) / 2);
    if (mid < high && arr[mid + 1] < arr[mid]) {
        return arr[mid];
    }
    if (mid > low && arr[mid] < arr[mid - 1]) {
        return arr[mid - 1];
    }
    if (arr[low] > arr[mid]) {
        return find_Max(arr, low, mid - 1);
    } else {
        return find_Max(arr, mid + 1, high);
    }
}
```",550,"```javascript
['console.assert(find_Max([2,3,5,6,9], 0, 4) === 9)', 'console.assert(find_Max([3,4,5,2,1], 0, 4) === 5)', 'console.assert(find_Max([1,2,3], 0, 2) === 3)']
```"
550, this function to extract a specified column from a given nested list.,"```javascript
function extractColumn(list1, n) {
    let result = list1.map(i => {
        return i.splice(n, 1)[0];
    });
    return result;
}
```",551,"```javascript
['console.assert(JSON.stringify(extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)) === JSON.stringify([1, 2, 1])', 'console.assert(JSON.stringify(extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)) === JSON.stringify([3, -5, 1])', 'console.assert(JSON.stringify(extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)) === JSON.stringify([1, 5, 1, 13, 5, 9])']
```"
551, this   function to check whether a given sequence is linear or not.,"```javascript
function Seq_Linear(seq_nums) {
    seq_nums = seq_nums.map((num, x) => x === 0 ? 0 : num - seq_nums[x - 1]).slice(1);
    if (new Set(seq_nums).size === 1) {
        return ""Linear Sequence"";
    } else {
        return ""Non Linear Sequence"";
    }
}
```",552,"```javascript
['console.assert(Seq_Linear([0,2,4,6,8,10]) === ""Linear Sequence"")', 'console.assert(Seq_Linear([1,2,3]) === ""Linear Sequence"")', 'console.assert(Seq_Linear([1,5,2]) === ""Non Linear Sequence"")']
```"
552, this function to convert the given tuple to a floating-point number.,"```javascript
function tupleToFloat(testTup) {
    const res = parseFloat(testTup.join('.'));
    return res;
}
```",553,"```javascript
console.assert(tupleToFloat([4, 56]) === 4.56);
console.assert(tupleToFloat([7, 256]) === 7.256);
console.assert(tupleToFloat([8, 123]) === 8.123);
```"
553, this   function to find odd numbers from a mixed list.,"```javascript
function Split(list) {
    let od_li = [];
    for (let i of list) {
        if (i % 2 !== 0) {
            od_li.push(i);
        }
    }
    return [od_li];
}
```",554,"```javascript
['console.assert(Split([1,2,3,4,5,6]).toString() === [1,3,5].toString())', 'console.assert(Split([10,11,12,13]).toString() === [11,13].toString())', 'console.assert(Split([7,8,9,1]).toString() === [7,9,1].toString())']
```"
554, this   function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"```javascript
function difference(n) {
    let S = (n * (n + 1)) / 2;
    let res = S * (S - 1);
    return res;
}
```",555,"```javascript
['console.assert(difference(3) === 30)', 'console.assert(difference(5) === 210)', 'console.assert(difference(2) === 6)']
```"
555, this   function to count the pairs with xor as an odd number.,"```javascript
function findOddPair(A, N) {
    let oddPair = 0;
    for (let i = 0; i < N; i++) {
        for (let j = i + 1; j < N; j++) {
            if ((A[i] ^ A[j]) % 2 !== 0) {
                oddPair++;
            }
        }
    }
    return oddPair;
}
```",556,"```javascript
['console.assert(find_Odd_Pair([5,4,7,2,1]) === 6)', 'console.assert(find_Odd_Pair([7,2,8,1,0,5,11]) === 12)', 'console.assert(find_Odd_Pair([1,2,3]) === 2)']
```"
556, this function to toggle characters case in a string.,"```javascript
function toggleString(string) {
    let string1 = string.split('').map(char => 
        char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()
    ).join('');
    return string1;
}
```",557,"```javascript
['console.assert(toggle_string("" "") === "" "")', 'console.assert(toggle_string(""Pangram"") === ""pANGRAM"")', 'console.assert(toggle_string(""LIttLE"") === ""liTTle"")']
```"
557, this   function to find the digit distance between two integers.,"```javascript
function digitDistanceNums(n1, n2) {
    return Array.from(String(Math.abs(n1 - n2)), Number).reduce((a, b) => a + b, 0);
}
```",558,"```javascript
['console.assert(digit_distance_nums(1, 2) === 1)', 'console.assert(digit_distance_nums(23, 56) === 6)', 'console.assert(digit_distance_nums(123, 256) === 7)'];
```"
558, this function to find the largest sum of contiguous subarray in the given array.,"```javascript
function maxSubArraySum(a, size) {
  let maxSoFar = 0;
  let maxEndingHere = 0;
  for (let i = 0; i < size; i++) {
    maxEndingHere += a[i];
    if (maxEndingHere < 0) {
      maxEndingHere = 0;
    } else if (maxSoFar < maxEndingHere) {
      maxSoFar = maxEndingHere;
    }
  }
  return maxSoFar;
}
```",559,"```javascript
['console.assert(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) === 7)', 'console.assert(max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) === 8)', 'console.assert(max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) === 10)']
```"
559, this function to find the union of elements of the given tuples.,"```javascript
function unionElements(testTup1, testTup2) {
    let res = [...new Set([...testTup1, ...testTup2])];
    return res;
}
```",560,"```javascript
['console.assert(JSON.stringify(union_elements([3, 4, 5, 6], [5, 7, 4, 10])) === JSON.stringify([3, 4, 5, 6, 7, 10])', 
 'console.assert(JSON.stringify(union_elements([1, 2, 3, 4], [3, 4, 5, 6])) === JSON.stringify([1, 2, 3, 4, 5, 6])', 
 'console.assert(JSON.stringify(union_elements([11, 12, 13, 14], [13, 15, 16, 17])) === JSON.stringify([11, 12, 13, 14, 15, 16, 17])'];
```"
560," this function to assign with each element, its pair elements from other similar pairs in the given tuple.","```javascript
function assignElements(testList) {
    let res = {};
    for (let [key, val] of testList) {
        if (!res[val]) res[val] = [];
        if (!res[key]) res[key] = [];
        res[key].push(val);
    }
    return res;
}
```",561,"```javascript
['console.assert(JSON.stringify(assign_elements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])) === JSON.stringify({3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}));', 'console.assert(JSON.stringify(assign_elements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])) === JSON.stringify({4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}));', 'console.assert(JSON.stringify(assign_elements([[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]])) === JSON.stringify({2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}));']
```"
561, this   function to find the maximum length of sublist.,"```javascript
function Find_Max_Length(lst) {  
    const maxLength = Math.max(...lst.map(x => x.length));
    return maxLength;
}
```",562,"```javascript
console.assert(Find_Max_Length([[1],[1,4],[5,6,7,8]]) === 4);
console.assert(Find_Max_Length([[0,1],[2,2,],[3,2,1]]) === 3);
console.assert(Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) === 5);
```"
562, this function to extract values between quotation marks of a string.,"```javascript
function extractValues(text) {
    return text.match(/""(.*?)""/g).map(val => val.slice(1, -1));
}
```",563,"```javascript
['assert extractValues(\'"" "", ""PHP"", ""Java""\')===["" "", ""PHP"", ""Java""]', 'assert extractValues(\'"" "",""program"",""language""\')===["" "",""program"",""language""]', 'assert extractValues(\'""red"",""blue"",""green"",""yellow""\')===[""red"",""blue"",""green"",""yellow""]']
```"
563, this   function to count unequal element pairs from the given array.,"```javascript
function count_Pairs(arr, n) { 
    let cnt = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] !== arr[j]) { 
                cnt++; 
            } 
        } 
    } 
    return cnt; 
}
```",564,"```javascript
['console.assert(count_Pairs([1,2,1]) === 2)', 'console.assert(count_Pairs([1,1,1,1]) === 0)', 'console.assert(count_Pairs([1,2,3,4,5]) === 10)']
```"
564, this   function to split a string into characters.,"```javascript
function split(word) {
    return word.split('');
}
```",565,"```javascript
[""console.assert(split(' ').toString() === ['p','y','t','h','o','n'].toString())"", ""console.assert(split('Name').toString() === ['N','a','m','e'].toString())"", ""console.assert(split('program').toString() === ['p','r','o','g','r','a','m'].toString())""]
```"
565, this function to get the sum of a non-negative integer.,"```javascript
function sumDigits(n) {
  if (n === 0) {
    return 0;
  } else {
    return n % 10 + sumDigits(Math.floor(n / 10));
  }
}
```",566,"```javascript
['console.assert(sum_digits(345) === 12)', 'console.assert(sum_digits(12) === 3)', 'console.assert(sum_digits(97) === 16)']
```"
566, this function to check whether a specified list is sorted or not.,"```javascript
function issort_list(list1) {
    const result = list1.every((value, index) => index === 0 || value >= list1[index - 1]);
    return result;
}
```",567,"```javascript
console.assert(issort_list([1,2,4,6,8,10,12,14,16,17]) === true);
console.assert(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) === false);
console.assert(issort_list([1, 2, 4, 6, 8, 10,15,14,20]) === false);
```"
567, this function to create a list of empty dictionaries.,"```javascript
function emptyList(length) {
    let emptyList = Array.from({ length: length }, () => ({}));
    return emptyList;
}
```",568,"```javascript
['console.assert(empty_list(5).length === 5 && JSON.stringify(empty_list(5)) === JSON.stringify([{}, {}, {}, {}, {}])', 
 'console.assert(empty_list(6).length === 6 && JSON.stringify(empty_list(6)) === JSON.stringify([{}, {}, {}, {}, {}, {}])', 
 'console.assert(empty_list(7).length === 7 && JSON.stringify(empty_list(7)) === JSON.stringify([{}, {}, {}, {}, {}, {}, {}])'];
```"
568, this function to sort each sublist of strings in a given list of lists.,"```javascript
function sortSublists(list1) {
    const result = list1.map(sublist => sublist.sort());
    return result;
}
```",569,"```javascript
[""console.assert(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]).toString() === [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']].toString())"", ""console.assert(sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]).toString() === [['green', 'orange'], ['black'], ['green', 'orange'], ['white']].toString())"", ""console.assert(sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']]).toString() === [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']].toString())""]
```"
569, this function to remove words from a given list of strings containing a character or string.,"```javascript
function removeWords(list1, charlist) {
    let newList = [];
    for (let line of list1) {
        let newWords = line.split(' ').filter(word => !charlist.some(phrase => word.includes(phrase))).join(' ');
        newList.push(newWords);
    }
    return newList;
}
```",570,"```javascript
['console.assert(remove_words([\'Red color\', \'Orange#\', \'Green\', \'Orange @\', ""White""],[\'#\', \'color\', \'@\']) === [\'Red\', \'\', \'Green\', \'Orange\', \'White\']);', 
 'console.assert(remove_words([\'Red &\', \'Orange+\', \'Green\', \'Orange @\', \'White\'],[\'&\', \'+\', \'@\']) === [\'Red\', \'\', \'Green\', \'Orange\', \'White\']);', 
 'console.assert(remove_words([\'Red &\', \'Orange+\', \'Green\', \'Orange @\', \'White\'],[\'@\']) === [\'Red &\', \'Orange+\', \'Green\', \'Orange\', \'White\']);']
```"
570, this function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.,"```javascript
function maxSumPairDiffLessthanK(arr, N, K) {
    arr.sort((a, b) => a - b);
    let dp = new Array(N).fill(0);
    dp[0] = 0;
    for (let i = 1; i < N; i++) {
        dp[i] = dp[i - 1];
        if (arr[i] - arr[i - 1] < K) {
            if (i >= 2) {
                dp[i] = Math.max(dp[i], dp[i - 2] + arr[i] + arr[i - 1]);
            } else {
                dp[i] = Math.max(dp[i], arr[i] + arr[i - 1]);
            }
        }
    }
    return dp[N - 1];
}
```",571,"```javascript
['console.assert(max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) === 62)', 'console.assert(max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) === 25)', 'console.assert(max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) === 21)']
```"
571, this   function to remove two duplicate numbers from a given number of lists.,"```javascript
function twoUniqueNums(nums) {
  return nums.filter(i => nums.indexOf(i) === nums.lastIndexOf(i));
}
```",572,"```javascript
['console.assert(JSON.stringify(twoUniqueNums([1,2,3,2,3,4,5])) === JSON.stringify([1, 4, 5])', 'console.assert(JSON.stringify(twoUniqueNums([1,2,3,2,4,5])) === JSON.stringify([1, 3, 4, 5])', 'console.assert(JSON.stringify(twoUniqueNums([1,2,3,4,5])) === JSON.stringify([1, 2, 3, 4, 5])']
```"
572, this   function to calculate the product of the unique numbers of a given list.,"```javascript
function uniqueProduct(listData) {
    const temp = Array.from(new Set(listData));
    let p = 1;
    for (let i of temp) {
        p *= i;
    }
    return p;
}
```",573,"```javascript
['console.assert(unique_product([10, 20, 30, 40, 20, 50, 60, 40]) === 720000000)', 'console.assert(unique_product([1, 2, 3, 1]) === 6)', 'console.assert(unique_product([7, 8, 9, 0, 1, 1]) === 0)']
```"
573, this function to find the surface area of a cylinder.,"```javascript
function surfacearea_cylinder(r, h) {
    var surfacearea = (2 * 3.1415 * r * r) + (2 * 3.1415 * r * h);
    return surfacearea;
}
```",574,"```javascript
['console.assert(surfacearea_cylinder(10, 5) === 942.45)', 'console.assert(surfacearea_cylinder(4, 5) === 226.188)', 'console.assert(surfacearea_cylinder(4, 10) === 351.848)']
```"
574, this   function to find nth number in a sequence which is not a multiple of a given number.,"```javascript
function count_no(A, N, L, R) {
    let count = 0;
    let i;
    for (i = L; i <= R; i++) {
        if (i % A !== 0) {
            count++;
        }
        if (count === N) {
            break;
        }
    }
    return i;
}
```",575,"```javascript
['console.assert(count_no(2,3,1,10) === 5)', 'console.assert(count_no(3,6,4,20) === 11)', 'console.assert(count_no(5,10,4,20) === 16)']
```"
575, this   function to check whether an array is subarray of another or not.,"```javascript
function is_Sub_Array(A, B, n, m) {
    let i = 0, j = 0;
    while (i < n && j < m) {
        if (A[i] === B[j]) {
            i++;
            j++;
            if (j === m) {
                return true;
            }
        } else {
            i = i - j + 1;
            j = 0;
        }
    }
    return false;
}
```",576,"```javascript
['console.assert(is_Sub_Array([1,4,3,5],[1,2],4,2) == false)', 'console.assert(is_Sub_Array([1,2,1],[1,2,1],3,3) == true)', 'console.assert(is_Sub_Array([1,0,2,2],[2,2,0],4,3) == false)']
```"
576, this   function to find the last digit in factorial of a given number.,"```javascript
function lastDigitFactorial(n) {
    if (n === 0) return 1;
    else if (n <= 2) return n;
    else if (n === 3) return 6;
    else if (n === 4) return 4;
    else return 0;
}
```",577,"```javascript
['console.assert(last_Digit_Factorial(4) === 4)', 'console.assert(last_Digit_Factorial(21) === 0)', 'console.assert(last_Digit_Factorial(30) === 0)']
```"
577, this function to interleave lists of the same length.,"```javascript
function interleaveLists(list1, list2, list3) {
    let result = [].concat(...list1.map((_, i) => [list1[i], list2[i], list3[i]]));
    return result;
}
```",578,"```javascript
['console.assert(JSON.stringify(interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])) === JSON.stringify([1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])', 'console.assert(JSON.stringify(interleave_lists([10,20],[15,2],[5,10])) === JSON.stringify([10,15,5,20,2,10])', 'console.assert(JSON.stringify(interleave_lists([11,44], [10,15], [20,5])) === JSON.stringify([11,10,20,44,15,5])']
```"
578, this function to find the dissimilar elements in the given two tuples.,"```javascript
function find_dissimilar(test_tup1, test_tup2) {
  const res = [...new Set([...test_tup1, ...test_tup2])].filter(x => !test_tup1.includes(x) || !test_tup2.includes(x));
  return res;
}
```",579,"```javascript
['console.assert(find_dissimilar([3, 4, 5, 6], [5, 7, 4, 10]).toString() === [3, 6, 7, 10].toString())', 
 'console.assert(find_dissimilar([1, 2, 3, 4], [7, 2, 3, 9]).toString() === [1, 4, 7, 9].toString())', 
 'console.assert(find_dissimilar([21, 11, 25, 26], [26, 34, 21, 36]).toString() === [34, 36, 11, 25].toString())']
```"
579, this function to extract the even elements in the nested mixed tuple.,"```javascript
function evenEle(testTuple, evenFnc) { 
    let res = []; 
    for (let ele of testTuple) { 
        if (Array.isArray(ele)) { 
            res.push(evenEle(ele, evenFnc)); 
        } else if (evenFnc(ele)) { 
            res.push(ele); 
        } 
    } 
    return res; 
}

function extractEven(testTuple) {
    let res = evenEle(testTuple, x => x % 2 === 0);
    return [res]; 
}
```",580,"```javascript
['console.assert(JSON.stringify(extract_even([4, 5, [7, 6, [2, 4]], 6, 8])) === JSON.stringify([4, [6, [2, 4]], 6, 8])', 'console.assert(JSON.stringify(extract_even([5, 6, [8, 7, [4, 8]], 7, 9])) === JSON.stringify([6, [8, [4, 8]]])', 'console.assert(JSON.stringify(extract_even([5, 6, [9, 8, [4, 6]], 8, 10])) === JSON.stringify([6, [8, [4, 6]], 8, 10])']
```"
580, this   function to find the surface area of the square pyramid.,"```javascript
function surface_Area(b, s) { 
    return 2 * b * s + Math.pow(b, 2); 
}
```",581,"```javascript
['console.assert(surface_Area(3, 4) === 33)', 'console.assert(surface_Area(4, 5) === 56)', 'console.assert(surface_Area(1, 2) === 5)'];
```"
581, this function to check if a dictionary is empty or not.,"```javascript
function myDict(dict1) {
  if (Object.keys(dict1).length > 0) {
    return false;
  } else {
    return true;
  }
}
```",582,"```javascript
console.assert(my_dict(new Set([10])) === false);
console.assert(my_dict(new Set([11])) === false);
console.assert(my_dict(new Set([])) === true);
```"
582, this function for nth catalan number.,"```javascript
function catalanNumber(num) {
    if (num <= 1) {
        return 1;
    }
    let resNum = 0;
    for (let i = 0; i < num; i++) {
        resNum += catalanNumber(i) * catalanNumber(num - i - 1);
    }
    return resNum;
}
```",583,"```javascript
console.assert(catalan_number(10) === 16796);
console.assert(catalan_number(9) === 4862);
console.assert(catalan_number(7) === 429);
```"
583, this function to find all adverbs and their positions in a given sentence by using regex.,"```javascript
function findAdverbs(text) {
    const regex = /\w+ly/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
        return `${match.index}-${regex.lastIndex}: ${match[0]}`;
    }
}
```",584,"```javascript
assert(find_adverbs(""Clearly, he has no excuse for such behavior."") === '0-7: Clearly');
assert(find_adverbs(""Please handle the situation carefuly"") === '28-36: carefuly');
assert(find_adverbs(""Complete the task quickly"") === '18-25: quickly');
```"
584, this function to find the n - expensive price items from a given dataset using heap queue algorithm.,"```javascript
function expensiveItems(items, n) {
  return items
    .sort((a, b) => b.price - a.price)
    .slice(0, n);
}
```",585,"```javascript
[""console.assert(JSON.stringify(expensive_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}], 1)) === JSON.stringify([{name: 'Item-2', price: 555.22}])"", ""console.assert(JSON.stringify(expensive_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}, {name: 'Item-3', price: 45.09}], 2)) === JSON.stringify([{name: 'Item-2', price: 555.22}, {name: 'Item-1', price: 101.1}])"", ""console.assert(JSON.stringify(expensive_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}, {name: 'Item-3', price: 45.09}, {name: 'Item-4', price: 22.75}], 1)) === JSON.stringify([{name: 'Item-2', price: 555.22}])""]
```"
585, this   function to split the array and add the first part to the end.,"```javascript
function split_Arr(a, n, k) {
    const b = a.slice(0, k);
    return [a.slice(k).concat(b)];
}
```",586,"```javascript
['console.assert(split_Arr([12,10,5,6,52,36],6,2).toString() === [5,6,52,36,12,10].toString())', 
 'console.assert(split_Arr([1,2,3,4],4,1).toString() === [2,3,4,1].toString())', 
 'console.assert(split_Arr([0,1,2,3,4,5,6,7],8,3).toString() === [3,4,5,6,7,0,1,2].toString())']
```"
586, this function to convert a list to a tuple.,"```javascript
function listTuple(listx) {
  const tuplex = Array.from(listx);
  return [tuplex];
}
```",587,"```javascript
console.assert(JSON.stringify(listTuple([5, 10, 7, 4, 15, 3])) === JSON.stringify([5, 10, 7, 4, 15, 3]));
console.assert(JSON.stringify(listTuple([2, 4, 5, 6, 2, 3, 4, 4, 7])) === JSON.stringify([2, 4, 5, 6, 2, 3, 4, 4, 7]));
console.assert(JSON.stringify(listTuple([58, 44, 56])) === JSON.stringify([58, 44, 56]));
```"
587, this   function to find the difference between largest and smallest value in a given array.,"```javascript
function big_diff(nums) {
    let diff = Math.max(...nums) - Math.min(...nums);
    return diff;
}
```",588,"```javascript
console.assert(big_diff([1,2,3,4]) === 3);
console.assert(big_diff([4,5,12]) === 8);
console.assert(big_diff([9,2,3]) === 7);
```"
588, this function to find perfect squares between two given numbers.,"```javascript
function perfectSquares(a, b) {
    let lists = [];
    for (let i = a; i <= b; i++) {
        let j = 1;
        while (j * j <= i) {
            if (j * j === i) {
                lists.push(i);
            }
            j++;
        }
    }
    return lists;
}
```",589,"```javascript
['console.assert(perfect_squares(1, 30).toString() === [1, 4, 9, 16, 25].toString())', 'console.assert(perfect_squares(50, 100).toString() === [64, 81, 100].toString())', 'console.assert(perfect_squares(100, 200).toString() === [100, 121, 144, 169, 196].toString())']
```"
589, this function to convert polar coordinates to rectangular coordinates.,"```javascript
function polarRect(x, y) {
    const cn = Math.sqrt(x * x + y * y);
    const angle = Math.atan2(y, x);
    const cn1 = { r: 2, theta: Math.PI };
    return [[cn, angle], cn1];
}
```",590,"```javascript
['console.assert(polar_rect(3, 4)[0] === 5.0 && polar_rect(3, 4)[1] === 0.9272952180016122 && polar_rect(3, 4)[2].toString() === ""(-2+2.4492935982947064e-16j"")', 'console.assert(polar_rect(4, 7)[0] === 8.06225774829855 && polar_rect(4, 7)[1] === 1.0516502125483738 && polar_rect(4, 7)[2].toString() === ""(-2+2.4492935982947064e-16j"")', 'console.assert(polar_rect(15, 17)[0] === 22.67156809750927 && polar_rect(15, 17)[1] === 0.8478169733934057 && polar_rect(15, 17)[2].toString() === ""(-2+2.4492935982947064e-16j"")'];
```"
590, this   function to interchange the first and last elements in a list.,"```javascript
function swapList(newList) { 
    var size = newList.length; 
    var temp = newList[0]; 
    newList[0] = newList[size - 1]; 
    newList[size - 1] = temp;  
    return newList; 
}
```",591,"```javascript
console.assert(swap_List([12, 35, 9, 56, 24]).toString() === [24, 35, 9, 56, 12].toString());
console.assert(swap_List([1, 2, 3]).toString() === [3, 2, 1].toString());
console.assert(swap_List([4, 5, 6]).toString() === [6, 5, 4].toString());
```"
591, this   function to find sum of product of binomial co-efficients.,"```javascript
function binomialCoeff(n, k) { 
    let C = new Array(k + 1).fill(0); 
    C[0] = 1; // nC0 is 1 
    for (let i = 1; i <= n; i++) {  
        for (let j = Math.min(i, k); j > 0; j--) { 
            C[j] = C[j] + C[j - 1]; 
        } 
    } 
    return C[k]; 
}

function sumOfProduct(n) { 
    return binomialCoeff(2 * n, n - 1); 
}
```",592,"```javascript
['console.assert(sum_Of_product(3) === 15)', 'console.assert(sum_Of_product(4) === 56)', 'console.assert(sum_Of_product(1) === 1)'];
```"
592, this function to remove leading zeroes from an ip address.,"```javascript
function removezero_ip(ip) {
    return ip.replace(/\.[0]*/g, '.');
}
```",593,"```javascript
['console.assert(removezero_ip(""216.08.094.196"") === ""216.8.94.196"")', 'console.assert(removezero_ip(""12.01.024"") === ""12.1.24"")', 'console.assert(removezero_ip(""216.08.094.0196"") === ""216.8.94.196"")'];
```"
593, this function to find the difference of first even and odd number of a given list.,"```javascript
function diffEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) || -1;
    const firstOdd = list1.find(el => el % 2 !== 0) || -1;
    return (firstEven - firstOdd);
}
```",594,"```javascript
['console.assert(diff_even_odd([1,3,5,7,4,1,6,8]) === 3)', 'console.assert(diff_even_odd([1,2,3,4,5,6,7,8,9,10]) === 1)', 'console.assert(diff_even_odd([1,5,7,9,10]) === 9)']
```"
594, this   function to count minimum number of swaps required to convert one binary string to another.,"```javascript
function minSwaps(str1, str2) {
    let count = 0;
    for (let i = 0; i < str1.length; i++) {
        if (str1[i] !== str2[i]) {
            count++;
        }
    }
    if (count % 2 === 0) {
        return Math.floor(count / 2);
    } else {
        return ""Not Possible"";
    }
}
```",595,"```javascript
['console.assert(min_Swaps(""1101"", ""1110"") === 1)', 'console.assert(min_Swaps(""111"", ""000"") === ""Not Possible"")', 'console.assert(min_Swaps(""111"", ""110"") === ""Not Possible"")']
```"
595, this function to find the size of the given tuple.,"```javascript
function tupleSize(tupleList) {
  return [tupleList.length * 8]; // Approximation, since JavaScript doesn't have a direct equivalent for sys.getsizeof
}
```",596,"```javascript
console.assert(tupleSize([""A"", 1, ""B"", 2, ""C"", 3]) === getSizeof([""A"", 1, ""B"", 2, ""C"", 3]));
console.assert(tupleSize([1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu""]) === getSizeof([1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu""]));
console.assert(tupleSize([[1, ""Lion""], [2, ""Tiger""], [3, ""Fox""], [4, ""Wolf""]]) === getSizeof([[1, ""Lion""], [2, ""Tiger""], [3, ""Fox""], [4, ""Wolf""]]));
```"
596, this function to find kth element from the given two sorted arrays.,"```javascript
function find_kth(arr1, arr2, m, n, k) {
    let sorted1 = new Array(m + n).fill(0);
    let i = 0;
    let j = 0;
    let d = 0;

    while (i < m && j < n) {
        if (arr1[i] < arr2[j]) {
            sorted1[d] = arr1[i];
            i++;
        } else {
            sorted1[d] = arr2[j];
            j++;
        }
        d++;
    }
    while (i < m) {
        sorted1[d] = arr1[i];
        d++;
        i++;
    }
    while (j < n) {
        sorted1[d] = arr2[j];
        d++;
        j++;
    }
    return sorted1[k - 1];
}
```",597,"```javascript
['console.assert(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) === 6)', 'console.assert(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) === 256)', 'console.assert(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) === 8)']
```"
597, this function to check whether the given number is armstrong or not.,"```javascript
function armstrongNumber(number) {
    let sum = 0;
    let times = 0;
    let temp = number;
    
    while (temp > 0) {
        times += 1;
        temp = Math.floor(temp / 10);
    }
    
    temp = number;
    
    while (temp > 0) {
        let reminder = temp % 10;
        sum += Math.pow(reminder, times);
        temp = Math.floor(temp / 10);
    }
    
    return number === sum;
}
```",598,"```javascript
console.assert(armstrong_number(153) === true);
console.assert(armstrong_number(259) === false);
console.assert(armstrong_number(4458) === false);
```"
598, this function to find sum and average of first n natural numbers.,"```javascript
function sumAverage(number) {
    let total = 0;
    for (let value = 1; value <= number; value++) {
        total += value;
    }
    let average = total / number;
    return [total, average];
}
```",599,"```javascript
['console.assert(sum_average(10)[0] === 55 && sum_average(10)[1] === 5.5)', 'console.assert(sum_average(15)[0] === 120 && sum_average(15)[1] === 8.0)', 'console.assert(sum_average(20)[0] === 210 && sum_average(20)[1] === 10.5)'];
```"
599, this   function to check whether the given number is even or not using bitwise operator.,"```javascript
function isEven(n) { 
    if ((n ^ 1) === (n + 1)) { 
        return true; 
    } else { 
        return false; 
    } 
}
```",600,"```javascript
['console.assert(is_Even(1) === false)', 'console.assert(is_Even(2) === true)', 'console.assert(is_Even(3) === false)']
```"
600, this function to find the longest chain which can be formed from the given set of pairs.,"```javascript
class Pair {
    constructor(a, b) {
        this.a = a;
        this.b = b;
    }
}

function maxChainLength(arr, n) {
    let max = 0;
    let mcl = new Array(n).fill(1);
    
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i].a > arr[j].b && mcl[i] < mcl[j] + 1) {
                mcl[i] = mcl[j] + 1;
            }
        }
    }
    
    for (let i = 0; i < n; i++) {
        if (max < mcl[i]) {
            max = mcl[i];
        }
    }
    
    return max;
}
```",601,"```javascript
['console.assert(max_chain_length([new Pair(5, 24), new Pair(15, 25), new Pair(27, 40), new Pair(50, 60)], 4) === 3)', 
 'console.assert(max_chain_length([new Pair(1, 2), new Pair(3, 4), new Pair(5, 6), new Pair(7, 8)], 4) === 4)', 
 'console.assert(max_chain_length([new Pair(19, 10), new Pair(11, 12), new Pair(13, 14), new Pair(15, 16), new Pair(31, 54)], 5) === 5)']
```"
601, this   function to find the first repeated character in a given string.,"```javascript
function firstRepeatedChar(str1) {
  for (let index = 0; index < str1.length; index++) {
    let c = str1[index];
    if (str1.slice(0, index + 1).split(c).length - 1 > 1) {
      return c;
    }
  }
  return ""None"";
}
```",602,"```javascript
['console.assert(first_repeated_char(""abcabc"") === ""a"")', 'console.assert(first_repeated_char(""abc"") === ""None"")', 'console.assert(first_repeated_char(""123123"") === ""1"")']
```"
602, this function to get a lucid number smaller than or equal to n.,"```javascript
function getLudic(n) {
    let ludics = [];
    for (let i = 1; i <= n; i++) {
        ludics.push(i);
    }
    let index = 1;
    while (index !== ludics.length) {
        let firstLudic = ludics[index];
        let removeIndex = index + firstLudic;
        while (removeIndex < ludics.length) {
            ludics.splice(removeIndex, 1);
            removeIndex = removeIndex + firstLudic - 1;
        }
        index++;
    }
    return ludics;
}
```",603,"```javascript
['console.assert(get_ludic(10).toString() === [1, 2, 3, 5, 7].toString())', 'console.assert(get_ludic(25).toString() === [1, 2, 3, 5, 7, 11, 13, 17, 23, 25].toString())', 'console.assert(get_ludic(45).toString() === [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].toString())'];
```"
603, this function to reverse words in a given string.,"```javascript
function reverseWords(s) {
    return s.split(' ').reverse().join(' ');
}
```",604,"```javascript
['console.assert(reverseWords(""  program"") === ""program  "")', 'console.assert(reverseWords(""java language"") === ""language java"")', 'console.assert(reverseWords(""indian man"") === ""man indian"")']
```"
604, this function to check if the given integer is a prime number.,"```javascript
function primeNum(num) {
    if (num >= 1) {
        for (let i = 2; i <= num / 2; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
```",605,"```javascript
['console.assert(prime_num(13) === true)', 'console.assert(prime_num(7) === true)', 'console.assert(prime_num(-1010) === false)']
```"
605, this function to convert degrees to radians.,"```javascript
function radian_degree(degree) {
    const radian = degree * (Math.PI / 180);
    return radian;
}
```",606,"```javascript
['console.assert(radian_degree(90) === 1.5707963267948966)', 'console.assert(radian_degree(60) === 1.0471975511965976)', 'console.assert(radian_degree(120) === 2.0943951023931953)']
```"
606, this function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"```javascript
const pattern = 'fox';
const text = 'The quick brown fox jumps over the lazy dog.';

function find_literals(text, pattern) {
  const match = text.match(new RegExp(pattern));
  const s = match.index;
  const e = s + match[0].length;
  return [match.input, s, e];
}
```",607,"```javascript
console.assert(find_literals('The quick brown fox jumps over the lazy dog.', 'fox')[0] === 'fox' && find_literals('The quick brown fox jumps over the lazy dog.', 'fox')[1] === 16 && find_literals('The quick brown fox jumps over the lazy dog.', 'fox')[2] === 19);
console.assert(find_literals('Its been a very crazy procedure right', 'crazy')[0] === 'crazy' && find_literals('Its been a very crazy procedure right', 'crazy')[1] === 16 && find_literals('Its been a very crazy procedure right', 'crazy')[2] === 21);
console.assert(find_literals('Hardest choices required strongest will', 'will')[0] === 'will' && find_literals('Hardest choices required strongest will', 'will')[1] === 35 && find_literals('Hardest choices required strongest will', 'will')[2] === 39);
```"
607, this   function to find nth bell number.,"```javascript
function bellNumber(n) {
    let bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    bell[0][0] = 1;
    for (let i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        for (let j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    return bell[n][0];
}
```",608,"```javascript
['console.assert(bell_Number(2) === 2)', 'console.assert(bell_Number(3) === 5)', 'console.assert(bell_Number(4) === 15)'];
```"
608, this   function to find minimum possible value for the given periodic function.,"```javascript
function floor_Min(A, B, N) {
    let x = Math.max(B - 1, N);
    return Math.floor((A * x) / B);
}
```",609,"```javascript
['console.assert(floor_Min(10, 20, 30) === 15)', 'console.assert(floor_Min(1, 2, 1) === 0)', 'console.assert(floor_Min(11, 10, 9) === 9)'];
```"
609, this   function to remove the k'th element from a given list.,"```javascript
function removeKthElement(list1, L) {
    return list1.slice(0, L - 1).concat(list1.slice(L));
}
```",610,"```javascript
['console.assert(JSON.stringify(remove_kth_element([1,1,2,3,4,4,5,1],3)) === JSON.stringify([1, 1, 3, 4, 4, 5, 1])', 'console.assert(JSON.stringify(remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)) === JSON.stringify([0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])', 'console.assert(JSON.stringify(remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)) === JSON.stringify([10,10,15,19, 18, 17, 26, 26, 17, 18, 10])']
```"
610, this function to find the maximum of nth column from the given tuple list.,"```javascript
function maxOfNth(testList, N) {
    let res = Math.max(...testList.map(sub => sub[N]));
    return res;
}
```",611,"```javascript
console.assert(max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) === 19);
console.assert(max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) === 10);
console.assert(max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) === 11);
```"
611, this   function to merge the first and last elements separately in a list of lists.,"```javascript
function merge(lst) {
    return lst[0].map((_, colIndex) => lst.map(row => row[colIndex]));
}
```",612,"```javascript
[""console.assert(merge([['x', 'y'], ['a', 'b'], ['m', 'n']]).toString() === [['x', 'a', 'm'], ['y', 'b', 'n']].toString())"", ""console.assert(merge([[1, 2], [3, 4], [5, 6], [7, 8]]).toString() === [[1, 3, 5, 7], [2, 4, 6, 8]].toString())"", ""console.assert(merge([['x', 'y','z'], ['a', 'b','c'], ['m', 'n','o']]).toString() === [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']].toString())""]
```"
612, this function to find the maximum value in record list as tuple attribute in the given tuple list.,"```javascript
function maximumValue(testList) {
    let res = testList.map(([key, lst]) => [key, Math.max(...lst)]);
    return res;
}
```",613,"```javascript
console.assert(JSON.stringify(maximum_value([['key1', [3, 4, 5]], ['key2', [1, 4, 2]], ['key3', [9, 3]]])) === JSON.stringify([['key1', 5], ['key2', 4], ['key3', 9]]));
console.assert(JSON.stringify(maximum_value([['key1', [4, 5, 6]], ['key2', [2, 5, 3]], ['key3', [10, 4]]])) === JSON.stringify([['key1', 6], ['key2', 5], ['key3', 10]]));
console.assert(JSON.stringify(maximum_value([['key1', [5, 6, 7]], ['key2', [3, 6, 4]], ['key3', [11, 5]]])) === JSON.stringify([['key1', 7], ['key2', 6], ['key3', 11]]));
```"
613, this function to find the cumulative sum of all the values that are present in the given tuple list.,"```javascript
function cummulative_sum(test_list) {
    let res = test_list.flat().reduce((a, b) => a + b, 0);
    return res;
}
```",614,"```javascript
['console.assert(cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) === 30)', 'console.assert(cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) === 37)', 'console.assert(cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) === 44)']
```"
614, this function to find average value of the numbers in a given tuple of tuples.,"```javascript
function averageTuple(nums) {
    const result = nums[0].map((_, colIndex) => {
        const columnSum = nums.reduce((acc, row) => acc + row[colIndex], 0);
        return columnSum / nums.length;
    });
    return result;
}
```",615,"```javascript
['console.assert(averageTuple([(10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)]) == [30.5, 34.25, 27.0, 23.25])', 'console.assert(averageTuple([(1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)]) == [25.5, -18.0, 3.75])', 'console.assert(averageTuple([(100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)]) == [305.0, 342.5, 270.0, 232.5])']
```"
615, this function to perfom the modulo of tuple elements in the given two tuples.,"```javascript
function tupleModulo(testTup1, testTup2) {
    let res = testTup1.map((ele1, index) => ele1 % testTup2[index]);
    return res;
}
```",616,"```javascript
console.assert(tuple_modulo([10, 4, 5, 6], [5, 6, 7, 5]).toString() === [0, 4, 5, 1].toString());
console.assert(tuple_modulo([11, 5, 6, 7], [6, 7, 8, 6]).toString() === [5, 5, 6, 1].toString());
console.assert(tuple_modulo([12, 6, 7, 8], [7, 8, 9, 7]).toString() === [5, 6, 7, 1].toString());
```"
616," this function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","```javascript
function min_Jumps(a, b, d) {
    let temp = a;
    a = Math.min(a, b);
    b = Math.max(temp, b);
    if (d >= b) {
        return (d + b - 1) / b;
    }
    if (d === 0) {
        return 0;
    }
    if (d === a) {
        return 1;
    } else {
        return 2;
    }
}
```",617,"```javascript
['console.assert(min_Jumps(3, 4, 11) === 3.5)', 'console.assert(min_Jumps(3, 4, 0) === 0)', 'console.assert(min_Jumps(11, 14, 11) === 1)'];
```"
617, this function to divide two lists using map and lambda function.,"```javascript
function divList(nums1, nums2) {
  const result = nums1.map((x, index) => x / nums2[index]);
  return result;
}
```",618,"```javascript
['console.assert(JSON.stringify(div_list([4,5,6],[1, 2, 3])) === JSON.stringify([4.0,2.5,2.0]))', 'console.assert(JSON.stringify(div_list([3,2],[1,4])) === JSON.stringify([3.0, 0.5]))', 'console.assert(JSON.stringify(div_list([90,120],[50,70])) === JSON.stringify([1.8, 1.7142857142857142]))']
```"
618, this function to move all the numbers in it to the given string.,"```javascript
function moveNum(testStr) {
  let res = '';
  let dig = '';
  for (let ele of testStr) {
    if (/\d/.test(ele)) {
      dig += ele;
    } else {
      res += ele;
    }
  }
  res += dig;
  return [res];
}
```",619,"```javascript
[""console.assert(move_num('I1love143you55three3000thousand') === 'Iloveyouthreethousand1143553000');"", ""console.assert(move_num('Avengers124Assemble') === 'AvengersAssemble124');"", ""console.assert(move_num('Its11our12path13to14see15things16do17things') === 'Itsourpathtoseethingsdothings11121314151617');""]
```"
619, this function to find the largest subset where each pair is divisible.,"```javascript
function largestSubset(a, n) {
    let dp = new Array(n).fill(0);
    dp[n - 1] = 1; 
    for (let i = n - 2; i >= 0; i--) {
        let mxm = 0;
        for (let j = i + 1; j < n; j++) {
            if (a[j] % a[i] === 0 || a[i] % a[j] === 0) {
                mxm = Math.max(mxm, dp[j]);
            }
        }
        dp[i] = 1 + mxm;
    }
    return Math.max(...dp);
}
```",620,"```javascript
console.assert(largest_subset([1, 3, 6, 13, 17, 18], 6) === 4);
console.assert(largest_subset([10, 5, 3, 15, 20], 5) === 3);
console.assert(largest_subset([18, 1, 3, 6, 13, 17], 6) === 4);
```"
620, this function to increment the numeric values in the given strings by k.,"```javascript
function incrementNumerics(testList, K) {
    const res = testList.map(ele => /^\d+$/.test(ele) ? (parseInt(ele) + K).toString() : ele);
    return res;
}
```",621,"```javascript
['console.assert(increment_numerics([""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""], 6).toString() === [\'MSM\', \'240\', \'is\', \'104\', \'129\', \'best\', \'10\'].toString())', 'console.assert(increment_numerics([""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6""], 12).toString() === [\'Dart\', \'368\', \'is\', \'100\', \'181\', \'Super\', \'18\'].toString())', 'console.assert(increment_numerics([""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12""], 33).toString() === [\'Flutter\', \'484\', \'is\', \'77\', \'129\', \'Magnificent\', \'45\'].toString())']
```"
621, this function to find the median of two sorted arrays of same size.,"```javascript
function getMedian(arr1, arr2, n) {
  let i = 0;
  let j = 0;
  let m1 = -1;
  let m2 = -1;
  let count = 0;
  
  while (count < n + 1) {
    count += 1;
    if (i === n) {
      m1 = m2;
      m2 = arr2[0];
      break;
    } else if (j === n) {
      m1 = m2;
      m2 = arr1[0];
      break;
    }
    if (arr1[i] <= arr2[j]) {
      m1 = m2;
      m2 = arr1[i];
      i += 1;
    } else {
      m1 = m2;
      m2 = arr2[j];
      j += 1;
    }
  }
  return (m1 + m2) / 2;
}
```",622,"```javascript
['console.assert(get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) === 16.0)', 'console.assert(get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) === 8.5)', 'console.assert(get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) === 25.0)']
```"
622, this function to find the n-th power of individual elements in a list using lambda function.,"```javascript
function nthNums(nums, n) {
    const nthNums = nums.map(x => Math.pow(x, n));
    return nthNums;
}
```",623,"```javascript
['console.assert(JSON.stringify(nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)) === JSON.stringify([1, 4, 9, 16, 25, 36, 49, 64, 81, 100])', 'console.assert(JSON.stringify(nth_nums([10, 20, 30], 3)) === JSON.stringify([1000, 8000, 27000]))', 'console.assert(JSON.stringify(nth_nums([12, 15], 5)) === JSON.stringify([248832, 759375]))']
```"
623, this   function to convert the given string to upper case.,"```javascript
function isUpper(string) {
  return string.toUpperCase();
}
```",624,"```javascript
['console.assert(is_upper(""person"") === ""PERSON"")', 'console.assert(is_upper(""final"") === ""FINAL"")', 'console.assert(is_upper(""Valid"") === ""VALID"")']
```"
624, this   function to interchange first and last elements in a given list.,"```javascript
function swapList(newList) { 
    let size = newList.length; 
    let temp = newList[0]; 
    newList[0] = newList[size - 1]; 
    newList[size - 1] = temp;   
    return newList; 
}
```",625,"```javascript
['console.assert(swap_List([1,2,3]).toString() === [3,2,1].toString())', 'console.assert(swap_List([1,2,3,4,4]).toString() === [4,2,3,4,1].toString())', 'console.assert(swap_List([4,5,6]).toString() === [6,5,4].toString())']
```"
625, this   function to find the largest triangle that can be inscribed in the semicircle.,"```javascript
function triangleArea(r) {
    if (r < 0) {
        return -1;
    }
    return r * r;
}
```",626,"```javascript
['console.assert(triangle_area(0) === 0)', 'console.assert(triangle_area(-1) === -1)', 'console.assert(triangle_area(2) === 4)']
```"
626, this   function to find the smallest missing number from the given array.,"```javascript
function findFirstMissing(array, start, end) {
    if (start > end) {
        return end + 1;
    }
    if (start !== array[start]) {
        return start;
    }
    const mid = Math.floor((start + end) / 2);
    if (array[mid] === mid) {
        return findFirstMissing(array, mid + 1, end);
    }
    return findFirstMissing(array, start, mid);
}
```",627,"```javascript
['console.assert(find_First_Missing([0,1,2,3],0,3) === 4)', 'console.assert(find_First_Missing([0,1,2,6,9],0,4) === 3)', 'console.assert(find_First_Missing([2,3,5,8,9],0,4) === 0)']
```"
627, this function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.,"```javascript
const MAX = 1000;

function replaceSpaces(string) {
  string = string.trim();
  let i = string.length;
  let spaceCount = (string.match(/ /g) || []).length;
  let newLength = i + spaceCount * 2;
  if (newLength > MAX) {
    return -1;
  }
  let index = newLength - 1;
  string = string.split('');
  for (let f = 0; f < spaceCount * 2; f++) {
    string.push('0');
  }
  for (let j = i - 1; j >= 0; j--) {
    if (string[j] === ' ') {
      string[index] = '0';
      string[index - 1] = '2';
      string[index - 2] = '%';
      index -= 3;
    } else {
      string[index] = string[j];
      index -= 1;
    }
  }
  return string.join('');
}
```",628,"```javascript
['console.assert(replace_spaces(""My Name is Dawood"") === ""My%20Name%20is%20Dawood"")', 'console.assert(replace_spaces(""I am a Programmer"") === ""I%20am%20a%20Programmer"")', 'console.assert(replace_spaces(""I love Coding"") === ""I%20love%20Coding"")']
```"
628, this   function to find even numbers from a mixed list.,"```javascript
function Split(list) {
    let ev_li = [];
    for (let i of list) {
        if (i % 2 === 0) {
            ev_li.push(i);
        }
    }
    return ev_li;
}
```",629,"```javascript
['console.assert(Split([1,2,3,4,5]).toString() === [2,4].toString())', 'console.assert(Split([4,5,6,7,8,0,1]).toString() === [4,6,8,0].toString())', 'console.assert(Split([8,12,15,19]).toString() === [8,12].toString())']
```"
629, this function to extract all the adjacent coordinates of the given coordinate tuple.,"```javascript
function* adjac(ele, sub = []) { 
  if (!ele.length) { 
    yield sub; 
  } else { 
    for (let j = ele[0] - 1; j <= ele[0] + 1; j++) { 
      for (let idx of adjac(ele.slice(1), sub.concat(j))) { 
        yield idx; 
      } 
    } 
  } 
}

function getCoordinates(testTup) { 
  const res = Array.from(adjac(testTup)); 
  return res; 
}
```",630,"```javascript
['console.assert(JSON.stringify(get_coordinates([3, 4])) === JSON.stringify([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]))', 'console.assert(JSON.stringify(get_coordinates([4, 5])) === JSON.stringify([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]))', 'console.assert(JSON.stringify(get_coordinates([5, 6])) === JSON.stringify([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]))']
```"
630, this function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"```javascript
const text = '  Exercises';
function replaceSpaces(text) {
  text = text.replace(/ /g, ""_"");
  return text;
}
```",631,"```javascript
[""console.assert(replace_spaces('Jumanji The Jungle') === 'Jumanji_The_Jungle')"", ""console.assert(replace_spaces('The Avengers') === 'The_Avengers')"", ""console.assert(replace_spaces('Fast and Furious') === 'Fast_and_Furious')""]
```"
631, this   function to move all zeroes to the end of the given list.,"```javascript
function moveZero(numList) {
    let a = Array(numList.filter(num => num === 0).length).fill(0);
    let x = numList.filter(i => i !== 0);
    x.push(...a);
    return x;
}
```",632,"```javascript
['console.assert(JSON.stringify(move_zero([1,0,2,0,3,4])) === JSON.stringify([1,2,3,4,0,0])', 'console.assert(JSON.stringify(move_zero([2,3,2,0,0,4,0,5,0])) === JSON.stringify([2,3,2,4,5,0,0,0,0])', 'console.assert(JSON.stringify(move_zero([0,1,0,1,1])) === JSON.stringify([1,1,1,0,0])']
```"
632, this   function to find the sum of xor of all pairs of numbers in the given array.,"```javascript
function pair_OR_Sum(arr, n) {
    let ans = 0;
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            ans += (arr[i] ^ arr[j]);
        }
    }
    return ans;
}
```",633,"```javascript
['console.assert(pair_OR_Sum([5,9,7,6],4) === 47)', 'console.assert(pair_OR_Sum([7,3,5],3) === 12)', 'console.assert(pair_OR_Sum([7,3],2) === 4)']
```"
633, this   function to find the sum of fourth power of first n even natural numbers.,"```javascript
function evenPowerSum(n) {
    let sum = 0; 
    for (let i = 1; i <= n; i++) { 
        let j = 2 * i; 
        sum += j * j * j * j; 
    }
    return sum; 
}
```",634,"```javascript
['console.assert(even_Power_Sum(2) === 272)', 'console.assert(even_Power_Sum(3) === 1568)', 'console.assert(even_Power_Sum(4) === 5664)']
```"
634, this function to push all values into a heap and then pop off the smallest values one at a time.,"```javascript
function heapSort(iterable) {
    let h = [];
    iterable.forEach(value => {
        h.push(value);
        h.sort((a, b) => a - b);
    });
    return h.map(() => h.shift());
}
```",635,"```javascript
['console.assert(JSON.stringify(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])) === JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))', 'console.assert(JSON.stringify(heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])) === JSON.stringify([14, 22, 25, 25, 35, 58, 65, 75, 85]))', 'console.assert(JSON.stringify(heap_sort([7, 1, 9, 5])) === JSON.stringify([1, 5, 7, 9]))']
```"
635, this   function to check if roots of a quadratic equation are reciprocal of each other or not.,"```javascript
function Check_Solution(a, b, c) { 
    if (a === c) { 
        return ""Yes""; 
    } else { 
        return ""No""; 
    } 
}
```",636,"```javascript
['console.assert(Check_Solution(2,0,2) === ""Yes"")', 'console.assert(Check_Solution(2,-5,2) === ""Yes"")', 'console.assert(Check_Solution(1,2,3) === ""No"")']
```"
636, this function to check whether the given amount has no profit and no loss,"```javascript
function noprofit_noloss(actual_cost, sale_amount) {
  if (sale_amount === actual_cost) {
    return true;
  } else {
    return false;
  }
}
```",637,"```javascript
['console.assert(noprofit_noloss(1500, 1200) === false)', 'console.assert(noprofit_noloss(100, 100) === true)', 'console.assert(noprofit_noloss(2000, 5000) === false)'];
```"
637, this function to calculate wind chill index.,"```javascript
function windChill(v, t) {
    const windchill = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);
    return Math.round(windchill);
}
```",638,"```javascript
['console.assert(wind_chill(120, 35) === 40)', 'console.assert(wind_chill(40, 70) === 86)', 'console.assert(wind_chill(10, 100) === 116)']
```"
638, this function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"```javascript
function sample_nam(sample_names) {
  sample_names = sample_names.filter(el => el[0].toUpperCase() === el[0] && el.slice(1).toLowerCase() === el.slice(1));
  return ''.join(sample_names).length;
}
```",639,"```javascript
[""console.assert(sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) === 16)"", 'console.assert(sample_nam([""php"", ""res"", "" "", ""abcd"", ""Java"", ""aaa""]) === 10)', 'console.assert(sample_nam([""abcd"", "" "", ""abba"", ""aba""]) === 6)']
```"
639, this function to remove the parenthesis area in a string.,"```javascript
function removeParenthesis(items) {
    return items.map(item => item.replace(/ ?\([^)]+\)/g, """"));
}
```",640,"```javascript
['console.assert(remove_parenthesis([""  (chrome)""]) === "" "")', 'console.assert(remove_parenthesis([""string(.abc)""]) === ""string"")', 'console.assert(remove_parenthesis([""alpha(num)""]) === ""alpha"")']
```"
640, this function to find the nth nonagonal number.,"```javascript
function isNonagonal(n) {
    return Math.floor(n * (7 * n - 5) / 2);
}
```",641,"```javascript
console.assert(is_nonagonal(10) === 325);
console.assert(is_nonagonal(15) === 750);
console.assert(is_nonagonal(18) === 1089);
```"
641, this function to remove similar rows from the given tuple matrix.,"```javascript
function removeSimilarRow(testList) {
    const res = new Set(testList.map(sub => Array.from(new Set(sub)).sort()).map(sub => JSON.stringify(sub)));
    return res;
}
```",642,"```javascript
['console.assert(remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]]) === new Set([[(2, 2), (4, 6)], [(3, 2), (4, 5)]]))', 'console.assert(remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]]) === new Set([[(4, 3), (5, 6)], [(3, 3), (5, 7)]]))', 'console.assert(remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]]) === new Set([[(4, 4), (6, 8)], [(5, 4), (6, 7)]]))']
```"
642," this function that matches a word containing 'z', not at the start or end of the word.","```javascript
function textMatchWordzMiddle(text) {
    const patterns = /\Bz\B/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",643,"```javascript
['console.assert(text_match_wordz_middle("" zabc."") === \'Found a match!\')', 'console.assert(text_match_wordz_middle(""xyzabc."") === \'Found a match!\')', 'console.assert(text_match_wordz_middle(""  lang  ."") === \'Not matched!\')']
```"
643, this   function to reverse an array upto a given position.,"```javascript
function reverseArrayUptoK(input, k) {
    return input.slice(k - 1, -1).reverse().concat(input.slice(k));
}
```",644,"```javascript
['console.assert(JSON.stringify(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)) === JSON.stringify([4, 3, 2, 1, 5, 6])', 'console.assert(JSON.stringify(reverse_Array_Upto_K([4, 5, 6, 7], 2)) === JSON.stringify([5, 4, 6, 7])', 'console.assert(JSON.stringify(reverse_Array_Upto_K([9, 8, 7, 6, 5], 3)) === JSON.stringify([7, 8, 9, 6, 5])'];
```"
644, this function to find the product of it’s kth index in the given tuples.,"```javascript
function get_product(val) {
    let res = 1;
    for (let ele of val) {
        res *= ele;
    }
    return res;
}

function find_k_product(test_list, K) {
    let res = get_product(test_list.map(sub => sub[K]));
    return res;
}
```",645,"```javascript
['console.assert(find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) === 665)', 'console.assert(find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) === 280)', 'console.assert(find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) === 210)']
```"
645, this   function to count number of cubes of size k in a cube of size n.,"```javascript
function No_of_cubes(N, K) {
    let No = 0;
    No = (N - K + 1);
    No = Math.pow(No, 3);
    return No;
}
```",646,"```javascript
['console.assert(No_of_cubes(2, 1) === 8)', 'console.assert(No_of_cubes(5, 2) === 64)', 'console.assert(No_of_cubes(1, 1) === 1)']
```"
646, this function to split a string at uppercase letters.,"```javascript
function splitUpperString(text) {
    return text.match(/[A-Z][^A-Z]*/g);
}
```",647,"```javascript
['console.assert(split_upperstring("" ProgramLanguage"").toString()===["" "",""Program"",""Language""].toString())', 'console.assert(split_upperstring("" Program"").toString()===["" "",""Program""].toString())', 'console.assert(split_upperstring(""ProgrammingLanguage"").toString()===[""Programming"",""Language""].toString())']
```"
647, this function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"```javascript
function exchangeElements(lst) {
    let lst1 = [];
    let lst2 = [];
    
    for (let i = 0; i < lst.length; i += 2) {
        if (i + 1 < lst.length) {
            lst1.push(lst[i + 1]);
            lst2.push(lst[i]);
        } else {
            lst2.push(lst[i]);
        }
    }
    
    return [lst1, lst2];
}
```",648,"```javascript
console.assert(exchangeElements([0, 1, 2, 3, 4, 5]).toString() === [1, 0, 3, 2, 5, 4].toString());
console.assert(exchangeElements([5, 6, 7, 8, 9, 10]).toString() === [6, 5, 8, 7, 10, 9].toString());
console.assert(exchangeElements([25, 35, 45, 55, 75, 95]).toString() === [35, 25, 55, 45, 95, 75].toString());
```"
648, this   function to calculate the sum of the numbers in a list between the indices of a specified range.,"```javascript
function sumRangeList(nums, m, n) {
    let sumRange = 0;
    for (let i = m; i <= n; i++) {
        sumRange += nums[i];
    }
    return sumRange;
}
```",649,"```javascript
['console.assert(sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) === 29)', 'console.assert(sum_Range_list([1, 2, 3, 4, 5], 1, 2) === 5)', 'console.assert(sum_Range_list([1, 0, 1, 2, 5, 6], 4, 5) === 11)']
```"
649, this   function to check whether the given two arrays are equal or not.,"```javascript
function are_Equal(arr1, arr2, n, m) {
    if (n !== m) {
        return false;
    }
    arr1.sort();
    arr2.sort();
    for (let i = 0; i < n; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
```",650,"```javascript
['console.assert(are_Equal([1,2,3],[3,2,1],3,3) === true)', 'console.assert(are_Equal([1,1,1],[2,2,2],3,3) === false)', 'console.assert(are_Equal([8,9],[4,5,6],2,3) === false)']
```"
650, this function to check if one tuple is a subset of another tuple.,"```javascript
function checkSubset(testTup1, testTup2) {
  const res = new Set(testTup2).size <= new Set(testTup1).size && [...new Set(testTup2)].every(item => new Set(testTup1).has(item));
  return res;
}
```",651,"```javascript
console.assert(check_subset([10, 4, 5, 6], [5, 10]) === true);
console.assert(check_subset([1, 2, 3, 4], [5, 6]) === false);
console.assert(check_subset([7, 8, 9, 10], [10, 8]) === true);
```"
651, this function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"```javascript
function matrixToList(testList) {
    let temp = [];
    for (let sub of testList) {
        temp.push(...sub);
    }
    let res = [];
    for (let i = 0; i < temp[0].length; i++) {
        res.push(temp.map(row => row[i]));
    }
    return JSON.stringify(res);
}
```",652,"```javascript
console.assert(matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) === '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]');
console.assert(matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) === '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]');
console.assert(matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) === '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]');
```"
652, this function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"```javascript
function groupingDictionary(l) {
    const d = {};
    for (const [k, v] of l) {
        if (!d[k]) {
            d[k] = [];
        }
        d[k].push(v);
    }
    return d;
}
```",653,"```javascript
[""console.assert(JSON.stringify(groupingDictionary([['yellow', 1], ['blue', 2], ['yellow', 3], ['blue', 4], ['red', 1]])) === JSON.stringify({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}))"", ""console.assert(JSON.stringify(groupingDictionary([['yellow', 10], ['blue', 20], ['yellow', 30], ['blue', 40], ['red', 10]])) === JSON.stringify({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}))"", ""console.assert(JSON.stringify(groupingDictionary([['yellow', 15], ['blue', 25], ['yellow', 35], ['blue', 45], ['red', 15]])) === JSON.stringify({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}))""]
```"
653, this function to find the perimeter of a rectangle.,"```javascript
function rectanglePerimeter(l, b) {
  const perimeter = 2 * (l + b);
  return perimeter;
}
```",654,"```javascript
['console.assert(rectangle_perimeter(10, 20) === 60)', 'console.assert(rectangle_perimeter(10, 5) === 30)', 'console.assert(rectangle_perimeter(4, 2) === 12)']
```"
654, this   function to find the sum of fifth power of n natural numbers.,"```javascript
function fifthPowerSum(n) { 
    let sm = 0; 
    for (let i = 1; i <= n; i++) { 
        sm += (i * i * i * i * i); 
    } 
    return sm; 
}
```",655,"```javascript
assert(fifth_Power_Sum(2) === 33);
assert(fifth_Power_Sum(4) === 1300);
assert(fifth_Power_Sum(3) === 276);
```"
655, this   function to find the minimum sum of absolute differences of two arrays.,"```javascript
function find_Min_Sum(a, b, n) { 
    a.sort((x, y) => x - y); 
    b.sort((x, y) => x - y); 
    let sum = 0;  
    for (let i = 0; i < n; i++) { 
        sum += Math.abs(a[i] - b[i]); 
    } 
    return sum; 
}
```",656,"```javascript
['console.assert(find_Min_Sum([3,2,1],[2,1,3],3) === 0)', 'console.assert(find_Min_Sum([1,2,3],[4,5,6],3) === 9)', 'console.assert(find_Min_Sum([4,1,8,7],[2,3,6,5],4) === 6)']
```"
656, this   function to find the first digit in factorial of a given number.,"```javascript
function first_Digit(n) {
    let fact = 1;
    for (let i = 2; i <= n; i++) {
        fact = fact * i;
        while (fact % 10 === 0) {
            fact = Math.floor(fact / 10);
        }
    }
    while (fact >= 10) {
        fact = Math.floor(fact / 10);
    }
    return Math.floor(fact);
}
```",657,"```javascript
['console.assert(first_Digit(5) === 1)', 'console.assert(first_Digit(10) === 3)', 'console.assert(first_Digit(7) === 5)']
```"
657, this function to find the item with maximum occurrences in a given list.,"```javascript
function maxOccurrences(list1) {
    let maxVal = 0;
    let result = list1[0];
    for (let i of list1) {
        let occu = list1.filter(x => x === i).length;
        if (occu > maxVal) {
            maxVal = occu;
            result = i;
        }
    }
    return [result];
}
```",658,"```javascript
['console.assert(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]) === 2)', 'console.assert(max_occurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11]) === 1)', 'console.assert(max_occurrences([1, 2, 3, 2, 4, 5, 1, 1, 1]) === 1)']
```"
658, this   function to print duplicants from a list of integers.,"```javascript
function Repeat(x) {
    var _size = x.length;
    var repeated = [];
    for (var i = 0; i < _size; i++) {
        var k = i + 1;
        for (var j = k; j < _size; j++) {
            if (x[i] === x[j] && repeated.indexOf(x[i]) === -1) {
                repeated.push(x[i]);
            }
        }
    }
    return repeated;
}
```",659,"```javascript
['console.assert(Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]).toString() === [20, 30, -20, 60].toString())', 'console.assert(Repeat([-1, 1, -1, 8]).toString() === [-1].toString())', 'console.assert(Repeat([1, 2, 3, 1, 2]).toString() === [1, 2].toString())']
```"
659, this   function to choose points from two ranges such that no point lies in both the ranges.,"```javascript
function find_Points(l1, r1, l2, r2) {
    let x = (l1 !== l2) ? Math.min(l1, l2) : -1;
    let y = (r1 !== r2) ? Math.max(r1, r2) : -1;
    return [[x, y]];
}
```",660,"```javascript
['console.assert(find_Points(5,10,1,5) === (1,10))', 'console.assert(find_Points(3,5,7,9) === (3,9))', 'console.assert(find_Points(1,5,2,8) === (1,8))']
```"
660, this function to find the maximum sum that can be formed which has no three consecutive elements present.,"```javascript
function maxSumOfThreeConsecutive(arr, n) { 
    let sum = new Array(n).fill(0); 
    if (n >= 1) { 
        sum[0] = arr[0]; 
    } 
    if (n >= 2) { 
        sum[1] = arr[0] + arr[1]; 
    } 
    if (n > 2) { 
        sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2])); 
    } 
    for (let i = 3; i < n; i++) { 
        sum[i] = Math.max(Math.max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]); 
    } 
    return sum[n-1]; 
}
```",661,"```javascript
console.assert(max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) === 2101);
console.assert(max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) === 5013);
console.assert(max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) === 27);
```"
661, this function to sort a list in a dictionary.,"```javascript
function sortedDict(dict1) {
  const sortedDict = {};
  for (const [x, y] of Object.entries(dict1)) {
    sortedDict[x] = y.sort();
  }
  return sortedDict;
}
```",662,"```javascript
console.assert(sortedDict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}) == {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]});
console.assert(sortedDict({'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}) == {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]});
console.assert(sortedDict({'n1': [58, 44, 56], 'n2': [91, 34, 58], 'n3': [100, 200, 300]}) == {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]});
```"
662, this function to find the largest possible value of k such that k modulo x is y.,"```javascript
function findMaxVal(n, x, y) { 
    let ans = -Number.MAX_SAFE_INTEGER; 
    for (let k = 0; k <= n; k++) { 
        if (k % x === y) { 
            ans = Math.max(ans, k); 
        } 
    } 
    return (ans >= 0 && ans <= n) ? ans : -1; 
}
```",663,"```javascript
['console.assert(find_max_val(15, 10, 5) === 15)', 'console.assert(find_max_val(187, 10, 5) === 185)', 'console.assert(find_max_val(16, 11, 1) === 12)']
```"
663, this   function to find the average of even numbers till a given even number.,"```javascript
function average_Even(n) {
    if (n % 2 !== 0) {
        return ""Invalid Input"";
    }
    
    let sm = 0;
    let count = 0;
    while (n >= 2) {
        count++;
        sm += n;
        n -= 2;
    }
    return Math.floor(sm / count);
}
```",664,"```javascript
['console.assert(average_Even(2) === 2)', 'console.assert(average_Even(4) === 3)', 'console.assert(average_Even(100) === 51)']
```"
664, this   function to shift first element to the end of given list.,"```javascript
function moveLast(numList) {
    const a = Array(numList.filter(i => i === numList[0]).length).fill(numList[0]);
    const x = numList.filter(i => i !== numList[0]);
    x.push(...a);
    return x;
}
```",665,"```javascript
assert(move_last([1,2,3,4]) === [2,3,4,1]);
assert(move_last([2,3,4,1,5,0]) === [3,4,1,5,0,2]);
assert(move_last([5,4,3,2,1]) === [4,3,2,1,5]);
```"
665, this function to count occurrence of a character in a string.,"```javascript
function countChar(string, char) {
    let count = 0;
    for (let i = 0; i < string.length; i++) {
        if (string[i] === char) {
            count++;
        }
    }
    return count;
}
```",666,"```javascript
['console.assert(count_char("" "", \'o\') === 1)', 'console.assert(count_char(""little"", \'t\') === 2)', 'console.assert(count_char(""assert"", \'s\') === 2)']
```"
666, this   function to count number of vowels in the string.,"```javascript
function Check_Vow(string, vowels) {
    let final = [...string].filter(each => vowels.includes(each));
    return final.length;
}
```",667,"```javascript
[""console.assert(Check_Vow('corner', 'AaEeIiOoUu') === 2)"", ""console.assert(Check_Vow('valid', 'AaEeIiOoUu') === 2)"", ""console.assert(Check_Vow('true', 'AaEeIiOoUu') === 2)""]
```"
667, this   function to replace multiple occurence of character by single.,"```javascript
function replace(string, char) {
    const pattern = new RegExp(char + '{2,}', 'g');
    string = string.replace(pattern, char);
    return string;
}
```",668,"```javascript
[""console.assert(replace('peep', 'e') === 'pep')"", ""console.assert(replace('Greek', 'e') === 'Grek')"", ""console.assert(replace('Moon', 'o') === 'Mon')""]
```"
668, this function to check whether the given ip address is valid or not using regex.,"```javascript
const regex = /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$/;

function check_IP(Ip) {
    if (regex.test(Ip)) {
        return ""Valid IP address"";
    } else {
        return ""Invalid IP address"";
    }
}
```",669,"```javascript
console.assert(check_IP(""192.168.0.1"") === 'Valid IP address');
console.assert(check_IP(""110.234.52.124"") === 'Valid IP address');
console.assert(check_IP(""366.1.2.2"") === 'Invalid IP address');
```"
669, this   function to check whether a sequence of numbers has a decreasing trend or not.,"```javascript
function decreasingTrend(nums) {
    if (nums.slice().sort((a, b) => b - a).toString() === nums.toString()) {
        return true;
    } else {
        return false;
    }
}
```",670,"```javascript
console.assert(decreasing_trend([-4,-3,-2,-1]) === true);
console.assert(decreasing_trend([1,2,3]) === true);
console.assert(decreasing_trend([3,2,1]) === false);
```"
670, this   function to set the right most unset bit.,"```javascript
function get_Pos_Of_Right_most_Set_Bit(n) { 
    return Math.floor(Math.log2(n & -n)) + 1; 
}

function set_Right_most_Unset_Bit(n) { 
    if (n === 0) { 
        return 1; 
    } 
    if ((n & (n + 1)) === 0) {     
        return n; 
    } 
    const pos = get_Pos_Of_Right_most_Set_Bit(~n);      
    return ((1 << (pos - 1)) | n); 
}
```",671,"```javascript
['console.assert(set_Right_most_Unset_Bit(21) === 23)', 'console.assert(set_Right_most_Unset_Bit(11) === 15)', 'console.assert(set_Right_most_Unset_Bit(15) === 15)']
```"
671, this function to find maximum of three numbers.,"```javascript
function maxOfThree(num1, num2, num3) { 
    let lnum;
    if (num1 >= num2 && num1 >= num3) {
        lnum = num1;
    } else if (num2 >= num1 && num2 >= num3) {
        lnum = num2;
    } else {
        lnum = num3;
    }
    return lnum;
}
```",672,"```javascript
['console.assert(max_of_three(10,20,30) === 30)', 'console.assert(max_of_three(55,47,39) === 55)', 'console.assert(max_of_three(10,49,30) === 49)']
```"
672, this   function to convert a list of multiple integers into a single integer.,"```javascript
function convert(list) {
    let s = list.map(i => String(i));
    let res = parseInt(s.join(""""));
    return res;
}
```",673,"```javascript
['console.assert(convert([1,2,3]) === 123)', 'console.assert(convert([4,5,6]) === 456)', 'console.assert(convert([7,8,9]) === 789)'];
```"
673, this function to remove duplicate words from a given string using collections module.,"```javascript
function removeDuplicate(string) {
  const result = Array.from(new Set(string.split(' '))).join(' ');
  return result;
}
```",674,"```javascript
console.assert(remove_duplicate(""  Exercises Practice Solution Exercises"") === ""  Exercises Practice Solution"");
console.assert(remove_duplicate(""  Exercises Practice Solution  "") === ""  Exercises Practice Solution"");
console.assert(remove_duplicate(""  Exercises Practice Solution Practice"") === ""  Exercises Practice Solution"");
```"
674," this function to add two integers. however, if the sum is between the given range it will return 20.","```javascript
function sumNums(x, y, m, n) {
    let sumNums = x + y;
    if (sumNums >= m && sumNums < n) {
        return 20;
    } else {
        return sumNums;
    }
}
```",675,"```javascript
['console.assert(sum_nums(2,10,11,20) === 20)', 'console.assert(sum_nums(15,17,1,10) === 32)', 'console.assert(sum_nums(10,15,5,30) === 20)']
```"
675, this function to remove everything except alphanumeric characters from the given string by using regex.,"```javascript
function removeExtraChar(text1) {
  const pattern = /[\W_]+/g;
  return text1.replace(pattern, '');
}
```",676,"```javascript
console.assert(remove_extra_char('**//Google Android// - 12. ') === 'GoogleAndroid12');
console.assert(remove_extra_char('****//Google Flutter//*** - 36. ') === 'GoogleFlutter36');
console.assert(remove_extra_char('**//Google Firebase// - 478. ') === 'GoogleFirebase478');
```"
676, this function to check if the triangle is valid or not.,"```javascript
function validityTriangle(a, b, c) {
    const total = a + b + c;
    if (total === 180) {
        return true;
    } else {
        return false;
    }
}
```",677,"```javascript
['console.assert(validity_triangle(60,50,90) === false)', 'console.assert(validity_triangle(45,75,60) === true)', 'console.assert(validity_triangle(30,50,100) === true)'];
```"
677, this   function to remove spaces from a given string.,"```javascript
function remove_spaces(str1) {
  str1 = str1.replace(/ /g, '');
  return str1;
}
```",678,"```javascript
['console.assert(remove_spaces(""a b c"") === ""abc"")', 'console.assert(remove_spaces(""1 2 3"") === ""123"")', 'console.assert(remove_spaces("" b c"") === ""bc"")']
```"
678, this function to access dictionary key’s element by index.,"```javascript
function accessKey(dictionary, key) {
  return Object.keys(dictionary)[key];
}
```",679,"```javascript
[""console.assert(access_key({'physics': 80, 'math': 90, 'chemistry': 86}, 0) === 'physics')"", ""console.assert(access_key({' ': 10, 'java': 20, 'C++': 30}, 2) === 'C++')"", ""console.assert(access_key({'program': 15, 'computer': 45}, 1) === 'computer')""]
```"
679, this   function to check whether a sequence of numbers has an increasing trend or not.,"```javascript
function increasingTrend(nums) {
    return sorted(nums).toString() === nums.toString();
}
```",680,"```javascript
console.assert(increasing_trend([1,2,3,4]) === true);
console.assert(increasing_trend([4,3,2,1]) === false);
console.assert(increasing_trend([0,1,4,9]) === true);
```"
680, this   function to find the smallest prime divisor of a number.,"```javascript
function smallest_Divisor(n) {
    if (n % 2 === 0) {
        return 2;
    }
    let i = 3;
    while (i * i <= n) {
        if (n % i === 0) {
            return i;
        }
        i += 2;
    }
    return n;
}
```",681,"```javascript
['console.assert(smallest_Divisor(10) === 2)', 'console.assert(smallest_Divisor(25) === 5)', 'console.assert(smallest_Divisor(31) === 31)']
```"
681, this function to multiply two lists using map and lambda function.,"```javascript
function mulList(nums1, nums2) {
  return Array.from(nums1.map((x, i) => x * nums2[i]));
}
```",682,"```javascript
['console.assert(mulList([1, 2, 3], [4, 5, 6]).toString() === [4, 10, 18].toString())', 
 'console.assert(mulList([1, 2], [3, 4]).toString() === [3, 8].toString())', 
 'console.assert(mulList([90, 120], [50, 70]).toString() === [4500, 8400].toString())']
```"
682, this   function to check whether the given number can be represented by sum of two squares or not.,"```javascript
function sum_Square(n) {
    let i = 1;
    while (i * i <= n) {
        let j = 1;
        while (j * j <= n) {
            if (i * i + j * j === n) {
                return true;
            }
            j++;
        }
        i++;
    }
    return false;
}
```",683,"```javascript
['console.assert(sum_Square(25) === true)', 'console.assert(sum_Square(24) === false)', 'console.assert(sum_Square(17) === true)'];
```"
683, this   function to count occurences of a character in a repeated string.,"```javascript
function count_Char(str, x) {
    let count = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] === x) {
            count += 1;
        }
    }
    const n = 10;
    const repititions = Math.floor(n / str.length);
    count = count * repititions;
    const l = n % str.length;
    for (let i = 0; i < l; i++) {
        if (str[i] === x) {
            count += 1;
        }
    }
    return count;
}
```",684,"```javascript
['console.assert(count_Char(""abcac"", \'a\') === 4)', 'console.assert(count_Char(""abca"", \'c\') === 2)', 'console.assert(count_Char(""aba"", \'a\') === 7)']
```"
684, this   function to find sum of prime numbers between 1 to n.,"```javascript
function sumOfPrimes(n) { 
    let prime = new Array(n + 1).fill(true);  
    let p = 2;
    while (p * p <= n) { 
        if (prime[p] === true) {  
            let i = p * 2;
            while (i <= n) { 
                prime[i] = false;
                i += p; 
            }
        }
        p += 1;    
    }
    let sum = 0;
    for (let i = 2; i <= n; i++) { 
        if (prime[i]) { 
            sum += i; 
        }
    }
    return sum;
}
```",685,"```javascript
['console.assert(sum_Of_Primes(10) === 17)', 'console.assert(sum_Of_Primes(20) === 77)', 'console.assert(sum_Of_Primes(5) === 10)']
```"
685, this function to find the frequency of each element in the given list.,"```javascript
function freqElement(testTup) {
  let res = {};
  for (let ele of testTup) {
    res[ele] = (res[ele] || 0) + 1;
  }
  return [JSON.stringify(res)];
}
```",686,"```javascript
[""console.assert(freq_element([4, 5, 4, 5, 6, 6, 5, 5, 4]) === '{4: 3, 5: 4, 6: 2}')"", ""console.assert(freq_element([7, 8, 8, 9, 4, 7, 6, 5, 4]) === '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}')"", ""console.assert(freq_element([1, 4, 3, 1, 4, 5, 2, 6, 2, 7]) === '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}')""]
```"
686, this function to find the greatest common divisor (gcd) of two integers by using recursion.,"```javascript
function recurGcd(a, b) {
    const low = Math.min(a, b);
    const high = Math.max(a, b);
    if (low === 0) {
        return high;
    } else if (low === 1) {
        return 1;
    } else {
        return recurGcd(low, high % low);
    }
}
```",687,"```javascript
['console.assert(recur_gcd(12, 14) === 2)', 'console.assert(recur_gcd(13, 17) === 1)', 'console.assert(recur_gcd(9, 3) === 3)']
```"
687, this function to get the length of a complex number.,"```javascript
function lenComplex(a, b) {
  const cn = new Complex(a, b);
  const length = cn.abs();
  return length;
}
```",688,"```javascript
['console.assert(len_complex(3,4) === 5.0)', 'console.assert(len_complex(9,10) === 13.45362404707371)', 'console.assert(len_complex(7,9) === 11.40175425099138)']
```"
688,##  this function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"```javascript
function min_jumps(arr, n) {
    let jumps = new Array(n).fill(0);
    if (n === 0 || arr[0] === 0) {
        return Infinity;
    }
    jumps[0] = 0;
    for (let i = 1; i < n; i++) {
        jumps[i] = Infinity;
        for (let j = 0; j < i; j++) {
            if (i <= j + arr[j] && jumps[j] !== Infinity) {
                jumps[i] = Math.min(jumps[i], jumps[j] + 1);
                break;
            }
        }
    }
    return jumps[n - 1];
}
```",689,"```javascript
['console.assert(minJumps([1, 3, 6, 1, 0, 9], 6) === 3)', 'console.assert(minJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) === 3)', 'console.assert(minJumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) === 10)']
```"
689, this function to multiply consecutive numbers of a given list.,"```javascript
function mulConsecutiveNums(nums) {
    const result = nums.slice(0, -1).map((a, i) => a * nums[i + 1]);
    return [result];
}
```",690,"```javascript
['console.assert(mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]).toString() === [1, 3, 12, 16, 20, 30, 42].toString())', 'console.assert(mul_consecutive_nums([4, 5, 8, 9, 6, 10]).toString() === [20, 40, 72, 54, 60].toString())', 'console.assert(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [2, 6, 12, 20, 30, 42, 56, 72, 90].toString())']
```"
690, this function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"```javascript
function groupElement(testList) {
  const res = {};
  testList.sort((a, b) => a[1] - b[1]);
  const grouped = testList.reduce((acc, ele) => {
    const key = ele[1];
    if (!acc[key]) {
      acc[key] = [];
    }
    acc[key].push(ele[0]);
    return acc;
  }, {});
  Object.keys(grouped).forEach(key => {
    res[key] = grouped[key];
  });
  return res;
}
```",691,"```javascript
['console.assert(JSON.stringify(groupElement([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])) === JSON.stringify({5: [6, 2], 7: [2, 8, 3], 8: [9]}))', 'console.assert(JSON.stringify(groupElement([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])) === JSON.stringify({6: [7, 3], 8: [3, 9, 4], 9: [10]}))', 'console.assert(JSON.stringify(groupElement([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])) === JSON.stringify({7: [8, 4], 9: [4, 10, 5], 10: [11]}))']
```"
691, this   function to find the last two digits in factorial of a given number.,"```javascript
function lastTwoDigits(N) {
    if (N >= 10) {
        return;
    }
    let fac = 1;
    for (let i = 1; i <= N; i++) {
        fac = (fac * i) % 100;
    }
    return fac;
}
```",692,"```javascript
console.assert(last_Two_Digits(7) === 40);
console.assert(last_Two_Digits(5) === 20);
console.assert(last_Two_Digits(2) === 2);
```"
692, this function to remove multiple spaces in a string by using regex.,"```javascript
function removeMultipleSpaces(text1) {
  return text1.replace(/ +/g, ' ');
}
```",693,"```javascript
[""console.assert(remove_multiple_spaces('Google      Assistant') === 'Google Assistant')"", ""console.assert(remove_multiple_spaces('Quad      Core') === 'Quad Core')"", ""console.assert(remove_multiple_spaces('ChromeCast      Built-in') === 'ChromeCast Built-in')""]
```"
693, this function to extract unique values from the given dictionary values.,"```javascript
function extractUnique(testDict) {
    const res = Array.from(new Set(Object.values(testDict).flat())).sort();
    return res;
}
```",694,"```javascript
console.assert(extract_unique({'msm': [5, 6, 7, 8], 'is': [10, 11, 7, 5], 'best': [6, 12, 10, 8], 'for': [1, 2, 5]}) === [1, 2, 5, 6, 7, 8, 10, 11, 12]);
console.assert(extract_unique({'Built': [7, 1, 9, 4], 'for': [11, 21, 36, 14, 9], 'ISP': [4, 1, 21, 39, 47], 'TV': [1, 32, 38]}) === [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]);
console.assert(extract_unique({'F': [11, 13, 14, 17], 'A': [12, 11, 15, 18], 'N': [19, 21, 15, 36], 'G': [37, 36, 35]}) === [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]);
```"
694, this function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"```javascript
function checkGreater(testTup1, testTup2) {
  const res = testTup1.every((x, i) => x < testTup2[i]);
  return res;
}
```",695,"```javascript
console.assert(check_greater([10, 4, 5], [13, 5, 18]) === true);
console.assert(check_greater([1, 2, 3], [2, 1, 4]) === false);
console.assert(check_greater([4, 5, 6], [5, 6, 7]) === true);
```"
695, this function to zip two given lists of lists.,"```javascript
function zipList(list1, list2) {
    const result = list1.map((item, index) => item.concat(list2[index]));
    return result;
}
```",696,"```javascript
['console.assert(zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]]) === [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]);', 
 'console.assert(zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]) === [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]);', 
 'console.assert(zip_list([[""a"",""b""],[""c"",""d""]], [[""e"",""f""],[""g"",""h""]]) === [[""a"",""b"",""e"",""f""],[""c"",""d"",""g"",""h""]]);']
```"
696, this function to find number of even elements in the given list using lambda function.,"```javascript
function countEven(array_nums) {
  let count_even = array_nums.filter(x => x % 2 === 0).length;
  return count_even;
}
```",697,"```javascript
['console.assert(count_even([1, 2, 3, 5, 7, 8, 9, 10]) === 3)', 'console.assert(count_even([10, 15, 14, 13, -18, 12, -20]) === 5)', 'console.assert(count_even([1, 2, 4, 8, 9]) === 3)']
```"
697, this function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"```javascript
function sortDictItem(testDict) {
    let res = {};
    Object.keys(testDict).sort((a, b) => testDict[a] * a - testDict[b] * b).forEach(key => {
        res[key] = testDict[key];
    });
    return res;
}
```",698,"```javascript
['console.assert(JSON.stringify(sortDictItem({ ' + 
  '\""[5, 6]\"": 3, ' + 
  '\""[2, 3]\"": 9, ' + 
  '\""[8, 4]\"": 10, ' + 
  '\""[6, 4]\"": 12 }) ) === JSON.stringify({ ' + 
  '\""[2, 3]\"": 9, ' + 
  '\""[6, 4]\"": 12, ' + 
  '\""[5, 6]\"": 3, ' + 
  '\""[8, 4]\"": 10 }))',
  
'console.assert(JSON.stringify(sortDictItem({ ' + 
  '\""[6, 7]\"": 4, ' + 
  '\""[3, 4]\"": 10, ' + 
  '\""[9, 5]\"": 11, ' + 
  '\""[7, 5]\"": 13 }) ) === JSON.stringify({ ' + 
  '\""[3, 4]\"": 10, ' + 
  '\""[7, 5]\"": 13, ' + 
  '\""[6, 7]\"": 4, ' + 
  '\""[9, 5]\"": 11 }))',

'console.assert(JSON.stringify(sortDictItem({ ' + 
  '\""[7, 8]\"": 5, ' + 
  '\""[4, 5]\"": 11, ' + 
  '\""[10, 6]\"": 12, ' + 
  '\""[8, 6]\"": 14 }) ) === JSON.stringify({ ' + 
  '\""[4, 5]\"": 11, ' + 
  '\""[8, 6]\"": 14, ' + 
  '\""[7, 8]\"": 5, ' + 
  '\""[10, 6]\"": 12 }))']
```"
698, this   function to find the minimum number of swaps required to convert one binary string to another.,"```javascript
function min_Swaps(str1, str2) { 
    let count = 0; 
    for (let i = 0; i < str1.length; i++) { 
        if (str1[i] !== str2[i]) { 
            count++; 
        } 
    } 
    if (count % 2 === 0) { 
        return Math.floor(count / 2); 
    } else { 
        return ""Not Possible""; 
    } 
}
```",699,"```javascript
['console.assert(min_Swaps(""1101"", ""1110"") === 1)', 'console.assert(min_Swaps(""1111"", ""0100"") === ""Not Possible"")', 'console.assert(min_Swaps(""1110000"", ""0001101"") === 3)']
```"
699, this function to count the number of elements in a list which are within a specific range.,"```javascript
function countRangeInList(li, min, max) {
    let ctr = 0;
    for (let x of li) {
        if (min <= x && x <= max) {
            ctr++;
        }
    }
    return ctr;
}
```",700,"```javascript
['console.assert(count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)===6)', ""console.assert(count_range_in_list(['a','b','c','d','e','f'],'a','e')===5)"", 'console.assert(count_range_in_list([7,8,9,15,17,19,45],15,20)===3)']
```"
700, this function to find the equilibrium index of the given array.,"```javascript
function equilibriumIndex(arr) {
  let totalSum = arr.reduce((a, b) => a + b, 0);
  let leftSum = 0;
  
  for (let i = 0; i < arr.length; i++) {
    totalSum -= arr[i];
    if (leftSum === totalSum) {
      return i;
    }
    leftSum += arr[i];
  }
  return -1;
}
```",701,"```javascript
console.assert(equilibrium_index([1, 2, 3, 4, 1, 2, 3]) === 3);
console.assert(equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) === 3);
console.assert(equilibrium_index([1, 2, 3]) === -1);
```"
701, this function to find the minimum number of elements that should be removed such that amax-amin<=k.,"```javascript
function findInd(key, i, n, k, arr) {
    let ind = -1;
    let start = i + 1;
    let end = n - 1;
    while (start < end) {
        let mid = Math.floor(start + (end - start) / 2);
        if (arr[mid] - key <= k) {
            ind = mid;
            start = mid + 1;
        } else {
            end = mid;
        }
    }
    return ind;
}

function removals(arr, n, k) {
    let ans = n - 1;
    arr.sort((a, b) => a - b);
    for (let i = 0; i < n; i++) {
        let j = findInd(arr[i], i, n, k, arr);
        if (j !== -1) {
            ans = Math.min(ans, n - (j - i + 1));
        }
    }
    return ans;
}
```",702,"```javascript
['console.assert(removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4) === 5)', 'console.assert(removals([1, 5, 6, 2, 8], 5, 2) === 3)', 'console.assert(removals([1, 2, 3, 4, 5, 6], 6, 3) === 2)']
```"
702, this function to check whether the given key is present in the dictionary or not.,"```javascript
function isKeyPresent(d, x) {
  if (x in d) {
    return true;
  } else {
    return false;
  }
}
```",703,"```javascript
['console.assert(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5) === true)', 'console.assert(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6) === true)', 'console.assert(is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10) === false)']
```"
703, this function to calculate the harmonic sum of n-1.,"```javascript
function harmonicSum(n) {
  if (n < 2) {
    return 1;
  } else {
    return 1 / n + harmonicSum(n - 1);
  }
}
```",704,"```javascript
['console.assert(harmonic_sum(10) === 2.9289682539682538)', 'console.assert(harmonic_sum(4) === 2.083333333333333)', 'console.assert(harmonic_sum(7) === 2.5928571428571425 ']
```"
704, this function to sort a list of lists by length and value.,"```javascript
function sortSublists(list1) {
    list1.sort();
    list1.sort((a, b) => a.length - b.length);
    return [list1];
}
```",705,"```javascript
['console.assert(sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]) === [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]);', 'console.assert(sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]]) === [[1], [7], [2, 3], [10, 11], [4, 5, 6]]);', 'console.assert(sort_sublists([["" ""],[""java"",""C"",""C++""],[""DBMS""],[""SQL"",""HTML""]]) === [[\'DBMS\'], [\' \'], [\'SQL\', \'HTML\'], [\'java\', \'C\', \'C++\']]);']
```"
705, this function to find whether an array is subset of another array.,"```javascript
function isSubset(arr1, m, arr2, n) {
    const hashSet = new Set();
    for (let i = 0; i < m; i++) {
        hashSet.add(arr1[i]);
    }
    for (let i = 0; i < n; i++) {
        if (hashSet.has(arr2[i])) {
            continue;
        } else {
            return false;
        }
    }
    return true;
}
```",706,"```javascript
['console.assert(is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) === true)', 'console.assert(is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) === true)', 'console.assert(is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) === false']
```"
706, this   function to count the total set bits from 1 to n.,"```javascript
function countSetBits(n) {  
    n += 1; 
    let powerOf2 = 2;   
    let cnt = Math.floor(n / 2);  
    while (powerOf2 <= n) { 
        let totalPairs = Math.floor(n / powerOf2);  
        cnt += Math.floor(totalPairs / 2) * powerOf2;  
        if (totalPairs & 1) { 
            cnt += (n % powerOf2); 
        } else { 
            cnt += 0; 
        }
        powerOf2 <<= 1;    
    } 
    return cnt;  
}
```",707,"```javascript
['console.assert(count_Set_Bits(16) === 33)', 'console.assert(count_Set_Bits(2) === 2)', 'console.assert(count_Set_Bits(14) === 28)']
```"
707, this   function to convert a string to a list.,"```javascript
function Convert(string) { 
    let li = string.split("" ""); 
    return li; 
}
```",708,"```javascript
[""console.assert(Convert('  program').toString() === [' ','program'].toString())"", ""console.assert(Convert('Data Analysis').toString() === ['Data','Analysis'].toString())"", ""console.assert(Convert('Hadoop Training').toString() === ['Hadoop','Training'].toString())""]
```"
708, this function to count unique keys for each value present in the tuple.,"```javascript
function getUnique(testList) {
    let res = {};
    for (let sub of testList) {
        if (!res[sub[1]]) {
            res[sub[1]] = [];
        }
        res[sub[1]].push(sub[0]);
    }
    let resDict = {};
    for (let key in res) {
        resDict[key] = new Set(res[key]).size;
    }
    return JSON.stringify(resDict);
}
```",709,"```javascript
console.assert(get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)]) === '{4: 4, 2: 3, 1: 2}');
console.assert(get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)]) === '{5: 4, 3: 3, 2: 2}');
console.assert(get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)]) === '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}');
```"
709, this function to access the initial and last data of the given tuple record.,"```javascript
function front_and_rear(test_tup) {
  let res = [test_tup[0], test_tup[test_tup.length - 1]];
  return [res];
}
```",710,"```javascript
['console.assert(front_and_rear([10, 4, 5, 6, 7]).toString() === [10, 7].toString())', 'console.assert(front_and_rear([1, 2, 3, 4, 5]).toString() === [1, 5].toString())', 'console.assert(front_and_rear([6, 7, 8, 9, 10]).toString() === [6, 10].toString())']
```"
710, this   function to check whether the product of digits of a number at even and odd places is equal or not.,"```javascript
function productEqual(n) {
    if (n < 10) {
        return false;
    }
    let prodOdd = 1, prodEven = 1;
    while (n > 0) {
        let digit = n % 10;
        prodOdd *= digit;
        n = Math.floor(n / 10);
        if (n == 0) {
            break;
        }
        digit = n % 10;
        prodEven *= digit;
        n = Math.floor(n / 10);
    }
    return prodOdd === prodEven;
}
```",711,"```javascript
console.assert(product_Equal(2841) === true);
console.assert(product_Equal(1234) === false);
console.assert(product_Equal(1212) === false);
```"
711, this function to remove duplicates from a list of lists.,"```javascript
function removeDuplicate(list1) {
    list1.sort();
    const remove_duplicate = Array.from(new Set(list1));
    return remove_duplicate;
}
```",712,"```javascript
['console.assert(remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) === [[10, 20], [30, 56, 25], [33], [40]]);', 
 'console.assert(remove_duplicate([""a"", ""b"", ""a"", ""c"", ""c""]) === [""a"", ""b"", ""c""]);', 
 'console.assert(remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1]) === [1, 3, 5, 6]);']
```"
712, this function to check if the given tuple contains all valid values or not.,"```javascript
function checkValid(testTup) {
    let res = !testTup.some(ele => !ele);
    return res;
}
```",713,"```javascript
['console.assert(check_valid(true, true, true, true) === true)', 'console.assert(check_valid(true, false, true, true) === false)', 'console.assert(check_valid(true, true, true, true) === true)'];
```"
713, this   function to count the number of distinct power of prime factor of given number.,"```javascript
function count_Fac(n) {  
    let m = n; 
    let count = 0; 
    let i = 2; 
    while ((i * i) <= m) { 
        let total = 0; 
        while (n % i === 0) { 
            n /= i; 
            total += 1; 
        } 
        let temp = 0; 
        let j = 1; 
        while ((temp + j) <= total) { 
            temp += j; 
            count += 1; 
            j += 1; 
        } 
        i += 1; 
    } 
    if (n !== 1) { 
        count += 1; 
    } 
    return [count]; 
}
```",714,"```javascript
['console.assert(count_Fac(24) === 3)', 'console.assert(count_Fac(12) === 2)', 'console.assert(count_Fac(4) === 1)']
```"
714, this function to convert the given string of integers into a tuple.,"```javascript
function str_to_tuple(test_str) {
  const res = tuple(test_str.split(', ').map(Number));
  return res;
}
```",715,"```javascript
['console.assert(JSON.stringify(strToTuple(""1, -5, 4, 6, 7"")) === JSON.stringify([1, -5, 4, 6, 7]))', 'console.assert(JSON.stringify(strToTuple(""1, 2, 3, 4, 5"")) === JSON.stringify([1, 2, 3, 4, 5]))', 'console.assert(JSON.stringify(strToTuple(""4, 6, 9, 11, 13, 14"")) === JSON.stringify([4, 6, 9, 11, 13, 14]))']
```"
715, this function to find the perimeter of a rombus.,"```javascript
function rombus_perimeter(a) {
  const perimeter = 4 * a;
  return perimeter;
}
```",716,"```javascript
['console.assert(rumbus_perimeter(10) === 40)', 'console.assert(rumbus_perimeter(5) === 20)', 'console.assert(rumbus_perimeter(4) === 16)'];
```"
716, this function to calculate the standard deviation.,"```javascript
function sdCalc(data) {
    const n = data.length;
    if (n <= 1) {
        return 0.0;
    }
    const mean = avgCalc(data);
    let sd = 0.0;
    for (const el of data) {
        sd += (parseFloat(el) - mean) ** 2;
    }
    sd = Math.sqrt(sd / (n - 1));
    return sd;
}

function avgCalc(ls) {
    const n = ls.length;
    let mean = 0.0;
    if (n <= 1) {
        return parseFloat(ls[0]);
    }
    for (const el of ls) {
        mean += parseFloat(el);
    }
    mean /= n;
    return mean;
}
```",717,"```javascript
console.assert(sd_calc([4, 2, 5, 8, 6]) === 2.23606797749979);
console.assert(sd_calc([1, 2, 3, 4, 5, 6, 7]) === 2.160246899469287);
console.assert(sd_calc([5, 9, 10, 15, 6, 4]) === 4.070217029430577);
```"
717, this function to create a list taking alternate elements from another given list.,"```javascript
function alternateElements(list1) {
    let result = [];
    for (let item of list1.filter((_, index) => index % 2 === 0)) {
        result.push(item);
    }
    return result;
}
```",718,"```javascript
['console.assert(alternateElements([""red"", ""black"", ""white"", ""green"", ""orange""]) === [""red"", ""white"", ""orange""]);', 'console.assert(alternateElements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2]) === [2, 3, 0, 8, 4]);', 'console.assert(alternateElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === [1, 3, 5, 7, 9]);']
```"
718, this function that matches a string that has an a followed by zero or more b's.,"```javascript
function textMatch(text) {
    const patterns = /ab*?/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",719,"```javascript
['console.assert(text_match(""ac"") === ""Found a match!"")', 'console.assert(text_match(""dc"") === ""Not matched!"")', 'console.assert(text_match(""abba"") === ""Found a match!"")']
```"
719, this function to add a dictionary to the tuple.,"```javascript
function addDictToTuple(testTup, testDict) {
    testTup = Array.from(testTup);
    testTup.push(testDict);
    testTup = Tuple.from(testTup);
    return testTup;
}
```",720,"```javascript
['console.assert(JSON.stringify(addDictToTuple([4, 5, 6], {""MSAM"" : 1, ""is"" : 2, ""best"" : 3})) === JSON.stringify([4, 5, 6, {""MSAM"": 1, ""is"": 2, ""best"": 3}])', 
 'console.assert(JSON.stringify(addDictToTuple([1, 2, 3], {""UTS"" : 2, ""is"" : 3, ""Worst"" : 4})) === JSON.stringify([1, 2, 3, {""UTS"": 2, ""is"": 3, ""Worst"": 4}])', 
 'console.assert(JSON.stringify(addDictToTuple([8, 9, 10], {""POS"" : 3, ""is"" : 4, ""Okay"" : 5})) === JSON.stringify([8, 9, 10, {""POS"": 3, ""is"": 4, ""Okay"": 5}])']
```"
720, this function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"```javascript
const M = 100;

function maxAverageOfPath(cost, N) { 
    const dp = Array.from({ length: N + 1 }, () => Array(N + 1).fill(0)); 
    dp[0][0] = cost[0][0]; 
    for (let i = 1; i < N; i++) { 
        dp[i][0] = dp[i - 1][0] + cost[i][0]; 
    }
    for (let j = 1; j < N; j++) { 
        dp[0][j] = dp[0][j - 1] + cost[0][j]; 
    }
    for (let i = 1; i < N; i++) { 
        for (let j = 1; j < N; j++) { 
            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]; 
        } 
    }
    return dp[N - 1][N - 1] / (2 * N - 1); 
}
```",721,"```javascript
['console.assert(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) === 5.2)', 'console.assert(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) === 6.2)', 'console.assert(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) === 7.2)'];
```"
721, this function to filter the height and width of students which are stored in a dictionary.,"```javascript
function filterData(students, h, w) {
    const result = {};
    for (const [k, s] of Object.entries(students)) {
        if (s[0] >= h && s[1] >= w) {
            result[k] = s;
        }
    }
    return result;
}
```",722,"```javascript
[""assert filter_data({'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}, 6.0, 70) === {'Cierra Vega': [6.2, 70]}"", ""assert filter_data({'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}, 5.9, 67) === {'Cierra Vega': [6.2, 70],'Kierra Gentry': [6.0, 68]}"", ""assert filter_data({'Cierra Vega': [6.2, 70], 'Alden Cantrell': [5.9, 65], 'Kierra Gentry': [6.0, 68], 'Pierre Cox': [5.8, 66]}, 5.7, 64) === {'Cierra Vega': [6.2, 70],'Alden Cantrell': [5.9, 65],'Kierra Gentry': [6.0, 68],'Pierre Cox': [5.8, 66]}""];
```"
722, this function to count the same pair in two given lists using map function.,"```javascript
function countSamePair(nums1, nums2) {
    let result = nums1.reduce((acc, val, index) => acc + (val === nums2[index] ? 1 : 0), 0);
    return result;
}
```",723,"```javascript
['console.assert(count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) === 4)', 'console.assert(count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 11)', 'console.assert(count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 1)']
```"
723, this function to calculate the sum of all digits of the base to the specified power.,"```javascript
function powerBaseSum(base, power) {
    return Array.from(String(Math.pow(base, power)), Number).reduce((a, b) => a + b, 0);
}
```",724,"```javascript
['console.assert(power_base_sum(2, 100) === 115)', 'console.assert(power_base_sum(8, 10) === 37)', 'console.assert(power_base_sum(8, 15) === 62)']
```"
724, this function to extract values between quotation marks of the given string by using regex.,"```javascript
function extractQuotation(text1) {
  return text1.match(/""(.*?)""/g).map(match => match.slice(1, -1));
}
```",725,"```javascript
['console.assert(extractQuotation(""Cortex \""A53\"" Based \""multi\"" tasking \""Processor\"""") === [\'A53\', \'multi\', \'Processor\']);', 'console.assert(extractQuotation(""Cast your \""favorite\"" entertainment \""apps\"""") === [\'favorite\', \'apps\']);', 'console.assert(extractQuotation(""Watch content \""4k Ultra HD\"" resolution with \""HDR 10\"" Support"") === [\'4k Ultra HD\', \'HDR 10\']);']
```"
725, this function to multiply the adjacent elements of the given tuple.,"```javascript
function multiplyElements(testTup) {
    const res = testTup.slice(0, -1).map((num, index) => num * testTup[index + 1]);
    return res;
}
```",726,"```javascript
['console.assert(multiply_elements([1, 5, 7, 8, 10]).toString() === [5, 35, 56, 80].toString())', 'console.assert(multiply_elements([2, 4, 5, 6, 7]).toString() === [8, 20, 30, 42].toString())', 'console.assert(multiply_elements([12, 13, 14, 9, 15]).toString() === [156, 182, 126, 135].toString())']
```"
726, this function to remove all characters except letters and numbers using regex,"```javascript
function removeChar(S) {
  const result = S.replace(/[\W_]+/g, '');
  return result;
}
```",727,"```javascript
['console.assert(remove_char(""123abcjw:, .@! eiw"") === ""123abcjweiw"")', 'console.assert(remove_char(""Hello1234:, ! Howare33u"") === ""Hello1234Howare33u"")', 'console.assert(remove_char(""Cool543Triks@:, Make@987Trips"") === ""Cool543TriksMake987Trips"")']
```"
727, this function to sum elements in two lists.,"```javascript
function sumList(lst1, lst2) {
    let resList = lst1.map((val, i) => val + lst2[i]);
    return resList;
}
```",728,"```javascript
console.assert(JSON.stringify(sum_list([10,20,30],[15,25,35])) === JSON.stringify([25,45,65]));
console.assert(JSON.stringify(sum_list([1,2,3],[5,6,7])) === JSON.stringify([6,8,10]));
console.assert(JSON.stringify(sum_list([15,20,30],[15,45,75])) === JSON.stringify([30,65,105]));
```"
728, this function to add two lists using map and lambda function.,"```javascript
function addList(nums1, nums2) {
  const result = nums1.map((x, index) => x + nums2[index]);
  return result;
}
```",729,"```javascript
['console.assert(JSON.stringify(add_list([1, 2, 3],[4,5,6])) === JSON.stringify([5, 7, 9])', 
 'console.assert(JSON.stringify(add_list([1,2],[3,4])) === JSON.stringify([4,6])', 
 'console.assert(JSON.stringify(add_list([10,20],[50,70])) === JSON.stringify([60,90])']
```"
729, this function to remove consecutive duplicates of a given list.,"```javascript
function consecutiveDuplicates(nums) {
    return nums.filter((value, index, self) => value !== self[index - 1]);
}
```",730,"```javascript
['console.assert(JSON.stringify(consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])) === JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])', 'console.assert(JSON.stringify(consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])) === JSON.stringify([10, 15, 19, 18, 17, 26, 17, 18, 10])', ""console.assert(JSON.stringify(consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])) === JSON.stringify(['a', 'b', 'c', 'd'])""]
```"
730, this function to find the lateral surface area of a cone.,"```javascript
function lateralsurface_cone(r, h) {
  const l = Math.sqrt(r * r + h * h);
  const LSA = Math.PI * r * l;
  return LSA;
}
```",731,"```javascript
['console.assert(lateralsurface_cone(5, 12) === 204.20352248333654)', 'console.assert(lateralsurface_cone(10, 15) === 566.3586699569488)', 'console.assert(lateralsurface_cone(19, 17) === 1521.8090132193388)']
```"
731," this function to replace all occurrences of spaces, commas, or dots with a colon.","```javascript
function replace_specialchar(text) {
  return text.replace(/[ ,.]/g, ':');
}
```",732,"```javascript
[""console.assert(replace_specialchar('  language, Programming language.') === ' :language::Programming:language:')"", ""console.assert(replace_specialchar('a b c,d e f') === 'a:b:c:d:e:f')"", ""console.assert(replace_specialchar('ram reshma,ram rahim') === 'ram:reshma:ram:rahim')""]
```"
732, this function to find the index of the first occurrence of a given number in a sorted array.,"```javascript
function findFirstOccurrence(A, x) {
    let left = 0;
    let right = A.length - 1;
    let result = -1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (x === A[mid]) {
            result = mid;
            right = mid - 1;
        } else if (x < A[mid]) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}
```",733,"```javascript
['console.assert(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 1)', 'console.assert(find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 2)', 'console.assert(find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) === 4)']
```"
733, this   function to find sum of products of all possible subarrays.,"```javascript
function sumOfSubarrayProd(arr, n) {
    let ans = 0;
    let res = 0;
    let i = n - 1;
    while (i >= 0) {
        let incr = arr[i] * (1 + res);
        ans += incr;
        res = incr;
        i--;
    }
    return ans;
}
```",734,"```javascript
['console.assert(sum_Of_Subarray_Prod([1,2,3],3) === 20)', 'console.assert(sum_Of_Subarray_Prod([1,2],2) === 5)', 'console.assert(sum_Of_Subarray_Prod([1,2,3,4],4) === 84)']
```"
734, this   function to toggle bits of the number except the first and the last bit.,"```javascript
function setMiddleBits(n) {  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1;
}

function toggleMiddleBits(n) { 
    if (n === 1) { 
        return 1;
    } 
    return n ^ setMiddleBits(n);
}
```",735,"```javascript
console.assert(toggle_middle_bits(9) === 15);
console.assert(toggle_middle_bits(10) === 12);
console.assert(toggle_middle_bits(11) === 13);
```"
735, this function to locate the left insertion point for a specified value in sorted order.,"```javascript
function leftInsertion(a, x) {
    let i = bisectLeft(a, x);
    return [i];

    function bisectLeft(arr, val) {
        let low = 0;
        let high = arr.length;

        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (arr[mid] < val) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
```",736,"```javascript
['console.assert(left_insertion([1,2,4,5],6)===4)', 'console.assert(left_insertion([1,2,4,5],3)===2)', 'console.assert(left_insertion([1,2,4,5],7)===4)']
```"
736, this function to check whether the given string is starting with a vowel or not using regex.,"```javascript
const regex = /^[aeiouAEIOU][A-Za-z0-9_]*$/;

function checkStr(string) {
    if (regex.test(string)) {
        return ""Valid"";
    } else {
        return ""Invalid"";
    }
}
```",737,"```javascript
['console.assert(check_str(""annie"") === ""Valid"")', 'console.assert(check_str(""dawood"") === ""Invalid"")', 'console.assert(check_str(""Else"") === ""Valid"")']
```"
737, this function to calculate the geometric sum of n-1.,"```javascript
function geometricSum(n) {
  if (n < 0) {
    return 0;
  } else {
    return 1 / Math.pow(2, n) + geometricSum(n - 1);
  }
}
```",738,"```javascript
['console.assert(geometric_sum(7) === 1.9921875)', 'console.assert(geometric_sum(4) === 1.9375)', 'console.assert(geometric_sum(8) === 1.99609375)'];
```"
738, this   function to find the index of smallest triangular number with n digits.,"```javascript
function findIndex(n) {
    const x = Math.sqrt(2 * Math.pow(10, (n - 1)));
    return Math.round(x);
}
```",739,"```javascript
['console.assert(find_Index(2) === 4)', 'console.assert(find_Index(3) === 14)', 'console.assert(find_Index(4) === 45)']
```"
739, this function to convert the given tuple to a key-value dictionary using adjacent elements.,"```javascript
function tupleToDict(testTup) {
    let res = {};
    for (let idx = 0; idx < testTup.length; idx += 2) {
        res[testTup[idx]] = testTup[idx + 1];
    }
    return res;
}
```",740,"```javascript
['console.assert(tupleToDict([1, 5, 7, 10, 13, 5]).toString() === {1: 5, 7: 10, 13: 5}.toString())', 'console.assert(tupleToDict([1, 2, 3, 4, 5, 6]).toString() === {1: 2, 3: 4, 5: 6}.toString())', 'console.assert(tupleToDict([7, 8, 9, 10, 11, 12]).toString() === {7: 8, 9: 10, 11: 12}.toString())']
```"
740, this   function to check whether all the characters are same or not.,"```javascript
function allCharactersSame(s) {
    const n = s.length;
    for (let i = 1; i < n; i++) {
        if (s[i] !== s[0]) {
            return false;
        }
    }
    return true;
}
```",741,"```javascript
['console.assert(all_Characters_Same("" "") === false)', 'console.assert(all_Characters_Same(""aaa"") === true)', 'console.assert(all_Characters_Same(""data"") === false)']
```"
741, this function to caluclate the area of a tetrahedron.,"```javascript
function areaTetrahedron(side) {
  const area = Math.sqrt(3) * (side * side);
  return area;
}
```",742,"```javascript
console.assert(area_tetrahedron(3) === 15.588457268119894);
console.assert(area_tetrahedron(20) === 692.8203230275509);
console.assert(area_tetrahedron(10) === 173.20508075688772);
```"
742, this function to rotate a given list by specified number of items to the right direction.,"```javascript
function rotateRight(list1, m, n) {
  const result = list1.slice(-m).concat(list1.slice(0, -n));
  return result;
}
```",743,"```javascript
['console.assert(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4).toString() === [8, 9, 10, 1, 2, 3, 4, 5, 6].toString())', 'console.assert(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2).toString() === [9, 10, 1, 2, 3, 4, 5, 6, 7, 8].toString())', 'console.assert(rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2).toString() === [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8].toString())']
```"
743, this function to check if the given tuple has any none value or not.,"```javascript
function check_none(test_tup) {
    const res = test_tup.some(ele => ele === null);
    return res;
}
```",744,"```javascript
console.assert(check_none([10, 4, 5, 6, null]) === true);
console.assert(check_none([7, 8, 9, 11, 14]) === false);
console.assert(check_none([1, 2, 3, 4, null]) === true);
```"
744, this function to find numbers within a given range where every number is divisible by every digit it contains.,"```javascript
function divisibleByDigits(startnum, endnum) {
    let result = [];
    for (let n = startnum; n <= endnum; n++) {
        let digits = String(n).split('');
        if (!digits.some(x => parseInt(x) === 0 || n % parseInt(x) !== 0)) {
            result.push(n);
        }
    }
    return result;
}
```",745,"```javascript
['console.assert(divisible_by_digits(1,22).toString() === [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22].toString())', 'console.assert(divisible_by_digits(1,15).toString() === [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15].toString())', 'console.assert(divisible_by_digits(20,25).toString() === [22, 24].toString())']
```"
745, this function to find area of a sector.,"```javascript
function sectorArea(r, a) {
    const pi = 22 / 7;
    if (a >= 360) {
        return null;
    }
    const sectorArea = (pi * r ** 2) * (a / 360);
    return sectorArea;
}
```",746,"```javascript
['console.assert(sector_area(4, 45) === 6.285714285714286)', 'console.assert(sector_area(9, 45) === 31.82142857142857)', 'console.assert(sector_area(9, 360) === null)']
```"
746, this function to find the longest common subsequence for the given three string sequence.,"```javascript
function lcs_of_three(X, Y, Z, m, n, o) {
    let L = Array.from({ length: m + 1 }, () => 
        Array.from({ length: n + 1 }, () => 
            Array(o + 1).fill(0)
        )
    );

    for (let i = 0; i <= m; i++) {
        for (let j = 0; j <= n; j++) {
            for (let k = 0; k <= o; k++) {
                if (i === 0 || j === 0 || k === 0) {
                    L[i][j][k] = 0;
                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {
                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;
                } else {
                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);
                }
            }
        }
    }
    return L[m][n][o];
}
```",747,"```javascript
[""console.assert(lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) === 2)"", ""console.assert(lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) === 5)"", ""console.assert(lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) === 3)""]
```"
747, this function to put spaces between words starting with capital letters in a given string by using regex.,"```javascript
function capitalWordsSpaces(str1) {
  return str1.replace(/(\w)([A-Z])/g, '$1 $2');
}
```",748,"```javascript
['console.assert(capital_words_spaces("" "") === "" "")', 'console.assert(capital_words_spaces("" ProgrammingExamples"") === ""  Programming Examples"")', 'console.assert(capital_words_spaces(""GetReadyToBeCodingFreak"") === ""Get Ready To Be Coding Freak"")']
```"
748, this function to sort a given list of strings of numbers numerically.,"```javascript
function sort_numeric_strings(nums_str) {
    let result = nums_str.map(x => parseInt(x));
    result.sort((a, b) => a - b);
    return result;
}
```",749,"```javascript
console.assert(sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) === [-500, -12, 0, 4, 7, 12, 45, 100, 200]);
console.assert(sort_numeric_strings(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2']) === [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);
console.assert(sort_numeric_strings(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7', '9', '1', '11']) === [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);
```"
749, this function to add the given tuple to the given list.,"```javascript
function addTuple(testList, testTup) {
    testList.push(...testTup);
    return testList;
}
```",750,"```javascript
['console.assert(JSON.stringify(addTuple([5, 6, 7], [9, 10])) === JSON.stringify([5, 6, 7, 9, 10]))', 
 'console.assert(JSON.stringify(addTuple([6, 7, 8], [10, 11])) === JSON.stringify([6, 7, 8, 10, 11]))', 
 'console.assert(JSON.stringify(addTuple([7, 8, 9], [11, 12])) === JSON.stringify([7, 8, 9, 11, 12]))']
```"
750, this function to check if the given array represents min heap or not.,"```javascript
function checkMinHeap(arr, i) {
    if (2 * i + 2 > arr.length) {
        return true;
    }
    const leftChild = (arr[i] <= arr[2 * i + 1]) && checkMinHeap(arr, 2 * i + 1);
    const rightChild = (2 * i + 2 === arr.length) || (arr[i] <= arr[2 * i + 2] && checkMinHeap(arr, 2 * i + 2));
    return leftChild && rightChild;
}
```",751,"```javascript
['console.assert(check_min_heap([1, 2, 3, 4, 5, 6], 0) === true)', 'console.assert(check_min_heap([2, 3, 4, 5, 10, 15], 0) === true)', 'console.assert(check_min_heap([2, 10, 4, 5, 3, 15], 0) === false)']
```"
751, this function to find the nth jacobsthal number.,"```javascript
function jacobsthal_num(n) { 
    let dp = new Array(n + 1).fill(0); 
    dp[0] = 0; 
    dp[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
    } 
    return dp[n]; 
}
```",752,"```javascript
['console.assert(jacobsthal_num(5) === 11)', 'console.assert(jacobsthal_num(2) === 1)', 'console.assert(jacobsthal_num(4) === 5)']
```"
752, this function to find minimum k records from tuple list.,"```javascript
function min_k(test_list, K) {
    let res = test_list.sort((a, b) => a[1] - b[1]).slice(0, K);
    return res;
}
```",753,"```javascript
console.assert(JSON.stringify(min_k([['Manjeet', 10], ['Akshat', 4], ['Akash', 2], ['Nikhil', 8]], 2)) === JSON.stringify([['Akash', 2], ['Akshat', 4]]));
console.assert(JSON.stringify(min_k([['Sanjeev', 11], ['Angat', 5], ['Akash', 3], ['Nepin', 9]], 3)) === JSON.stringify([['Akash', 3], ['Angat', 5], ['Nepin', 9]]));
console.assert(JSON.stringify(min_k([['tanmay', 14], ['Amer', 11], ['Ayesha', 9], ['SKD', 16]], 1)) === JSON.stringify([['Ayesha', 9]]));
```"
753, this function to find common index elements from three lists.,"```javascript
function extractIndexList(l1, l2, l3) {
    let result = [];
    for (let [m, n, o] of zip(l1, l2, l3)) {
        if (m === n && n === o) {
            result.push(m);
        }
    }
    return result;
}

function zip(...arrays) {
    let length = Math.min(...arrays.map(arr => arr.length));
    let result = [];
    for (let i = 0; i < length; i++) {
        result.push(arrays.map(arr => arr[i]));
    }
    return result;
}
```",754,"```javascript
['console.assert(JSON.stringify(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) === JSON.stringify([1, 7])', 'console.assert(JSON.stringify(extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])) === JSON.stringify([1, 6])', 'console.assert(JSON.stringify(extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) === JSON.stringify([1, 5])']
```"
754, this function to find the second smallest number in a list.,"```javascript
function secondSmallest(numbers) {
  if (numbers.length < 2) {
    return;
  }
  if (numbers.length === 2 && numbers[0] === numbers[1]) {
    return;
  }
  const dupItems = new Set();
  const uniqItems = [];
  for (let x of numbers) {
    if (!dupItems.has(x)) {
      uniqItems.push(x);
      dupItems.add(x);
    }
  }
  uniqItems.sort((a, b) => a - b);
  return uniqItems[1];
}
```",755,"```javascript
console.assert(second_smallest([1, 2, -8, -2, 0, -2]) === -2);
console.assert(second_smallest([1, 1, -0.5, 0, 2, -2, -2]) === -0.5);
console.assert(second_smallest([2, 2]) === null);
```"
755, this function that matches a string that has an a followed by zero or one 'b'.,"```javascript
function textMatchZeroOne(text) {
    const patterns = /ab?/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",756,"```javascript
['console.assert(text_match_zero_one(""ac"") === ""Found a match!"");', 'console.assert(text_match_zero_one(""dc"") === ""Not matched!"");', 'console.assert(text_match_zero_one(""abbbba"") === ""Found a match!"");']
```"
756, this function to count the pairs of reverse strings in the given string list.,"```javascript
function countReversePairs(testList) {
    let res = testList.reduce((acc, val, idx) => {
        return acc + testList.slice(idx).filter(idxn => idxn === [...val].reverse().join('')).length;
    }, 0);
    return String(res);
}
```",757,"```javascript
['assert count_reverse_pairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""]) === 2', 'assert count_reverse_pairs([""geeks"", ""best"", ""for"", ""skeeg""]) === 1', 'assert count_reverse_pairs([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) === 2']
```"
757, this function to count number of unique lists within a list.,"```javascript
function uniqueSublists(list1) {
    const result = {};
    for (const l of list1) {
        const key = JSON.stringify(l);
        if (!result[key]) {
            result[key] = [];
        }
        result[key].push(1);
    }
    for (const key in result) {
        result[key] = result[key].reduce((a, b) => a + b, 0);
    }
    return result;
}
```",758,"```javascript
['console.assert(unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) === {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1});', 'console.assert(unique_sublists([[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]) === {(""green"", ""orange""): 2, (""black""): 1, (""white""): 1});', 'console.assert(unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]) === {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1});']
```"
758, this function to check a decimal with a precision of 2.,"```javascript
function isDecimal(num) {
    const dnumre = /^[0-9]+(\.[0-9]{1,2})?$/;
    const result = dnumre.test(num);
    return result;
}
```",759,"```javascript
console.assert(is_decimal('123.11') === true);
console.assert(is_decimal('e666.86') === false);
console.assert(is_decimal('3.124587') === false);
```"
759, this   function to check whether an array contains only one distinct element or not.,"```javascript
function uniqueElement(arr, n) {
    const s = new Set(arr);
    if (s.size === 1) {
        return 'YES';
    } else {
        return 'NO';
    }
}
```",760,"```javascript
[""console.assert(unique_Element([1, 1, 1], 3) === 'YES')"", ""console.assert(unique_Element([1, 2, 1, 2], 4) === 'NO')"", ""console.assert(unique_Element([1, 2, 3, 4, 5], 5) === 'NO')""]
```"
760, this function to caluclate arc length of an angle.,"```javascript
function arcLength(d, a) {
    const pi = 22 / 7;
    if (a >= 360) {
        return null;
    }
    const arclength = (pi * d) * (a / 360);
    return arclength;
}
```",761,"```javascript
['console.assert(arc_length(9, 45) === 3.5357142857142856)', 'console.assert(arc_length(9, 480) === null)', 'console.assert(arc_length(5, 270) === 11.785714285714285)'];
```"
761, this function to check whether the given month number contains 30 days or not.,"```javascript
function check_monthnumber_number(monthnum3) {
  if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {
    return true;
  } else {
    return false;
  }
}
```",762,"```javascript
['console.assert(check_monthnumber_number(6) === true)', 'console.assert(check_monthnumber_number(2) === false)', 'console.assert(check_monthnumber_number(12) === false)'];
```"
762, this   function to find the minimum difference between any two elements in a given array.,"```javascript
function find_Min_Diff(arr, n) { 
    arr.sort((a, b) => a - b); 
    let diff = 10 ** 20; 
    for (let i = 0; i < n - 1; i++) { 
        if (arr[i + 1] - arr[i] < diff) { 
            diff = arr[i + 1] - arr[i]; 
        } 
    } 
    return diff; 
}
```",763,"```javascript
['console.assert(find_Min_Diff([1,5,3,19,18,25], 6) === 1)', 'console.assert(find_Min_Diff([4,3,2,6], 4) === 1)', 'console.assert(find_Min_Diff([30,5,20,9], 4) === 4)']
```"
763, this   function to count numeric values in a given string.,"```javascript
function number_ctr(str) {
    let number_ctr = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= '0' && str[i] <= '9') number_ctr++;
    }
    return number_ctr;
}
```",764,"```javascript
[""console.assert(number_ctr('program2bedone') === 1)"", ""console.assert(number_ctr('3wonders') === 1)"", ""console.assert(number_ctr('123') === 3)""]
```"
764, this function to find nth polite number.,"```javascript
function isPolite(n) {
    n = n + 1;
    return Math.floor(n + (Math.log(n + Math.log(n) / Math.log(2)) / Math.log(2)));
}
```",765,"```javascript
['console.assert(is_polite(7) === 11)', 'console.assert(is_polite(4) === 7)', 'console.assert(is_polite(9) === 13)']
```"
765, this function to iterate over all pairs of consecutive items in a given list.,"```javascript
function pairWise(l1) {
    let temp = [];
    for (let i = 0; i < l1.length - 1; i++) {
        let currentElement = l1[i];
        let nextElement = l1[i + 1];
        let x = [currentElement, nextElement];
        temp.push(x);
    }
    return temp;
}
```",766,"```javascript
console.assert(JSON.stringify(pair_wise([1, 1, 2, 3, 3, 4, 4, 5])) === JSON.stringify([[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]));
console.assert(JSON.stringify(pair_wise([1, 5, 7, 9, 10])) === JSON.stringify([[1, 5], [5, 7], [7, 9], [9, 10]]));
console.assert(JSON.stringify(pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]));
```"
766, this   function to count the number of pairs whose sum is equal to ‘sum’.,"```javascript
function getPairsCount(arr, n, sum) {
    let count = 0;  
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] === sum) {
                count++;
            }
        }
    }
    return count;
}
```",767,"```javascript
['console.assert(get_Pairs_Count([1,1,1,1],4,2) === 6)', 'console.assert(get_Pairs_Count([1,5,7,-1,5],5,6) === 3)', 'console.assert(get_Pairs_Count([1,-2,3],3,1) === 1)']
```"
767, this   function to check for odd parity of a given number.,"```javascript
function checkOddParity(x) { 
    let parity = 0; 
    while (x !== 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    return parity % 2 === 1; 
}
```",768,"```javascript
['console.assert(check_Odd_Parity(13) === true)', 'console.assert(check_Odd_Parity(21) === true)', 'console.assert(check_Odd_Parity(18) === false)']
```"
768, this   function to get the difference between two lists.,"```javascript
function Diff(li1, li2) {
    return Array.from(new Set([...li1].filter(x => !li2.includes(x)).concat([...li2].filter(x => !li1.includes(x)))));
}
```",769,"```javascript
['console.assert(JSON.stringify(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) === JSON.stringify([10, 20, 30, 15]))', 'console.assert(JSON.stringify(Diff([1,2,3,4,5], [6,7,1])) === JSON.stringify([2,3,4,5,6,7]))', 'console.assert(JSON.stringify(Diff([1,2,3], [6,7,1])) === JSON.stringify([2,3,6,7]))']
```"
769, this   function to find the sum of fourth power of first n odd natural numbers.,"```javascript
function oddNumSum(n) {
    let j = 0;
    let sm = 0;
    for (let i = 1; i <= n; i++) {
        j = (2 * i - 1);
        sm += (j * j * j * j);
    }
    return sm;
}
```",770,"```javascript
['console.assert(odd_Num_Sum(2) === 82)', 'console.assert(odd_Num_Sum(3) === 707)', 'console.assert(odd_Num_Sum(4) === 3108)']
```"
770, this function to check if the given expression is balanced or not.,"```javascript
function checkExpression(exp) {
    if (exp.length % 2 !== 0) {
        return false;
    }
    let stack = [];
    for (let ch of exp) {
        if (ch === '(' || ch === '{' || ch === '[') {
            stack.push(ch);
        }
        if (ch === ')' || ch === '}' || ch === ']') {
            if (stack.length === 0) {
                return false;
            }
            let top = stack.pop();
            if ((top === '(' && ch !== ')') || (top === '{' && ch !== '}') || (top === '[' && ch !== ']')) {
                return false;
            }
        }
    }
    return stack.length === 0;
}
```",771,"```javascript
console.assert(check_expression(""{()}[{}]"") === true);
console.assert(check_expression(""{()}[{]"") === false);
console.assert(check_expression(""{()}[{}][]({})"") === true);
```"
771, this function to remove all the words with k length in the given string.,"```javascript
function removeLength(testStr, K) {
    const temp = testStr.split(' ');
    const res = temp.filter(ele => ele.length !== K);
    return res.join(' ');
}
```",772,"```javascript
console.assert(remove_length('The person is most value tet', 3) === 'person is most value');
console.assert(remove_length('If you told me about this ok', 4) === 'If you me about ok');
console.assert(remove_length('Forces of darkeness is come into the play', 4) === 'Forces of darkeness is the');
```"
772, this function to find the occurrence and position of the substrings within a string.,"```javascript
function occuranceSubstring(text, pattern) {
    const regex = new RegExp(pattern, 'g');
    let match;
    while ((match = regex.exec(text)) !== null) {
        const s = match.index;
        const e = regex.lastIndex;
        return [text.slice(s, e), s, e];
    }
}
```",773,"```javascript
[""console.assert(occurance_substring('  programming,   language', ' ')[0] === ' ' && occurance_substring('  programming,   language', ' ')[1] === 0 && occurance_substring('  programming,   language', ' ')[2] === 6)"", ""console.assert(occurance_substring('  programming,programming language', 'programming')[0] === 'programming' && occurance_substring('  programming,programming language', 'programming')[1] === 7 && occurance_substring('  programming,programming language', 'programming')[2] === 18)"", ""console.assert(occurance_substring('  programming,programming language', 'language')[0] === 'language' && occurance_substring('  programming,programming language', 'language')[1] === 31 && occurance_substring('  programming,programming language', 'language')[2] === 39)""]
```"
773, this function to check if the string is a valid email address or not using regex.,"```javascript
const regex = /^[a-z0-9]+[._]?[a-z0-9]+[@]\w+[.]\w{2,3}$/;
function checkEmail(email) {
    if (regex.test(email)) {
        return ""Valid Email"";
    } else {
        return ""Invalid Email"";
    }
}
```",774,"```javascript
['console.assert(check_email(""ankitrai326@gmail.com"") === ""Valid Email"")', 'console.assert(check_email(""my.ownsite@ourearth.org"") === ""Valid Email"")', 'console.assert(check_email(""ankitaoie326.com"") === ""Invalid Email"")']
```"
774, this   function to check whether every odd index contains odd numbers of a given list.,"```javascript
function oddPosition(nums) {
    return nums.every((num, i) => num % 2 === i % 2);
}
```",775,"```javascript
['console.assert(odd_position([2,1,4,3,6,7,6,3]) === true)', 'console.assert(odd_position([4,1,2]) === true)', 'console.assert(odd_position([1,2,3]) === false)'];
```"
775, this function to count those characters which have vowels as their neighbors in the given string.,"```javascript
function countVowels(testStr) {
  let res = 0;
  const vowList = ['a', 'e', 'i', 'o', 'u'];
  for (let idx = 1; idx < testStr.length - 1; idx++) {
    if (!vowList.includes(testStr[idx]) && (vowList.includes(testStr[idx - 1]) || vowList.includes(testStr[idx + 1]))) {
      res++;
    }
  }
  if (!vowList.includes(testStr[0]) && vowList.includes(testStr[1])) {
    res++;
  }
  if (!vowList.includes(testStr[testStr.length - 1]) && vowList.includes(testStr[testStr.length - 2])) {
    res++;
  }
  return res;
}
```",776,"```javascript
console.assert(count_vowels('bestinstareels') === 7);
console.assert(count_vowels('partofthejourneyistheend') === 12);
console.assert(count_vowels('amazonprime') === 5);
```"
776, this   function to find the sum of non-repeated elements in a given array.,"```javascript
function findSum(arr, n) {
    arr.sort((a, b) => a - b);
    let sum = arr[0];
    for (let i = 0; i < n - 1; i++) {
        if (arr[i] !== arr[i + 1]) {
            sum += arr[i + 1];
        }
    }
    return sum;
}
```",777,"```javascript
['console.assert(find_Sum([1,2,3,1,1,4,5,6],8) === 21)', 'console.assert(find_Sum([1,10,9,4,2,10,10,45,4],9) === 71)', 'console.assert(find_Sum([12,10,9,45,2,10,10,45,10],9) === 78)']
```"
777, this function to pack consecutive duplicates of a given list elements into sublists.,"```javascript
function packConsecutiveDuplicates(list1) {
    return list1.reduce((acc, curr) => {
        if (acc.length === 0 || acc[acc.length - 1][0] !== curr) {
            acc.push([curr]);
        } else {
            acc[acc.length - 1].push(curr);
        }
        return acc;
    }, []);
}
```",778,"```javascript
console.assert(JSON.stringify(pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])) === JSON.stringify([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]));
console.assert(JSON.stringify(pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])) === JSON.stringify([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]));
console.assert(JSON.stringify(pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])) === JSON.stringify([['a', 'a'], ['b'], ['c'], ['d', 'd']]));
```"
778, this function to count the number of unique lists within a list.,"```javascript
function uniqueSublists(list1) {
    let result = {};
    for (let l of list1) {
        let key = JSON.stringify(l);
        if (!result[key]) {
            result[key] = [];
        }
        result[key].push(1);
    }
    for (let a in result) {
        result[a] = result[a].reduce((acc, val) => acc + val, 0);
    }
    return result;
}
```",779,"```javascript
['console.assert(uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) === {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1});', 
 'console.assert(uniqueSublists([[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]]) === {(""green"", ""orange""): 2, (""black""): 1, (""white""): 1});', 
 'console.assert(uniqueSublists([[1, 2], [3, 4], [4, 5], [6, 7]]) === {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1});']
```"
779, this function to find the combinations of sums with tuples in the given tuple list.,"```javascript
function findCombinations(testList) {
    let res = [];
    for (let i = 0; i < testList.length; i++) {
        for (let j = i + 1; j < testList.length; j++) {
            let a1 = testList[i][0], a2 = testList[i][1];
            let b1 = testList[j][0], b2 = testList[j][1];
            res.push([b1 + a1, b2 + a2]);
        }
    }
    return res;
}
```",780,"```javascript
['console.assert(find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) === [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)])', 'console.assert(find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) === [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)])', 'console.assert(find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) === [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)])']
```"
780, this   function to check whether the count of divisors is even or odd.,"```javascript
function countDivisors(n) { 
    let count = 0; 
    for (let i = 1; i <= Math.floor(Math.sqrt(n)) + 1; i++) { 
        if (n % i === 0) { 
            if (Math.floor(n / i) === i) { 
                count += 1; 
            } else { 
                count += 2; 
            } 
        } 
    } 
    return (count % 2 === 0) ? ""Even"" : ""Odd""; 
}
```",781,"```javascript
['console.assert(count_Divisors(10) === ""Even"")', 'console.assert(count_Divisors(100) === ""Odd"")', 'console.assert(count_Divisors(125) === ""Even"")']
```"
781, this   function to find the sum of all odd length subarrays.,"```javascript
function Odd_Length_Sum(arr) {
    let Sum = 0;
    const l = arr.length;
    for (let i = 0; i < l; i++) {
        Sum += ((((i + 1) * (l - i) + 1) / 2) * arr[i]));
    }
    return Sum;
}
```",782,"```javascript
['console.assert(Odd_Length_Sum([1,2,4]) === 14)', 'console.assert(Odd_Length_Sum([1,2,1,2]) === 15)', 'console.assert(Odd_Length_Sum([1,7]) === 8)']
```"
782, this function to convert rgb color to hsv color.,"```javascript
function rgbToHsv(r, g, b) {
    r /= 255.0;
    g /= 255.0;
    b /= 255.0;
    let mx = Math.max(r, g, b);
    let mn = Math.min(r, g, b);
    let df = mx - mn;
    let h, s, v;

    if (mx === mn) {
        h = 0;
    } else if (mx === r) {
        h = (60 * ((g - b) / df) + 360) % 360;
    } else if (mx === g) {
        h = (60 * ((b - r) / df) + 120) % 360;
    } else if (mx === b) {
        h = (60 * ((r - g) / df) + 240) % 360;
    }

    if (mx === 0) {
        s = 0;
    } else {
        s = (df / mx) * 100;
    }
    
    v = mx * 100;
    return [h, s, v];
}
```",783,"```javascript
console.assert(rgb_to_hsv(255, 255, 255).toString() === (0 + ', ' + 0.0 + ', ' + 100.0).toString());
console.assert(rgb_to_hsv(0, 215, 0).toString() === (120.0 + ', ' + 100.0 + ', ' + 84.31372549019608).toString());
console.assert(rgb_to_hsv(10, 215, 110).toString() === (149.26829268292684 + ', ' + 95.34883720930233 + ', ' + 84.31372549019608).toString());
```"
783, this function to find the product of first even and odd number of a given list.,"```javascript
function mul_even_odd(list1) {
    const first_even = list1.find(el => el % 2 === 0) || -1;
    const first_odd = list1.find(el => el % 2 !== 0) || -1;
    return first_even * first_odd;
}
```",784,"```javascript
console.assert(mul_even_odd([1,3,5,7,4,1,6,8]) === 4);
console.assert(mul_even_odd([1,2,3,4,5,6,7,8,9,10]) === 2);
console.assert(mul_even_odd([1,5,7,9,10]) === 10);
```"
784, this function to convert tuple string to integer tuple.,"```javascript
function tupleStrInt(testStr) {
    const res = testStr.replace(/\(/g, '').replace(/\)/g, '').replace(/\.\.\./g, '').split(', ').map(num => parseInt(num, 10));
    return [res];
}
```",785,"```javascript
['console.assert(tuple_str_int(""(7, 8, 9)"") === (7, 8, 9))', 'console.assert(tuple_str_int(""(1, 2, 3)"") === (1, 2, 3))', 'console.assert(tuple_str_int(""(4, 5, 6)"") === (4, 5, 6))']
```"
785, this function to locate the right insertion point for a specified value in sorted order.,"```javascript
function rightInsertion(a, x) {
    let i = bisectRight(a, x);
    return [i];

    function bisectRight(arr, val) {
        let low = 0, high = arr.length;
        while (low < high) {
            const mid = Math.floor((low + high) / 2);
            if (arr[mid] <= val) low = mid + 1;
            else high = mid;
        }
        return low;
    }
}
```",786,"```javascript
['console.assert(right_insertion([1,2,4,5]) === 4)', 'console.assert(right_insertion([1,2,4,5], 3) === 2)', 'console.assert(right_insertion([1,2,4,5], 7) === 4)']
```"
786, this function that matches a string that has an a followed by three 'b'.,"```javascript
function textMatchThree(text) {
    const patterns = /ab{3}/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",787,"```javascript
['console.assert(text_match_three(""ac"") === ""Not matched!"");', 'console.assert(text_match_three(""dc"") === ""Not matched!"");', 'console.assert(text_match_three(""abbbba"") === ""Found a match!"");']
```"
787, this function to create a new tuple from the given string and list.,"```javascript
function new_tuple(test_list, test_str) {
    let res = [...test_list, test_str];
    return [res];
}
```",788,"```javascript
assert(new_tuple([""WEB"", ""is""], ""best"") === ('WEB', 'is', 'best'));
assert(new_tuple([""We"", ""are""], ""Developers"") === ('We', 'are', 'Developers'));
assert(new_tuple([""Part"", ""is""], ""Wrong"") === ('Part', 'is', 'Wrong'));
```"
788, this function to calculate the perimeter of a regular polygon.,"```javascript
function perimeterPolygon(s, l) {
  var perimeter = s * l;
  return perimeter;
}
```",789,"```javascript
assert(perimeter_polygon(4, 20) === 80);
assert(perimeter_polygon(10, 15) === 150);
assert(perimeter_polygon(9, 7) === 63);
```"
789, this   function to check whether every even index contains even numbers of a given list.,"```javascript
function evenPosition(nums) {
    return nums.every((num, i) => num % 2 === i % 2);
}
```",790,"```javascript
['console.assert(even_position([3,2,1]) === false)', 'console.assert(even_position([1,2,3]) === false)', 'console.assert(even_position([2,1,4]) === true)']
```"
790, this function to remove the nested record from the given tuple.,"```javascript
function removeNested(testTup) {
  let res = [];
  for (let count = 0; count < testTup.length; count++) {
    let ele = testTup[count];
    if (!(ele instanceof Array)) {
      res.push(ele);
    }
  }
  return [res];
}
```",791,"```javascript
['console.assert(remove_nested([1, 5, 7, [4, 6], 10]).toString() === [1, 5, 7, 10].toString())', 'console.assert(remove_nested([2, 6, 8, [5, 7], 11]).toString() === [2, 6, 8, 11].toString())', 'console.assert(remove_nested([3, 7, 9, [6, 8], 12]).toString() === [3, 7, 9, 12].toString())']
```"
791, this   function to count the number of lists in a given number of lists.,"```javascript
function countList(inputList) {
    return inputList.length;
}
```",792,"```javascript
console.assert(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 4);
console.assert(count_list([[1,2], [2,3], [4,5]]) === 3);
console.assert(count_list([[1,0], [2,0]]) === 2);
```"
792, this   function to find the last position of an element in a sorted array.,"```javascript
function last(arr, x, n) {
    let low = 0;
    let high = n - 1;
    let res = -1;  
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        if (arr[mid] > x) {
            high = mid - 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            res = mid;
            low = mid + 1;
        }
    }
    return res;
}
```",793,"```javascript
['console.assert(last([1,2,3],1,3) === 0)', 'console.assert(last([1,1,1,2,3,4],1,6) === 2)', 'console.assert(last([2,3,2,3,6,8,9],3,8) === 3)']
```"
793," this function that matches a string that has an 'a' followed by anything, ending in 'b'.","```javascript
function textStartaEndb(text) {
    const patterns = /a.*?b$/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",794,"```javascript
assert(text_starta_endb(""aabbbb"") === 'Found a match!');
assert(text_starta_endb(""aabAbbbc"") === 'Not matched!');
assert(text_starta_endb(""accddbbjjj"") === 'Not matched!');
```"
794, this function to find the n - cheap price items from a given dataset using heap queue algorithm.,"```javascript
function cheapItems(items, n) {
  return items
    .sort((a, b) => a.price - b.price)
    .slice(0, n);
}
```",795,"```javascript
[""console.assert(JSON.stringify(cheap_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}], 1)) === JSON.stringify([{name: 'Item-1', price: 101.1}])"", ""console.assert(JSON.stringify(cheap_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}], 2)) === JSON.stringify([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}])"", ""console.assert(JSON.stringify(cheap_items([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}, {name: 'Item-3', price: 45.09}, {name: 'Item-4', price: 22.75}], 1)) === JSON.stringify([{name: 'Item-4', price: 22.75}])""]
```"
795,Write function to find the sum of all items in the given dictionary.,"```javascript
function returnSum(dict) {
  let sum = 0;
  for (let i of Object.values(dict)) {
    sum += i;
  }
  return sum;
}
```",796,"```javascript
[""console.assert(return_sum({'a': 100, 'b': 200, 'c': 300}) === 600)"", ""console.assert(return_sum({'a': 25, 'b': 18, 'c': 45}) === 88)"", ""console.assert(return_sum({'a': 36, 'b': 39, 'c': 49}) === 124)""]
```"
796, this   function to find the sum of all odd natural numbers within the range l and r.,"```javascript
function sum_Odd(n) { 
    let terms = Math.floor((n + 1) / 2);
    let sum1 = terms * terms; 
    return sum1;  
}

function sum_in_Range(l, r) { 
    return sum_Odd(r) - sum_Odd(l - 1); 
}
```",797,"```javascript
['console.assert(sum_in_Range(2,5) === 8)', 'console.assert(sum_in_Range(5,7) === 12)', 'console.assert(sum_in_Range(7,13) === 40)'];
```"
797, this   function to find the sum of an array.,"```javascript
function _sum(arr) {
    let sum = 0;
    for (let i of arr) {
        sum += i;
    }
    return sum;
}
```",798,"```javascript
['console.assert(_sum([1, 2, 3]) === 6)', 'console.assert(_sum([15, 12, 13, 10]) === 50)', 'console.assert(_sum([0, 1, 2]) === 3)']
```"
798, this   function to left rotate the bits of a given number.,"```javascript
const INT_BITS = 32;
function leftRotate(n, d) {   
    return (n << d) | (n >> (INT_BITS - d));
}
```",799,"```javascript
['console.assert(left_Rotate(16, 2) === 64)', 'console.assert(left_Rotate(10, 2) === 40)', 'console.assert(left_Rotate(99, 3) === 792)'];
```"
799, this function to remove all whitespaces from a string.,"```javascript
function removeAllSpaces(text) {
    return text.replace(/\s+/g, '');
}
```",800,"```javascript
[""console.assert(remove_all_spaces('   program') === ' program')"", ""console.assert(remove_all_spaces('    programming    language') === ' programminglanguage')"", ""console.assert(remove_all_spaces('                      program') === ' program')""]
```"
800, this   function to count the number of equal numbers from three given integers.,"```javascript
function testThreeEqual(x, y, z) {
  const result = new Set([x, y, z]);
  if (result.size === 3) {
    return 0;
  } else {
    return 4 - result.size;
  }
}
```",801,"```javascript
['console.assert(test_three_equal(1, 1, 1) === 3)', 'console.assert(test_three_equal(-1, -2, -3) === 0)', 'console.assert(test_three_equal(1, 2, 2) === 2)']
```"
801, this   function to count the number of rotations required to generate a sorted array.,"```javascript
function count_Rotation(arr, n) {
    for (let i = 1; i < n; i++) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return 0;
}
```",802,"```javascript
['console.assert(count_Rotation([3,2,1], 3) === 1)', 'console.assert(count_Rotation([4,5,1,2,3], 5) === 2)', 'console.assert(count_Rotation([7,8,9,1,2,3], 6) === 3)']
```"
802, this   function to check whether the given number is a perfect square or not.,"```javascript
function is_Perfect_Square(n) {
    let i = 1;
    while (i * i <= n) {
        if ((n % i === 0) && (n / i === i)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}
```",803,"```javascript
console.assert(is_Perfect_Square(10) === false);
console.assert(is_Perfect_Square(36) === true);
console.assert(is_Perfect_Square(14) === false);
```"
803, this   function to check whether the product of numbers is even or not.,"```javascript
function is_Product_Even(arr, n) { 
    for (let i = 0; i < n; i++) { 
        if ((arr[i] & 1) === 0) { 
            return true; 
        } 
    } 
    return false; 
}
```",804,"```javascript
['console.assert(is_Product_Even([1,2,3],3) === true)', 'console.assert(is_Product_Even([1,2,1,4],4) === true)', 'console.assert(is_Product_Even([1,1],2) === false)']
```"
804, this function to find the list in a list of lists whose sum of elements is the highest.,"```javascript
function maxSumList(lists) {
    return lists.reduce((a, b) => sum(a) > sum(b) ? a : b);
}

function sum(arr) {
    return arr.reduce((acc, val) => acc + val, 0);
}
```",805,"```javascript
['console.assert(JSON.stringify(max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) === JSON.stringify([10, 11, 12]));', 
 'console.assert(JSON.stringify(max_sum_list([[3,2,1], [6,5,4], [12,11,10]])) === JSON.stringify([12,11,10]));', 
 'console.assert(JSON.stringify(max_sum_list([[2,3,1]])) === JSON.stringify([2,3,1]));']
```"
805, this function to find maximum run of uppercase characters in the given string.,"```javascript
function maxRunUppercase(testStr) {
  let cnt = 0;
  let res = 0;
  for (let idx = 0; idx < testStr.length; idx++) {
    if (testStr[idx] === testStr[idx].toUpperCase()) {
      cnt++;
    } else {
      res = cnt;
      cnt = 0;
    }
  }
  if (testStr[testStr.length - 1] === testStr[testStr.length - 1].toUpperCase()) {
    res = cnt;
  }
  return res;
}
```",806,"```javascript
console.assert(max_run_uppercase('GeMKSForGERksISBESt') === 5);
console.assert(max_run_uppercase('PrECIOusMOVemENTSYT') === 6);
console.assert(max_run_uppercase('GooGLEFluTTER') === 4);
```"
806, this   function to find the first odd number in a given list of numbers.,"```javascript
function firstOdd(nums) {
  const firstOdd = nums.find(el => el % 2 !== 0) || -1;
  return firstOdd;
}
```",807,"```javascript
['console.assert(first_odd([1,3,5]) === 1)', 'console.assert(first_odd([2,4,1,3]) === 1)', 'console.assert(first_odd([8,9,1]) === 9)']
```"
807, this function to check if the given tuples contain the k or not.,"```javascript
function check_K(test_tup, K) {
    let res = false;
    for (let ele of test_tup) {
        if (ele === K) {
            res = true;
            break;
        }
    }
    return res;
}
```",808,"```javascript
console.assert(check_K([10, 4, 5, 6, 8], 6) === true);
console.assert(check_K([1, 2, 3, 4, 5, 6], 7) === false);
console.assert(check_K([7, 8, 9, 44, 11, 12], 11) === true);
```"
808, this function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"```javascript
function checkSmaller(testTup1, testTup2) {
    const res = testTup1.every((x, i) => x > testTup2[i]);
    return res;
}
```",809,"```javascript
console.assert(check_smaller([1, 2, 3], [2, 3, 4]) === false);
console.assert(check_smaller([4, 5, 6], [3, 4, 5]) === true);
console.assert(check_smaller([11, 12, 13], [10, 11, 12]) === true);
```"
809, this function to iterate over elements repeating each as many times as its count.,"```javascript
function countVariable(a, b, c, d) {
  const counter = {};
  [a, b, c, d].forEach(item => {
    counter[item] = (counter[item] || 0) + 1;
  });
  return Object.entries(counter).flatMap(([key, count]) => Array(count).fill(key));
}
```",810,"```javascript
[""console.assert(count_variable(4, 2, 0, -2).toString() === ['p', 'p', 'p', 'p', 'q', 'q'].toString())"", ""console.assert(count_variable(0, 1, 2, 3).toString() === ['q', 'r', 'r', 's', 's', 's'].toString())"", ""console.assert(count_variable(11, 15, 12, 23).toString() === ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's'].toString())""]
```"
810, this function to check if two lists of tuples are identical or not.,"```javascript
function check_identical(test_list1, test_list2) {
    let res = test_list1 === test_list2;
    return res;
}
```",811,"```javascript
console.assert(check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) === true);
console.assert(check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) === false);
console.assert(check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) === true);
```"
811, this function to abbreviate 'road' as 'rd.' in a given string.,"```javascript
function roadRd(street) {
  return street.replace(/Road$/, 'Rd.');
}
```",812,"```javascript
['console.assert(road_rd(""ravipadu Road"") === ""ravipadu Rd."");', 'console.assert(road_rd(""palnadu Road"") === ""palnadu Rd."");', 'console.assert(road_rd(""eshwar enclave Road"") === ""eshwar enclave Rd."");']
```"
812, this function to find length of the string.,"```javascript
function stringLength(str1) {
    let count = 0;
    for (let char of str1) {
        count += 1;
    }
    return count;
}
```",813,"```javascript
[""console.assert(string_length(' ') === 6)"", ""console.assert(string_length('program') === 7)"", ""console.assert(string_length('language') === 8)""]
```"
813, this function to find the area of a rombus.,"```javascript
function rombusArea(p, q) {
    var area = (p * q) / 2;
    return area;
}
```",814,"```javascript
['console.assert(rombus_area(10, 20) === 100)', 'console.assert(rombus_area(10, 5) === 25)', 'console.assert(rombus_area(4, 2) === 4)']
```"
814," this function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","```javascript
function sortByDNF(arr, n) {
  let low = 0;
  let mid = 0;
  let high = n - 1;
  while (mid <= high) {
    if (arr[mid] === 0) {
      [arr[low], arr[mid]] = [arr[mid], arr[low]];
      low += 1;
      mid += 1;
    } else if (arr[mid] === 1) {
      mid += 1;
    } else {
      [arr[mid], arr[high]] = [arr[high], arr[mid]];
      high -= 1;
    }
  }
  return arr;
}
```",815,"```javascript
['console.assert(JSON.stringify(sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)) === JSON.stringify([0, 0, 1, 1, 1, 1, 1, 2, 2]))', 'console.assert(JSON.stringify(sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)) === JSON.stringify([0, 0, 0, 1, 1, 1, 1, 2, 2, 2]))', 'console.assert(JSON.stringify(sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)) === JSON.stringify([0, 0, 0, 1, 1, 1, 1, 2, 2, 2]))']
```"
815, this function to clear the values of the given tuples.,"```javascript
function clearTuple(testTup) {
    let temp = Array.from(testTup);
    temp.length = 0;
    testTup = temp;
    return [testTup];
}
```",816,"```javascript
['console.assert(clear_tuple([1, 5, 3, 6, 8]).length === 0)', 'console.assert(clear_tuple([2, 1, 4, 5, 6]).length === 0)', 'console.assert(clear_tuple([3, 2, 5, 6, 8]).length === 0)'];
```"
816, this function to find numbers divisible by m or n from a list of numbers using lambda function.,"```javascript
function divOfNums(nums, m, n) {
    let result = nums.filter(x => (x % m === 0 || x % n === 0));
    return result;
}
```",817,"```javascript
['console.assert(div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13).toString() === [19, 65, 57, 39, 152, 190].toString())', 'console.assert(div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5).toString() === [2, 5, 8, 10].toString())', 'console.assert(div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5).toString() === [10, 15, 20].toString())']
```"
817, this   function to count lower case letters in a given string.,"```javascript
function lower_ctr(str) {
    let lower_ctr = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= 'a' && str[i] <= 'z') lower_ctr += 1;
    }
    return lower_ctr;
}
```",818,"```javascript
[""console.assert(lower_ctr('abc') === 3)"", ""console.assert(lower_ctr('string') === 6)"", ""console.assert(lower_ctr(' ') === 5)""]
```"
818, this function to count the frequency of consecutive duplicate elements in a given list of numbers.,"```javascript
function countDuplic(lists) {
    let element = [];
    let frequency = [];
    if (!lists.length) {
        return element;
    }
    let runningCount = 1;
    for (let i = 0; i < lists.length - 1; i++) {
        if (lists[i] === lists[i + 1]) {
            runningCount++;
        } else {
            frequency.push(runningCount);
            element.push(lists[i]);
            runningCount = 1;
        }
    }
    frequency.push(runningCount);
    element.push(lists[lists.length - 1]);
    return [element, frequency];
}
```",819,"```javascript
['console.assert(JSON.stringify(count_duplic([1,2,2,2,4,4,4,5,5,5,5])) === JSON.stringify([[1, 2, 4, 5], [1, 3, 3, 4]]))', 'console.assert(JSON.stringify(count_duplic([2,2,3,1,2,6,7,9])) === JSON.stringify([[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]]))', 'console.assert(JSON.stringify(count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])) === JSON.stringify([[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]))']
```"
819, this function to check whether the given month number contains 28 days or not.,"```javascript
function check_monthnum_number(monthnum1) {
  if (monthnum1 === 2) {
    return true;
  } else {
    return false;
  }
}
```",820,"```javascript
console.assert(check_monthnum_number(2) === true);
console.assert(check_monthnum_number(1) === false);
console.assert(check_monthnum_number(3) === false);
```"
820, this function to merge two dictionaries into a single expression.,"```javascript
function mergeDictionaries(dict1, dict2) {
    const mergedDict = Object.assign({}, dict2, dict1);
    return mergedDict;
}
```",821,"```javascript
['console.assert(JSON.stringify(merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" })) === JSON.stringify({\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\'}));', 
 'console.assert(JSON.stringify(merge_dictionaries({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })) === JSON.stringify({\'O\': \'Orange\', \'P\': \'Pink\', \'B\': \'Black\', \'W\': \'White\', \'R\': \'Red\'}));', 
 'console.assert(JSON.stringify(merge_dictionaries({ ""G"": ""Green"", ""W"": ""White"" }, { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })) === JSON.stringify({\'W\': \'White\', \'O\': \'Orange\', \'G\': \'Green\', \'B\': \'Black\'}));']
```"
821, this function to return true if the password is valid.,"```javascript
function pass_validity(p) {
    let x = true;
    while (x) {
        if (p.length < 6 || p.length > 12) {
            break;
        } else if (!/[a-z]/.test(p)) {
            break;
        } else if (!/[0-9]/.test(p)) {
            break;
        } else if (!/[A-Z]/.test(p)) {
            break;
        } else if (!/[$#@]/.test(p)) {
            break;
        } else if (/\s/.test(p)) {
            break;
        } else {
            return true;
            x = false;
            break;
        }
    }

    if (x) {
        return false;
    }
}
```",822,"```javascript
['console.assert(pass_validity(""password"") === false)', 'console.assert(pass_validity(""Password@10"") === true)', 'console.assert(pass_validity(""password@10"") === false)'];
```"
822, this function to check if the given string starts with a substring using regex.,"```javascript
function checkSubstring(string, sample) {
    if (string.includes(sample)) {
        const regex = new RegExp(""^"" + sample);
        if (regex.test(string)) {
            return ""string starts with the given substring"";
        } else {
            return ""string doesnt start with the given substring"";
        }
    } else {
        return ""entered string isnt a substring"";
    }
}
```",823,"```javascript
['console.assert(check_substring(""dreams for dreams makes life fun"", ""makes"") === \'string doesnt start with the given substring\')', 'console.assert(check_substring(""Hi there how are you Hi alex"", ""Hi"") === \'string starts with the given substring\')', 'console.assert(check_substring(""Its been a long day"", ""been"") === \'string doesnt start with the given substring\')']
```"
823, this   function to remove even numbers from a given list.,"```javascript
function removeEven(l) {
    for (let i of l) {
        if (i % 2 === 0) {
            l.splice(l.indexOf(i), 1);
        }
    }
    return l;
}
```",824,"```javascript
console.assert(remove_even([1, 3, 5, 2]).toString() === [1, 3, 5].toString());
console.assert(remove_even([5, 6, 7]).toString() === [5, 7].toString());
console.assert(remove_even([1, 2, 3, 4]).toString() === [1, 3].toString());
```"
824, this   function to access multiple elements of specified index from a given list.,"```javascript
function accessElements(nums, listIndex) {
    const result = listIndex.map(i => nums[i]);
    return result;
}
```",825,"```javascript
['console.assert(access_elements([2,3,8,4,7,9],[0,3,5]).toString() === [2, 4, 9].toString())', 'console.assert(access_elements([1, 2, 3, 4, 5],[1,2]).toString() === [2,3].toString())', 'console.assert(access_elements([1,0,2,3],[0,1]).toString() === [1,0].toString())']
```"
825, this   function to find the type of triangle from the given sides.,"```javascript
function check_Type_Of_Triangle(a, b, c) {
    const sqa = Math.pow(a, 2);
    const sqb = Math.pow(b, 2);
    const sqc = Math.pow(c, 2);
    
    if (sqa === sqb + sqc || sqb === sqa + sqc || sqc === sqa + sqb) {
        return ""Right-angled Triangle"";
    } else if (sqa > sqb + sqc || sqb > sqa + sqc || sqc > sqa + sqb) {
        return ""Obtuse-angled Triangle"";
    } else {
        return ""Acute-angled Triangle"";
    }
}
```",826,"```javascript
['console.assert(check_Type_Of_Triangle(1,2,3) === ""Obtuse-angled Triangle"")', 'console.assert(check_Type_Of_Triangle(2,2,2) === ""Acute-angled Triangle"")', 'console.assert(check_Type_Of_Triangle(1,0,1) === ""Right-angled Triangle"")']
```"
826, this function to sum a specific column of a list in a given list of lists.,"```javascript
function sumColumn(list1, C) {
    let result = list1.reduce((sum, row) => sum + row[C], 0);
    return result;
}
```",827,"```javascript
['console.assert(sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 0) === 12)', 'console.assert(sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 1) === 15)', 'console.assert(sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 3) === 9)']
```"
827," this function to count alphabets,digits and special charactes in a given string.","```javascript
function countAlphaDigSpl(string) {
    let alphabets = 0, digits = 0, special = 0;
    for (let i = 0; i < string.length; i++) {
        if (/[a-zA-Z]/.test(string[i])) {
            alphabets++;
        } else if (/\d/.test(string[i])) {
            digits++;
        } else {
            special++;
        }
    }
    return [alphabets, digits, special];
}
```",828,"```javascript
['console.assert(count_alpha_dig_spl(""abc!@#123"")===3 && count_alpha_dig_spl(""abc!@#123"")[1]===3 && count_alpha_dig_spl(""abc!@#123"")[2]===3)', 'console.assert(count_alpha_dig_spl(""dgsuy@#$%&1255"")===5 && count_alpha_dig_spl(""dgsuy@#$%&1255"")[1]===4 && count_alpha_dig_spl(""dgsuy@#$%&1255"")[2]===5)', 'console.assert(count_alpha_dig_spl(""fjdsif627348#%$^&"")===6 && count_alpha_dig_spl(""fjdsif627348#%$^&"")[1]===6 && count_alpha_dig_spl(""fjdsif627348#%$^&"")[2]===5)']
```"
828, this function to find out the second most repeated (or frequent) string in the given sequence.,"```javascript
function secondFrequent(input) {
    const dict = {};
    input.forEach(item => {
        dict[item] = (dict[item] || 0) + 1;
    });
    
    const values = Object.values(dict).sort((a, b) => b - a);
    const secondLarge = values[1];
    
    for (const [key, val] of Object.entries(dict)) {
        if (val === secondLarge) {
            return key;
        }
    }
}
```",829,"```javascript
console.assert(second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) === 'bbb');
console.assert(second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) === 'abc');
console.assert(second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) === 'gsm');
```"
829, this function to round up a number to specific digits.,"```javascript
function roundUp(a, digits) {
    const n = Math.pow(10, -digits);
    return Math.round(Math.ceil(a / n) * n * Math.pow(10, digits)) / Math.pow(10, digits);
}
```",830,"```javascript
['console.assert(round_up(123.01247, 0) === 124)', 'console.assert(round_up(123.01247, 1) === 123.1)', 'console.assert(round_up(123.01247, 2) === 123.02)']
```"
830, this   function to count equal element pairs from the given array.,"```javascript
function count_Pairs(arr, n) { 
    let cnt = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] === arr[j]) { 
                cnt += 1; 
            } 
        } 
    } 
    return cnt; 
}
```",831,"```javascript
['console.assert(count_Pairs([1,1,1,1],4) === 6)', 'console.assert(count_Pairs([1,5,1],3) === 1)', 'console.assert(count_Pairs([3,2,1,7,8,9],6) === 0)']
```"
831, this function to extract the maximum numeric value from a string by using regex.,"```javascript
function extractMax(input) {
    const numbers = input.match(/\d+/g).map(Number);
    return Math.max(...numbers);
}
```",832,"```javascript
[""console.assert(extract_max('100klh564abc365bg') === 564)"", ""console.assert(extract_max('hello300how546mer231') === 546)"", ""console.assert(extract_max('its233beenalong343journey234') === 343)""];
```"
832, this function to get dictionary keys as a list.,"```javascript
function getKey(dict) {
    let list = [];
    for (let key in dict) {
        list.push(key);
    }
    return list;
}
```",833,"```javascript
[""console.assert(get_key({1:' ',2:'java'}) === [1,2])"", ""console.assert(get_key({10:'red',20:'blue',30:'black'}) === [10,20,30])"", ""console.assert(get_key({27:'language',39:'java',44:'little'}) === [27,39,44])""]
```"
833, this function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"```javascript
function generateMatrix(n) {
    if (n <= 0) {
        return [];
    }
    let matrix = Array.from({ length: n }, () => Array(n).fill(0));
    let row_st = 0;
    let row_ed = n - 1;
    let col_st = 0;
    let col_ed = n - 1;
    let current = 1;
    
    while (true) {
        if (current > n * n) {
            break;
        }
        for (let c = col_st; c <= col_ed; c++) {
            matrix[row_st][c] = current;
            current++;
        }
        row_st++;
        for (let r = row_st; r <= row_ed; r++) {
            matrix[r][col_ed] = current;
            current++;
        }
        col_ed--;
        for (let c = col_ed; c >= col_st; c--) {
            matrix[row_ed][c] = current;
            current++;
        }
        row_ed--;
        for (let r = row_ed; r >= row_st; r--) {
            matrix[r][col_st] = current;
            current++;
        }
        col_st++;
    }
    return matrix;
}
```",834,"```javascript
['console.assert(generate_matrix(3).toString() === [[1, 2, 3], [8, 9, 4], [7, 6, 5]].toString())', 'console.assert(generate_matrix(2).toString() === [[1,2],[4,3]].toString())', 'console.assert(generate_matrix(7).toString() === [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]].toString())']
```"
834, this   function to find the slope of a line.,"```javascript
function slope(x1, y1, x2, y2) {
    return (y2 - y1) / (x2 - x1);
}
```",835,"```javascript
['console.assert(slope(4,2,2,5) === -1.5)', 'console.assert(slope(2,4,4,6) === 1)', 'console.assert(slope(1,2,4,2) === 0)']
```"
835, this function to find length of the subarray having maximum sum.,"```javascript
function maxSubArraySum(a, size) {
    let maxSoFar = -Infinity;
    let maxEndingHere = 0;
    let start = 0;
    let end = 0;
    let s = 0;

    for (let i = 0; i < size; i++) {
        maxEndingHere += a[i];

        if (maxSoFar < maxEndingHere) {
            maxSoFar = maxEndingHere;
            start = s;
            end = i;
        }

        if (maxEndingHere < 0) {
            maxEndingHere = 0;
            s = i + 1;
        }
    }

    return (end - start + 1);
}
```",836,"```javascript
console.assert(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) === 5);
console.assert(max_sub_array_sum([1, -2, 1, 1, -2, 1], 6) === 2);
console.assert(max_sub_array_sum([-1, -2, 3, 4, 5], 5) === 3);
```"
836, this   function to find the cube sum of first n odd natural numbers.,"```javascript
function cubeSum(n) {
    let sum = 0;
    for (let i = 0; i < n; i++) {
        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1);
    }
    return sum;
}
```",837,"```javascript
['console.assert(cube_Sum(2) === 28)', 'console.assert(cube_Sum(3) === 153)', 'console.assert(cube_Sum(4) === 496)']
```"
837, this   function to find minimum number swaps required to make two binary strings equal.,"```javascript
function minSwaps(s1, s2) {
    let c0 = 0, c1 = 0;
    for (let i = 0; i < s1.length; i++) {
        if (s1[i] === '0' && s2[i] === '1') {
            c0++;
        } else if (s1[i] === '1' && s2[i] === '0') {
            c1++;
        }
    }
    let result = Math.floor(c0 / 2) + Math.floor(c1 / 2);
    if (c0 % 2 === 0 && c1 % 2 === 0) {
        return result;
    } else if ((c0 + c1) % 2 === 0) {
        return result + 2;
    } else {
        return -1;
    }
}
```",838,"```javascript
['console.assert(min_Swaps(""0011"") === 1)', 'console.assert(min_Swaps(""00011"") === 2)', 'console.assert(min_Swaps(""111"") === 0)']
```"
838, this function to sort the tuples alphabetically by the first item of each tuple.,"```javascript
function sortTuple(tup) {
    const n = tup.length;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n - i - 1; j++) {
            if (tup[j][0] > tup[j + 1][0]) {
                [tup[j], tup[j + 1]] = [tup[j + 1], tup[j]];
            }
        }
    }
    return tup;
}
```",839,"```javascript
['console.assert(sort_tuple([[""Amana"", 28], [""Zenat"", 30], [""Abhishek"", 29], [""Nikhil"", 21], [""B"", ""C""]]) === [[""Abhishek"", 29], [""Amana"", 28], [""B"", ""C""], [""Nikhil"", 21], [""Zenat"", 30]]);', 
 'console.assert(sort_tuple([[""aaaa"", 28], [""aa"", 30], [""bab"", 29], [""bb"", 21], [""csa"", ""C""]]) === [[""aa"", 30], [""aaaa"", 28], [""bab"", 29], [""bb"", 21], [""csa"", ""C""]]);', 
 'console.assert(sort_tuple([[""Sarala"", 28], [""Ayesha"", 30], [""Suman"", 29], [""Sai"", 21], [""G"", ""H""]]) === [[""Ayesha"", 30], [""G"", ""H""], [""Sai"", 21], [""Sarala"", 28], [""Suman"", 29]]);']
```"
839, this   function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"```javascript
function Check_Solution(a, b, c) {  
    if (b == 0) {  
        return ""Yes"";  
    } else { 
        return ""No"";  
    }  
}
```",840,"```javascript
['console.assert(Check_Solution(2,0,-1) === ""Yes"")', 'console.assert(Check_Solution(1,-5,6) === ""No"")', 'console.assert(Check_Solution(2,0,2) === ""Yes"")']
```"
840, this function to count the number of inversions in the given array.,"```javascript
function getInvCount(arr, n) { 
    let invCount = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] > arr[j]) { 
                invCount++; 
            } 
        } 
    } 
    return invCount; 
}
```",841,"```javascript
['console.assert(get_inv_count([1, 20, 6, 4, 5], 5) === 5)', 'console.assert(get_inv_count([8, 4, 2, 1], 4) === 6)', 'console.assert(get_inv_count([3, 1, 2], 3) === 2)']
```"
841, this function to find the number which occurs for odd number of times in the given array.,"```javascript
function getOddOccurrence(arr, arrSize) {
  for (let i = 0; i < arrSize; i++) {
    let count = 0;
    for (let j = 0; j < arrSize; j++) {
      if (arr[i] === arr[j]) {
        count++;
      }
    }
    if (count % 2 !== 0) {
      return arr[i];
    }
  }
  return -1;
}
```",842,"```javascript
['console.assert(get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) === 5)', 
 'console.assert(get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) === 3)', 
 'console.assert(get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) === 5)']
```"
842, this function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"```javascript
function nthSuperUglyNumber(n, primes) {
    const uglies = [1];
    function* gen(prime) {
        for (const ugly of uglies) {
            yield ugly * prime;
        }
    }
    
    const merged = [];
    for (const prime of primes) {
        merged.push(gen(prime));
    }
    
    function* mergeIterators(iterators) {
        const heap = [];
        for (const iter of iterators) {
            const first = iter.next();
            if (!first.done) {
                heap.push({ value: first.value, iterator: iter });
            }
        }
        
        while (heap.length) {
            heap.sort((a, b) => a.value - b.value);
            const { value, iterator } = heap.shift();
            yield value;
            const next = iterator.next();
            if (!next.done) {
                heap.push({ value: next.value, iterator });
            }
        }
    }
    
    const mergedIterator = mergeIterators(merged);
    
    while (uglies.length < n) {
        const ugly = mergedIterator.next().value;
        if (ugly !== uglies[uglies.length - 1]) {
            uglies.push(ugly);
        }
    }
    
    return uglies[uglies.length - 1];
}
```",843,"```javascript
console.assert(nth_super_ugly_number(12, [2, 7, 13, 19]) === 32);
console.assert(nth_super_ugly_number(10, [2, 7, 13, 19]) === 26);
console.assert(nth_super_ugly_number(100, [2, 7, 13, 19]) === 5408);
```"
843, this   function to find the kth element in an array containing odd elements first and then even elements.,"```javascript
function get_Number(n, k) {
    const arr = new Array(n).fill(0);
    let i = 0;
    let odd = 1;
    while (odd <= n) {
        arr[i] = odd;
        i += 1;
        odd += 2;
    }
    let even = 2;
    while (even <= n) {
        arr[i] = even;
        i += 1;
        even += 2;
    }
    return arr[k - 1];
}
```",844,"```javascript
['console.assert(get_Number(8,5) === 2)', 'console.assert(get_Number(7,2) === 3)', 'console.assert(get_Number(5,2) === 3)']
```"
844, this   function to count the number of digits in factorial of a given number.,"```javascript
function findDigits(n) {
    if (n < 0) {
        return 0;
    }
    if (n <= 1) {
        return 1;
    }
    const x = (n * Math.log10(n / Math.E) + Math.log10(2 * Math.PI * n) / 2.0);
    return Math.floor(x) + 1;
}
```",845,"```javascript
['console.assert(find_Digits(7) === 4)', 'console.assert(find_Digits(5) === 3)', 'console.assert(find_Digits(4) === 2)'];
```"
845, this function to find the minimum number of platforms required for a railway/bus station.,"```javascript
function findPlatform(arr, dep, n) { 
    arr.sort((a, b) => a - b); 
    dep.sort((a, b) => a - b); 
    let platNeeded = 1; 
    let result = 1; 
    let i = 1; 
    let j = 0; 
    while (i < n && j < n) { 
        if (arr[i] <= dep[j]) {           
            platNeeded += 1; 
            i += 1; 
        } else if (arr[i] > dep[j]) {           
            platNeeded -= 1; 
            j += 1; 
        } 
        if (platNeeded > result) {  
            result = platNeeded;           
        } 
    } 
    return result; 
}
```",846,"```javascript
['console.assert(find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6) === 3)', 'console.assert(find_platform([100,200,300,400],[700,800,900,1000],4) === 4)', 'console.assert(find_platform([5,6,7,8],[4,3,2,1],4) === 1)'];
```"
846, this   function to copy a list from a singleton tuple.,"```javascript
function lcopy(xs) {
    return xs.slice();
}
```",847,"```javascript
['console.assert(JSON.stringify(lcopy([1, 2, 3])) === JSON.stringify([1, 2, 3])', 'console.assert(JSON.stringify(lcopy([4, 8, 2, 10, 15, 18])) === JSON.stringify([4, 8, 2, 10, 15, 18])', 'console.assert(JSON.stringify(lcopy([4, 5, 6])) === JSON.stringify([4, 5, 6])\n']
```"
847, this function to find the area of a trapezium.,"```javascript
function areaTrapezium(base1, base2, height) {
    const area = 0.5 * (base1 + base2) * height;
    return area;
}
```",848,"```javascript
['console.assert(area_trapezium(6,9,4) === 30)', 'console.assert(area_trapezium(10,20,30) === 450)', 'console.assert(area_trapezium(15,25,35) === 700)'];
```"
848, this   function to find sum of all prime divisors of a given number.,"```javascript
function Sum(N) { 
    let SumOfPrimeDivisors = new Array(N + 1).fill(0);   
    for (let i = 2; i <= N; i++) { 
        if (SumOfPrimeDivisors[i] === 0) { 
            for (let j = i; j <= N; j += i) { 
                SumOfPrimeDivisors[j] += i;           
            }
        }
    }
    return SumOfPrimeDivisors[N];
}
```",849,"```javascript
['console.assert(Sum(60) === 10)', 'console.assert(Sum(39) === 16)', 'console.assert(Sum(40) === 7)'];
```"
849, this function to check if a triangle of positive area is possible with the given angles.,"```javascript
function isTriangleExists(a, b, c) { 
    if (a !== 0 && b !== 0 && c !== 0 && (a + b + c) === 180) { 
        if ((a + b) >= c || (b + c) >= a || (a + c) >= b) { 
            return true; 
        } else { 
            return false; 
        } 
    } else { 
        return false; 
    } 
}
```",850,"```javascript
['console.assert(is_triangleexists(50, 60, 70) === true)', 'console.assert(is_triangleexists(90, 45, 45) === true)', 'console.assert(is_triangleexists(150, 30, 70) === false)'];
```"
850, this   function to find sum of inverse of divisors.,"```javascript
function Sum_of_Inverse_Divisors(N, Sum) {
    let ans = parseFloat(Sum) / parseFloat(N);
    return Math.round(ans * 100) / 100;
}
```",851,"```javascript
['console.assert(Sum_of_Inverse_Divisors(6,12) === 2)', 'console.assert(Sum_of_Inverse_Divisors(9,13) === 1.44)', 'console.assert(Sum_of_Inverse_Divisors(1,4) === 4)']
```"
851, this   function to remove negative numbers from a list.,"```javascript
function remove_negs(numList) {
  for (let item of numList) {
    if (item < 0) {
      numList.splice(numList.indexOf(item), 1);
    }
  }
  return numList;
}
```",852,"```javascript
['console.assert(JSON.stringify(remove_negs([1,-2,3,-4])) === JSON.stringify([1,3])', 'console.assert(JSON.stringify(remove_negs([1,2,3,-4])) === JSON.stringify([1,2,3])', 'console.assert(JSON.stringify(remove_negs([4,5,-6,7,-8])) === JSON.stringify([4,5,7])'];
```"
852, this   function to find sum of odd factors of a number.,"```javascript
function sumOfOddFactors(n) {
    let res = 1;
    while (n % 2 === 0) {
        n = Math.floor(n / 2);
    }
    for (let i = 3; i <= Math.sqrt(n); i++) {
        let count = 0;
        let currSum = 1;
        let currTerm = 1;
        while (n % i === 0) {
            count++;
            n = Math.floor(n / i);
            currTerm *= i;
            currSum += currTerm;
        }
        res *= currSum;
    }
    if (n >= 2) {
        res *= (1 + n);
    }
    return res;
}
```",853,"```javascript
['console.assert(sum_of_odd_Factors(30) === 24)', 'console.assert(sum_of_odd_Factors(18) === 13)', 'console.assert(sum_of_odd_Factors(2) === 1)']
```"
853, this function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"```javascript
function rawHeap(rawHeap) {
  const heapify = (arr) => {
    for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {
      heapifyDown(arr, i, arr.length);
    }
  };

  const heapifyDown = (arr, i, length) => {
    const left = 2 * i + 1;
    const right = 2 * i + 2;
    let largest = i;

    if (left < length && arr[left] < arr[largest]) {
      largest = left;
    }
    if (right < length && arr[right] < arr[largest]) {
      largest = right;
    }
    if (largest !== i) {
      [arr[i], arr[largest]] = [arr[largest], arr[i]];
      heapifyDown(arr, largest, length);
    }
  };

  heapify(rawHeap);
  return [rawHeap];
}
```",854,"```javascript
['console.assert(JSON.stringify(raw_heap([25, 44, 68, 21, 39, 23, 89])) === JSON.stringify([21, 25, 23, 44, 39, 68, 89]))', 'console.assert(JSON.stringify(raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])) === JSON.stringify([14, 25, 22, 25, 35, 65, 75, 85, 58]))', 'console.assert(JSON.stringify(raw_heap([4, 5, 6, 2])) === JSON.stringify([2, 4, 6, 5]))']
```"
854, this   function to check for even parity of a given number.,"```javascript
function checkEvenParity(x) { 
    let parity = 0; 
    while (x !== 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    return parity % 2 === 0; 
}
```",855,"```javascript
console.assert(check_Even_Parity(10) === true);
console.assert(check_Even_Parity(11) === false);
console.assert(check_Even_Parity(18) === true);
```"
855, this   function to find minimum adjacent swaps required to sort binary array.,"```javascript
function find_Min_Swaps(arr, n) {
    let noOfZeroes = new Array(n).fill(0);
    let count = 0;
    noOfZeroes[n - 1] = 1 - arr[n - 1];
    for (let i = n - 2; i >= 0; i--) {
        noOfZeroes[i] = noOfZeroes[i + 1];
        if (arr[i] === 0) {
            noOfZeroes[i] += 1;
        }
    }
    for (let i = 0; i < n; i++) {
        if (arr[i] === 1) {
            count += noOfZeroes[i];
        }
    }
    return [count];
}
```",856,"```javascript
['console.assert(find_Min_Swaps([1,0,1,0], 4) === 3)', 'console.assert(find_Min_Swaps([0,1,0], 3) === 1)', 'console.assert(find_Min_Swaps([0,0,1,1,0], 5) === 2)']
```"
856, this function to list out the list of given strings individually using map function.,"```javascript
function listifyList(list1) {
  const result = list1.map(item => Array.from(item));
  return result;
}
```",857,"```javascript
console.assert(JSON.stringify(listifyList(['Red', 'Blue', 'Black', 'White', 'Pink'])) === JSON.stringify([['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]));
console.assert(JSON.stringify(listifyList([' '])) === JSON.stringify([['p', 'y', 't', 'h', 'o', 'n']]));
console.assert(JSON.stringify(listifyList([' red ', 'green',' black', 'blue ',' orange', 'brown'])) === JSON.stringify([[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]));
```"
857, this function to count number of lists in a given list of lists and square the count.,"```javascript
function countList(inputList) { 
    return Math.pow(inputList.length, 2);
}
```",858,"```javascript
['console.assert(count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 25)', 'console.assert(count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 16)', 'console.assert(count_list([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]]) === 9)']
```"
858, this function to generate all sublists of a given list.,"```javascript
function subLists(myList) {
    const subs = [];
    for (let i = 0; i <= myList.length; i++) {
        const temp = [];
        const combinations = (arr, n) => {
            const result = [];
            const f = (start, curr) => {
                if (curr.length === n) {
                    result.push(curr);
                    return;
                }
                for (let i = start; i < arr.length; i++) {
                    f(i + 1, curr.concat(arr[i]));
                }
            };
            f(0, []);
            return result;
        };
        if (i > 0) {
            temp.push(...combinations(myList, i));
        }
        subs.push(...temp);
    }
    return [subs];
}
```",859,"```javascript
console.assert(sub_lists([10, 20, 30, 40]).toString() === [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]].toString());
console.assert(sub_lists(['X', 'Y', 'Z']).toString() === [[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']].toString());
console.assert(sub_lists([1, 2, 3]).toString() === [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].toString());
```"
859, this function to check whether the given string is ending with only alphanumeric characters or not using regex.,"```javascript
const regex = /[a-zA-Z0-9]$/;

function checkAlphanumeric(string) {
    if (regex.test(string)) {
        return ""Accept"";
    } else {
        return ""Discard"";
    }
}
```",860,"```javascript
['console.assert(check_alphanumeric(""dawood@"") === \'Discard\')', 'console.assert(check_alphanumeric(""skdmsam326"") === \'Accept\')', 'console.assert(check_alphanumeric(""cooltricks@"") === \'Discard\')']
```"
860, this function to find all anagrams of a string in a given list of strings using lambda function.,"```javascript
function anagramLambda(texts, str) {
  const counter = (s) => {
    return s.split('').reduce((acc, char) => {
      acc[char] = (acc[char] || 0) + 1;
      return acc;
    }, {});
  };

  const strCounter = counter(str);
  return texts.filter(x => {
    const xCounter = counter(x);
    return JSON.stringify(strCounter) === JSON.stringify(xCounter);
  });
}
```",861,"```javascript
['assert anagram_lambda([""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""],""abcd"")===[""bcda"", ""cbda"", ""adcb""]', 'assert anagram_lambda([""recitals"",""  ""], ""articles"" )===[""recitals""]', 'assert anagram_lambda(["" keep"","" abcdef"","" xyz""],"" peek"")===["" keep""]']
```"
861, this function to find the occurrences of n most common words in a given text.,"```javascript
function nCommonWords(text, n) {
  const words = text.match(/\w+/g);
  const wordCount = {};
  
  for (const word of words) {
    wordCount[word] = (wordCount[word] || 0) + 1;
  }

  const sortedWords = Object.entries(wordCount).sort((a, b) => b[1] - a[1]);
  return sortedWords.slice(0, n);
}
```",862,"```javascript
['console.assert(n_common_words(""  is a programming language"", 1).toString() === [["" "", 1]].toString())', 'console.assert(n_common_words(""  is a programming language"", 1).toString() === [["" "", 1]].toString())', 'console.assert(n_common_words(""  is a programming language"", 5).toString() === [["" "", 1], [""is"", 1], [""a"", 1], [""programming"", 1], [""language"", 1]].toString())']
```"
862, this function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"```javascript
function findLongestConseqSubseq(arr, n) {
    let ans = 0;
    let count = 0;
    arr.sort((a, b) => a - b);
    let v = [];
    v.push(arr[0]);
    for (let i = 1; i < n; i++) {
        if (arr[i] !== arr[i - 1]) {
            v.push(arr[i]);
        }
    }
    for (let i = 0; i < v.length; i++) {
        if (i > 0 && v[i] === v[i - 1] + 1) {
            count += 1;
        } else {
            count = 1;
        }
        ans = Math.max(ans, count);
    }
    return ans;
}
```",863,"```javascript
console.assert(find_longest_conseq_subseq([1, 2, 2, 3], 4) === 3);
console.assert(find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) === 4);
console.assert(find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) === 5);
```"
863, this function to find palindromes in a given list of strings using lambda function.,"```javascript
function palindromeLambda(texts) {
    const result = texts.filter(x => x === x.split('').reverse().join(''));
    return result;
}
```",864,"```javascript
assert(palindrome_lambda([""php"", ""res"", "" "", ""abcd"", ""Java"", ""aaa""]) === ['php', 'aaa']);
assert(palindrome_lambda([""abcd"", "" "", ""abba"", ""aba""]) === ['abba', 'aba']);
assert(palindrome_lambda([""abcd"", ""abbccbba"", ""abba"", ""aba""]) === ['abbccbba', 'abba', 'aba']);
```"
864, this function to print n-times a list using map function.,"```javascript
function ntimes_list(nums, n) {
    const result = nums.map(x => n * x);
    return result;
}
```",865,"```javascript
['console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 3).toString() === [3, 6, 9, 12, 15, 18, 21].toString())', 'console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 4).toString() === [4, 8, 12, 16, 20, 24, 28].toString())', 'console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 10).toString() === [10, 20, 30, 40, 50, 60, 70].toString())']
```"
865, this function to check whether the given month name contains 31 days or not.,"```javascript
function checkMonthNumb(monthName2) {
  if (monthName2 === ""January"" || monthName2 === ""March"" || monthName2 === ""May"" || monthName2 === ""July"" || monthName2 === ""August"" || monthName2 === ""October"" || monthName2 === ""December"") {
    return true;
  } else {
    return false;
  }
}
```",866,"```javascript
['console.assert(check_monthnumb(""February"") === false)', 'console.assert(check_monthnumb(""January"") === true)', 'console.assert(check_monthnumb(""March"") === true)'];
```"
866, this   function to add a minimum number such that the sum of array becomes even.,"```javascript
function min_Num(arr, n) {  
    let odd = 0;
    for (let i = 0; i < n; i++) { 
        if (arr[i] % 2) { 
            odd += 1; 
        }
    }
    if (odd % 2) { 
        return 1; 
    }
    return 2;
}
```",867,"```javascript
['console.assert(min_Num([1,2,3,4,5,6,7,8,9]) === 1)', 'console.assert(min_Num([1,2,3,4,5,6,7,8]) === 2)', 'console.assert(min_Num([1,2,3]) === 2)']
```"
867, this   function to find the length of the last word in a given string.,"```javascript
function lengthOfLastWord(a) { 
    let l = 0; 
    const x = a.trim(); 
    for (let i = 0; i < x.length; i++) { 
        if (x[i] === "" "") { 
            l = 0; 
        } else { 
            l++; 
        } 
    } 
    return l; 
}
```",868,"```javascript
['console.assert(length_Of_Last_Word(""  language"") === 8)', 'console.assert(length_Of_Last_Word(""PHP"") === 3)', 'console.assert(length_Of_Last_Word("""") === 0)'];
```"
868," this function to remove sublists from a given list of lists, which are outside a given range.","```javascript
function removeListRange(list1, leftrange, rigthrange) {
    const result = list1.filter(i => Math.min(...i) >= leftrange && Math.max(...i) <= rigthrange);
    return result;
}
```",869,"```javascript
['console.assert(remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17).toString() === [[13, 14, 15, 17]].toString())', 'console.assert(remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3).toString() === [[2], [1, 2, 3]].toString())', 'console.assert(remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7).toString() === [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]].toString())']
```"
869, this function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"```javascript
function sum_positivenum(nums) {
    const sum_positivenum = nums.filter(num => num > 0);
    return sum_positivenum.reduce((acc, curr) => acc + curr, 0);
}
```",870,"```javascript
console.assert(sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 48);
console.assert(sum_positivenum([10, 15, -14, 13, -18, 12, -20]) === 50);
console.assert(sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) === 522);
```"
870, this   function to check whether the given strings are rotations of each other or not.,"```javascript
function are_Rotations(string1, string2) {
    let size1 = string1.length;
    let size2 = string2.length;
    let temp = '';
    
    if (size1 !== size2) {
        return false;
    }
    
    temp = string1 + string1;
    if (temp.includes(string2)) {
        return true;
    } else {
        return false;
    }
}
```",871,"```javascript
['console.assert(are_Rotations(""abc"", ""cba"") === false)', 'console.assert(are_Rotations(""abcd"", ""cdba"") === false)', 'console.assert(are_Rotations(""abacd"", ""cdaba"") === true)']
```"
871, this function to check if a nested list is a subset of another nested list.,"```javascript
function checkSubset(list1, list2) {
    return list2.every(item => list1.includes(item));
}
```",872,"```javascript
console.assert(check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]]) === true);
console.assert(check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]]) === true);
console.assert(check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]]) === false);
```"
872, this function to solve the fibonacci sequence using recursion.,"```javascript
function fibonacci(n) {
  if (n === 1 || n === 2) {
    return 1;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}
```",873,"```javascript
['console.assert(fibonacci(7) === 13)', 'console.assert(fibonacci(8) === 21)', 'console.assert(fibonacci(9) === 34)']
```"
873, this   function to check if the string is a concatenation of another string.,"```javascript
function check_Concat(str1, str2) {
    let N = str1.length;
    let M = str2.length;
    if (N % M !== 0) {
        return false;
    }
    for (let i = 0; i < N; i++) {
        if (str1[i] !== str2[i % M]) {
            return false;
        }
    }
    return true;
}
```",874,"```javascript
['console.assert(check_Concat(""abcabcabc"", ""abc"") === true)', 'console.assert(check_Concat(""abcab"", ""abc"") === false)', 'console.assert(check_Concat(""aba"", ""ab"") === false)'];
```"
874, this function to find the minimum difference in the tuple pairs of given tuples.,"```javascript
function minDifference(testList) {
    let temp = testList.map(([a, b]) => Math.abs(b - a));
    let res = Math.min(...temp);
    return res;
}
```",875,"```javascript
console.assert(min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) === 1);
console.assert(min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) === 2);
console.assert(min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) === 6);
```"
875, this   function to find lcm of two positive integers.,"```javascript
function lcm(x, y) {
    let z;
    if (x > y) {
        z = x;
    } else {
        z = y;
    }
    while (true) {
        if ((z % x === 0) && (z % y === 0)) {
            return z;
        }
        z += 1;
    }
}
```",876,"```javascript
['console.assert(lcm(4, 6) === 12)', 'console.assert(lcm(15, 17) === 255)', 'console.assert(lcm(2, 6) === 6)']
```"
876, this   function to sort the given string.,"```javascript
function sort_String(str) {
    str = str.split('').sort().join('');
    return str;
}
```",877,"```javascript
['console.assert(sort_String(""cba"") === ""abc"")', 'console.assert(sort_String(""data"") === ""aadt"")', 'console.assert(sort_String(""zxy"") === ""xyz"")']
```"
877, this function to check if the given tuple contains only k elements.,"```javascript
function checkTuples(testTuple, K) {
    const res = testTuple.every(ele => K.includes(ele));
    return res;
}
```",878,"```javascript
console.assert(check_tuples([3, 5, 6, 5, 3, 6], [3, 6, 5]) === true);
console.assert(check_tuples([4, 5, 6, 4, 6, 5], [4, 5, 6]) === true);
console.assert(check_tuples([9, 8, 7, 6, 8, 9], [9, 8, 1]) === false);
```"
878," this function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.","```javascript
function textMatch(text) {
  const patterns = /a.*?b$/;
  if (patterns.test(text)) {
    return 'Found a match!';
  } else {
    return 'Not matched!';
  }
}
```",879,"```javascript
['console.assert(text_match(""aabbbbd"") === ""Not matched!"");', 'console.assert(text_match(""aabAbbbc"") === ""Not matched!"");', 'console.assert(text_match(""accddbbjjjb"") === ""Found a match!"");']
```"
879, this   function to find number of solutions in quadratic equation.,"```javascript
function Check_Solution(a, b, c) {
    if ((b * b) - (4 * a * c) > 0) {
        return (""2 solutions"");
    } else if ((b * b) - (4 * a * c) === 0) {
        return (""1 solution"");
    } else {
        return (""No solutions"");
    }
}
```",880,"```javascript
['console.assert(Check_Solution(2,5,2) === ""2 solutions"")', 'console.assert(Check_Solution(1,1,1) === ""No solutions"")', 'console.assert(Check_Solution(1,2,1) === ""1 solution"")']
```"
880, this function to find the sum of first even and odd number of a given list.,"```javascript
function sumEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) !== undefined ? list1.find(el => el % 2 === 0) : -1;
    const firstOdd = list1.find(el => el % 2 !== 0) !== undefined ? list1.find(el => el % 2 !== 0) : -1;
    return firstEven + firstOdd;
}
```",881,"```javascript
['console.assert(sum_even_odd([1,3,5,7,4,1,6,8])===5)', 'console.assert(sum_even_odd([1,2,3,4,5,6,7,8,9,10])===3)', 'console.assert(sum_even_odd([1,5,7,9,10])===11)']
```"
881, this function to caluclate perimeter of a parallelogram.,"```javascript
function parallelogram_perimeter(b, h) {
    let perimeter = 2 * (b + h);
    return perimeter;
}
```",882,"```javascript
['console.assert(parallelogram_perimeter(10,20)===400)', 'console.assert(parallelogram_perimeter(15,20)===600)', 'console.assert(parallelogram_perimeter(8,9)===144)']
```"
882, this function to find numbers divisible by m and n from a list of numbers using lambda function.,"```javascript
function divOfNums(nums, m, n) {
    const result = nums.filter(x => (x % m === 0 && x % n === 0));
    return result;
}
```",883,"```javascript
['console.assert(JSON.stringify(div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)) === JSON.stringify([152, 44])', 'console.assert(JSON.stringify(div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)) === JSON.stringify([10])', 'console.assert(JSON.stringify(div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)) === JSON.stringify([10, 20])']
```"
883, this   function to check whether all the bits are within a given range or not.,"```javascript
function allBitsSetInTheGivenRange(n, l, r) {
    let num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);
    let newNum = n & num;
    if (num === newNum) {
        return true;
    }
    return false;
}
```",884,"```javascript
['console.assert(all_Bits_Set_In_The_Given_Range(10,2,1) === true);', 'console.assert(all_Bits_Set_In_The_Given_Range(5,2,4) === false);', 'console.assert(all_Bits_Set_In_The_Given_Range(22,2,3) === true);']
```"
884, this   function to check whether the two given strings are isomorphic to each other or not.,"```javascript
function isIsomorphic(str1, str2) {          
    let dictStr1 = {};
    let dictStr2 = {};
    for (let i = 0; i < str1.length; i++) {
        let value = str1[i];
        dictStr1[value] = (dictStr1[value] || []).concat(i);        
    }
    for (let j = 0; j < str2.length; j++) {
        let value = str2[j];
        dictStr2[value] = (dictStr2[value] || []).concat(j);
    }
    return JSON.stringify(Object.values(dictStr1).sort()) === JSON.stringify(Object.values(dictStr2).sort());
}
```",885,"```javascript
console.assert(is_Isomorphic(""paper"", ""title"") === true);
console.assert(is_Isomorphic(""ab"", ""ba"") === true);
console.assert(is_Isomorphic(""ab"", ""aa"") === false);
```"
885, this function to add all the numbers in a list and divide it with the length of the list.,"```javascript
function sumNum(numbers) {
    let total = 0;
    for (let x of numbers) {
        total += x;
    }
    return total / numbers.length;
}
```",886,"```javascript
console.assert(sum_num(8, 2, 3, 0, 7) === 4.0);
console.assert(sum_num(-10, -20, -30) === -20.0);
console.assert(sum_num(19, 15, 18) === 17.333333333333332);
```"
886, this   function to check whether the given number is odd or not using bitwise operator.,"```javascript
function isOdd(n) {
    if ((n ^ 1) === (n - 1)) {
        return true;
    } else {
        return false;
    }
}
```",887,"```javascript
['console.assert(is_odd(5) === true)', 'console.assert(is_odd(6) === false)', 'console.assert(is_odd(7) === true)']
```"
887, this function to substract the elements of the given nested tuples.,"```javascript
function subtractElements(testTup1, testTup2) {
    const res = testTup1.map((tup1, index) => {
        return tup1.map((a, j) => a - testTup2[index][j]);
    });
    return res;
}
```",888,"```javascript
['console.assert(substract_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]) === [[-5, -4], [1, -4], [1, 8], [-6, 7]])', 'console.assert(substract_elements([[13, 4], [14, 6], [13, 10], [12, 11]], [[19, 8], [14, 10], [12, 2], [18, 4]]) === [[-6, -4], [0, -4], [1, 8], [-6, 7]])', 'console.assert(substract_elements([[19, 5], [18, 7], [19, 11], [17, 12]], [[12, 9], [17, 11], [13, 3], [19, 5]]) === [[7, -4], [1, -4], [6, 8], [-2, 7]])']
```"
888, this function to reverse each list in a given list of lists.,"```javascript
function reverseListLists(lists) {
    for (let l of lists) {
        l.sort((a, b) => b - a);
    }
    return lists;
}
```",889,"```javascript
['console.assert(reverseListLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]);', 'console.assert(reverseListLists([[1,2],[2,3],[3,4]]) == [[2,1],[3,2],[4,3]]);', 'console.assert(reverseListLists([[10,20],[30,40]]) == [[20,10],[40,30]]);']
```"
889, this   function to find the index of an extra element present in one sorted array.,"```javascript
function find_Extra(arr1, arr2, n) {
    for (let i = 0; i < n; i++) {
        if (arr1[i] !== arr2[i]) {
            return i;
        }
    }
    return n;
}
```",890,"```javascript
['console.assert(find_Extra([1,2,3,4],[1,2,3],3) === 3)', 'console.assert(find_Extra([2,4,6,8,10],[2,4,6,8],4) === 4)', 'console.assert(find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) === 5)']
```"
890, this   function to check whether the given two numbers have same number of digits or not.,"```javascript
function same_Length(A, B) {
    while (A > 0 && B > 0) {
        A = A / 10;
        B = B / 10;
    }
    if (A === 0 && B === 0) {
        return true;
    }
    return false;
}
```",891,"```javascript
['console.assert(same_Length(12, 1) === false)', 'console.assert(same_Length(2, 2) === true)', 'console.assert(same_Length(10, 20) === true)'];
```"
891, this function to remove multiple spaces in a string.,"```javascript
function removeSpaces(text) {
    return text.replace(/ +/g, ' ');
}
```",892,"```javascript
[""console.assert(remove_spaces('   program') === '  program')"", ""console.assert(remove_spaces('    programming    language') === '  programming language')"", ""console.assert(remove_spaces('                      program') === '  program')""]
```"
892, this   function to get the last element of each sublist.,"```javascript
function Extract(lst) { 
    return lst.map(item => item[item.length - 1]); 
}
```",893,"```javascript
['console.assert(Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) === [3, 5, 9])', ""console.assert(Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) === ['z', 'm', 'b', 'v'])"", 'console.assert(Extract([[1, 2, 3], [4, 5]]) === [3, 5])']
```"
893, this function to convert the given string of float type into tuple.,"```javascript
function floatToTuple(testStr) {
  const res = testStr.split(', ').map(parseFloat);
  return [res];
}
```",894,"```javascript
['console.assert(float_to_tuple(""1.2, 1.3, 2.3, 2.4, 6.5"").toString() === (1.2, 1.3, 2.3, 2.4, 6.5).toString())', 'console.assert(float_to_tuple(""2.3, 2.4, 5.6, 5.4, 8.9"").toString() === (2.3, 2.4, 5.6, 5.4, 8.9).toString())', 'console.assert(float_to_tuple(""0.3, 0.5, 7.8, 9.4"").toString() === (0.3, 0.5, 7.8, 9.4).toString())']
```"
894, this function to find the maximum sum of subsequences of given array with no adjacent elements.,"```javascript
function max_sum_subseq(A) {
    let n = A.length;
    if (n === 1) {
        return A[0];
    }
    let look_up = new Array(n);
    look_up[0] = A[0];
    look_up[1] = Math.max(A[0], A[1]);
    for (let i = 2; i < n; i++) {
        look_up[i] = Math.max(look_up[i - 1], look_up[i - 2] + A[i]);
        look_up[i] = Math.max(look_up[i], A[i]);
    }
    return look_up[n - 1];
}
```",895,"```javascript
['console.assert(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) === 26)', 'console.assert(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) === 28)', 'console.assert(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) === 44)']
```"
895, this function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"```javascript
function last(n) {
    return n[n.length - 1];
}

function sortListLast(tuples) {
    return tuples.sort((a, b) => last(a) - last(b));
}
```",896,"```javascript
console.assert(JSON.stringify(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])) === JSON.stringify([(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]));
console.assert(JSON.stringify(sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])) === JSON.stringify([(1,2), (3,5), (4,7), (9,8), (7,9)]));
console.assert(JSON.stringify(sort_list_last([(20,50), (10,20), (40,40)])) === JSON.stringify([(10,20),(40,40),(20,50)]));
```"
896, this   function to check whether the word is present in a given sentence or not.,"```javascript
function isWordPresent(sentence, word) {
    let s = sentence.split("" "");
    for (let i of s) {
        if (i === word) {
            return true;
        }
    }
    return false;
}
```",897,"```javascript
['console.assert(is_Word_Present(""machine learning"", ""machine"") === true)', 'console.assert(is_Word_Present(""easy"", ""fun"") === false)', 'console.assert(is_Word_Present(""  language"", ""code"") === false)']
```"
897," this function to extract specified number of elements from a given list, which follow each other continuously.","```javascript
function extractElements(numbers, n) {
    const grouped = {};
    for (const num of numbers) {
        if (!grouped[num]) {
            grouped[num] = 0;
        }
        grouped[num]++;
    }
    const result = Object.keys(grouped).filter(key => grouped[key] === n);
    return result;
}
```",898,"```javascript
['console.assert(extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2).toString() === [1, 4].toString())', 'console.assert(extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4).toString() === [4].toString())', 'console.assert(extract_elements([0, 0, 0, 0, 0], 5).toString() === [0].toString())']
```"
898, this   function to check whether an array can be sorted or not by picking only the corner elements.,"```javascript
function check(arr, n) { 
    let g = 0; 
    for (let i = 1; i < n; i++) { 
        if (arr[i] - arr[i - 1] > 0 && g === 1) { 
            return false; 
        } 
        if (arr[i] - arr[i] < 0) { 
            g = 1; 
        } 
    } 
    return true; 
}
```",899,"```javascript
['console.assert(check([3,2,1,2,3,4],6) === true)', 'console.assert(check([2,1,4,5,1],5) === true)', 'console.assert(check([1,2,2,1,2,3],6) === true)']
```"
899, this function where a string will start with a specific number.,"```javascript
function match_num(string) {
    const text = /^5/;
    if (text.test(string)) {
        return true;
    } else {
        return false;
    }
}
```",900,"```javascript
[""console.assert(match_num('5-2345861') === true)"", ""console.assert(match_num('6-2345861') === false)"", ""console.assert(match_num('78910') === false)""];
```"
900, this function to find the smallest multiple of the first n numbers.,"```javascript
function smallestMultiple(n) {
    if (n <= 2) {
        return n;
    }
    let i = n * 2;
    let factors = [];
    for (let number = n; number > 1; number--) {
        if (number * 2 > n) {
            factors.push(number);
        }
    }
    while (true) {
        for (let a of factors) {
            if (i % a !== 0) {
                i += n;
                break;
            }
            if (a === factors[factors.length - 1] && i % a === 0) {
                return i;
            }
        }
    }
}
```",901,"```javascript
['console.assert(smallest_multiple(13) === 360360)', 'console.assert(smallest_multiple(2) === 2)', 'console.assert(smallest_multiple(1) === 1)'];
```"
901, this function to combine two dictionaries by adding values for common keys.,"```javascript
function addDict(d1, d2) {
    const addDict = { ...d1 };

    for (const key in d2) {
        if (addDict.hasOwnProperty(key)) {
            addDict[key] += d2[key];
        } else {
            addDict[key] = d2[key];
        }
    }
    
    return addDict;
}
```",902,"```javascript
[""console.assert(JSON.stringify(add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})) === JSON.stringify({'b': 400, 'd': 400, 'a': 400, 'c': 300}) )"", ""console.assert(JSON.stringify(add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})) === JSON.stringify({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) )"", ""console.assert(JSON.stringify(add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})) === JSON.stringify({'b': 1800, 'd': 1800, 'a': 1800}) )""]
```"
902, this   function to count the total unset bits from 1 to n.,"```javascript
function count_Unset_Bits(n) {  
    let cnt = 0;  
    for (let i = 1; i <= n; i++) {  
        let temp = i;  
        while (temp) {  
            if (temp % 2 === 0) {  
                cnt++;  
            }  
            temp = Math.floor(temp / 2);  
        }  
    }  
    return cnt;  
}
```",903,"```javascript
['console.assert(count_Unset_Bits(2) === 1)', 'console.assert(count_Unset_Bits(5) === 4)', 'console.assert(count_Unset_Bits(14) === 17)']
```"
903, this function to return true if the given number is even else return false.,"```javascript
function evenNum(x) {
  if (x % 2 === 0) {
    return true;
  } else {
    return false;
  }
}
```",904,"```javascript
['console.assert(even_num(13.5) === false)', 'console.assert(even_num(0) === true)', 'console.assert(even_num(-9) === false)']
```"
904, this   function to find the sum of squares of binomial co-efficients.,"```javascript
function factorial(start, end) { 
    let res = 1; 
    for (let i = start; i <= end; i++) { 
        res *= i;      
    } 
    return res; 
}

function sumOfSquare(n) { 
    return Math.floor(factorial(n + 1, 2 * n) / factorial(1, n)); 
}
```",905,"```javascript
['console.assert(sum_of_square(4) === 70)', 'console.assert(sum_of_square(5) === 252)', 'console.assert(sum_of_square(2) === 6)']
```"
905," this function to extract year, month and date from a url by using regex.","```javascript
function extractDate(url) {
    return url.match(/\/(\d{4})\/(\d{1,2})\/(\d{1,2})\//g);
}
```",906,"```javascript
['console.assert(JSON.stringify(extract_date(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"")) === JSON.stringify([\'2016\', \'09\', \'02\']))', 'console.assert(JSON.stringify(extract_date(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"")) === JSON.stringify([\'2020\', \'11\', \'03\']))', 'console.assert(JSON.stringify(extract_date(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"")) === JSON.stringify([\'2020\', \'12\', \'29\']))']
```"
906, this function to print the first n lucky numbers.,"```javascript
function luckyNum(n) {
    let List = Array.from({length: n * n + 10}, (_, index) => -1 + index * 2);
    let i = 2;
    while (List.slice(i).length) {
        List = Array.from(new Set(List.filter((_, index) => index % List[i] !== 0))).sort((a, b) => a - b);
        i++;
    }
    return List.slice(1, n + 1);
}
```",907,"```javascript
['console.assert(lucky_num(10).toString() === [1, 3, 7, 9, 13, 15, 21, 25, 31, 33].toString())', 'console.assert(lucky_num(5).toString() === [1, 3, 7, 9, 13].toString())', 'console.assert(lucky_num(8).toString() === [1, 3, 7, 9, 13, 15, 21, 25].toString())']
```"
907, this function to find the fixed point in the given array.,"```javascript
function findFixedPoint(arr, n) {
    for (let i = 0; i < n; i++) {
        if (arr[i] === i) {
            return i;
        }
    }
    return -1;
}
```",908,"```javascript
console.assert(find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9) === 3);
console.assert(find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8], 8) === -1);
console.assert(find_fixed_point([0, 2, 5, 8, 17], 5) === 0);
```"
908, this function to find the previous palindrome of a specified number.,"```javascript
function previousPalindrome(num) {
    for (let x = num - 1; x > 0; x--) {
        if (String(x) === String(x).split('').reverse().join('')) {
            return x;
        }
    }
}
```",909,"```javascript
['console.assert(previous_palindrome(99) === 88)', 'console.assert(previous_palindrome(1221) === 1111)', 'console.assert(previous_palindrome(120) === 111)']
```"
909, this function to validate a gregorian date.,"```javascript
function checkDate(m, d, y) {
    try {
        m = parseInt(m);
        d = parseInt(d);
        y = parseInt(y);
        new Date(y, m - 1, d); // Note: month is 0-indexed in JavaScript
        return true;
    } catch (error) {
        return false;
    }
}
```",910,"```javascript
['console.assert(check_date(11, 11, 2002) === true)', 'console.assert(check_date(13, 11, 2002) === false)', ""console.assert(check_date('11', '11', '2002') === true)""];
```"
910, this function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"```javascript
function maximumProduct(nums) {
    const a = nums.slice().sort((x, y) => y - x).slice(0, 3);
    const b = nums.slice().sort((x, y) => x - y).slice(0, 2);
    return Math.max(a[0] * a[1] * a[2], a[0] * b[0] * b[1]);
}
```",911,"```javascript
['console.assert(maximum_product([12, 74, 9, 50, 61, 41]) === 225700)', 'console.assert(maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58]) === 414375)', 'console.assert(maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) === 2520)']
```"
911," this function to find ln, m lobb number.","```javascript
function binomialCoeff(n, k) {
    let C = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));
    for (let i = 0; i <= n; i++) {
        for (let j = 0; j <= Math.min(i, k); j++) {
            if (j === 0 || j === i) {
                C[i][j] = 1;
            } else {
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
            }
        }
    }
    return C[n][k];
}

function lobbNum(n, m) {
    return ((2 * m + 1) * binomialCoeff(2 * n, m + n)) / (m + n + 1);
}
```",912,"```javascript
['console.assert(parseInt(lobb_num(5, 3)) === 35)', 'console.assert(parseInt(lobb_num(3, 2)) === 5)', 'console.assert(parseInt(lobb_num(4, 2)) === 20)']
```"
912, this function to check for a number at the end of a string.,"```javascript
function endNum(string) {
    var text = /.*[0-9]$/;
    if (text.test(string)) {
        return true;
    } else {
        return false;
    }
}
```",913,"```javascript
[""console.assert(end_num('abcdef') === false)"", ""console.assert(end_num('abcdef7') === true)"", ""console.assert(end_num('abc') === false)""]
```"
913, this   function to check whether the given string is made up of two alternating characters or not.,"```javascript
function is_Two_Alter(s) {  
    for (let i = 0; i < s.length - 2; i++) { 
        if (s[i] !== s[i + 2]) { 
            return false;
        }
    }
    if (s[0] === s[1]) { 
        return false;
    }
    return true;
}
```",914,"```javascript
['console.assert(is_Two_Alter(""abab"") === true)', 'console.assert(is_Two_Alter(""aaaa"") === false)', 'console.assert(is_Two_Alter(""xyz"") === false)'];
```"
914, this function to rearrange positive and negative numbers in a given array using lambda function.,"```javascript
function rearrangeNumbs(arrayNums) {
  const result = arrayNums.sort((a, b) => (a === 0 ? 0 : -1 / a) - (b === 0 ? 0 : -1 / b));
  return result;
}
```",915,"```javascript
assert(rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10]).toString() === [2, 5, 7, 8, 9, -10, -3, -1].toString());
assert(rearrange_numbs([10, 15, 14, 13, -18, 12, -20]).toString() === [10, 12, 13, 14, 15, -20, -18].toString());
assert(rearrange_numbs([-20, 20, -10, 10, -30, 30]).toString() === [10, 20, 30, -30, -20, -10].toString());
```"
915, this function to find if there is a triplet in the array whose sum is equal to a given value.,"```javascript
function findTripletArray(A, arrSize, sum) {
    for (let i = 0; i < arrSize - 2; i++) {
        for (let j = i + 1; j < arrSize - 1; j++) {
            for (let k = j + 1; k < arrSize; k++) {
                if (A[i] + A[j] + A[k] === sum) {
                    return [A[i], A[j], A[k]];
                }
            }
        }
    }
    return false;
}
```",916,"```javascript
['console.assert(find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) === (4, 10, 8))', 'console.assert(find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) === (12, 3, 9))', 'console.assert(find_triplet_array([1, 2, 3, 4, 5], 5, 9) === (1, 3, 5))']
```"
916, this function to find the sequences of one upper case letter followed by lower case letters.,"```javascript
function textUppercaseLowercase(text) {
    const patterns = /[A-Z]+[a-z]+$/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",917,"```javascript
['console.assert(text_uppercase_lowercase(""AaBbGg"") === ""Found a match!"")', 'console.assert(text_uppercase_lowercase(""aA"") === ""Not matched!"")', 'console.assert(text_uppercase_lowercase("" "") === ""Not matched!"")']
```"
917, this function to count coin change.,"```javascript
function coinChange(S, m, n) {
    let table = Array.from({ length: n + 1 }, () => Array(m).fill(0));
    for (let i = 0; i < m; i++) {
        table[0][i] = 1;
    }
    for (let i = 1; i <= n; i++) {
        for (let j = 0; j < m; j++) {
            let x = (i - S[j] >= 0) ? table[i - S[j]][j] : 0;
            let y = (j >= 1) ? table[i][j - 1] : 0;
            table[i][j] = x + y;
        }
    }
    return table[n][m - 1];
}
```",918,"```javascript
['console.assert(coin_change([1, 2, 3], 3, 4) === 4)', 'console.assert(coin_change([4, 5, 6, 7, 8, 9], 6, 9) === 2)', 'console.assert(coin_change([4, 5, 6, 7, 8, 9], 6, 4) === 1)']
```"
918, this   function to multiply all items in the list.,"```javascript
function multiplyList(items) {
    let tot = 1;
    for (let x of items) {
        tot *= x;
    }
    return tot;
}
```",919,"```javascript
['console.assert(multiply_list([1, -2, 3]) === -6)', 'console.assert(multiply_list([1, 2, 3, 4]) === 24)', 'console.assert(multiply_list([3, 1, 2, 3]) === 18)']
```"
919, this function to remove all tuples with all none values in the given tuple list.,"```javascript
function removeTuple(testList) {
  const res = testList.filter(sub => !sub.every(ele => ele === null));
  return res.toString();
}
```",920,"```javascript
console.assert(JSON.stringify(remove_tuple([(null, 2), (null, null), (3, 4), (12, 3), (null)])) === '[[null, 2], [3, 4], [12, 3]]');
console.assert(JSON.stringify(remove_tuple([(null, null), (null, null), (3, 6), (17, 3), (null, 1)])) === '[[3, 6], [17, 3], [null, 1]]');
console.assert(JSON.stringify(remove_tuple([(1, 2), (2, null), (3, null), (24, 3), (null, null)])) === '[[1, 2], [2, null], [3, null], [24, 3]]');
```"
920, this function to perform chunking of tuples each of size n.,"```javascript
function chunkTuples(testTup, N) {
  let res = [];
  for (let i = 0; i < testTup.length; i += N) {
    res.push(testTup.slice(i, i + N));
  }
  return res;
}
```",921,"```javascript
['console.assert(JSON.stringify(chunk_tuples([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)) === JSON.stringify([[10, 4, 5], [6, 7, 6], [8, 3, 4]]))', 
 'console.assert(JSON.stringify(chunk_tuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)) === JSON.stringify([[1, 2], [3, 4], [5, 6], [7, 8], [9]]))', 
 'console.assert(JSON.stringify(chunk_tuples([11, 14, 16, 17, 19, 21, 22, 25], 4)) === JSON.stringify([[11, 14, 16, 17], [19, 21, 22, 25]]))']
```"
921, this function to find a pair with the highest product from a given array of integers.,"```javascript
function maxProduct(arr) { 
    var arrLen = arr.length; 
    if (arrLen < 2) { 
        return null;     
    }     
    var x = arr[0]; 
    var y = arr[1];    
    for (var i = 0; i < arrLen; i++) { 
        for (var j = i + 1; j < arrLen; j++) { 
            if (arr[i] * arr[j] > x * y) { 
                x = arr[i]; 
                y = arr[j]; 
            } 
        } 
    } 
    return [x, y]; 
}
```",922,"```javascript
['console.assert(max_product([1, 2, 3, 4, 7, 0, 8, 4]) === (7, 8));', 'console.assert(max_product([0, -1, -2, -4, 5, 0, -6]) === (-4, -6));', 'console.assert(max_product([1, 3, 5, 6, 8, 9]) === (8, 9));']
```"
922, this function to find the length of the shortest string that has both str1 and str2 as subsequences.,"```javascript
function super_seq(X, Y, m, n) {
    if (m === 0) {
        return n;
    }
    if (n === 0) {
        return m;
    }
    if (X[m - 1] === Y[n - 1]) {
        return 1 + super_seq(X, Y, m - 1, n - 1);
    }
    return 1 + Math.min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1));
}
```",923,"```javascript
['console.assert(super_seq(""AGGTAB"", ""GXTXAYB"", 6, 7) === 9)', 'console.assert(super_seq(""feek"", ""eke"", 4, 3) === 5)', 'console.assert(super_seq(""PARRT"", ""RTA"", 5, 3) === 6)']
```"
923, this function to find maximum of two numbers.,"```javascript
function maxOfTwo(x, y) {
    if (x > y) {
        return x;
    }
    return y;
}
```",924,"```javascript
['console.assert(max_of_two(10,20)===20)', 'console.assert(max_of_two(19,15)===19)', 'console.assert(max_of_two(-10,-20)===-10)']
```"
924, this   function to calculate the product of all the numbers of a given tuple.,"```javascript
function multipleTuple(nums) {
    let temp = Array.from(nums);
    let product = 1;
    for (let x of temp) {
        product *= x;
    }
    return [product];
}
```",925,"```javascript
['console.assert(mutiple_tuple([4, 3, 2, 2, -1, 18]) === -864)', 'console.assert(mutiple_tuple([1, 2, 3]) === 6)', 'console.assert(mutiple_tuple([-2, -4, -6]) === -48)']
```"
925, this function to find n-th rencontres number.,"```javascript
function binomial_coeffi(n, k) { 
    if (k === 0 || k === n) { 
        return 1; 
    } 
    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k); 
}

function rencontres_number(n, m) { 
    if (n === 0 && m === 0) { 
        return 1; 
    }
    if (n === 1 && m === 0) { 
        return 0; 
    } 
    if (m === 0) { 
        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)); 
    } 
    return binomial_coeffi(n, m) * rencontres_number(n - m, 0); 
}
```",926,"```javascript
['console.assert(rencontres_number(7, 2) === 924)', 'console.assert(rencontres_number(3, 0) === 2)', 'console.assert(rencontres_number(3, 1) === 3)']
```"
926, this function to calculate the height of the given binary tree.,"```javascript
class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function maxHeight(node) {
    if (node === null) {
        return 0;
    } else {
        const leftHeight = maxHeight(node.left);
        const rightHeight = maxHeight(node.right);
        return Math.max(leftHeight, rightHeight) + 1;
    }
}
```",927,"```javascript
['console.assert(max_height(root) === 3)', 'console.assert(max_height(root1) === 5)', 'console.assert(max_height(root2) === 4)']
```"
927, this function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"```javascript
function changeDateFormat(dt) {
    return dt.replace(/(\d{4})-(\d{1,2})-(\d{1,2})/, '$3-$2-$1');
}
```",928,"```javascript
[""console.assert(change_date_format('2026-01-02') === '02-01-2026')"", ""console.assert(change_date_format('2021-01-04') === '04-01-2021')"", ""console.assert(change_date_format('2030-06-06') === '06-06-2030')""]
```"
928, this function to count repeated items of a tuple.,"```javascript
function countTuplex(tuplex, value) {
    const count = tuplex.filter(item => item === value).length;
    return [count];
}
```",929,"```javascript
['console.assert(count_tuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 4) === 3)', 'console.assert(count_tuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 2) === 2)', 'console.assert(count_tuplex([2, 4, 7, 7, 7, 3, 4, 4, 7], 7) === 4)']
```"
929, this function that matches a string that has an a followed by zero or more b's by using regex.,"```javascript
function textMatch(text) {
    const patterns = /ab*?/;
    if (patterns.test(text)) {
        return 'Found a match!';
    } else {
        return 'Not matched!';
    }
}
```",930,"```javascript
['console.assert(text_match(""msb"") === ""Not matched!"");', 'console.assert(text_match(""a0c"") === ""Found a match!"");', 'console.assert(text_match(""abbc"") === ""Found a match!"");']
```"
930, this function to calculate the sum of series 1³+2³+3³+….+n³.,"```javascript
function sumSeries(number) {
    let total = 0;
    total = Math.pow((number * (number + 1)) / 2, 2);
    return total;
}
```",931,"```javascript
['console.assert(sum_series(7) === 784)', 'console.assert(sum_series(5) === 225)', 'console.assert(sum_series(15) === 14400)']
```"
931, this function to remove duplicate words from a given list of strings.,"```javascript
function removeDuplicList(l) {
    let temp = [];
    for (let x of l) {
        if (!temp.includes(x)) {
            temp.push(x);
        }
    }
    return temp;
}
```",932,"```javascript
assert(remove_duplic_list(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""]) === [' ', 'Exercises', 'Practice', 'Solution']);
assert(remove_duplic_list(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"", ""Java""]) === [' ', 'Exercises', 'Practice', 'Solution', 'Java']);
assert(remove_duplic_list(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"", ""C++"", ""C"", ""C++""]) === [' ', 'Exercises', 'Practice', 'Solution', 'C++', 'C']);
```"
932, this function to convert camel case string to snake case string by using regex.,"```javascript
function camelToSnake(text) {
  let str1 = text.replace(/(.)([A-Z][a-z]+)/g, '$1_$2');
  return str1.replace(/([a-z0-9])([A-Z])/g, '$1_$2').toLowerCase();
}
```",933,"```javascript
[""console.assert(camel_to_snake('GoogleAssistant') === 'google_assistant')"", ""console.assert(camel_to_snake('ChromeCast') === 'chrome_cast')"", ""console.assert(camel_to_snake('QuadCore') === 'quad_core')""]
```"
933, this function to find the nth delannoy number.,"```javascript
function dealnnoy_num(n, m) {
    if (m === 0 || n === 0) {
        return 1;
    }
    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1);
}
```",934,"```javascript
['console.assert(dealnnoy_num(3, 4) === 129)', 'console.assert(dealnnoy_num(3, 3) === 63)', 'console.assert(dealnnoy_num(4, 5) === 681)'];
```"
934, this function to calculate the sum of series 1²+2²+3²+….+n².,"```javascript
function seriesSum(number) {
    let total = 0;
    total = (number * (number + 1) * (2 * number + 1)) / 6;
    return total;
}
```",935,"```javascript
['console.assert(series_sum(6) === 91)', 'console.assert(series_sum(7) === 140)', 'console.assert(series_sum(12) === 650)']
```"
935, this function to re-arrange the given tuples based on the given ordered list.,"```javascript
function re_arrange_tuples(test_list, ord_list) {
    let temp = Object.fromEntries(test_list);
    let res = ord_list.map(key => [key, temp[key]]);
    return res;
}
```",936,"```javascript
console.assert(JSON.stringify(re_arrange_tuples([[4, 3], [1, 9], [2, 10], [3, 2]], [1, 4, 2, 3])) === JSON.stringify([[1, 9], [4, 3], [2, 10], [3, 2]]));
console.assert(JSON.stringify(re_arrange_tuples([[5, 4], [2, 10], [3, 11], [4, 3]], [3, 4, 2, 3])) === JSON.stringify([[3, 11], [4, 3], [2, 10], [3, 11]]));
console.assert(JSON.stringify(re_arrange_tuples([[6, 3], [3, 8], [5, 7], [2, 4]], [2, 5, 3, 6])) === JSON.stringify([[2, 4], [5, 7], [3, 8], [6, 3]]));
```"
936, this function to count the most common character in a given string.,"```javascript
function maxChar(str1) {
    const temp = {};
    for (let char of str1) {
        temp[char] = (temp[char] || 0) + 1;
    }
    return Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);
}
```",937,"```javascript
['console.assert(max_char(""hello world"") === (""l""))', 'console.assert(max_char(""hello "") === (""l""))', 'console.assert(max_char(""  pr"") === (""p""))']
```"
937, this function to find three closest elements from three sorted arrays.,"```javascript
function findClosest(A, B, C, p, q, r) {
    let diff = Number.MAX_SAFE_INTEGER;
    let res_i = 0, res_j = 0, res_k = 0;
    let i = 0, j = 0, k = 0;

    while (i < p && j < q && k < r) {
        let minimum = Math.min(A[i], Math.min(B[j], C[k]));
        let maximum = Math.max(A[i], Math.max(B[j], C[k]));
        
        if (maximum - minimum < diff) {
            res_i = i;
            res_j = j;
            res_k = k;
            diff = maximum - minimum;
        }
        
        if (diff === 0) {
            break;
        }
        
        if (A[i] === minimum) {
            i++;
        } else if (B[j] === minimum) {
            j++;
        } else {
            k++;
        }
    }

    return [A[res_i], B[res_j], C[res_k]];
}
```",938,"```javascript
['console.assert(find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) === 10 && find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) === 15 && find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2) === 10)', 'console.assert(find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5) === 24 && find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5) === 22 && find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5) === 23)', 'console.assert(find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2) === 11 && find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2) === 16 && find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2) === 11)'];
```"
938, this function to sort a list of dictionaries using lambda function.,"```javascript
function sortedModels(models) {
    const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color));
    return [sortedModels];
}
```",939,"```javascript
assert(sorted_models([{make: 'Nokia', model: 216, color: 'Black'}, {make: 'Mi Max', model: 2, color: 'Gold'}, {make: 'Samsung', model: 7, color: 'Blue'}]) === [{make: 'Nokia', model: 216, color: 'Black'}, {make: 'Samsung', model: 7, color: 'Blue'}, {make: 'Mi Max', model: 2, color: 'Gold'}]);

assert(sorted_models([{make: 'Vivo', model: 20, color: 'Blue'}, {make: 'oppo', model: 17, color: 'Gold'}, {make: 'Apple', model: 11, color: 'red'}]) === [{make: 'Vivo', model: 20, color: 'Blue'}, {make: 'oppo', model: 17, color: 'Gold'}, {make: 'Apple', model: 11, color: 'red'}]);

assert(sorted_models([{make: 'micromax', model: 40, color: 'grey'}, {make: 'poco', model: 60, color: 'blue'}]) === [{make: 'poco', model: 60, color: 'blue'}, {make: 'micromax', model: 40, color: 'grey'}]);
```"
939, this function to sort the given array by using heap sort.,"```javascript
function heapSort(arr) {
    heapify(arr);
    let end = arr.length - 1;
    while (end > 0) {
        [arr[end], arr[0]] = [arr[0], arr[end]];
        shiftDown(arr, 0, end - 1);
        end--;
    }
    return arr;
}

function heapify(arr) {
    let start = Math.floor(arr.length / 2);
    while (start >= 0) {
        shiftDown(arr, start, arr.length - 1);
        start--;
    }
}

function shiftDown(arr, start, end) {
    let root = start;
    while (root * 2 + 1 <= end) {
        let child = root * 2 + 1;
        if (child + 1 <= end && arr[child] < arr[child + 1]) {
            child++;
        }
        if (child <= end && arr[root] < arr[child]) {
            [arr[root], arr[child]] = [arr[child], arr[root]];
            root = child;
        } else {
            return;
        }
    }
}
```",940,"```javascript
['console.assert(JSON.stringify(heap_sort([12, 2, 4, 5, 2, 3])) === JSON.stringify([2, 2, 3, 4, 5, 12])', 'console.assert(JSON.stringify(heap_sort([32, 14, 5, 6, 7, 19])) === JSON.stringify([5, 6, 7, 14, 19, 32])', 'console.assert(JSON.stringify(heap_sort([21, 15, 29, 78, 65])) === JSON.stringify([15, 21, 29, 65, 78])']
```"
940, this function to count the elements in a list until an element is a tuple.,"```javascript
function countElim(num) {
    let countElim = 0;
    for (let n of num) {
        if (Array.isArray(n) && n.length === 2) {
            break;
        }
        countElim += 1;
    }
    return countElim;
}
```",941,"```javascript
console.assert(count_elim([10, 20, 30, [10, 20], 40]) === 3);
console.assert(count_elim([10, [20, 30], [10, 20], 40]) === 1);
console.assert(count_elim([[10, [20, 30, [10, 20], 40]]]) === 0);
```"
941, this function to check if any list element is present in the given list.,"```javascript
function checkElement(testTup, checkList) {
  let res = false;
  for (let ele of checkList) {
    if (testTup.includes(ele)) {
      res = true;
      break;
    }
  }
  return res;
}
```",942,"```javascript
console.assert(check_element([4, 5, 7, 9, 3], [6, 7, 10, 11]) === true);
console.assert(check_element([1, 2, 3, 4], [4, 6, 7, 8, 9]) === true);
console.assert(check_element([3, 2, 1, 4, 5], [9, 8, 7, 6]) === false);
```"
942, this function to combine two given sorted lists using heapq module.,"```javascript
function combineLists(num1, num2) {
  return Array.from(new Set([...num1, ...num2])).sort((a, b) => a - b);
}
```",943,"```javascript
['console.assert(combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10]).toString() === [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].toString())', 'console.assert(combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11]).toString() === [1, 2, 3, 5, 5, 6, 7, 8, 9, 11].toString())', 'console.assert(combine_lists([1, 3, 7], [2, 4, 6]).toString() === [1, 2, 3, 4, 6, 7].toString())']
```"
943, this function to separate and print the numbers and their position of a given string.,"```javascript
function numPosition(text) {
    const regex = /\d+/g;
    const match = regex.exec(text);
    if (match) {
        return match.index;
    }
}
```",944,"```javascript
['console.assert(num_position(""there are 70 flats in this apartment"") === 10)', 'console.assert(num_position(""every adult have 32 teeth"") === 17)', 'console.assert(num_position(""isha has 79 chocolates in her bag"") === 9)']
```"
944, this function to convert the given tuples into set.,"```javascript
function tupleToSet(t) {
  const s = new Set(t);
  return s;
}
```",945,"```javascript
[""console.assert(tupleToSet(['x', 'y', 'z']).has('y') && tupleToSet(['x', 'y', 'z']).has('x') && tupleToSet(['x', 'y', 'z']).has('z'))"", ""console.assert(tupleToSet(['a', 'b', 'c']).has('c') && tupleToSet(['a', 'b', 'c']).has('a') && tupleToSet(['a', 'b', 'c']).has('b'))"", ""console.assert(tupleToSet(['z', 'd', 'e']).has('d') && tupleToSet(['z', 'd', 'e']).has('e') && tupleToSet(['z', 'd', 'e']).has('z'))""]
```"
945, this function to find the most common elements and their counts of a specified text.,"```javascript
function mostCommonElem(s, a) {
  const count = {};
  s.forEach(elem => {
    count[elem] = (count[elem] || 0) + 1;
  });
  
  const sorted = Object.entries(count).sort((a, b) => b[1] - a[1]);
  return sorted.slice(0, a);
}
```",946,"```javascript
console.assert(JSON.stringify(most_common_elem('lkseropewdssafsdfafkpwe', 3)) === JSON.stringify([['s', 4], ['e', 3], ['f', 3]]));
console.assert(JSON.stringify(most_common_elem('lkseropewdssafsdfafkpwe', 2)) === JSON.stringify([['s', 4], ['e', 3]]));
console.assert(JSON.stringify(most_common_elem('lkseropewdssafsdfafkpwe', 7)) === JSON.stringify([['s', 4], ['e', 3], ['f', 3], ['k', 2], ['p', 2], ['w', 2], ['d', 2]]));
```"
946, this   function to find the length of the shortest word.,"```javascript
function len_log(list1) {
    let min = list1[0].length;
    for (let i of list1) {
        if (i.length < min) {
            min = i.length;
        }
    }
    return min;
}
```",947,"```javascript
['console.assert(len_log([""win"",""lose"",""great""]) === 3)', 'console.assert(len_log([""a"",""ab"",""abc""]) === 1)', 'console.assert(len_log([""12"",""12"",""1234""]) === 2)']
```"
947, this function to get an item of a tuple.,"```javascript
function getItem(tup1, index) {
  const item = tup1[index];
  return item;
}
```",948,"```javascript
['console.assert(get_item([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 3) === ""e"")', 'console.assert(get_item([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], -4) === ""u"")', 'console.assert(get_item([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], -3) === ""r"")']
```"
948, this function to sort the given tuple list basis the total digits in tuple.,"```javascript
function countDigs(tup) {
  return tup.reduce((sum, ele) => sum + ele.toString().length, 0);
}

function sortList(testList) {
  testList.sort((a, b) => countDigs([a]) - countDigs([b]));
  return testList.toString();
}
```",949,"```javascript
console.assert(JSON.stringify(sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])) === JSON.stringify([(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]));
console.assert(JSON.stringify(sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])) === JSON.stringify([(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]));
console.assert(JSON.stringify(sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])) === JSON.stringify([(1, 2), (145,), (134, 23), (34, 4, 61, 723)]));
```"
949, this function to display sign of the chinese zodiac for given year.,"```javascript
function chineseZodiac(year) {
    let sign;
    if ((year - 2000) % 12 === 0) {
        sign = 'Dragon';
    } else if ((year - 2000) % 12 === 1) {
        sign = 'Snake';
    } else if ((year - 2000) % 12 === 2) {
        sign = 'Horse';
    } else if ((year - 2000) % 12 === 3) {
        sign = 'Sheep';
    } else if ((year - 2000) % 12 === 4) {
        sign = 'Monkey';
    } else if ((year - 2000) % 12 === 5) {
        sign = 'Rooster';
    } else if ((year - 2000) % 12 === 6) {
        sign = 'Dog';
    } else if ((year - 2000) % 12 === 7) {
        sign = 'Pig';
    } else if ((year - 2000) % 12 === 8) {
        sign = 'Rat';
    } else if ((year - 2000) % 12 === 9) {
        sign = 'Ox';
    } else if ((year - 2000) % 12 === 10) {
        sign = 'Tiger';
    } else {
        sign = 'Hare';
    }
    return sign;
}
```",950,"```javascript
[""console.assert(chinese_zodiac(1997) === 'Ox')"", ""console.assert(chinese_zodiac(1998) === 'Tiger')"", ""console.assert(chinese_zodiac(1994) === 'Dog')""]
```"
950, this function to find the maximum of similar indices in two lists of tuples.,"```javascript
function max_similar_indices(test_list1, test_list2) {
    const res = test_list1.map((x, index) => {
        const y = test_list2[index];
        return [Math.max(x[0], y[0]), Math.max(x[1], y[1])];
    });
    return res;
}
```",951,"```javascript
['console.assert(max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) === [(5, 4), (8, 10), (8, 14)])', 
 'console.assert(max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) === [(6, 5), (9, 11), (9, 15)])', 
 'console.assert(max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) === [(7, 6), (10, 12), (10, 16)])']
```"
951, this function to compute the value of ncr mod p.,"```javascript
function nCr_mod_p(n, r, p) {
    if (r > n - r) {
        r = n - r;
    }
    let C = new Array(r + 1).fill(0);
    C[0] = 1;
    for (let i = 1; i <= n; i++) {
        for (let j = Math.min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}
```",952,"```javascript
['console.assert(nCr_mod_p(10, 2, 13) === 6)', 'console.assert(nCr_mod_p(11, 3, 14) === 11)', 'console.assert(nCr_mod_p(18, 14, 19) === 1)']
```"
952, this   function to find the minimun number of subsets with distinct elements.,"```javascript
function subset(ar, n) {
    let res = 0;
    ar.sort((a, b) => a - b);
    for (let i = 0; i < n; i++) {
        let count = 1;
        for (let j = i + 1; j < n; j++) {
            if (ar[i] === ar[j]) {
                count++;
            } else {
                break;
            }
        }
        res = Math.max(res, count);
    }
    return res;
}
```",953,"```javascript
['console.assert(subset([1, 2, 3, 4], 4) === 1)', 'console.assert(subset([5, 6, 9, 3, 4, 3, 4], 7) === 2)', 'console.assert(subset([1, 2, 3], 3) === 1)']
```"
953, this function that gives profit amount if the given amount has profit else return none.,"```javascript
function profitAmount(actualCost, saleAmount) {
    if (actualCost > saleAmount) {
        let amount = actualCost - saleAmount;
        return amount;
    } else {
        return null;
    }
}
```",954,"```javascript
['console.assert(profit_amount(1500,1200) === 300)', 'console.assert(profit_amount(100,200) === null)', 'console.assert(profit_amount(2000,5000) === null)']
```"
954," this function to find out, if the given number is abundant.","```javascript
function isAbundant(n) {
    let fctrsum = 0;
    for (let fctr = 1; fctr < n; fctr++) {
        if (n % fctr === 0) {
            fctrsum += fctr;
        }
    }
    return fctrsum > n;
}
```",955,"```javascript
console.assert(is_abundant(12) === true);
console.assert(is_abundant(13) === false);
console.assert(is_abundant(9) === false);
```"
955, this function to split the given string at uppercase letters by using regex.,"```javascript
function splitList(text) {
  return text.match(/[A-Z][^A-Z]*/g);
}
```",956,"```javascript
console.assert(split_list(""LearnToBuildAnythingWithGoogle"").toString() === ['Learn', 'To', 'Build', 'Anything', 'With', 'Google'].toString());
console.assert(split_list(""ApmlifyingTheBlack+DeveloperCommunity"").toString() === ['Apmlifying', 'The', 'Black+', 'Developer', 'Community'].toString());
console.assert(split_list(""UpdateInTheGoEcoSystem"").toString() === ['Update', 'In', 'The', 'Go', 'Eco', 'System'].toString());
```"
956, this   function to get the position of rightmost set bit.,"```javascript
function getFirstSetBitPos(n) {
    return Math.log2(n & -n) + 1;
}
```",957,"```javascript
['console.assert(get_First_Set_Bit_Pos(12) === 3)', 'console.assert(get_First_Set_Bit_Pos(18) === 2)', 'console.assert(get_First_Set_Bit_Pos(16) === 5)']
```"
957, this function to convert an integer into a roman numeral.,"```javascript
function intToRoman(num) {
    const val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
    const syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""];
    let romanNum = '';
    let i = 0;
    while (num > 0) {
        for (let _ = 0; _ < Math.floor(num / val[i]); _++) {
            romanNum += syb[i];
            num -= val[i];
        }
        i++;
    }
    return romanNum;
}
```",958,"```javascript
console.assert(int_to_roman(1) === ""I"");
console.assert(int_to_roman(50) === ""L"");
console.assert(int_to_roman(4) === ""IV"");
```"
958, this   function to find the average of a list.,"```javascript
function Average(lst) {
    return sum(lst) / lst.length;
}

function sum(lst) {
    return lst.reduce((acc, val) => acc + val, 0);
}
```",959,"```javascript
['console.assert(Average([15, 9, 55, 41, 35, 20, 62, 49]) === 35.75)', 'console.assert(Average([4, 5, 1, 2, 9, 7, 10, 8]) === 5.75)', 'console.assert(Average([1,2,3]) === 2)']
```"
959, this function to solve tiling problem.,"```javascript
function get_noOfways(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 1; 
    }
    return get_noOfways(n - 1) + get_noOfways(n - 2);
}
```",960,"```javascript
['console.assert(get_noOfways(4) === 3)', 'console.assert(get_noOfways(3) === 2)', 'console.assert(get_noOfways(5) === 5)']
```"
960, this function to convert a roman numeral to an integer.,"```javascript
function romanToInt(s) {
    const romVal = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000};
    let intVal = 0;
    for (let i = 0; i < s.length; i++) {
        if (i > 0 && romVal[s[i]] > romVal[s[i - 1]]) {
            intVal += romVal[s[i]] - 2 * romVal[s[i - 1]];
        } else {
            intVal += romVal[s[i]];
        }
    }
    return intVal;
}
```",961,"```javascript
console.assert(roman_to_int('MMMCMLXXXVI') === 3986);
console.assert(roman_to_int('MMMM') === 4000);
console.assert(roman_to_int('C') === 100);
```"
961, this   function to find the sum of all even natural numbers within the range l and r.,"```javascript
function sum_Natural(n) { 
    let sum = (n * (n + 1)); 
    return Math.floor(sum); 
}

function sum_Even(l, r) { 
    return (sum_Natural(Math.floor(r / 2)) - sum_Natural(Math.floor((l - 1) / 2))); 
}
```",962,"```javascript
['console.assert(sum_Even(2, 5) === 6)', 'console.assert(sum_Even(3, 8) === 18)', 'console.assert(sum_Even(4, 6) === 10)']
```"
962, this function to calculate the discriminant value.,"```javascript
function discriminantValue(x, y, z) {
    let discriminant = (y ** 2) - (4 * x * z);
    if (discriminant > 0) {
        return [""Two solutions"", discriminant];
    } else if (discriminant === 0) {
        return [""one solution"", discriminant];
    } else if (discriminant < 0) {
        return [""no real solution"", discriminant];
    }
}
```",963,"```javascript
['console.assert(discriminant_value(4,8,2)===(""Two solutions"",32)', 'console.assert(discriminant_value(5,7,9)===(""no real solution"",-131)', 'console.assert(discriminant_value(0,0,9)===(""one solution"",0)'];
```"
963, this   function to check whether the length of the word is even or not.,"```javascript
function wordLen(s) {
    s = s.split(' ');
    for (let word of s) {
        if (word.length % 2 == 0) {
            return true;
        } else {
            return false;
        }
    }
}
```",964,"```javascript
['console.assert(word_len(""program"") === false)', 'console.assert(word_len(""solution"") === true)', 'console.assert(word_len(""data"") === true)']
```"
964, this function to convert camel case string to snake case string.,"```javascript
function camelToSnake(text) {
    return text.replace(/(.)([A-Z][a-z]+)/g, '$1_$2')
               .replace(/([a-z0-9])([A-Z])/g, '$1_$2')
               .toLowerCase();
}
```",965,"```javascript
[""console.assert(camelToSnake(' Program') === ' _program')"", ""console.assert(camelToSnake(' Language') === ' _language')"", ""console.assert(camelToSnake('ProgrammingLanguage') === 'programming_language')""]
```"
965, this function to remove an empty tuple from a list of tuples.,"```javascript
function remove_empty(tuple1) { // L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
    tuple1 = tuple1.filter(t => t);
    return tuple1;
}
```",966,"```javascript
[""console.assert(remove_empty([(), (), ['',], ['a', 'b'], ['a', 'b', 'c'], 'd']) === [[''], ['a', 'b'], ['a', 'b', 'c'], 'd']);"", 
 'console.assert(remove_empty([(), (), ['',], ["" ""], [""program""]]) === [[''], ["" ""], [""program""]]);', 
 'console.assert(remove_empty([(), (), ['',], [""java""]]) === [[''], [""java""]]);']
```"
966, this   function to accept the strings which contains all vowels.,"```javascript
function check(string) {
  if (new Set(string).has(""A"") || new Set(string).has(""E"") || new Set(string).has(""I"") || new Set(string).has(""O"") || new Set(string).has(""U"") ||
      new Set(string).has(""a"") || new Set(string).has(""e"") || new Set(string).has(""i"") || new Set(string).has(""o"") || new Set(string).has(""u"")) {
    return 'accepted';
  } else {
    return 'not accepted';
  }
}
```",967,"```javascript
['assert check(""SEEquoiaL"") === ""accepted""', 'assert check(""program"") === ""not accepted""', 'assert check(""fine"") === ""not accepted""']
```"
967, this   function to find maximum possible value for the given periodic function.,"```javascript
function floor_Max(A, B, N) {
    let x = Math.min(B - 1, N);
    return Math.floor((A * x) / B);
}
```",968,"```javascript
['console.assert(floor_Max(11,10,9) === 9)', 'console.assert(floor_Max(5,7,4) === 2)', 'console.assert(floor_Max(2,2,1) === 1)']
```"
968, this function to join the tuples if they have similar initial elements.,"```javascript
function joinTuples(testList) {
  let res = [];
  for (let sub of testList) {
    if (res.length > 0 && res[res.length - 1][0] === sub[0]) {
      res[res.length - 1] = res[res.length - 1].concat(sub.slice(1));
    } else {
      res.push([...sub]);
    }
  }
  res = res.map(tuple => Array.from(tuple));
  return res;
}
```",969,"```javascript
['console.assert(join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]) === [(5, 6, 7), (6, 8, 10), (7, 13)])', 'console.assert(join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)]) === [(6, 7, 8), (7, 9, 11), (8, 14)])', 'console.assert(join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)]) === [(7, 8, 9), (8, 10, 12), (9, 15)])'];
```"
969, this function to find minimum of two numbers.,"```javascript
function minOfTwo(x, y) {
    if (x < y) {
        return x;
    }
    return y;
}
```",970,"```javascript
['console.assert(min_of_two(10,20) === 10)', 'console.assert(min_of_two(19,15) === 15)', 'console.assert(min_of_two(-10,-20) === -20)']
```"
970," this function to find the maximum number of segments of lengths a, b and c that can be formed from n.","```javascript
function maximum_segments(n, a, b, c) {
    let dp = Array(n + 10).fill(-1);
    dp[0] = 0;
    for (let i = 0; i < n; i++) {
        if (dp[i] !== -1) {
            if (i + a <= n) {
                dp[i + a] = Math.max(dp[i] + 1, dp[i + a]);
            }
            if (i + b <= n) {
                dp[i + b] = Math.max(dp[i] + 1, dp[i + b]);
            }
            if (i + c <= n) {
                dp[i + c] = Math.max(dp[i] + 1, dp[i + c]);
            }
        }
    }
    return dp[n];
}
```",971,"```javascript
['console.assert(maximum_segments(7, 5, 2, 5) === 2)', 'console.assert(maximum_segments(17, 2, 1, 3) === 17)', 'console.assert(maximum_segments(18, 16, 3, 6) === 6)']
```"
971, this function to concatenate the given two tuples to a nested tuple.,"```javascript
function concatenateNested(testTup1, testTup2) {
    let res = testTup1.concat(testTup2);
    return res;
}
```",972,"```javascript
['console.assert(JSON.stringify(concatenate_nested([3, 4])) === JSON.stringify([3, 4, 5, 6]))', 'console.assert(JSON.stringify(concatenate_nested([1, 2])) === JSON.stringify([1, 2, 3, 4]))', 'console.assert(JSON.stringify(concatenate_nested([4, 5])) === JSON.stringify([4, 5, 6, 8]))']
```"
972, this   function to left rotate the string.,"```javascript
function leftRotate(s, d) {
    let tmp = s.slice(d) + s.slice(0, d);
    return tmp;
}
```",973,"```javascript
['console.assert(left_rotate("" "", 2) === ""thonpy"");', 'console.assert(left_rotate(""bigdata"", 3) === ""databig"");', 'console.assert(left_rotate(""hadoop"", 1) === ""adooph"");']
```"
973, this function to find the minimum total path sum in the given triangle.,"```javascript
function minSumPath(A) {
    let memo = new Array(A.length).fill(null);
    let n = A.length - 1;
    for (let i = 0; i < A[n].length; i++) {
        memo[i] = A[n][i];
    }
    for (let i = A.length - 2; i >= 0; i--) {
        for (let j = 0; j < A[i].length; j++) {
            memo[j] = A[i][j] + Math.min(memo[j], memo[j + 1]);
        }
    }
    return memo[0];
}
```",974,"```javascript
['console.assert(min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) === 6)', 'console.assert(min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) === 10)', 'console.assert(min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) === 9)']
```"
974,"    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","```javascript
function hasCloseElements(numbers, threshold) {
    for (let idx = 0; idx < numbers.length; idx++) {
        for (let idx2 = 0; idx2 < numbers.length; idx2++) {
            if (idx !== idx2) {
                const distance = Math.abs(numbers[idx] - numbers[idx2]);
                if (distance < threshold) {
                    return true;
                }
            }
        }
    }
    return false;
}
```",975,"```javascript
['console.assert(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)', 
 'console.assert(has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false)', 
 'console.assert(has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)', 
 'console.assert(has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)', 
 'console.assert(has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)', 
 'console.assert(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)', 
 'console.assert(has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)']
```"
975,"    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","```javascript
function separateParenGroups(parenString) {
    const result = [];
    let currentString = [];
    let currentDepth = 0;

    for (let c of parenString) {
        if (c === '(') {
            currentDepth++;
            currentString.push(c);
        } else if (c === ')') {
            currentDepth--;
            currentString.push(c);

            if (currentDepth === 0) {
                result.push(currentString.join(''));
                currentString = [];
            }
        }
    }

    return result;
}
```",976,"```javascript
console.assert(separate_paren_groups('(()()) ((())) () ((())()())').equals(['']));
console.assert(separate_paren_groups('() (()) ((())) (((())))').equals(['']));
console.assert(separate_paren_groups('(()(())((())))').equals(['']));
console.assert(separate_paren_groups('( ) (( )) (( )( ))').equals(['()', '(())', '(()())']));
```"
976,"    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
","```javascript
function truncateNumber(number) {
    return number % 1.0;
}
```",977,"```javascript
['console.assert(truncate_number(3.5) === 0.5)', 'console.assert(Math.abs(truncate_number(1.33) - 0.33) < 1e-6)', 'console.assert(Math.abs(truncate_number(123.456) - 0.456) < 1e-6)']
```"
977,"    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","```javascript
function belowZero(operations) {
    let balance = 0;

    for (let op of operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }

    return false;
}
```",978,"```javascript
['console.assert(below_zero([]) === false)', 'console.assert(below_zero([1, 2, -3, 1, 2, -3]) === false)', 'console.assert(below_zero([1, 2, -4, 5, 6]) === true)', 'console.assert(below_zero([1, -1, 2, -2, 5, -5, 4, -4]) === false)', 'console.assert(below_zero([1, -1, 2, -2, 5, -5, 4, -5]) === true)', 'console.assert(below_zero([1, -2, 2, -2, 5, -5, 4, -4]) === true)']
```"
978,"    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","```javascript
function mean_absolute_deviation(numbers) {
    const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;
    return numbers.reduce((acc, x) => acc + Math.abs(x - mean), 0) / numbers.length;
}
```",979,"```javascript
['console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6)', 'console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6)', 'console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6)']
```"
979,"    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","```javascript
function intersperse(numbers, delimeter) {
    if (numbers.length === 0) {
        return [];
    }

    const result = [];

    for (let i = 0; i < numbers.length - 1; i++) {
        result.push(numbers[i]);
        result.push(delimeter);
    }

    result.push(numbers[numbers.length - 1]);

    return result;
}
```",980,"```javascript
['console.assert(intersperse([], 7).length === 0)', 'console.assert(JSON.stringify(intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2]))', 'console.assert(JSON.stringify(intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2]))']
```"
980,"    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","```javascript
function parseNestedParens(parenString) {
    function parseParenGroup(s) {
        let depth = 0;
        let maxDepth = 0;
        for (let c of s) {
            if (c === '(') {
                depth++;
                maxDepth = Math.max(depth, maxDepth);
            } else {
                depth--;
            }
        }
        return maxDepth;
    }

    return parenString.split(' ').map(x => parseParenGroup(x)).filter(x => x);
}
```",981,"```javascript
console.assert(parse_nested_parens('(()()) ((())) () ((())()())').toString() === [2, 3, 1, 3].toString());
console.assert(parse_nested_parens('() (()) ((())) (((())))').toString() === [1, 2, 3, 4].toString());
console.assert(parse_nested_parens('(()(())((())))').toString() === [4].toString());
```"
981,"    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","```javascript
function filterBySubstring(strings, substring) {
    return strings.filter(x => x.includes(substring));
}
```",982,"```javascript
[""console.assert(filter_by_substring([], 'john').length === 0)"", ""console.assert(JSON.stringify(filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')) === JSON.stringify(['xxx', 'xxxAAA', 'xxx']))"", ""console.assert(JSON.stringify(filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx']))"", ""console.assert(JSON.stringify(filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')) === JSON.stringify(['grunt', 'prune']))""]
```"
982,"    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","```javascript
function sumProduct(numbers) {
    let sumValue = 0;
    let prodValue = 1;

    for (let n of numbers) {
        sumValue += n;
        prodValue *= n;
    }
    return [sumValue, prodValue];
}
```",983,"```javascript
console.assert(sum_product([]) === [0, 1]);
console.assert(sum_product([1, 1, 1]) === [3, 1]);
console.assert(sum_product([100, 0]) === [100, 0]);
console.assert(sum_product([3, 5, 7]) === [3 + 5 + 7, 3 * 5 * 7]);
console.assert(sum_product([10]) === [10, 10]);
```"
983,"    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","```javascript
function rollingMax(numbers) {
    let runningMax = null;
    const result = [];

    for (let n of numbers) {
        if (runningMax === null) {
            runningMax = n;
        } else {
            runningMax = Math.max(runningMax, n);
        }

        result.push(runningMax);
    }

    return result;
}
```",984,"```javascript
['console.assert(JSON.stringify(rolling_max([])) === JSON.stringify([]))', 'console.assert(JSON.stringify(rolling_max([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4]))', 'console.assert(JSON.stringify(rolling_max([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4]))', 'console.assert(JSON.stringify(rolling_max([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100]))']
```"
984,"    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","```javascript
function isPalindrome(string) {
    if (!string) {
        return '';
    }

    let beginningOfSuffix = 0;

    while (!isPalindrome(string.slice(beginningOfSuffix))) {
        beginningOfSuffix++;
    }

    return string + string.slice(0, beginningOfSuffix).split('').reverse().join('');
}
```",985,"```javascript
[""console.assert(make_palindrome('') === '')"", ""console.assert(make_palindrome('x') === 'x')"", ""console.assert(make_palindrome('xyz') === 'xyzyx')"", ""console.assert(make_palindrome('xyx') === 'xyx')"", ""console.assert(make_palindrome('jerry') === 'jerryrrej')""]
```"
985,"    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
","```javascript
function stringXor(a, b) {
    function xor(i, j) {
        return i === j ? '0' : '1';
    }

    return [...a].map((x, index) => xor(x, b[index])).join('');
}
```",986,"```javascript
[""console.assert(string_xor('111000', '101010') === '010010')"", ""console.assert(string_xor('1', '1') === '0')"", ""console.assert(string_xor('0101', '0000') === '0101')""]
```"
986,"    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","```javascript
function longest(strings) {
    if (!strings || strings.length === 0) {
        return null;
    }

    const maxlen = Math.max(...strings.map(x => x.length));
    for (let s of strings) {
        if (s.length === maxlen) {
            return s;
        }
    }
}
```",987,"```javascript
['console.assert(longest([]) === null)', ""console.assert(longest(['x', 'y', 'z']) === 'x')"", ""console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')""]
```"
987,"    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","```javascript
function greatestCommonDivisor(a, b) {
    while (b) {
        [a, b] = [b, a % b];
    }
    return a;
}
```",988,"```javascript
['console.assert(greatest_common_divisor(3, 7) === 1)', 'console.assert(greatest_common_divisor(10, 15) === 5)', 'console.assert(greatest_common_divisor(49, 14) === 7)', 'console.assert(greatest_common_divisor(144, 60) === 12)']
```"
988,"    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","```javascript
function allPrefixes(string) {
    let result = [];

    for (let i = 0; i < string.length; i++) {
        result.push(string.slice(0, i + 1));
    }
    return result;
}
```",989,"```javascript
console.assert(all_prefixes('') === []);
console.assert(JSON.stringify(all_prefixes('asdfgh')) === JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']));
console.assert(JSON.stringify(all_prefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW']));
```"
989,"    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","```javascript
function stringSequence(n) {
    return Array.from({ length: n + 1 }, (_, x) => x).join(' ');
}
```",990,"```javascript
[""console.assert(string_sequence(0) === '0')"", ""console.assert(string_sequence(3) === '0 1 2 3')"", ""console.assert(string_sequence(10) === '0 1 2 3 4 5 6 7 8 9 10')""]
```"
990,"    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","```javascript
function countDistinctCharacters(string) {
    return new Set(string.toLowerCase()).size;
}
```",991,"```javascript
[""console.assert(countDistinctCharacters('') === 0)"", ""console.assert(countDistinctCharacters('abcde') === 5)"", ""console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)"", ""console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)"", ""console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)""]
```"
991,"    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","```javascript
function parseMusic(musicString) {
    const noteMap = {'o': 4, 'o|': 2, '.|': 1};
    return musicString.split(' ').filter(x => x).map(x => noteMap[x]);
}
```",992,"```javascript
[""console.assert(parse_music('') === [])"", ""console.assert(parse_music('o o o o') === [4, 4, 4, 4])"", ""console.assert(parse_music('.| .| .| .|') === [1, 1, 1, 1])"", ""console.assert(parse_music('o| o| .| .| o o o o') === [2, 2, 1, 1, 4, 4, 4, 4])"", ""console.assert(parse_music('o| .| o| .| o o| o o|') === [2, 1, 2, 1, 4, 2, 4, 2]""]
```"
992,"    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","```javascript
function howManyTimes(string, substring) {
    let times = 0;

    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.slice(i, i + substring.length) === substring) {
            times++;
        }
    }

    return times;
}
```",993,"```javascript
[""console.assert(how_many_times('', 'x') === 0)"", ""console.assert(how_many_times('xyxyxyx', 'x') === 4)"", ""console.assert(how_many_times('cacacacac', 'cac') === 4)"", ""console.assert(how_many_times('john doe', 'john') === 1)""]
```"
993,"    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","```javascript
function sortNumbers(numbers) {
    const valueMap = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    };
    return Object.keys(valueMap)
        .filter(x => numbers.split(' ').includes(x))
        .sort((a, b) => valueMap[a] - valueMap[b])
        .join(' ');
}
```",994,"```javascript
[""console.assert(sort_numbers('') === '')"", ""console.assert(sort_numbers('three') === 'three')"", ""console.assert(sort_numbers('three five nine') === 'three five nine')"", ""console.assert(sort_numbers('five zero four seven nine eight') === 'zero four five seven eight nine')"", ""console.assert(sort_numbers('six five four three two one zero') === 'zero one two three four five six')""]
```"
994,"    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","```javascript
function findClosestElements(numbers) {
    let closestPair = null;
    let distance = null;

    for (let idx = 0; idx < numbers.length; idx++) {
        for (let idx2 = 0; idx2 < numbers.length; idx2++) {
            if (idx !== idx2) {
                if (distance === null) {
                    distance = Math.abs(numbers[idx] - numbers[idx2]);
                    closestPair = [Math.min(numbers[idx], numbers[idx2]), Math.max(numbers[idx], numbers[idx2])];
                } else {
                    const newDistance = Math.abs(numbers[idx] - numbers[idx2]);
                    if (newDistance < distance) {
                        distance = newDistance;
                        closestPair = [Math.min(numbers[idx], numbers[idx2]), Math.max(numbers[idx], numbers[idx2])];
                    }
                }
            }
        }
    }

    return closestPair;
}
```",995,"```javascript
['console.assert(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) === (3.9, 4.0));', 
 'console.assert(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0]) === (5.0, 5.9));', 
 'console.assert(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) === (2.0, 2.2));', 
 'console.assert(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) === (2.0, 2.0));', 
 'console.assert(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1]) === (2.2, 3.1));']
```"
995,"    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","```javascript
function rescaleToUnit(numbers) {
    const minNumber = Math.min(...numbers);
    const maxNumber = Math.max(...numbers);
    return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));
}
```",996,"```javascript
['console.assert(JSON.stringify(rescale_to_unit([2.0, 49.9])) === JSON.stringify([0.0, 1.0]))', 
 'console.assert(JSON.stringify(rescale_to_unit([100.0, 49.9])) === JSON.stringify([1.0, 0.0]))', 
 'console.assert(JSON.stringify(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])) === JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0]))', 
 'console.assert(JSON.stringify(rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0])) === JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75]))', 
 'console.assert(JSON.stringify(rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0])) === JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75]))']
```"
996,"    """""" Filter given list of any   values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","```javascript
function filterIntegers(values) {
    return values.filter(x => typeof x === 'number' && Number.isInteger(x));
}
```",997,"```javascript
console.assert(filter_integers([]).length === 0);
console.assert(JSON.stringify(filter_integers([4, {}, [], 23.2, 9, 'adasd'])) === JSON.stringify([4, 9]));
console.assert(JSON.stringify(filter_integers([3, 'c', 3, 3, 'a', 'b'])) === JSON.stringify([3, 3, 3]));
```"
997,"    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","```javascript
function strlen(string) {
    return string.length;
}
```",998,"```javascript
[""console.assert(''.length === 0)"", ""console.assert('x'.length === 1)"", ""console.assert('asdasnakj'.length === 9)""]
```"
998,"    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","```javascript
function largestDivisor(n) {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
}
```",999,"```javascript
['console.assert(largest_divisor(3) === 1)', 'console.assert(largest_divisor(7) === 1)', 'console.assert(largest_divisor(10) === 5)', 'console.assert(largest_divisor(100) === 50)', 'console.assert(largest_divisor(49) === 7)'];
```"
999,"    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","```javascript
function factorize(n) {
    let fact = [];
    let i = 2;
    while (i <= Math.sqrt(n) + 1) {
        if (n % i === 0) {
            fact.push(i);
            n /= i;
        } else {
            i += 1;
        }
    }

    if (n > 1) {
        fact.push(n);
    }
    return fact;
}
```",1000,"```javascript
['console.assert(factorize(2).toString() === [2].toString())', 'console.assert(factorize(4).toString() === [2, 2].toString())', 'console.assert(factorize(8).toString() === [2, 2, 2].toString())', 'console.assert(factorize(3 * 19).toString() === [3, 19].toString())', 'console.assert(factorize(3 * 19 * 3 * 19).toString() === [3, 3, 19, 19].toString())', 'console.assert(factorize(3 * 19 * 3 * 19 * 3 * 19).toString() === [3, 3, 3, 19, 19, 19].toString())', 'console.assert(factorize(3 * 19 * 19 * 19).toString() === [3, 19, 19, 19].toString())', 'console.assert(factorize(3 * 2 * 3).toString() === [2, 3, 3].toString())']
```"
1000,"    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","```javascript
function removeDuplicates(numbers) {
    const c = {};
    numbers.forEach(n => c[n] = (c[n] || 0) + 1);
    return numbers.filter(n => c[n] <= 1);
}
```",1001,"```javascript
console.assert(remove_duplicates([]).toString() === [].toString());
console.assert(remove_duplicates([1, 2, 3, 4]).toString() === [1, 2, 3, 4].toString());
console.assert(remove_duplicates([1, 2, 3, 2, 4, 3, 5]).toString() === [1, 4, 5].toString());
```"
1001,"    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","```javascript
function flipCase(string) {
    return string.split('').map(char => {
        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();
    }).join('');
}
```",1002,"```javascript
[""console.assert(flip_case('') === '')"", ""console.assert(flip_case('Hello!') === 'hELLO!')"", ""console.assert(flip_case('These violent delights have violent ends') === 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')""]
```"
1002,"    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","```javascript
function concatenate(strings) {
    return strings.join('');
}
```",1003,"```javascript
console.assert(concatenate([]) === '');
console.assert(concatenate(['x', 'y', 'z']) === 'xyz');
console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk');
```"
1003,"    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","```javascript
function filterByPrefix(strings, prefix) {
    return strings.filter(x => x.startsWith(prefix));
}
```",1004,"```javascript
console.assert(filter_by_prefix([], 'john').length === 0);
console.assert(JSON.stringify(filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')) === JSON.stringify(['xxx', 'xxxAAA', 'xxx']));
```"
1004,"    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","```javascript
function getPositive(l) {
    return l.filter(e => e > 0);
}
```",1005,"```javascript
['console.assert(get_positive([-1, -2, 4, 5, 6]).toString() === [4, 5, 6].toString())', 'console.assert(get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]).toString() === [5, 3, 2, 3, 3, 9, 123, 1].toString())', 'console.assert(get_positive([-1, -2]).toString() === [].toString())', 'console.assert(get_positive([]).toString() === [].toString())']
```"
1005,"    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","```javascript
function isPrime(n) {
    if (n < 2) {
        return false;
    }
    for (let k = 2; k < n - 1; k++) {
        if (n % k === 0) {
            return false;
        }
    }
    return true;
}
```",1006,"```javascript
['console.assert(is_prime(6) === false)', 'console.assert(is_prime(101) === true)', 'console.assert(is_prime(11) === true)', 'console.assert(is_prime(13441) === true)', 'console.assert(is_prime(61) === true)', 'console.assert(is_prime(4) === false)', 'console.assert(is_prime(1) === false)', 'console.assert(is_prime(5) === true)', 'console.assert(is_prime(11) === true)', 'console.assert(is_prime(17) === true)', 'console.assert(is_prime(5 * 17) === false)', 'console.assert(is_prime(11 * 7) === false)', 'console.assert(is_prime(13441 * 19) === false)']
```"
1006,"    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","```javascript
function poly(xs, x) {
    let begin = -1.0, end = 1.0;
    while (poly(xs, begin) * poly(xs, end) > 0) {
        begin *= 2.0;
        end *= 2.0;
    }
    while (end - begin > 1e-10) {
        const center = (begin + end) / 2.0;
        if (poly(xs, center) * poly(xs, begin) > 0) {
            begin = center;
        } else {
            end = center;
        }
    }
    return begin;
}
```",1007,"```javascript
[
  'console.assert(Math.abs(poly([-10], sort_third(JSON.parse(JSON.stringify([-10])))) < 1e-4)',
  'console.assert(Math.abs(poly([-10, -2], sort_third(JSON.parse(JSON.stringify([-10, -2])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3], sort_third(JSON.parse(JSON.stringify([-3])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, -6], sort_third(JSON.parse(JSON.stringify([-3, -6])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, -6, -7], sort_third(JSON.parse(JSON.stringify([-3, -6, -7])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, -6, -7, 7], sort_third(JSON.parse(JSON.stringify([-3, -6, -7, 7])))) < 1e-4)',
  'console.assert(Math.abs(poly([8], sort_third(JSON.parse(JSON.stringify([8])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, 3], sort_third(JSON.parse(JSON.stringify([8, 3])))) < 1e-4)',
  'console.assert(Math.abs(poly([-10], sort_third(JSON.parse(JSON.stringify([-10])))) < 1e-4)',
  'console.assert(Math.abs(poly([-10, -8], sort_third(JSON.parse(JSON.stringify([-10, -8])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3], sort_third(JSON.parse(JSON.stringify([-3])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, 6], sort_third(JSON.parse(JSON.stringify([-3, 6])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, 6, 9], sort_third(JSON.parse(JSON.stringify([-3, 6, 9])))) < 1e-4)',
  'console.assert(Math.abs(poly([-3, 6, 9, -10], sort_third(JSON.parse(JSON.stringify([-3, 6, 9, -10])))) < 1e-4)',
  'console.assert(Math.abs(poly([10], sort_third(JSON.parse(JSON.stringify([10])))) < 1e-4)',
  'console.assert(Math.abs(poly([10, 7], sort_third(JSON.parse(JSON.stringify([10, 7])))) < 1e-4)',
  'console.assert(Math.abs(poly([10, 7, 3], sort_third(JSON.parse(JSON.stringify([10, 7, 3])))) < 1e-4)',
  'console.assert(Math.abs(poly([10, 7, 3, -3], sort_third(JSON.parse(JSON.stringify([10, 7, 3, -3])))) < 1e-4)',
  'console.assert(Math.abs(poly([8], sort_third(JSON.parse(JSON.stringify([8])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2], sort_third(JSON.parse(JSON.stringify([8, -2])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10], sort_third(JSON.parse(JSON.stringify([8, -2, -10])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10, -5], sort_third(JSON.parse(JSON.stringify([8, -2, -10, -5])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10, -5, 3], sort_third(JSON.parse(JSON.stringify([8, -2, -10, -5, 3])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10, -5, 3, 1], sort_third(JSON.parse(JSON.stringify([8, -2, -10, -5, 3, 1])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10, -5, 3, 1, -2], sort_third(JSON.parse(JSON.stringify([8, -2, -10, -5, 3, 1, -2])))) < 1e-4)',
  'console.assert(Math.abs(poly([8, -2, -10, -5, 3, 1, -2, -6], sort_third(JSON.parse(JSON.stringify([8, -2, -10, -5, 3, 1, -2, -6])))) < 1e-4)',
  'console.assert(Math.abs(poly([1], sort_third(JSON.parse(JSON.stringify([1])))) < 1e-4)',
  'console.assert(Math.abs(poly([1, -7], sort_third(JSON.parse(JSON.stringify([1, -7])))) < 1e-4)',
  'console.assert(Math.abs(poly([1, -7, -8], sort_third(JSON.parse(JSON.stringify([1, -7, -8])))) < 1e-4)',
  'console.assert(Math.abs(poly([1, -7, -8, 2], sort_third(JSON.parse(JSON.stringify([1, -7, -8, 2])))) < 1e-4)',
  'console.assert(Math.abs(poly([1], sort_third(JSON.parse(JSON.stringify([1])))) < 1e-4)',
  'console.assert(Math.abs(poly([1, 1], sort_third(JSON.parse(JSON.stringify([1, 1])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9], sort_third(JSON.parse(JSON.stringify([-9])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9, 4], sort_third(JSON.parse(JSON.stringify([-9, 4])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9, 4, 7], sort_third(JSON.parse(JSON.stringify([-9, 4, 7])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9, 4, 7, -7], sort_third(JSON.parse(JSON.stringify([-9, 4, 7, -7])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9, 4, 7, -7, 2], sort_third(JSON.parse(JSON.stringify([-9, 4, 7, -7, 2])))) < 1e-4)',
  'console.assert(Math.abs(poly([-9, 4, 7, -7, 2, -8], sort_third(JSON.parse(JSON.stringify([-9, 4, 7, -7, 2, -8])))) < 1e-4)'
]
```"
1007,"    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","```javascript
function sortThird(arr) {
    arr = Array.from(arr);
    arr.sort((a, b) => arr.indexOf(a) % 3 === 0 ? a - b : 0);
    return arr;
}
```",1008,"```javascript
['console.assert(JSON.stringify(sort_third([1, 2, 3])) === JSON.stringify(sort_third([1, 2, 3])))', 
 'console.assert(JSON.stringify(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) === JSON.stringify(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])))', 
 'console.assert(JSON.stringify(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) === JSON.stringify(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])))', 
 'console.assert(JSON.stringify(sort_third([5, 6, 3, 4, 8, 9, 2])) === JSON.stringify([2, 6, 3, 4, 8, 9, 5]))', 
 'console.assert(JSON.stringify(sort_third([5, 8, 3, 4, 6, 9, 2])) === JSON.stringify([2, 8, 3, 4, 6, 9, 5]))', 
 'console.assert(JSON.stringify(sort_third([5, 6, 9, 4, 8, 3, 2])) === JSON.stringify([2, 6, 9, 4, 8, 3, 5]))', 
 'console.assert(JSON.stringify(sort_third([5, 6, 3, 4, 8, 9, 2, 1])) === JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1]))']
```"
1008,"    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","```javascript
function unique(l) {
  return Array.from(new Set(l)).sort();
}
```",1009,"```javascript
console.assert(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]).toString() === [0, 2, 3, 5, 9, 123].toString());
```"
1009,"    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","```javascript
function maxElement(l) {
    let m = l[0];
    for (let e of l) {
        if (e > m) {
            m = e;
        }
    }
    return m;
}
```",1010,"```javascript
['console.assert(max_element([1, 2, 3]) === 3)', 'console.assert(max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)']
```"
1010,"    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","```javascript
function fizzBuzz(n) {
    let ns = [];
    for (let i = 0; i < n; i++) {
        if (i % 11 === 0 || i % 13 === 0) {
            ns.push(i);
        }
    }
    let s = ns.join('');
    let ans = 0;
    for (let c of s) {
        ans += (c === '7') ? 1 : 0;
    }
    return ans;
}
```",1011,"```javascript
console.assert(fizz_buzz(50) === 0);
console.assert(fizz_buzz(78) === 2);
console.assert(fizz_buzz(79) === 3);
console.assert(fizz_buzz(100) === 3);
console.assert(fizz_buzz(200) === 6);
console.assert(fizz_buzz(4000) === 192);
console.assert(fizz_buzz(10000) === 639);
console.assert(fizz_buzz(100000) === 8026);
```"
1011,"    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","```javascript
function sortEven(l) {
    const evens = l.filter((_, index) => index % 2 === 0);
    const odds = l.filter((_, index) => index % 2 !== 0);
    evens.sort((a, b) => a - b);
    const ans = [];
    const minLength = Math.min(evens.length, odds.length);
    
    for (let i = 0; i < minLength; i++) {
        ans.push(evens[i], odds[i]);
    }
    
    if (evens.length > odds.length) {
        ans.push(evens[evens.length - 1]);
    }
    
    return ans;
}
```",1012,"```javascript
console.assert(JSON.stringify(sort_even([1, 2, 3])) === JSON.stringify([1, 2, 3]));
console.assert(JSON.stringify(sort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) === JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]));
console.assert(JSON.stringify(sort_even([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) === JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]));
```"
1012,"    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","```javascript
function encodeCyclic(s) {
    return encodeCyclic(encodeCyclic(s));
}
```",1013,"```javascript
[""console.assert(decode_cyclic(encode_cyclic(str)) === 'zvbxqgqwybhmzltozlbd')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'kmgofsldyspeg')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'zrzzaqgvfbb')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'gjhfrjgunrnyibzsw')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'enbuyhivsimbbn')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'opvjifegwqu')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'mwspijprapdwlsi')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'nvvynyfizv')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'tfztrufpxkzu')"", ""console.assert(decode_cyclic(encode_cyclic(str)) === 'jmsnjngtgnzmgnbjsxa')""]
```"
1013,"    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","```javascript
function primeFib(n) {
    function isPrime(p) {
        if (p < 2) {
            return false;
        }
        for (let k = 2; k <= Math.min(Math.sqrt(p), p - 1); k++) {
            if (p % k === 0) {
                return false;
            }
        }
        return true;
    }
    
    let f = [0, 1];
    while (true) {
        f.push(f[f.length - 1] + f[f.length - 2]);
        if (isPrime(f[f.length - 1])) {
            n -= 1;
        }
        if (n === 0) {
            return f[f.length - 1];
        }
    }
}
```",1014,"```javascript
console.assert(prime_fib(1) === 2);
console.assert(prime_fib(2) === 3);
console.assert(prime_fib(3) === 5);
console.assert(prime_fib(4) === 13);
console.assert(prime_fib(5) === 89);
console.assert(prime_fib(6) === 233);
console.assert(prime_fib(7) === 1597);
console.assert(prime_fib(8) === 28657);
console.assert(prime_fib(9) === 514229);
console.assert(prime_fib(10) === 433494437);
```"
1014,"    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","```javascript
function triplesSumToZero(l) {
    for (let i = 0; i < l.length; i++) {
        for (let j = i + 1; j < l.length; j++) {
            for (let k = j + 1; k < l.length; k++) {
                if (l[i] + l[j] + l[k] === 0) {
                    return true;
                }
            }
        }
    }
    return false;
}
```",1015,"```javascript
['console.assert(triples_sum_to_zero([1, 3, 5, 0]) === false)', 'console.assert(triples_sum_to_zero([1, 3, 5, -1]) === false)', 'console.assert(triples_sum_to_zero([1, 3, -2, 1]) === true)', 'console.assert(triples_sum_to_zero([1, 2, 3, 7]) === false)', 'console.assert(triples_sum_to_zero([1, 2, 5, 7]) === false)', 'console.assert(triples_sum_to_zero([2, 4, -5, 3, 9, 7]) === true)', 'console.assert(triples_sum_to_zero([1]) === false)', 'console.assert(triples_sum_to_zero([1, 3, 5, -100]) === false)', 'console.assert(triples_sum_to_zero([100, 3, 5, -100]) === false)']
```"
1015,"    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","```javascript
function carRaceCollision(n) {
    return n ** 2;
}
```",1016,"```javascript
console.assert(car_race_collision(2) === 4);
console.assert(car_race_collision(3) === 9);
console.assert(car_race_collision(4) === 16);
console.assert(car_race_collision(8) === 64);
console.assert(car_race_collision(10) === 100);
```"
1016,"    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","```javascript
function incrList(l) {
    return l.map(e => e + 1);
}
```",1017,"```javascript
['console.assert(incr_list([]).toString() === [].toString())', 
 'console.assert(incr_list([3, 2, 1]).toString() === [4, 3, 2].toString())', 
 'console.assert(incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123]).toString() === [6, 3, 6, 3, 4, 4, 10, 1, 124].toString())']
```"
1017,"    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","```javascript
function pairsSumToZero(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] + arr[j] === 0) {
                return true;
            }
        }
    }
    return false;
}
```",1018,"```javascript
['console.assert(pairs_sum_to_zero([1, 3, 5, 0]) === false)', 'console.assert(pairs_sum_to_zero([1, 3, -2, 1]) === false)', 'console.assert(pairs_sum_to_zero([1, 2, 3, 7]) === false)', 'console.assert(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) === true)', 'console.assert(pairs_sum_to_zero([1]) === false)', 'console.assert(pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) === true)', 'console.assert(pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) === true)', 'console.assert(pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) === false)', 'console.assert(pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) === false)']
```"
1018,"    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","```javascript
function changeBase(x, base) {
    let ret = """";
    while (x > 0) {
        ret = (x % base).toString() + ret;
        x = Math.floor(x / base);
    }
    return ret;
}
```",1019,"```javascript
['console.assert(change_base(8, 3) === ""22"")', 'console.assert(change_base(9, 3) === ""100"")', 'console.assert(change_base(234, 2) === ""11101010"")', 'console.assert(change_base(16, 2) === ""10000"")', 'console.assert(change_base(8, 2) === ""1000"")', 'console.assert(change_base(7, 2) === ""111"")', 'console.assert(change_base(x, x + 1) === String(x))']
```"
1019,"    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","```javascript
function triangleArea(a, h) {
    return a * h / 2.0;
}
```",1020,"```javascript
['console.assert(triangle_area(5, 3) === 7.5)', 'console.assert(triangle_area(2, 2) === 2.0)', 'console.assert(triangle_area(10, 8) === 40.0)']
```"
1020,"    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please  this function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","```javascript
function fib4(n) {
    const results = [0, 0, 2, 0];
    if (n < 4) {
        return results[n];
    }

    for (let i = 4; i <= n; i++) {
        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);
        results.shift();
    }

    return results[results.length - 1];
}
```",1021,"```javascript
['console.assert(fib4(5) === 4)', 'console.assert(fib4(8) === 28)', 'console.assert(fib4(10) === 104)', 'console.assert(fib4(12) === 386)'];
```"
1021,"    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","```javascript
function median(l) {
    l.sort((a, b) => a - b);
    if (l.length % 2 === 1) {
        return l[Math.floor(l.length / 2)];
    } else {
        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;
    }
}
```",1022,"```javascript
['console.assert(median([3, 1, 2, 4, 5]) === 3)', 'console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)', 'console.assert(median([5]) === 5)', 'console.assert(median([6, 5]) === 5.5)', 'console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)']
```"
1022,"    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","```javascript
function isPalindrome(text) {
    for (let i = 0; i < text.length; i++) {
        if (text[i] !== text[text.length - 1 - i]) {
            return false;
        }
    }
    return true;
}
```",1023,"```javascript
[""console.assert(is_palindrome('') === true)"", ""console.assert(is_palindrome('aba') === true)"", ""console.assert(is_palindrome('aaaaa') === true)"", ""console.assert(is_palindrome('zbcd') === false)"", ""console.assert(is_palindrome('xywyx') === true)"", ""console.assert(is_palindrome('xywyz') === false)"", ""console.assert(is_palindrome('xywzx') === false)""]
```"
1023,"    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","```javascript
function modp(n, p) {
    let ret = 1;
    for (let i = 0; i < n; i++) {
        ret = (2 * ret) % p;
    }
    return ret;
}
```",1024,"```javascript
['console.assert(modp(3, 5) === 3)', 'console.assert(modp(1101, 101) === 2)', 'console.assert(modp(0, 101) === 1)', 'console.assert(modp(3, 11) === 8)', 'console.assert(modp(100, 101) === 1)', 'console.assert(modp(30, 5) === 4)', 'console.assert(modp(31, 5) === 3)']
```"
1024,"    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","```javascript
function encodeShift(s) {
    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');
}
```",1025,"```javascript
[""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('gvpzkkokwwsokfimwz')))) === 'dvgqywkayyppegxstx')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('tiknbppkitogxjb')))) === 'dmygpqronhcxpmdk')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('fvkdoxsncu')))) === 'lblsulvtrmtxggo')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('uzacipcltzywc')))) === 'qnajghdrhnw')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('afaysfaofdlpp')))) === 'cqzasjkyev')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('smhcupbongotjreuxf')))) === 'twcgnctybzfzb')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('brzxbscvgyfdwrqcmqea')))) === 'hljrzuzgslgoxsw')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('rzbkpuivbtplyc')))) === 'ysxkvpstooyedwfz')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('vagbqwfmovfebq')))) === 'wqofzreigtvccmnggs')"", ""console.assert(decode_shift(JSON.parse(JSON.stringify(encode_shift('iqiaymawigsqfljqhst')))) === 'sdkfickbhrjgxbl')""]
```"
1025,"    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","```javascript
function removeVowels(text) {
    return text.split('').filter(function(s) {
        return ![""a"", ""e"", ""i"", ""o"", ""u""].includes(s.toLowerCase());
    }).join('');
}
```",1026,"```javascript
[""console.assert(removeVowels('') === '')"", 'console.assert(removeVowels(""abcdef\\nghijklm"") === \'bcdf\\nghjklm\')', ""console.assert(removeVowels('fedcba') === 'fdcb')"", ""console.assert(removeVowels('eeeee') === '')"", ""console.assert(removeVowels('acBAA') === 'cB')"", ""console.assert(removeVowels('EcBOO') === 'cB')"", ""console.assert(removeVowels('ybcd') === 'ybcd')""]
```"
1026,"    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","```javascript
function belowThreshold(l, t) {
    for (let e of l) {
        if (e >= t) {
            return false;
        }
    }
    return true;
}
```",1027,"```javascript
['console.assert(below_threshold([1, 2, 4, 10], 100)', 'console.assert(!below_threshold([1, 20, 4, 10], 5))', 'console.assert(below_threshold([1, 20, 4, 10], 21)', 'console.assert(below_threshold([1, 20, 4, 10], 22)', 'console.assert(below_threshold([1, 8, 4, 10], 11)', 'console.assert(!below_threshold([1, 8, 4, 10], 10))']
```"
1027,"    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","```javascript
function add(x, y) {
    return x + y;
}
```",1028,"```javascript
['console.assert(add(0, 1) === 1)', 'console.assert(add(1, 0) === 1)', 'console.assert(add(2, 3) === 5)', 'console.assert(add(5, 7) === 12)', 'console.assert(add(7, 5) === 12)', 'console.assert(add(x, y) === x + y)']
```"
1028,"    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","```javascript
function sameChars(s0, s1) {
    return new Set(s0).size === new Set(s1).size && [...new Set(s0)].every(char => new Set(s1).has(char));
}
```",1029,"```javascript
[""console.assert(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)"", 
 ""console.assert(same_chars('abcd', 'dddddddabc') === true)"", 
 ""console.assert(same_chars('dddddddabc', 'abcd') === true)"", 
 ""console.assert(same_chars('eabcd', 'dddddddabc') === false)"", 
 ""console.assert(same_chars('abcd', 'dddddddabcf') === false)"", 
 ""console.assert(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)"", 
 ""console.assert(same_chars('aabb', 'aaccc') === false)""];
```"
1029,"    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","```javascript
function fib(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
}
```",1030,"```javascript
['console.assert(fib(10) === 55)', 'console.assert(fib(1) === 1)', 'console.assert(fib(8) === 21)', 'console.assert(fib(11) === 89)', 'console.assert(fib(12) === 144)']
```"
1030,"    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","```javascript
function correctBracketing(brackets) {
    let depth = 0;
    for (let b of brackets) {
        if (b === ""<"") {
            depth++;
        } else {
            depth--;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth === 0;
}
```",1031,"```javascript
['console.assert(correct_bracketing(""<>"") === true)', 
 'console.assert(correct_bracketing(""<<><>>"") === true)', 
 'console.assert(correct_bracketing(""<><><<><>><>"") === true)', 
 'console.assert(correct_bracketing(""<><><<<><><>><>><<><><<>>>"") === true)', 
 'console.assert(correct_bracketing(""<<<><>>>>"") === false)', 
 'console.assert(correct_bracketing(""><<>"") === false)', 
 'console.assert(correct_bracketing(""<"") === false)', 
 'console.assert(correct_bracketing(""<<<<"") === false)', 
 'console.assert(correct_bracketing("">"") === false)', 
 'console.assert(correct_bracketing(""<<>"") === false)', 
 'console.assert(correct_bracketing(""<><><<><>><>><<>"") === false)', 
 'console.assert(correct_bracketing(""<><><<><>><>>><>"") === false)'];
```"
1031,"    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","```javascript
function monotonic(l) {
    if (JSON.stringify(l) === JSON.stringify(l.slice().sort()) || JSON.stringify(l) === JSON.stringify(l.slice().sort((a, b) => b - a))) {
        return true;
    }
    return false;
}
```",1032,"```javascript
console.assert(monotonic([1, 2, 4, 10]) === true);
console.assert(monotonic([1, 2, 4, 20]) === true);
console.assert(monotonic([1, 20, 4, 10]) === false);
console.assert(monotonic([4, 1, 0, -10]) === true);
console.assert(monotonic([4, 1, 1, 0]) === true);
console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false);
console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true);
console.assert(monotonic([9, 9, 9, 9]) === true);
```"
1032,"    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","```javascript
function common(l1, l2) {
    let ret = new Set();
    for (let e1 of l1) {
        for (let e2 of l2) {
            if (e1 === e2) {
                ret.add(e1);
            }
        }
    }
    return Array.from(ret).sort();
}
```",1033,"```javascript
['console.assert(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]).toString() === [1, 5, 653].toString())', 'console.assert(common([5, 3, 2, 8], [3, 2]).toString() === [2, 3].toString())', 'console.assert(common([4, 3, 2, 8], [3, 2, 4]).toString() === [2, 3, 4].toString())', 'console.assert(common([4, 3, 2, 8], []).toString() === [].toString())']
```"
1033,"    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","```javascript
function largestPrimeFactor(n) {
    function isPrime(k) {
        if (k < 2) {
            return false;
        }
        for (let i = 2; i < k; i++) {
            if (k % i === 0) {
                return false;
            }
        }
        return true;
    }
    let largest = 1;
    for (let j = 2; j <= n; j++) {
        if (n % j === 0 && isPrime(j)) {
            largest = Math.max(largest, j);
        }
    }
    return largest;
}
```",1034,"```javascript
console.assert(largest_prime_factor(15) === 5);
console.assert(largest_prime_factor(27) === 3);
console.assert(largest_prime_factor(63) === 7);
console.assert(largest_prime_factor(330) === 11);
console.assert(largest_prime_factor(13195) === 29);
```"
1034,"    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","```javascript
function sumToN(n) {
    return (n * (n + 1)) / 2;
}
```",1035,"```javascript
['console.assert(sum_to_n(1) === 1)', 'console.assert(sum_to_n(6) === 21)', 'console.assert(sum_to_n(11) === 66)', 'console.assert(sum_to_n(30) === 465)', 'console.assert(sum_to_n(100) === 5050)'];
```"
1035,"    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","```javascript
function correctBracketing(brackets) {
    let depth = 0;
    for (let b of brackets) {
        if (b === ""("") {
            depth += 1;
        } else {
            depth -= 1;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth === 0;
}
```",1036,"```javascript
['console.assert(correct_bracketing(""()""))', 'console.assert(correct_bracketing(""(()())""))', 'console.assert(correct_bracketing(""()()(()())()""))', 'console.assert(correct_bracketing(""()()((()()())())(()()(()))""))', 'console.assert(!correct_bracketing(""((()())))"")', 'console.assert(!correct_bracketing("")(()""))', 'console.assert(!correct_bracketing(""(""))', 'console.assert(!correct_bracketing(""((((""))', 'console.assert(!correct_bracketing("")""))', 'console.assert(!correct_bracketing(""(()""))', 'console.assert(!correct_bracketing(""()()(()())())(()""))', 'console.assert(!correct_bracketing(""()()(()())()))()""))'];
```"
1036,"    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","```javascript
function derivative(xs) {
    return xs.map((x, i) => i * x).slice(1);
}
```",1037,"```javascript
['console.assert(derivative([3, 1, 2, 4, 5]).toString() === [1, 4, 12, 20].toString())', 
 'console.assert(derivative([1, 2, 3]).toString() === [2, 6].toString())', 
 'console.assert(derivative([3, 2, 1]).toString() === [2, 2].toString())', 
 'console.assert(derivative([3, 2, 1, 0, 4]).toString() === [2, 2, 0, 16].toString())', 
 'console.assert(derivative([1]).toString() === [].toString())']
```"
1037,"    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please  this function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","```javascript
function fibfib(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 0;
    }
    if (n === 2) {
        return 1;
    }
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
}
```",1038,"```javascript
console.assert(fibfib(2) === 1);
console.assert(fibfib(1) === 0);
console.assert(fibfib(5) === 4);
console.assert(fibfib(8) === 24);
console.assert(fibfib(10) === 81);
console.assert(fibfib(12) === 274);
console.assert(fibfib(14) === 927);
```"
1038,"    """""" this function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","```javascript
function vowelsCount(s) {
    const vowels = ""aeiouAEIOU"";
    let nVowels = [...s].filter(c => vowels.includes(c)).length;
    if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {
        nVowels += 1;
    }
    return nVowels;
}
```",1039,"```javascript
['console.assert(vowels_count(""abcde"") === 2, ""Test 1"")', 'console.assert(vowels_count(""Alone"") === 3, ""Test 2"")', 'console.assert(vowels_count(""key"") === 2, ""Test 3"")', 'console.assert(vowels_count(""bye"") === 1, ""Test 4"")', 'console.assert(vowels_count(""keY"") === 2, ""Test 5"")', 'console.assert(vowels_count(""bYe"") === 1, ""Test 6"")', 'console.assert(vowels_count(""ACEDY"") === 3, ""Test 7"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1039,"    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","```javascript
function circularShift(x, shift) {
    let s = String(x);
    if (shift > s.length) {
        return s.split('').reverse().join('');
    } else {
        return s.slice(s.length - shift) + s.slice(0, s.length - shift);
    }
}
```",1040,"```javascript
console.assert(circular_shift(100, 2) === ""001"");
console.assert(circular_shift(12, 2) === ""12"");
console.assert(circular_shift(97, 8) === ""79"");
console.assert(circular_shift(12, 1) === ""21"", ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(circular_shift(11, 101) === ""11"", ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1040,"    """"""Task
     this function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","```javascript
function digitSum(s) {
    if (s === """") return 0;
    return Array.from(s).reduce((sum, char) => sum + (char === char.toUpperCase() ? char.charCodeAt(0) : 0), 0);
}
```",1041,"```javascript
[
  () => { if (true) {} else throw new Error(""This prints if this assert fails 1 (good for debugging!)""); },
  () => { if (digitSum("""") !== 0) throw new Error(""Error""); },
  () => { if (digitSum(""abAB"") !== 131) throw new Error(""Error""); },
  () => { if (digitSum(""abcCd"") !== 67) throw new Error(""Error""); },
  () => { if (digitSum(""helloE"") !== 69) throw new Error(""Error""); },
  () => { if (digitSum(""woArBld"") !== 131) throw new Error(""Error""); },
  () => { if (digitSum(""aAaaaXa"") !== 153) throw new Error(""Error""); },
  () => { if (true) {} else throw new Error(""This prints if this assert fails 2 (also good for debugging!)""); },
  () => { if (digitSum("" How are yOu?"") !== 151) throw new Error(""Error""); },
  () => { if (digitSum(""You arE Very Smart"") !== 327) throw new Error(""Error""); }
]
```"
1041,"    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","```javascript
function fruitDistribution(s, n) {
    let lis = [];
    s.split(' ').forEach(i => {
        if (!isNaN(i)) {
            lis.push(parseInt(i));
        }
    });
    return n - lis.reduce((acc, val) => acc + val, 0);
}
```",1042,"```javascript
['console.assert(fruit_distribution(""5 apples and 6 oranges"",19) === 8)', 'console.assert(fruit_distribution(""5 apples and 6 oranges"",21) === 10)', 'console.assert(fruit_distribution(""0 apples and 1 oranges"",3) === 2)', 'console.assert(fruit_distribution(""1 apples and 0 oranges"",3) === 2)', 'console.assert(fruit_distribution(""2 apples and 3 oranges"",100) === 95)', 'console.assert(fruit_distribution(""2 apples and 3 oranges"",5) === 0)', 'console.assert(fruit_distribution(""1 apples and 100 oranges"",120) === 19)']
```"
1042,"    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","```javascript
function pluck(arr) {
    if (arr.length === 0) return [];
    const evens = arr.filter(x => x % 2 === 0);
    if (evens.length === 0) return [];
    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];
}
```",1043,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(pluck([4, 2, 3]).toString() === [2, 1].toString(), ""Error"")', 'console.assert(pluck([1, 2, 3]).toString() === [2, 1].toString(), ""Error"")', 'console.assert(pluck([]).toString() === [].toString(), ""Error"")', 'console.assert(pluck([5, 0, 3, 0, 4, 2]).toString() === [0, 1].toString(), ""Error"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(pluck([1, 2, 3, 0, 5, 3]).toString() === [0, 3].toString(), ""Error"")', 'console.assert(pluck([5, 4, 8, 4, 8]).toString() === [4, 1].toString(), ""Error"")', 'console.assert(pluck([7, 6, 7, 1]).toString() === [6, 1].toString(), ""Error"")', 'console.assert(pluck([7, 9, 7, 1]).toString() === [].toString(), ""Error"")']
```"
1043,"    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","```javascript
function search(lst) {
    const frq = Array(Math.max(...lst) + 1).fill(0);
    for (let i of lst) {
        frq[i] += 1;
    }

    let ans = -1;
    for (let i = 1; i < frq.length; i++) {
        if (frq[i] >= i) {
            ans = i;
        }
    }

    return ans;
}
```",1044,"```javascript
['console.assert(search([5, 5, 5, 5, 1]) === 1)', 'console.assert(search([4, 1, 4, 1, 4, 4]) === 4)', 'console.assert(search([3, 3]) === -1)', 'console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)', 'console.assert(search([2, 3, 3, 2, 2]) === 2)', 'console.assert(search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) === 1)', 'console.assert(search([3, 2, 8, 2]) === 2)', 'console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)', 'console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)', 'console.assert(search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) === 1)', 'console.assert(search([1, 9, 10, 1, 3]) === 1)', 'console.assert(search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) === 5)', 'console.assert(search([1]) === 1)', 'console.assert(search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) === 4)', 'console.assert(search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2)', 'console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)', 'console.assert(search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) === 4)', 'console.assert(search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) === 4)', 'console.assert(search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2)', 'console.assert(search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) === -1)', 'console.assert(search([10]) === -1)', 'console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)', 'console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)', 'console.assert(search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) === 1)', 'console.assert(search([3, 10, 10, 9, 2]) === -1)'];
```"
1044,"    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","```javascript
function strangeSortList(lst) {
    let res = [];
    let switcher = true;
    while (lst.length > 0) {
        const value = switcher ? Math.min(...lst) : Math.max(...lst);
        res.push(value);
        lst.splice(lst.indexOf(value), 1);
        switcher = !switcher;
    }
    return res;
}
```",1045,"```javascript
['console.assert(JSON.stringify(strange_sort_list([1, 2, 3, 4])) === JSON.stringify([1, 4, 2, 3])', 
 'console.assert(JSON.stringify(strange_sort_list([5, 6, 7, 8, 9])) === JSON.stringify([5, 9, 6, 8, 7])', 
 'console.assert(JSON.stringify(strange_sort_list([1, 2, 3, 4, 5])) === JSON.stringify([1, 5, 2, 4, 3])', 
 'console.assert(JSON.stringify(strange_sort_list([5, 6, 7, 8, 9, 1])) === JSON.stringify([1, 9, 5, 8, 6, 7])', 
 'console.assert(JSON.stringify(strange_sort_list([5, 5, 5, 5])) === JSON.stringify([5, 5, 5, 5])', 
 'console.assert(JSON.stringify(strange_sort_list([])) === JSON.stringify([])', 
 'console.assert(JSON.stringify(strange_sort_list([1,2,3,4,5,6,7,8])) === JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])', 
 'console.assert(JSON.stringify(strange_sort_list([0,2,2,2,5,5,-5,-5])) === JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])', 
 'console.assert(JSON.stringify(strange_sort_list([111111])) === JSON.stringify([111111])', 
 'console.assert(true)']
```"
1045,"    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","```javascript
function triangleArea(a, b, c) {
    if (a + b <= c || a + c <= b || b + c <= a) {
        return -1; 
    }
    let s = (a + b + c) / 2;    
    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
    area = Math.round(area * 100) / 100;
    return area;
}
```",1046,"```javascript
['console.assert(triangle_area(3, 4, 5) === 6.00, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(triangle_area(1, 2, 10) === -1)', 'console.assert(triangle_area(4, 8, 5) === 8.18)', 'console.assert(triangle_area(2, 2, 2) === 1.73)', 'console.assert(triangle_area(1, 2, 3) === -1)', 'console.assert(triangle_area(10, 5, 7) === 16.25)', 'console.assert(triangle_area(2, 6, 3) === -1)', 'console.assert(triangle_area(1, 1, 1) === 0.43, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(triangle_area(2, 2, 10) === -1)']
```"
1046,"    '''
     this function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","```javascript
function willItFly(q, w) {
    if (q.reduce((a, b) => a + b, 0) > w) {
        return false;
    }

    let i = 0, j = q.length - 1;
    while (i < j) {
        if (q[i] !== q[j]) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}
```",1047,"```javascript
['console.assert(will_it_fly([3, 2, 3], 9) === true)', 'console.assert(will_it_fly([1, 2], 5) === false)', 'console.assert(will_it_fly([3], 5) === true)', 'console.assert(will_it_fly([3, 2, 3], 1) === false)', 'console.assert(will_it_fly([1, 2, 3], 6) === false)', 'console.assert(will_it_fly([5], 5) === true)']
```"
1047,"    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","```javascript
function smallestChange(arr) {
    let ans = 0;
    for (let i = 0; i < Math.floor(arr.length / 2); i++) {
        if (arr[i] !== arr[arr.length - i - 1]) {
            ans += 1;
        }
    }
    return ans;
}
```",1048,"```javascript
['console.assert(smallest_change([1,2,3,5,4,7,9,6]) === 4)', 'console.assert(smallest_change([1, 2, 3, 4, 3, 2, 2]) === 1)', 'console.assert(smallest_change([1, 4, 2]) === 1)', 'console.assert(smallest_change([1, 4, 4, 2]) === 1)', 'console.assert(smallest_change([1, 2, 3, 2, 1]) === 0)', 'console.assert(smallest_change([3, 1, 1, 3]) === 0)', 'console.assert(smallest_change([1]) === 0)', 'console.assert(smallest_change([0, 1]) === 1)'];
```"
1048,"    '''
     this function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
","```javascript
function total_match(lst1, lst2) {
    let l1 = 0;
    for (let st of lst1) {
        l1 += st.length;
    }

    let l2 = 0;
    for (let st of lst2) {
        l2 += st.length;
    }

    if (l1 <= l2) {
        return lst1;
    } else {
        return lst2;
    }
}
```",1049,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(total_match([], []) === [])', 'console.assert(total_match([""hi"", ""admin""], [""hi"", ""hi""]) === [""hi"", ""hi""])', 'console.assert(total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""]) === [""hi"", ""admin""])', 'console.assert(total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""]) === [""4""])', 'console.assert(total_match([""hi"", ""admin""], [""hI"", ""Hi""]) === [""hI"", ""Hi""])', 'console.assert(total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hi""]) === [""hI"", ""hi"", ""hi""])', 'console.assert(total_match([""hi"", ""admin""], [""hI"", ""hi"", ""hii""]) === [""hi"", ""admin""])', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(total_match([], [""this""]) === [])', 'console.assert(total_match([""this""], []) === [])']
```"
1049,"    """""" this function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
","```javascript
function is_multiply_prime(a) {
    function is_prime(n) {
        for (let j = 2; j < n; j++) {
            if (n % j === 0) {
                return false;
            }
        }
        return true;
    }

    for (let i = 2; i < 101; i++) {
        if (!is_prime(i)) continue;
        for (let j = 2; j < 101; j++) {
            if (!is_prime(j)) continue;
            for (let k = 2; k < 101; k++) {
                if (!is_prime(k)) continue;
                if (i * j * k === a) return true;
            }
        }
    }
    return false;
}
```",1050,"```javascript
['console.assert(is_multiply_prime(5) === false)', 'console.assert(is_multiply_prime(30) === true)', 'console.assert(is_multiply_prime(8) === true)', 'console.assert(is_multiply_prime(10) === false)', 'console.assert(is_multiply_prime(125) === true)', 'console.assert(is_multiply_prime(3 * 5 * 7) === true)', 'console.assert(is_multiply_prime(3 * 6 * 7) === false)', 'console.assert(is_multiply_prime(9 * 9 * 9) === false)', 'console.assert(is_multiply_prime(11 * 9 * 9) === false)', 'console.assert(is_multiply_prime(11 * 13 * 7) === true)']
```"
1050,"    """"""Your task is to  this function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","```javascript
function isSimplePower(x, n) {
    if (n == 1) {
        return (x === 1);
    }
    let power = 1;
    while (power < x) {
        power *= n;
    }
    return (power === x);
}
```",1051,"```javascript
console.assert(is_simple_power(16, 2) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(143214, 16) === false, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(4, 2) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(9, 3) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(16, 4) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(24, 2) === false, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(128, 4) === false, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(12, 6) === false, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_simple_power(1, 1) === true, ""This prints if this assert fails 2 (also good for debugging!)"");
console.assert(is_simple_power(1, 12) === true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1051,"    '''
     this function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","```javascript
function iscube(a) {
    a = Math.abs(a);
    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) === a;
}
```",1052,"```javascript
console.assert(iscube(1) === true, ""First test error: "" + iscube(1));
console.assert(iscube(2) === false, ""Second test error: "" + iscube(2));
console.assert(iscube(-1) === true, ""Third test error: "" + iscube(-1));
console.assert(iscube(64) === true, ""Fourth test error: "" + iscube(64));
console.assert(iscube(180) === false, ""Fifth test error: "" + iscube(180));
console.assert(iscube(1000) === true, ""Sixth test error: "" + iscube(1000));
console.assert(iscube(0) === true, ""1st edge test error: "" + iscube(0));
console.assert(iscube(1729) === false, ""2nd edge test error: "" + iscube(1728));
```"
1052,"    """"""You have been tasked to  this function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","```javascript
function hex_key(num) {
    const primes = ['2', '3', '5', '7', 'B', 'D'];
    let total = 0;
    for (let i = 0; i < num.length; i++) {
        if (primes.includes(num[i])) {
            total += 1;
        }
    }
    return total;
}
```",1053,"```javascript
console.assert(hex_key(""AB"") === 1, ""First test error: "" + hex_key(""AB""));
console.assert(hex_key(""1077E"") === 2, ""Second test error: "" + hex_key(""1077E""));
console.assert(hex_key(""ABED1A33"") === 4, ""Third test error: "" + hex_key(""ABED1A33""));
console.assert(hex_key(""2020"") === 2, ""Fourth test error: "" + hex_key(""2020""));
console.assert(hex_key(""123456789ABCDEF0"") === 6, ""Fifth test error: "" + hex_key(""123456789ABCDEF0""));
console.assert(hex_key(""112233445566778899AABBCCDDEEFF00"") === 12, ""Sixth test error: "" + hex_key(""112233445566778899AABBCCDDEEFF00""));
console.assert(hex_key([]) === 0);
```"
1053,"    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
","```javascript
function decimal_to_binary(decimal) {
  return ""db"" + decimal.toString(2) + ""db"";
}
```",1054,"```javascript
console.assert(decimal_to_binary(0) === ""db0db"");
console.assert(decimal_to_binary(32) === ""db100000db"");
console.assert(decimal_to_binary(103) === ""db1100111db"");
console.assert(decimal_to_binary(15) === ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1054,"    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","```javascript
function isHappy(s) {
  if (s.length < 3) {
    return false;
  }

  for (let i = 0; i < s.length - 2; i++) {
    if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {
      return false;
    }
  }
  return true;
}
```",1055,"```javascript
console.assert(is_happy(""a"") === false, ""a"");
console.assert(is_happy(""aa"") === false, ""aa"");
console.assert(is_happy(""abcd"") === true, ""abcd"");
console.assert(is_happy(""aabb"") === false, ""aabb"");
console.assert(is_happy(""adb"") === true, ""adb"");
console.assert(is_happy(""xyy"") === false, ""xyy"");
console.assert(is_happy(""iopaxpoi"") === true, ""iopaxpoi"");
console.assert(is_happy(""iopaxioi"") === false, ""iopaxioi"");
```"
1055,"    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","```javascript
function numericalLetterGrade(grades) {
    let letterGrade = [];
    for (let gpa of grades) {
        if (gpa === 4.0) {
            letterGrade.push(""A+"");
        } else if (gpa > 3.7) {
            letterGrade.push(""A"");
        } else if (gpa > 3.3) {
            letterGrade.push(""A-"");
        } else if (gpa > 3.0) {
            letterGrade.push(""B+"");
        } else if (gpa > 2.7) {
            letterGrade.push(""B"");
        } else if (gpa > 2.3) {
            letterGrade.push(""B-"");
        } else if (gpa > 2.0) {
            letterGrade.push(""C+"");
        } else if (gpa > 1.7) {
            letterGrade.push(""C"");
        } else if (gpa > 1.3) {
            letterGrade.push(""C-"");
        } else if (gpa > 1.0) {
            letterGrade.push(""D+"");
        } else if (gpa > 0.7) {
            letterGrade.push(""D"");
        } else if (gpa > 0.0) {
            letterGrade.push(""D-"");
        } else {
            letterGrade.push(""E"");
        }
    }
    return letterGrade;
}
```",1056,"```javascript
[""console.assert(JSON.stringify(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])) === JSON.stringify(['A+', 'B', 'C-', 'C', 'A-']));"", ""console.assert(JSON.stringify(numerical_letter_grade([1.2])) === JSON.stringify(['D+']));"", ""console.assert(JSON.stringify(numerical_letter_grade([0.5])) === JSON.stringify(['D-']));"", ""console.assert(JSON.stringify(numerical_letter_grade([0.0])) === JSON.stringify(['E']));"", ""console.assert(JSON.stringify(numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3])) === JSON.stringify(['D', 'D-', 'C-', 'B', 'B+']));"", ""console.assert(JSON.stringify(numerical_letter_grade([0, 0.7])) === JSON.stringify(['E', 'D-']));"", ""console.assert(true);""]
```"
1056,"    """""" this function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
","```javascript
function primeLength(string) {
    let l = string.length;
    if (l === 0 || l === 1) {
        return false;
    }
    for (let i = 2; i < l; i++) {
        if (l % i === 0) {
            return false;
        }
    }
    return true;
}
```",1057,"```javascript
[""console.assert(prime_length('Hello') === true)"", ""console.assert(prime_length('abcdcba') === true)"", ""console.assert(prime_length('kittens') === true)"", ""console.assert(prime_length('orange') === false)"", ""console.assert(prime_length('wow') === true)"", ""console.assert(prime_length('world') === true)"", ""console.assert(prime_length('MadaM') === true)"", ""console.assert(prime_length('Wow') === true)"", ""console.assert(prime_length('') === false)"", ""console.assert(prime_length('HI') === true)"", ""console.assert(prime_length('go') === true)"", ""console.assert(prime_length('gogo') === false)"", ""console.assert(prime_length('aaaaaaaaaaaaaaa') === false)"", ""console.assert(prime_length('Madam') === true)"", ""console.assert(prime_length('M') === false)"", ""console.assert(prime_length('0') === false)""]
```"
1057,"    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
","```javascript
function starts_one_ends(n) {
    if (n === 1) return 1;
    return 18 * (10 ** (n - 2));
}
```",1058,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(starts_one_ends(1) === 1)', 'console.assert(starts_one_ends(2) === 18)', 'console.assert(starts_one_ends(3) === 180)', 'console.assert(starts_one_ends(4) === 1800)', 'console.assert(starts_one_ends(5) === 18000)', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1058,"    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","```javascript
function solve(N) {
    return (sum((N.toString().split('').map(Number))) >>> 0).toString(2);
}

function sum(arr) {
    return arr.reduce((acc, curr) => acc + curr, 0);
}
```",1059,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(solve(1000) === ""1"", ""Error"")', 
 'console.assert(solve(150) === ""110"", ""Error"")', 
 'console.assert(solve(147) === ""1100"", ""Error"")', 
 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 
 'console.assert(solve(333) === ""1001"", ""Error"")', 
 'console.assert(solve(963) === ""10010"", ""Error"")']
```"
1059,"    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","```javascript
function add(lst) {
    return lst.filter((value, index) => index % 2 === 1 && value % 2 === 0).reduce((a, b) => a + b, 0);
}
```",1060,"```javascript
['console.assert(add([4, 88]) === 88)', 'console.assert(add([4, 5, 6, 7, 2, 122]) === 122)', 'console.assert(add([4, 0, 6, 7]) === 0)', 'console.assert(add([4, 4, 6, 8]) === 12)']
```"
1060,"    """"""
     this function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
","```javascript
function anti_shuffle(s) {
    return s.split(' ').map(i => i.split('').sort().join('')).join(' ');
}
```",1061,"```javascript
[""console.assert(anti_shuffle('Hi') === 'Hi')"", ""console.assert(anti_shuffle('hello') === 'ehllo')"", ""console.assert(anti_shuffle('number') === 'bemnru')"", ""console.assert(anti_shuffle('abcd') === 'abcd')"", ""console.assert(anti_shuffle('Hello World!!!') === 'Hello !!!Wdlor')"", ""console.assert(anti_shuffle('') === '')"", ""console.assert(anti_shuffle('Hi. My name is Mister Robot. How are you?') === '.Hi My aemn is Meirst .Rboot How aer ?ouy')"", 'console.assert(true)']
```"
1061,"    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","```javascript
function getRow(lst, x) {
    const coords = [];
    for (let i = 0; i < lst.length; i++) {
        for (let j = 0; j < lst[i].length; j++) {
            if (lst[i][j] === x) {
                coords.push([i, j]);
            }
        }
    }
    return coords.sort((a, b) => b[1] - a[1]).sort((a, b) => a[0] - b[0]);
}
```",1062,"```javascript
['console.assert(get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1).toString() === [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)].toString())', 
 'console.assert(get_row([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]], 2).toString() === [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)].toString())', 
 'console.assert(get_row([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,1,3,4,5,6],[1,2,1,4,5,6],[1,2,3,1,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1).toString() === [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)].toString())', 
 'console.assert(get_row([], 1).toString() === [].toString())', 
 'console.assert(get_row([[1]], 2).toString() === [].toString())', 
 'console.assert(get_row([[], [1], [1, 2, 3]], 3).toString() === [(2, 2)].toString())', 
 'console.assert(true)'];
```"
1062,"    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
","```javascript
function sortArray(array) {
    return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);
}
```",1063,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(sort_array([]).toString() === [].toString(), ""Error"")', 'console.assert(sort_array([5]).toString() === [5].toString(), ""Error"")', 'console.assert(sort_array([2, 4, 3, 0, 1, 5]).toString() === [0, 1, 2, 3, 4, 5].toString(), ""Error"")', 'console.assert(sort_array([2, 4, 3, 0, 1, 5, 6]).toString() === [6, 5, 4, 3, 2, 1, 0].toString(), ""Error"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(sort_array([2, 1]).toString() === [1, 2].toString(), ""Error"")', 'console.assert(sort_array([15, 42, 87, 32 ,11, 0]).toString() === [0, 11, 15, 32, 42, 87].toString(), ""Error"")', 'console.assert(sort_array([21, 14, 23, 11]).toString() === [23, 21, 14, 11].toString(), ""Error"")']
```"
1063,"    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
","```javascript
function encrypt(s) {
    const d = 'abcdefghijklmnopqrstuvwxyz';
    let out = '';
    for (let c of s) {
        if (d.includes(c)) {
            out += d[(d.indexOf(c) + 2 * 2) % 26];
        } else {
            out += c;
        }
    }
    return out;
}
```",1064,"```javascript
['console.assert(encrypt(\'hi\') === \'lm\', ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(encrypt(\'asdfghjkl\') === \'ewhjklnop\', ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(encrypt(\'gf\') === \'kj\', ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(encrypt(\'et\') === \'ix\', ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(encrypt(\'faewfawefaewg\') === \'jeiajeaijeiak\', ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(encrypt(\'hellomyfriend\') === \'lippsqcjvmirh\', ""This prints if this assert fails 2 (good for debugging!)"")', 'console.assert(encrypt(\'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\') === \'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\', ""This prints if this assert fails 3 (good for debugging!)"")', 'console.assert(encrypt(\'a\') === \'e\', ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1064,"    """"""
    You are given a list of integers.
     this function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","```javascript
function nextSmallest(lst) {
    lst = Array.from(new Set(lst)).sort((a, b) => a - b);
    return lst.length < 2 ? null : lst[1];
}
```",1065,"```javascript
['console.assert(next_smallest([1, 2, 3, 4, 5]) === 2)', 'console.assert(next_smallest([5, 1, 4, 3, 2]) === 2)', 'console.assert(next_smallest([]) === null)', 'console.assert(next_smallest([1, 1]) === null)', 'console.assert(next_smallest([1, 1, 1, 1, 0]) === 1)', 'console.assert(next_smallest([1, Math.pow(0, 0)]) === null)', 'console.assert(next_smallest([-35, 34, 12, -45]) === -35)', 'console.assert(true)']
```"
1065,"    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","```javascript
function isBored(S) {
    const sentences = S.split(/[.?!]\s*/);
    return sentences.reduce((count, sentence) => count + (sentence.startsWith('I ') ? 1 : 0), 0);
}
```",1066,"```javascript
['console.assert(is_bored(""Hello world"") === 0, ""Test 1"")', 'console.assert(is_bored(""Is the sky blue?"") === 0, ""Test 2"")', 'console.assert(is_bored(""I love It !"") === 1, ""Test 3"")', 'console.assert(is_bored(""bIt"") === 0, ""Test 4"")', 'console.assert(is_bored(""I feel good today. I will be productive. will kill It"") === 2, ""Test 5"")', 'console.assert(is_bored(""You and I are going for a walk"") === 0, ""Test 6"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1066,"    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
","```javascript
function anyInt(x, y, z) {
    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {
        if ((x + y === z) || (x + z === y) || (y + z === x)) {
            return true;
        }
        return false;
    }
    return false;
}
```",1067,"```javascript
console.assert(any_int(2, 3, 1) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(any_int(2.5, 2, 3) === false, ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(any_int(1.5, 5, 3.5) === false, ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(any_int(2, 6, 2) === false, ""This prints if this assert fails 4 (good for debugging!)"");
console.assert(any_int(4, 2, 2) === true, ""This prints if this assert fails 5 (good for debugging!)"");
console.assert(any_int(2.2, 2.2, 2.2) === false, ""This prints if this assert fails 6 (good for debugging!)"");
console.assert(any_int(-4, 6, 2) === true, ""This prints if this assert fails 7 (good for debugging!)"");
console.assert(any_int(2, 1, 1) === true, ""This prints if this assert fails 8 (also good for debugging!)"");
console.assert(any_int(3, 4, 7) === true, ""This prints if this assert fails 9 (also good for debugging!)"");
console.assert(any_int(3.0, 4, 7) === false, ""This prints if this assert fails 10 (also good for debugging!)"");
```"
1067,"    """"""
     this function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","```javascript
function encode(message) {
    const vowels = ""aeiouAEIOU"";
    const vowelsReplace = {};
    for (let i of vowels) {
        vowelsReplace[i] = String.fromCharCode(i.charCodeAt(0) + 2);
    }
    message = message.split('').map(char => char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase()).join('');
    return message.split('').map(char => vowelsReplace[char] || char).join('');
}
```",1068,"```javascript
console.assert(encode('TEST') === 'tgst', ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(encode('Mudasir') === 'mWDCSKR', ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(encode('YES') === 'ygs', ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG', ""This prints if this assert fails 2 (also good for debugging!)"");
console.assert(encode(""I DoNt KnOw WhAt tO WrItE"") === 'k dQnT kNqW wHcT Tq wRkTg', ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1068,"    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","```javascript
function skjkasdkd(lst) {
    function isPrime(n) {
        for (let i = 2; i <= Math.sqrt(n); i++) {
            if (n % i === 0) {
                return false;
            }
        }
        return true;
    }

    let maxx = 0;
    let i = 0;
    while (i < lst.length) {
        if (lst[i] > maxx && isPrime(lst[i])) {
            maxx = lst[i];
        }
        i++;
    }
    
    const result = String(maxx).split('').reduce((sum, digit) => sum + parseInt(digit), 0);
    return result;
}
```",1069,"```javascript
['console.assert(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) === 10, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) === 25, ""This prints if this assert fails 2 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) === 13, ""This prints if this assert fails 3 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) === 11, ""This prints if this assert fails 4 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([0,81,12,3,1,21]) === 3, ""This prints if this assert fails 5 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([0,8,1,2,1,7]) === 7, ""This prints if this assert fails 6 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([8191]) === 19, ""This prints if this assert fails 7 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19, ""This prints if this assert fails 8 (also good for debugging!)"")', 
 'console.assert(skjkasdkd([127, 97, 8192]) === 10, ""This prints if this assert fails 9 (also good for debugging!)"")']
```"
1069,"    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","```javascript
function checkDictCase(dict) {
    if (Object.keys(dict).length === 0) {
        return false;
    } else {
        let state = ""start"";
        for (let key of Object.keys(dict)) {
            if (typeof key !== ""string"") {
                state = ""mixed"";
                break;
            }
            if (state === ""start"") {
                if (key === key.toUpperCase()) {
                    state = ""upper"";
                } else if (key === key.toLowerCase()) {
                    state = ""lower"";
                } else {
                    break;
                }
            } else if ((state === ""upper"" && key !== key.toUpperCase()) || 
                       (state === ""lower"" && key !== key.toLowerCase())) {
                state = ""mixed"";
                break;
            } else {
                break;
            }
        }
        return state === ""upper"" || state === ""lower"";
    }
}
```",1070,"```javascript
console.assert(check_dict_case({""p"":""pineapple"", ""b"":""banana""}) === true, ""First test error: "" + String(check_dict_case({""p"":""pineapple"", ""b"":""banana""})));
console.assert(check_dict_case({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""}) === false, ""Second test error: "" + String(check_dict_case({""p"":""pineapple"", ""A"":""banana"", ""B"":""banana""})));
console.assert(check_dict_case({""p"":""pineapple"", 5:""banana"", ""a"":""apple""}) === false, ""Third test error: "" + String(check_dict_case({""p"":""pineapple"", 5:""banana"", ""a"":""apple""})));
console.assert(check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) === false, ""Fourth test error: "" + String(check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""})));
console.assert(check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) === true, ""Fifth test error: "" + String(check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" })));
console.assert(check_dict_case({""fruit"":""Orange"", ""taste"":""Sweet"" }) === true, ""Fourth test error: "" + String(check_dict_case({""fruit"":""Orange"", ""taste"":""Sweet"" })));
console.assert(check_dict_case({}) === false, ""1st edge test error: "" + String(check_dict_case({})));
```"
1070,"    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
","```javascript
function countUpTo(n) {
    let primes = [];
    for (let i = 2; i < n; i++) {
        let isPrime = true;
        for (let j = 2; j < i; j++) {
            if (i % j === 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            primes.push(i);
        }
    }
    return primes;
}
```",1071,"```javascript
['console.assert(count_up_to(5).toString() === [2,3].toString())', 'console.assert(count_up_to(6).toString() === [2,3,5].toString())', 'console.assert(count_up_to(7).toString() === [2,3,5].toString())', 'console.assert(count_up_to(10).toString() === [2,3,5,7].toString())', 'console.assert(count_up_to(0).toString() === [].toString())', 'console.assert(count_up_to(22).toString() === [2,3,5,7,11,13,17,19].toString())', 'console.assert(count_up_to(1).toString() === [].toString())', 'console.assert(count_up_to(18).toString() === [2,3,5,7,11,13,17].toString())', 'console.assert(count_up_to(47).toString() === [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43].toString())', 'console.assert(count_up_to(101).toString() === [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97].toString())']
```"
1071,"    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","```javascript
function multiply(a, b) {
    return Math.abs(a % 10) * Math.abs(b % 10);
}
```",1072,"```javascript
console.assert(multiply(148, 412) === 16, ""First test error: "" + String(multiply(148, 412)));
console.assert(multiply(19, 28) === 72, ""Second test error: "" + String(multiply(19, 28)));
console.assert(multiply(2020, 1851) === 0, ""Third test error: "" + String(multiply(2020, 1851)));
console.assert(multiply(14, -15) === 20, ""Fourth test error: "" + String(multiply(14, -15)));
console.assert(multiply(76, 67) === 42, ""Fifth test error: "" + String(multiply(76, 67)));
console.assert(multiply(17, 27) === 49, ""Sixth test error: "" + String(multiply(17, 27)));
console.assert(multiply(0, 1) === 0, ""1st edge test error: "" + String(multiply(0, 1)));
console.assert(multiply(0, 0) === 0, ""2nd edge test error: "" + String(multiply(0, 0)));
```"
1072,"    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
","```javascript
function countUpper(s) {
    let count = 0;
    for (let i = 0; i < s.length; i += 2) {
        if (""AEIOU"".includes(s[i])) {
            count += 1;
        }
    }
    return count;
}
```",1073,"```javascript
[""console.assert(count_upper('aBCdEf') == 1)"", ""console.assert(count_upper('abcdefg') == 0)"", ""console.assert(count_upper('dBBE') == 0)"", ""console.assert(count_upper('B') == 0)"", ""console.assert(count_upper('U') == 1)"", ""console.assert(count_upper('') == 0)"", ""console.assert(count_upper('EEEE') == 2)"", 'console.assert(true)']
```"
1073,"    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","```javascript
function closestInteger(value) {
    if ((value.match(/\./g) || []).length === 1) {
        // remove trailing zeros
        while (value[value.length - 1] === '0') {
            value = value.slice(0, -1);
        }
    }

    let num = parseFloat(value);
    let res;

    if (value.slice(-2) === '.5') {
        if (num > 0) {
            res = Math.ceil(num);
        } else {
            res = Math.floor(num);
        }
    } else if (value.length > 0) {
        res = Math.round(num);
    } else {
        res = 0;
    }

    return res;
}
```",1074,"```javascript
['console.assert(closest_integer(""10"") === 10, ""Test 1"")', 'console.assert(closest_integer(""14.5"") === 15, ""Test 2"")', 'console.assert(closest_integer(""-15.5"") === -16, ""Test 3"")', 'console.assert(closest_integer(""15.3"") === 15, ""Test 4"")', 'console.assert(closest_integer(""0"") === 0, ""Test 0"")']
```"
1074,"    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","```javascript
function make_a_pile(n) {
    return Array.from({ length: n }, (_, i) => n + 2 * i);
}
```",1075,"```javascript
console.assert(JSON.stringify(make_a_pile(3)) === JSON.stringify([3, 5, 7]), ""Test 3"");
console.assert(JSON.stringify(make_a_pile(4)) === JSON.stringify([4, 6, 8, 10]), ""Test 4"");
console.assert(JSON.stringify(make_a_pile(5)) === JSON.stringify([5, 7, 9, 11, 13]));
console.assert(JSON.stringify(make_a_pile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16]));
console.assert(JSON.stringify(make_a_pile(8)) === JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22]));
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1075,"    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","```javascript
function wordsString(s) {
    if (!s) {
        return [];
    }

    let sList = [];

    for (let letter of s) {
        if (letter === ',') {
            sList.push(' ');
        } else {
            sList.push(letter);
        }
    }

    sList = sList.join('');
    return sList.split(' ');
}
```",1076,"```javascript
[
    () => { console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""); },
    () => { console.assert(JSON.stringify(words_string(""Hi, my name is John"")) === JSON.stringify([""Hi"", ""my"", ""name"", ""is"", ""John""])); },
    () => { console.assert(JSON.stringify(words_string(""One, two, three, four, five, six"")) === JSON.stringify([""One"", ""two"", ""three"", ""four"", ""five"", ""six""])); },
    () => { console.assert(JSON.stringify(words_string(""Hi, my name"")) === JSON.stringify([""Hi"", ""my"", ""name""])); },
    () => { console.assert(JSON.stringify(words_string(""One,, two, three, four, five, six,"")) === JSON.stringify([""One"", ""two"", ""three"", ""four"", ""five"", ""six""])); },
    () => { console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""); },
    () => { console.assert(JSON.stringify(words_string("""")) === JSON.stringify([])); },
    () => { console.assert(JSON.stringify(words_string(""ahmed     , gamal"")) === JSON.stringify([""ahmed"", ""gamal""])); }
]
```"
1076,"    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","```javascript
function chooseNum(x, y) {
    if (x > y) {
        return -1;
    }
    if (y % 2 === 0) {
        return y;
    }
    if (x === y) {
        return -1;
    }
    return y - 1;
}
```",1077,"```javascript
['console.assert(choose_num(12, 15) === 14)', 'console.assert(choose_num(13, 12) === -1)', 'console.assert(choose_num(33, 12354) === 12354)', 'console.assert(choose_num(5234, 5233) === -1)', 'console.assert(choose_num(6, 29) === 28)', 'console.assert(choose_num(27, 10) === -1)', 'console.assert(choose_num(7, 7) === -1)', 'console.assert(choose_num(546, 546) === 546)']
```"
1077,"    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","```javascript
function roundedAvg(n, m) {
    if (m < n) {
        return -1;
    }
    let summation = 0;
    for (let i = n; i <= m; i++) {
        summation += i;
    }
    return (summation / (m - n + 1)).toString(2);
}
```",1078,"```javascript
['console.assert(rounded_avg(1, 5) === ""0b11"")', 'console.assert(rounded_avg(7, 13) === ""0b1010"")', 'console.assert(rounded_avg(964, 977) === ""0b1111001010"")', 'console.assert(rounded_avg(996, 997) === ""0b1111100100"")', 'console.assert(rounded_avg(560, 851) === ""0b1011000010"")', 'console.assert(rounded_avg(185, 546) === ""0b101101110"")', 'console.assert(rounded_avg(362, 496) === ""0b110101101"")', 'console.assert(rounded_avg(350, 902) === ""0b1001110010"")', 'console.assert(rounded_avg(197, 233) === ""0b11010111"")', 'console.assert(rounded_avg(7, 5) === -1)', 'console.assert(rounded_avg(5, 1) === -1)', 'console.assert(rounded_avg(5, 5) === ""0b101"")']
```"
1078,"    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","```javascript
function uniqueDigits(x) {
    let oddDigitElements = [];
    for (let i of x) {
        if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {
            oddDigitElements.push(i);
        }
    }
    return oddDigitElements.sort((a, b) => a - b);
}
```",1079,"```javascript
console.assert(unique_digits([15, 33, 1422, 1]).toString() === [1, 15, 33].toString());
console.assert(unique_digits([152, 323, 1422, 10]).toString() === [].toString());
console.assert(unique_digits([12345, 2033, 111, 151]).toString() === [111, 151].toString());
console.assert(unique_digits([135, 103, 31]).toString() === [31, 135].toString());
console.assert(true);
```"
1079,"    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","```javascript
function byLength(arr) {
    const dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };
    const sortedArr = arr.sort((a, b) => b - a);
    const newArr = [];
    for (const var of sortedArr) {
        try {
            newArr.push(dic[var]);
        } catch {
            // pass
        }
    }
    return newArr;
}
```",1080,"```javascript
console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(by_length([2, 1, 1, 4, 5, 8, 2, 3]).toString() === [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One""].toString(), ""Error"");
console.assert(by_length([]).toString() === [].toString(), ""Error"");
console.assert(by_length([1, -1, 55]).toString() === [""One""].toString(), ""Error"");
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
console.assert(by_length([1, -1, 3, 2]).toString() === [""Three"", ""Two"", ""One""].toString());
console.assert(by_length([9, 4, 8]).toString() === [""Nine"", ""Eight"", ""Four""].toString());
```"
1080,"    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
","```javascript
function f(n) {
    let ret = [];
    for (let i = 1; i <= n; i++) {
        let x;
        if (i % 2 === 0) {
            x = 1;
            for (let j = 1; j <= i; j++) x *= j;
            ret.push(x);
        } else {
            x = 0;
            for (let j = 1; j <= i; j++) x += j;
            ret.push(x);
        }
    }
    return ret;
}
```",1081,"```javascript
['console.assert(f(5).toString() === [1, 2, 6, 24, 15].toString())', 'console.assert(f(7).toString() === [1, 2, 6, 24, 15, 720, 28].toString())', 'console.assert(f(1).toString() === [1].toString())', 'console.assert(f(3).toString() === [1, 2, 6].toString())']
```"
1081,"    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
","```javascript
function evenOddPalindrome(n) {
    function isPalindrome(n) {
        return n.toString() === n.toString().split('').reverse().join('');
    }

    let evenPalindromeCount = 0;
    let oddPalindromeCount = 0;

    for (let i = 1; i <= n; i++) {
        if (i % 2 === 1 && isPalindrome(i)) {
            oddPalindromeCount++;
        } else if (i % 2 === 0 && isPalindrome(i)) {
            evenPalindromeCount++;
        }
    }
    return [evenPalindromeCount, oddPalindromeCount];
}
```",1082,"```javascript
['console.assert(even_odd_palindrome(123) === (8, 13))', 'console.assert(even_odd_palindrome(12) === (4, 6))', 'console.assert(even_odd_palindrome(3) === (1, 2))', 'console.assert(even_odd_palindrome(63) === (6, 8))', 'console.assert(even_odd_palindrome(25) === (5, 6))', 'console.assert(even_odd_palindrome(19) === (4, 6))', 'console.assert(even_odd_palindrome(9) === (4, 5), ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(even_odd_palindrome(1) === (0, 1), ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1082,"    """"""
     this function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","```javascript
function countNums(arr) {
    function digitsSum(n) {
        let neg = 1;
        if (n < 0) {
            n = -1 * n;
            neg = -1;
        }
        let digits = Array.from(String(n), Number);
        digits[0] *= neg;
        return digits.reduce((acc, curr) => acc + curr, 0);
    }
    return arr.filter(i => i > 0).map(digitsSum).length;
}
```",1083,"```javascript
['console.assert(count_nums([]) === 0)', 'console.assert(count_nums([-1, -2, 0]) === 0)', 'console.assert(count_nums([1, 1, 2, -2, 3, 4, 5]) === 6)', 'console.assert(count_nums([1, 6, 9, -6, 0, 1, 5]) === 5)', 'console.assert(count_nums([1, 100, 98, -7, 1, -1]) === 4)', 'console.assert(count_nums([12, 23, 34, -45, -56, 0]) === 5)', 'console.assert(count_nums([-0, Math.pow(1, 0)]) === 1)', 'console.assert(count_nums([1]) === 1)', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")'];
```"
1083,"    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","```javascript
function moveOneBall(arr) {
    if (arr.length === 0) {
        return true;
    }
    let sortedArray = arr.slice().sort((a, b) => a - b);
    let myArr = [];
    
    let minValue = Math.min(...arr);
    let minIndex = arr.indexOf(minValue);
    myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));
    
    for (let i = 0; i < arr.length; i++) {
        if (myArr[i] !== sortedArray[i]) {
            return false;
        }
    }
    return true;
}
```",1084,"```javascript
['console.assert(move_one_ball([3, 4, 5, 1, 2]) === true, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(move_one_ball([3, 5, 10, 1, 2]) === true)', 
 'console.assert(move_one_ball([4, 3, 1, 2]) === false)', 
 'console.assert(move_one_ball([3, 5, 4, 1, 2]) === false, ""This prints if this assert fails 2 (also good for debugging!)"")', 
 'console.assert(move_one_ball([]) === true)']
```"
1084,"    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","```javascript
function exchange(lst1, lst2) {
    let odd = 0;
    let even = 0;
    for (let i of lst1) {
        if (i % 2 === 1) {
            odd++;
        }
    }
    for (let i of lst2) {
        if (i % 2 === 0) {
            even++;
        }
    }
    if (even >= odd) {
        return ""YES"";
    }
    return ""NO"";
}
```",1085,"```javascript
['console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === ""YES"")', 'console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === ""NO"")', 'console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === ""YES"")', 'console.assert(exchange([5, 7, 3], [2, 6, 4]) === ""YES"")', 'console.assert(exchange([5, 7, 3], [2, 6, 3]) === ""NO"")', 'console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === ""NO"")', 'console.assert(exchange([100, 200], [200, 200]) === ""YES"")']
```"
1085,"    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
","```javascript
function histogram(test) {
    let dict1 = {};
    let list1 = test.split("" "");
    let t = 0;

    for (let i of list1) {
        if (list1.filter(x => x === i).length > t && i !== '') {
            t = list1.filter(x => x === i).length;
        }
    }
    if (t > 0) {
        for (let i of list1) {
            if (list1.filter(x => x === i).length === t) {
                dict1[i] = t;
            }
        }
    }
    return dict1;
}
```",1086,"```javascript
console.assert(JSON.stringify(histogram('a b b a')) === JSON.stringify({'a': 2, 'b': 2}), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(JSON.stringify(histogram('a b c a b')) === JSON.stringify({'a': 2, 'b': 2}), ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(JSON.stringify(histogram('a b c d g')) === JSON.stringify({'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}), ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(JSON.stringify(histogram('r t g')) === JSON.stringify({'r': 1, 't': 1, 'g': 1}), ""This prints if this assert fails 4 (good for debugging!)"");
console.assert(JSON.stringify(histogram('b b b b a')) === JSON.stringify({'b': 4}), ""This prints if this assert fails 5 (good for debugging!)"");
console.assert(JSON.stringify(histogram('r t g')) === JSON.stringify({'r': 1, 't': 1, 'g': 1}), ""This prints if this assert fails 6 (good for debugging!)"");
console.assert(JSON.stringify(histogram('')) === JSON.stringify({}), ""This prints if this assert fails 7 (also good for debugging!)"");
console.assert(JSON.stringify(histogram('a')) === JSON.stringify({'a': 1}), ""This prints if this assert fails 8 (also good for debugging!)"");
```"
1086,"    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
","```javascript
function reverseDelete(s, c) {
    s = s.split('').filter(char => !c.includes(char)).join('');
    return [s, s.split('').reverse().join('') === s];
}
```",1087,"```javascript
['console.assert(reverse_delete(""abcde"",""ae"")[0] === \'bcd\' && reverse_delete(""abcde"",""ae"")[1] === false)', 
 'console.assert(reverse_delete(""abcdef"", ""b"")[0] === \'acdef\' && reverse_delete(""abcdef"", ""b"")[1] === false)', 
 'console.assert(reverse_delete(""abcdedcba"",""ab"")[0] === \'cdedc\' && reverse_delete(""abcdedcba"",""ab"")[1] === true)', 
 'console.assert(reverse_delete(""dwik"",""w"")[0] === \'dik\' && reverse_delete(""dwik"",""w"")[1] === false)', 
 'console.assert(reverse_delete(""a"",""a"")[0] === \'\' && reverse_delete(""a"",""a"")[1] === true)', 
 'console.assert(reverse_delete(""abcdedcba"","""")[0] === \'abcdedcba\' && reverse_delete(""abcdedcba"","""")[1] === true)', 
 'console.assert(reverse_delete(""abcdedcba"",""v"")[0] === \'abcdedcba\' && reverse_delete(""abcdedcba"",""v"")[1] === true)', 
 'console.assert(reverse_delete(""vabba"",""v"")[0] === \'abba\' && reverse_delete(""vabba"",""v"")[1] === true)', 
 'console.assert(reverse_delete(""mamma"", ""mia"")[0] === """" && reverse_delete(""mamma"", ""mia"")[1] === true)']
```"
1087,"    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","```javascript
function oddCount(lst) {
    const res = [];
    for (const arr of lst) {
        const n = arr.reduce((acc, d) => acc + (parseInt(d) % 2 === 1 ? 1 : 0), 0);
        res.push(""the number of odd elements "" + n + ""n the str"" + n + ""ng "" + n + "" of the "" + n + ""nput."");
    }
    return res;
}
```",1088,"```javascript
console.assert(odd_count(['1234567']) === [""the number of odd elements 4n the str4ng 4 of the 4nput.""], ""Test 1"");
console.assert(odd_count(['3', ""11111111""]) === [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""], ""Test 2"");
console.assert(odd_count(['271', '137', '314']) === []);
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1088,"    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","```javascript
function minSubArraySum(nums) {
    let max_sum = 0;
    let s = 0;
    for (let num of nums) {
        s += -num;
        if (s < 0) {
            s = 0;
        }
        max_sum = Math.max(s, max_sum);
    }
    if (max_sum === 0) {
        max_sum = Math.max(...nums.map(i => -i));
    }
    let min_sum = -max_sum;
    return min_sum;
}
```",1089,"```javascript
[
  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(minSubArraySum([-1, -2, -3]) === -6),
  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14),
  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999),
  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0),
  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6),
  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6),
  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3),
  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33),
  console.assert(minSubArraySum([-10]) === -10, ""This prints if this assert fails 2 (also good for debugging!)""),
  console.assert(minSubArraySum([7]) === 7),
  console.assert(minSubArraySum([1, -1]) === -1)
]
```"
1089,"    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","```javascript
function max_fill(grid, capacity) {
    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((sum, val) => sum + val, 0) / capacity), 0);
}
```",1090,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) === 6, ""Error"")', 'console.assert(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) === 5, ""Error"")', 'console.assert(max_fill([[0,0,0], [0,0,0]], 5) === 0, ""Error"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(max_fill([[1,1,1,1], [1,1,1,1]], 2) === 4, ""Error"")', 'console.assert(max_fill([[1,1,1,1], [1,1,1,1]], 9) === 2, ""Error"")']
```"
1090,"    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","```javascript
function sortArray(arr) {
    return arr.slice().sort().sort((a, b) => {
        return a.toString(2).split('1').length - b.toString(2).split('1').length;
    });
}
```",1091,"```javascript
console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(JSON.stringify(sort_array([1,5,2,3,4])) === JSON.stringify([1, 2, 4, 3, 5]));
console.assert(JSON.stringify(sort_array([-2,-3,-4,-5,-6])) === JSON.stringify([-4, -2, -6, -5, -3]));
console.assert(JSON.stringify(sort_array([1,0,2,3,4])) === JSON.stringify([0, 1, 2, 4, 3]));
console.assert(JSON.stringify(sort_array([])) === JSON.stringify([]));
console.assert(JSON.stringify(sort_array([2,5,77,4,5,3,5,7,2,3,4])) === JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]));
console.assert(JSON.stringify(sort_array([3,6,44,12,32,5])) === JSON.stringify([32, 3, 5, 6, 12, 44]));
console.assert(JSON.stringify(sort_array([2,4,8,16,32])) === JSON.stringify([2, 4, 8, 16, 32]));
console.assert(JSON.stringify(sort_array([2,4,8,16,32])) === JSON.stringify([2, 4, 8, 16, 32]));
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1091,"    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","```javascript
function selectWords(s, n) {
    let result = [];
    s.split(' ').forEach(word => {
        let nConsonants = 0;
        for (let i = 0; i < word.length; i++) {
            if (!['a', 'e', 'i', 'o', 'u'].includes(word[i].toLowerCase())) {
                nConsonants++;
            }
        }
        if (nConsonants === n) {
            result.push(word);
        }
    });
    return result;
}
```",1092,"```javascript
console.assert(select_words(""Mary had a little lamb"", 4).toString() === [""little""].toString(), ""First test error: "" + select_words(""Mary had a little lamb"", 4).toString());
console.assert(select_words(""Mary had a little lamb"", 3).toString() === [""Mary"", ""lamb""].toString(), ""Second test error: "" + select_words(""Mary had a little lamb"", 3).toString());
console.assert(select_words(""simple white space"", 2).toString() === [].toString(), ""Third test error: "" + select_words(""simple white space"", 2).toString());
console.assert(select_words(""Hello world"", 4).toString() === [""world""].toString(), ""Fourth test error: "" + select_words(""Hello world"", 4).toString());
console.assert(select_words(""Uncle sam"", 3).toString() === [""Uncle""].toString(), ""Fifth test error: "" + select_words(""Uncle sam"", 3).toString());
console.assert(select_words("""", 4).toString() === [].toString(), ""1st edge test error: "" + select_words("""", 4).toString());
console.assert(select_words(""a b c d e f"", 1).toString() === [""b"", ""c"", ""d"", ""f""].toString(), ""2nd edge test error: "" + select_words(""a b c d e f"", 1).toString());
```"
1092,"    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","```javascript
function getClosestVowel(word) {
    if (word.length < 3) {
        return """";
    }

    const vowels = new Set([""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""O"", ""U"", ""I""]);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i])) {
            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {
                return word[i];
            }
        }
    }
    return """";
}
```",1093,"```javascript
['console.assert(get_closest_vowel(""yogurt"") === ""u"")', 'console.assert(get_closest_vowel(""full"") === ""u"")', 'console.assert(get_closest_vowel(""easy"") === """")', 'console.assert(get_closest_vowel(""eAsy"") === """")', 'console.assert(get_closest_vowel(""ali"") === """")', 'console.assert(get_closest_vowel(""bad"") === ""a"")', 'console.assert(get_closest_vowel(""most"") === ""o"")', 'console.assert(get_closest_vowel(""ab"") === """")', 'console.assert(get_closest_vowel(""ba"") === """")', 'console.assert(get_closest_vowel(""quick"") === """")', 'console.assert(get_closest_vowel(""anime"") === ""i"")', 'console.assert(get_closest_vowel(""Asia"") === """")', 'console.assert(get_closest_vowel(""Above"") === ""o"")', 'console.assert(true)']
```"
1093,"    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","```javascript
function matchParens(lst) {
    function check(s) {
        let val = 0;
        for (let i of s) {
            if (i === '(') {
                val += 1;
            } else {
                val -= 1;
            }
            if (val < 0) {
                return false;
            }
        }
        return val === 0;
    }

    const S1 = lst[0] + lst[1];
    const S2 = lst[1] + lst[0];
    return check(S1) || check(S2) ? 'Yes' : 'No';
}
```",1094,"```javascript
console.assert(match_parens(['()(', ')']) === 'Yes');
console.assert(match_parens([')', ')']) === 'No');
console.assert(match_parens(['(()(())', '())())']) === 'No');
console.assert(match_parens([')())', '(()()(']) === 'Yes');
console.assert(match_parens(['(())))', '(()())((']) === 'Yes');
console.assert(match_parens(['()', '())']) === 'No');
console.assert(match_parens(['(()(', '()))()']) === 'Yes');
console.assert(match_parens(['((((', '((())']) === 'No');
console.assert(match_parens([')(()', '(()(']) === 'No');
console.assert(match_parens([')(', ')(']) === 'No');
console.assert(match_parens(['(', ')']) === 'Yes');
console.assert(match_parens([')', '(']) === 'Yes');
```"
1094,"    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","```javascript
function maximum(arr, k) {
    if (k === 0) {
        return [];
    }
    arr.sort((a, b) => a - b);
    const ans = arr.slice(-k);
    return ans;
}
```",1095,"```javascript
['console.assert(JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])', 
 'console.assert(JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])', 
 'console.assert(JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])', 
 'console.assert(JSON.stringify(maximum([123, -123, 20, 0 , 1, 2, -3], 3)) === JSON.stringify([2, 20, 123])', 
 'console.assert(JSON.stringify(maximum([-123, 20, 0 , 1, 2, -3], 4)) === JSON.stringify([0, 1, 2, 20])', 
 'console.assert(JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) === JSON.stringify([-13, -8, 0, 0, 3, 5, 15])', 
 'console.assert(JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])', 
 'console.assert(JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])', 
 'console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4])', 
 'console.assert(JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])', 
 'console.assert(JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) === JSON.stringify([])']
```"
1095,"    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","```javascript
function solution(lst) {
    return lst.reduce((acc, x, idx) => (idx % 2 === 0 && x % 2 === 1 ? acc + x : acc), 0);
}
```",1096,"```javascript
['console.assert(solution([5, 8, 7, 1]) === 12)', 'console.assert(solution([3, 3, 3, 3, 3]) === 9)', 'console.assert(solution([30, 13, 24, 321]) === 0)', 'console.assert(solution([5, 9]) === 5)', 'console.assert(solution([2, 4, 8]) === 0)', 'console.assert(solution([30, 13, 23, 32]) === 23)', 'console.assert(solution([3, 13, 2, 9]) === 3)'];
```"
1096,"    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","```javascript
function addElements(arr, k) {
    return arr.slice(0, k).reduce((sum, elem) => {
        return (String(elem).length <= 2) ? sum + elem : sum;
    }, 0);
}
```",1097,"```javascript
['console.assert(add_elements([1,-2,-3,41,57,76,87,88,99], 3) === -4)', 
 'console.assert(add_elements([111,121,3,4000,5,6], 2) === 0)', 
 'console.assert(add_elements([11,21,3,90,5,6,7,8,9], 4) === 125)', 
 'console.assert(add_elements([111,21,3,4000,5,6,7,8,9], 4) === 24, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(add_elements([1], 1) === 1, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1097,"    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
","```javascript
function getOddCollatz(n) {
    let oddCollatz = (n % 2 === 0) ? [] : [n];
    while (n > 1) {
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = n * 3 + 1;
        }
        
        if (n % 2 === 1) {
            oddCollatz.push(Math.floor(n));
        }
    }
    return oddCollatz.sort((a, b) => a - b);
}
```",1098,"```javascript
console.assert(JSON.stringify(get_odd_collatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17]));
console.assert(JSON.stringify(get_odd_collatz(5)) === JSON.stringify([1, 5]));
console.assert(JSON.stringify(get_odd_collatz(12)) === JSON.stringify([1, 3, 5]), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(JSON.stringify(get_odd_collatz(1)) === JSON.stringify([1]), ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1098,"    """"""You have to  this function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
","```javascript
function validDate(date) {
    try {
        date = date.trim();
        const [month, day, year] = date.split('-').map(Number);
        if (month < 1 || month > 12) {
            return false;
        }
        if ((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && (day < 1 || day > 31)) {
            return false;
        }
        if ((month === 4 || month === 6 || month === 9 || month === 11) && (day < 1 || day > 30)) {
            return false;
        }
        if (month === 2 && (day < 1 || day > 29)) {
            return false;
        }
    } catch {
        return false;
    }

    return true;
}
```",1099,"```javascript
[""console.assert(valid_date('03-11-2000') === true)"", ""console.assert(valid_date('15-01-2012') === false)"", ""console.assert(valid_date('04-0-2040') === false)"", ""console.assert(valid_date('06-04-2020') === true)"", ""console.assert(valid_date('01-01-2007') === true)"", ""console.assert(valid_date('03-32-2011') === false)"", ""console.assert(valid_date('') === false)"", ""console.assert(valid_date('04-31-3000') === false)"", ""console.assert(valid_date('06-06-2005') === true)"", ""console.assert(valid_date('21-31-2000') === false)"", ""console.assert(valid_date('04-12-2003') === true)"", ""console.assert(valid_date('04122003') === false)"", ""console.assert(valid_date('20030412') === false)"", ""console.assert(valid_date('2003-04') === false)"", ""console.assert(valid_date('2003-04-12') === false)"", ""console.assert(valid_date('04-2003') === false)""];
```"
1099,"    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","```javascript
function splitWords(txt) {
    if (txt.includes("" "")) {
        return txt.split("" "");
    } else if (txt.includes("","")) {
        return txt.replace(/,/g, ' ').split("" "");
    } else {
        return Array.from(txt).filter(i => i === i.toLowerCase() && i.charCodeAt(0) % 2 === 0).length;
    }
}
```",1100,"```javascript
['console.assert(split_words(""Hello world!"") === [""Hello"",""world!""]);', 
 'console.assert(split_words(""Hello,world!"") === [""Hello"",""world!""]);', 
 'console.assert(split_words(""Hello world,!"") === [""Hello"",""world,!""]);', 
 'console.assert(split_words(""Hello,Hello,world !"") === [""Hello,Hello,world"",""!""]);', 
 'console.assert(split_words(""abcdef"") === 3);', 
 'console.assert(split_words(""aaabb"") === 2);', 
 'console.assert(split_words(""aaaBb"") === 1);', 
 'console.assert(split_words("""") === 0);']
```"
1100,"    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
","```javascript
function isSorted(lst) {
    let countDigit = {};
    for (let i of lst) {
        countDigit[i] = (countDigit[i] || 0) + 1;
    }
    if (Object.values(countDigit).some(count => count > 2)) {
        return false;
    }
    for (let i = 1; i < lst.length; i++) {
        if (lst[i - 1] > lst[i]) {
            return false;
        }
    }
    return true;
}
```",1101,"```javascript
console.assert(is_sorted([5]) === true);
console.assert(is_sorted([1, 2, 3, 4, 5]) === true);
console.assert(is_sorted([1, 3, 2, 4, 5]) === false);
console.assert(is_sorted([1, 2, 3, 4, 5, 6]) === true);
console.assert(is_sorted([1, 2, 3, 4, 5, 6, 7]) === true);
console.assert(is_sorted([1, 3, 2, 4, 5, 6, 7]) === false, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(is_sorted([]) === true, ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(is_sorted([1]) === true, ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(is_sorted([3, 2, 1]) === false, ""This prints if this assert fails 4 (good for debugging!)"");
console.assert(is_sorted([1, 2, 2, 2, 3, 4]) === false, ""This prints if this assert fails 5 (good for debugging!)"");
console.assert(is_sorted([1, 2, 3, 3, 3, 4]) === false, ""This prints if this assert fails 6 (good for debugging!)"");
console.assert(is_sorted([1, 2, 2, 3, 3, 4]) === true, ""This prints if this assert fails 7 (good for debugging!)"");
console.assert(is_sorted([1, 2, 3, 4]) === true, ""This prints if this assert fails 8 (good for debugging!)"");
```"
1101,"    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","```javascript
function intersection(interval1, interval2) {
    function isPrime(num) {
        if (num === 1 || num === 0) {
            return false;
        }
        if (num === 2) {
            return true;
        }
        for (let i = 2; i < num; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    }

    const l = Math.max(interval1[0], interval2[0]);
    const r = Math.min(interval1[1], interval2[1]);
    const length = r - l;
    if (length > 0 && isPrime(length)) {
        return ""YES"";
    }
    return ""NO"";
}
```",1102,"```javascript
['console.assert(intersection([1, 2], [2, 3]) === ""NO"")', 'console.assert(intersection([-1, 1], [0, 4]) === ""NO"")', 'console.assert(intersection([-3, -1], [-5, 5]) === ""YES"")', 'console.assert(intersection([-2, 2], [-4, 0]) === ""YES"")', 'console.assert(intersection([-11, 2], [-1, -1]) === ""NO"")', 'console.assert(intersection([1, 2], [3, 5]) === ""NO"")', 'console.assert(intersection([1, 2], [1, 2]) === ""NO"")', 'console.assert(intersection([-2, -2], [-3, -2]) === ""NO"")']
```"
1102,"    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","```javascript
function prod_signs(arr) {
    if (arr.length === 0) return null;
    let prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);
    return prod * arr.reduce((sum, i) => sum + Math.abs(i), 0);
}
```",1103,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(prod_signs([1, 2, 2, -4]) === -9)', 
 'console.assert(prod_signs([0, 1]) === 0)', 
 'console.assert(prod_signs([1, 1, 1, 2, 3, -1, 1]) === -10)', 
 'console.assert(prod_signs([]) === null)', 
 'console.assert(prod_signs([2, 4, 1, 2, -1, -1, 9]) === 20)', 
 'console.assert(prod_signs([-1, 1, -1, 1]) === 4)', 
 'console.assert(prod_signs([-1, 1, 1, 1]) === -4)', 
 'console.assert(prod_signs([-1, 1, 1, 0]) === 0)', 
 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")'
]
```"
1103,"    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","```javascript
function minPath(grid, k) {
    const n = grid.length;
    let val = n * n + 1;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (grid[i][j] === 1) {
                const temp = [];
                if (i !== 0) {
                    temp.push(grid[i - 1][j]);
                }

                if (j !== 0) {
                    temp.push(grid[i][j - 1]);
                }

                if (i !== n - 1) {
                    temp.push(grid[i + 1][j]);
                }

                if (j !== n - 1) {
                    temp.push(grid[i][j + 1]);
                }

                val = Math.min(...temp);
            }
        }
    }

    const ans = [];
    for (let i = 0; i < k; i++) {
        if (i % 2 === 0) {
            ans.push(1);
        } else {
            ans.push(val);
        }
    }
    return ans;
}
```",1104,"```javascript
['console.assert(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3).toString() == [1, 2, 1].toString())', 
 'console.assert(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1).toString() == [1].toString())', 
 'console.assert(minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4).toString() == [1, 2, 1, 2].toString())', 
 'console.assert(minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7).toString() == [1, 10, 1, 10, 1, 10, 1].toString())', 
 'console.assert(minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5).toString() == [1, 7, 1, 7, 1].toString())', 
 'console.assert(minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9).toString() == [1, 6, 1, 6, 1, 6, 1, 6, 1].toString())', 
 'console.assert(minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12).toString() == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6].toString())', 
 'console.assert(minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8).toString() == [1, 3, 1, 3, 1, 3, 1, 3].toString())', 
 'console.assert(minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8).toString() == [1, 5, 1, 5, 1, 5, 1, 5].toString())', 
 'console.assert(minPath([[1, 2], [3, 4]], 10).toString() == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2].toString())', 
 'console.assert(minPath([[1, 3], [3, 2]], 10).toString() == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3].toString())']
```"
1104,"    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
","```javascript
function tri(n) {
    if (n === 0) {
        return [1];
    }
    let my_tri = [1, 3];
    for (let i = 2; i <= n; i++) {
        if (i % 2 === 0) {
            my_tri.push(i / 2 + 1);
        } else {
            my_tri.push(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);
        }
    }
    return my_tri;
}
```",1105,"```javascript
console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]));
console.assert(JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0]));
console.assert(JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0]));
console.assert(JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]));
console.assert(JSON.stringify(tri(7)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]));
console.assert(JSON.stringify(tri(8)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]));
console.assert(JSON.stringify(tri(9)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]));
console.assert(JSON.stringify(tri(20)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]));
console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]));
console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]));
```"
1105,"    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","```javascript
function digits(n) {
    let product = 1;
    let odd_count = 0;
    for (let digit of String(n)) {
        let int_digit = parseInt(digit);
        if (int_digit % 2 === 1) {
            product *= int_digit;
            odd_count++;
        }
    }
    return odd_count === 0 ? 0 : product;
}
```",1106,"```javascript
['console.assert(digits(5) === 5)', 'console.assert(digits(54) === 5)', 'console.assert(digits(120) === 1)', 'console.assert(digits(5014) === 5)', 'console.assert(digits(98765) === 315)', 'console.assert(digits(5576543) === 2625)', 'console.assert(digits(2468) === 0)']
```"
1106,"    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
","```javascript
function isNested(string) {
    let openingBracketIndex = [];
    let closingBracketIndex = [];
    
    for (let i = 0; i < string.length; i++) {
        if (string[i] === '[') {
            openingBracketIndex.push(i);
        } else {
            closingBracketIndex.push(i);
        }
    }
    
    closingBracketIndex.reverse();
    let cnt = 0;
    let i = 0;
    let l = closingBracketIndex.length;
    
    for (let idx of openingBracketIndex) {
        if (i < l && idx < closingBracketIndex[i]) {
            cnt++;
            i++;
        }
    }
    
    return cnt >= 2;
}
```",1107,"```javascript
[
  ""console.assert(is_nested('[[]]') === true, 'This prints if this assert fails 1 (good for debugging!)')"",
  ""console.assert(is_nested('[]]]]]]][[[[[]') === false)"",
  ""console.assert(is_nested('[][]') === false)"",
  ""console.assert(is_nested(('[]')) === false)"",
  ""console.assert(is_nested('[[[[]]]]') === true)"",
  ""console.assert(is_nested('[]]]]]]]]]]') === false)"",
  ""console.assert(is_nested('[][][[]]') === true)"",
  ""console.assert(is_nested('[[]') === false)"",
  ""console.assert(is_nested('[]]') === false)"",
  ""console.assert(is_nested('[[]][[') === true)"",
  ""console.assert(is_nested('[[][]]') === true)"",
  ""console.assert(is_nested('') === false, 'This prints if this assert fails 2 (also good for debugging!)')"",
  ""console.assert(is_nested('[[[[[[[[') === false)"",
  ""console.assert(is_nested(']]]]]]]]') === false)""
]
```"
1107,"    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","```javascript
function sum_squares(lst) {
    let squared = 0;
    for (let i of lst) {
        squared += Math.ceil(i) ** 2;
    }
    return squared;
}
```",1108,"```javascript
['console.assert(sum_squares([1,2,3])===14, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([1.0,2,3])===14, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([1,3,5,7])===84, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([1.4,4.2,0])===29, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([-2.4,1,1])===6, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([100,1,15,2])===10230, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([10000,10000])===200000000, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([-1.4,4.6,6.3])===75, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([-1.4,17.9,18.9,19.9])===1086, ""This prints if this assert fails 1 (good for debugging!)"");', 
 'console.assert(sum_squares([0])===0, ""This prints if this assert fails 2 (also good for debugging!)"");', 
 'console.assert(sum_squares([-1])===1, ""This prints if this assert fails 2 (also good for debugging!)"");', 
 'console.assert(sum_squares([-1,1,0])===2, ""This prints if this assert fails 2 (also good for debugging!)"");']
```"
1108,"    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
","```javascript
function checkIfLastCharIsALetter(txt) {
    const check = txt.split(' ').pop();
    return check.length === 1 && check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122;
}
```",1109,"```javascript
['console.assert(check_if_last_char_is_a_letter(""apple"") === false)', 'console.assert(check_if_last_char_is_a_letter(""apple pi e"") === true)', 'console.assert(check_if_last_char_is_a_letter(""eeeee"") === false)', 'console.assert(check_if_last_char_is_a_letter(""A"") === true)', 'console.assert(check_if_last_char_is_a_letter(""Pumpkin pie "") === false)', 'console.assert(check_if_last_char_is_a_letter(""Pumpkin pie 1"") === false)', 'console.assert(check_if_last_char_is_a_letter("""") === false)', 'console.assert(check_if_last_char_is_a_letter(""eeeee e "") === false)', 'console.assert(check_if_last_char_is_a_letter(""apple pie"") === false)', 'console.assert(check_if_last_char_is_a_letter(""apple pi e "") === false)', 'console.assert(true)']
```"
1109,"    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","```javascript
function canArrange(arr) {
    let ind = -1;
    let i = 1;
    while (i < arr.length) {
        if (arr[i] < arr[i - 1]) {
            ind = i;
        }
        i++;
    }
    return ind;
}
```",1110,"```javascript
['console.assert(can_arrange([1,2,4,3,5]) === 3)', 'console.assert(can_arrange([1,2,4,5]) === -1)', 'console.assert(can_arrange([1,4,2,5,6,7,8,9,10]) === 2)', 'console.assert(can_arrange([4,8,5,7,3]) === 4)', 'console.assert(can_arrange([]) === -1)']
```"
1110,"    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","```javascript
function largest_smallest_integers(lst) {
    const smallest = lst.filter(x => x < 0);
    const largest = lst.filter(x => x > 0);
    return [
        smallest.length > 0 ? Math.max(...smallest) : null,
        largest.length > 0 ? Math.min(...largest) : null
    ];
}
```",1111,"```javascript
console.assert(largest_smallest_integers([2, 4, 1, 3, 5, 7]) === [null, 1]);
console.assert(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0]) === [null, 1]);
console.assert(largest_smallest_integers([1, 3, 2, 4, 5, 6, -2]) === [-2, 1]);
console.assert(largest_smallest_integers([4, 5, 3, 6, 2, 7, -7]) === [-7, 2]);
console.assert(largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9]) === [-9, 2]);
console.assert(largest_smallest_integers([]) === [null, null]);
console.assert(largest_smallest_integers([0]) === [null, null]);
console.assert(largest_smallest_integers([-1, -3, -5, -6]) === [-1, null]);
console.assert(largest_smallest_integers([-1, -3, -5, -6, 0]) === [-1, null]);
console.assert(largest_smallest_integers([-6, -4, -4, -3, 1]) === [-3, 1]);
console.assert(largest_smallest_integers([-6, -4, -4, -3, -100, 1]) === [-3, 1]);
console.assert(true);
```"
1111,"    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","```javascript
function compareOne(a, b) {
    let tempA = a, tempB = b;
    if (typeof tempA === 'string') tempA = tempA.replace(',', '.');
    if (typeof tempB === 'string') tempB = tempB.replace(',', '.');
    if (parseFloat(tempA) === parseFloat(tempB)) return null;
    return parseFloat(tempA) > parseFloat(tempB) ? a : b;
}
```",1112,"```javascript
['console.assert(compare_one(1, 2) === 2)', 'console.assert(compare_one(1, 2.5) === 2.5)', 'console.assert(compare_one(2, 3) === 3)', 'console.assert(compare_one(5, 6) === 6)', 'console.assert(compare_one(1, ""2,3"") === ""2,3"")', 'console.assert(compare_one(""5,1"", ""6"") === ""6"")', 'console.assert(compare_one(""1"", ""2"") === ""2"")', 'console.assert(compare_one(""1"", 1) === null)', 'console.assert(true)']
```"
1112,"    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
","```javascript
function is_equal_to_sum_even(n) {
  return n % 2 === 0 && n >= 8;
}
```",1113,"```javascript
console.assert(is_equal_to_sum_even(4) === false);
console.assert(is_equal_to_sum_even(6) === false);
console.assert(is_equal_to_sum_even(8) === true);
console.assert(is_equal_to_sum_even(10) === true);
console.assert(is_equal_to_sum_even(11) === false);
console.assert(is_equal_to_sum_even(12) === true);
console.assert(is_equal_to_sum_even(13) === false);
console.assert(is_equal_to_sum_even(16) === true);
```"
1113,"    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","```javascript
function specialFactorial(n) {
    let fact_i = 1;
    let special_fact = 1;
    for (let i = 1; i <= n; i++) {
        fact_i *= i;
        special_fact *= fact_i;
    }
    return special_fact;
}
```",1114,"```javascript
console.assert(special_factorial(4) === 288, ""Test 4"");
console.assert(special_factorial(5) === 34560, ""Test 5"");
console.assert(special_factorial(7) === 125411328000, ""Test 7"");
console.assert(special_factorial(1) === 1, ""Test 1"");
```"
1114,"    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
","```javascript
function fixSpaces(text) {
    let newText = """";
    let i = 0;
    let start = 0, end = 0;

    while (i < text.length) {
        if (text[i] === "" "") {
            end += 1;
        } else {
            if (end - start > 2) {
                newText += ""-"" + text[i];
            } else if (end - start > 0) {
                newText += ""_"".repeat(end - start) + text[i];
            } else {
                newText += text[i];
            }
            start = i + 1;
            end = i + 1;
        }
        i += 1;
    }
    if (end - start > 2) {
        newText += ""-"";
    } else if (end - start > 0) {
        newText += ""_"";
    }
    return newText;
}
```",1115,"```javascript
console.assert(fix_spaces(""Example"") === ""Example"", ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(fix_spaces(""Mudasir Hanif "") === ""Mudasir_Hanif_"", ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(fix_spaces(""Yellow Yellow  Dirty  Fellow"") === ""Yellow_Yellow__Dirty__Fellow"", ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(fix_spaces(""Exa   mple"") === ""Exa-mple"", ""This prints if this assert fails 4 (good for debugging!)"");
console.assert(fix_spaces(""   Exa 1 2 2 mple"") === ""-Exa_1_2_2_mple"", ""This prints if this assert fails 5 (good for debugging!)"");
```"
1115,"    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
","```javascript
function file_name_check(file_name) {
    const suf = ['txt', 'exe', 'dll'];
    const lst = file_name.split('.');
    if (lst.length !== 2) {
        return 'No';
    }
    if (!suf.includes(lst[1])) {
        return 'No';
    }
    if (lst[0].length === 0) {
        return 'No';
    }
    if (!/^[a-zA-Z]/.test(lst[0])) {
        return 'No';
    }
    const t = lst[0].split('').filter(x => /\d/.test(x)).length;
    if (t > 3) {
        return 'No';
    }
    return 'Yes';
}
```",1116,"```javascript
['console.assert(file_name_check(""example.txt"") === ""Yes"")', 'console.assert(file_name_check(""1example.dll"") === ""No"")', 'console.assert(file_name_check(""s1sdf3.asd"") === ""No"")', 'console.assert(file_name_check(""K.dll"") === ""Yes"")', 'console.assert(file_name_check(""MY16FILE3.exe"") === ""Yes"")', 'console.assert(file_name_check(""His12FILE94.exe"") === ""No"")', 'console.assert(file_name_check(""_Y.txt"") === ""No"")', 'console.assert(file_name_check(""?aREYA.exe"") === ""No"")', 'console.assert(file_name_check(""/this_is_valid.dll"") === ""No"")', 'console.assert(file_name_check(""this_is_valid.wow"") === ""No"")', 'console.assert(file_name_check(""this_is_valid.txt"") === ""Yes"")', 'console.assert(file_name_check(""this_is_valid.txtexe"") === ""No"")', 'console.assert(file_name_check(""#this2_i4s_5valid.ten"") === ""No"")', 'console.assert(file_name_check(""@this1_is6_valid.exe"") === ""No"")', 'console.assert(file_name_check(""this_is_12valid.6exe4.txt"") === ""No"")', 'console.assert(file_name_check(""all.exe.txt"") === ""No"")', 'console.assert(file_name_check(""I563_No.exe"") === ""Yes"")', 'console.assert(file_name_check(""Is3youfault.txt"") === ""Yes"")', 'console.assert(file_name_check(""no_one#knows.dll"") === ""Yes"")', 'console.assert(file_name_check(""1I563_Yes3.exe"") === ""No"")', 'console.assert(file_name_check(""I563_Yes3.txtt"") === ""No"")', 'console.assert(file_name_check(""final..txt"") === ""No"")', 'console.assert(file_name_check(""final132"") === ""No"")', 'console.assert(file_name_check(""_f4indsartal132."") === ""No"")', 'console.assert(file_name_check("".txt"") === ""No"")', 'console.assert(file_name_check(""s."") === ""No"")'];
```"
1116,"    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","```javascript
function sumSquares(lst) {
    let result = [];
    for (let i = 0; i < lst.length; i++) {
        if (i % 3 === 0) {
            result.push(lst[i] ** 2);
        } else if (i % 4 === 0 && i % 3 !== 0) {
            result.push(lst[i] ** 3);
        } else {
            result.push(lst[i]);
        }
    }
    return result.reduce((a, b) => a + b, 0);
}
```",1117,"```javascript
['console.assert(sum_squares([1, 2, 3]) === 6)', 
 'console.assert(sum_squares([1, 4, 9]) === 14)', 
 'console.assert(sum_squares([]) === 0)', 
 'console.assert(sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)', 
 'console.assert(sum_squares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)', 
 'console.assert(sum_squares([0]) === 0)', 
 'console.assert(sum_squares([-1, -5, 2, -1, -5]) === -126)', 
 'console.assert(sum_squares([-56, -99, 1, 0, -2]) === 3030)', 
 'console.assert(sum_squares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)', 
 'console.assert(sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) === -14196)', 
 'console.assert(sum_squares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) === -1448)']
```"
1117,"    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","```javascript
function wordsInSentence(sentence) {
    let newLst = [];
    for (let word of sentence.split(' ')) {
        let flg = 0;
        if (word.length === 1) {
            flg = 1;
        }
        for (let i = 2; i < word.length; i++) {
            if (word.length % i === 0) {
                flg = 1;
            }
        }
        if (flg === 0 || word.length === 2) {
            newLst.push(word);
        }
    }
    return newLst.join(' ');
}
```",1118,"```javascript
['console.assert(wordsInSentence(""This is a test"") === ""is"")', 'console.assert(wordsInSentence(""lets go for swimming"") === ""go for"")', 'console.assert(wordsInSentence(""there is no place available here"") === ""there is no place"")', 'console.assert(wordsInSentence(""Hi I am Hussein"") === ""Hi am Hussein"")', 'console.assert(wordsInSentence(""go for it"") === ""go for it"")', 'console.assert(wordsInSentence(""here"") === """")', 'console.assert(wordsInSentence(""here is"") === ""is"")']
```"
1118,"    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","```javascript
function simplify(x, n) {
    let [a, b] = x.split(""/"");
    let [c, d] = n.split(""/"");
    let numerator = parseInt(a) * parseInt(c);
    let denom = parseInt(b) * parseInt(d);
    return (numerator / denom === Math.floor(numerator / denom));
}
```",1119,"```javascript
['console.assert(simplify(""1/5"", ""5/1"") === true, ""test1"")', 
 'console.assert(simplify(""1/6"", ""2/1"") === false, ""test2"")', 
 'console.assert(simplify(""5/1"", ""3/1"") === true, ""test3"")', 
 'console.assert(simplify(""7/10"", ""10/2"") === false, ""test4"")', 
 'console.assert(simplify(""2/10"", ""50/10"") === true, ""test5"")', 
 'console.assert(simplify(""7/2"", ""4/2"") === true, ""test6"")', 
 'console.assert(simplify(""11/6"", ""6/1"") === true, ""test7"")', 
 'console.assert(simplify(""2/3"", ""5/2"") === false, ""test8"")', 
 'console.assert(simplify(""5/2"", ""3/5"") === false, ""test9"")', 
 'console.assert(simplify(""2/4"", ""8/4"") === true, ""test10"")', 
 'console.assert(simplify(""2/4"", ""4/2"") === true, ""test11"")', 
 'console.assert(simplify(""1/5"", ""5/1"") === true, ""test12"")', 
 'console.assert(simplify(""1/5"", ""1/5"") === false, ""test13"")']
```"
1119,"    """"""
     this function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","```javascript
function orderByPoints(nums) {
    function digitsSum(n) {
        let neg = 1;
        if (n < 0) {
            n = -n;
            neg = -1;
        }
        n = Array.from(String(n), Number);
        n[0] *= neg;
        return n.reduce((a, b) => a + b, 0);
    }
    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));
}
```",1120,"```javascript
['console.assert(order_by_points([1, 11, -1, -11, -12]).toString() === [-1, -11, 1, -12].toString())', 'console.assert(order_by_points([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]).toString() === [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457].toString())', 'console.assert(order_by_points([]).toString() === [].toString())', 'console.assert(order_by_points([1, -11, -32, 43, 54, -98, 2, -3]).toString() === [-3, -32, -98, -11, 1, 2, 43, 54].toString())', 'console.assert(order_by_points([1,2,3,4,5,6,7,8,9,10,11]).toString() === [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9].toString())', 'console.assert(order_by_points([0,6,6,-76,-21,23,4]).toString() === [-76, -21, 0, 4, 23, 6, 6].toString())', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1120,"    """""" this function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","```javascript
function specialFilter(nums) {
    let count = 0;
    for (let num of nums) {
        if (num > 10) {
            const odd_digits = [1, 3, 5, 7, 9];
            const number_as_string = num.toString();
            if (odd_digits.includes(parseInt(number_as_string[0])) && odd_digits.includes(parseInt(number_as_string[number_as_string.length - 1]))) {
                count++;
            }
        }
    }
    return count;
}
```",1121,"```javascript
['console.assert(specialFilter([5, -2, 1, -5]) === 0)', 'console.assert(specialFilter([15, -73, 14, -15]) === 1)', 'console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)', 'console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)', 'console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)', 'console.assert(specialFilter([1]) === 0)', 'console.assert(specialFilter([]) === 0)'];
```"
1121,"    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
","```javascript
function getMaxTriples(n) {
    const A = Array.from({length: n}, (_, i) => (i + 1) * (i + 1) - (i + 1) + 1);
    const ans = [];
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((A[i] + A[j] + A[k]) % 3 === 0) {
                    ans.push([A[i], A[j], A[k]]);
                }
            }
        }
    }
    return ans.length;
}
```",1122,"```javascript
console.assert(get_max_triples(5) === 1);
console.assert(get_max_triples(6) === 4);
console.assert(get_max_triples(10) === 36);
console.assert(get_max_triples(100) === 53361);
```"
1122,"    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
     this function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","```javascript
function bf(planet1, planet2) {
    const planetNames = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""];
    if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {
        return [];
    }
    const planet1Index = planetNames.indexOf(planet1);
    const planet2Index = planetNames.indexOf(planet2);
    if (planet1Index < planet2Index) {
        return planetNames.slice(planet1Index + 1, planet2Index);
    } else {
        return planetNames.slice(planet2Index + 1, planet1Index);
    }
}
```",1123,"```javascript
console.assert(bf(""Jupiter"", ""Neptune"").toString() === [""Saturn"", ""Uranus""].toString(), ""First test error: "" + bf(""Jupiter"", ""Neptune"").length);
console.assert(bf(""Earth"", ""Mercury"").toString() === [""Venus""].toString(), ""Second test error: "" + bf(""Earth"", ""Mercury"").toString());
console.assert(bf(""Mercury"", ""Uranus"").toString() === [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""].toString(), ""Third test error: "" + bf(""Mercury"", ""Uranus"").toString());
console.assert(bf(""Neptune"", ""Venus"").toString() === [""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""].toString(), ""Fourth test error: "" + bf(""Neptune"", ""Venus"").toString());
console.assert(bf(""Earth"", ""Earth"").toString() === [].toString());
console.assert(bf(""Mars"", ""Earth"").toString() === [].toString());
console.assert(bf(""Jupiter"", ""Makemake"").toString() === [].toString());
```"
1123,"    """""" this function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","```javascript
function sortedListSum(lst) {
    lst.sort();
    let newLst = [];
    for (let i of lst) {
        if (i.length % 2 === 0) {
            newLst.push(i);
        }
    }
    return newLst.sort((a, b) => a.length - b.length);
}
```",1124,"```javascript
['console.assert(sorted_list_sum([""aa"", ""a"", ""aaa""]).toString() === [""aa""].toString())', 
 'console.assert(sorted_list_sum([""school"", ""AI"", ""asdf"", ""b""]).toString() === [""AI"", ""asdf"", ""school""].toString())', 
 'console.assert(sorted_list_sum([""d"", ""b"", ""c"", ""a""]).toString() === [].toString())', 
 'console.assert(sorted_list_sum([""d"", ""dcba"", ""abcd"", ""a""]).toString() === [""abcd"", ""dcba""].toString())', 
 'console.assert(sorted_list_sum([""AI"", ""ai"", ""au""]).toString() === [""AI"", ""ai"", ""au""].toString())', 
 'console.assert(sorted_list_sum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]).toString() === [].toString())', 
 'console.assert(sorted_list_sum([""aaaa"", ""bbbb"", ""dd"", ""cc""]).toString() === [""cc"", ""dd"", ""aaaa"", ""bbbb""].toString())']
```"
1124,"    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
","```javascript
function x_or_y(n, x, y) {
    if (n === 1) {
        return y;
    }
    for (let i = 2; i < n; i++) {
        if (n % i === 0) {
            return y;
            break;
        }
    }
    return x;
}
```",1125,"```javascript
['console.assert(x_or_y(7, 34, 12) === 34)', 'console.assert(x_or_y(15, 8, 5) === 5)', 'console.assert(x_or_y(3, 33, 5212) === 33)', 'console.assert(x_or_y(1259, 3, 52) === 3)', 'console.assert(x_or_y(7919, -1, 12) === -1)', 'console.assert(x_or_y(3609, 1245, 583) === 583)', 'console.assert(x_or_y(91, 56, 129) === 129)', 'console.assert(x_or_y(6, 34, 1234) === 1234)', 'console.assert(x_or_y(1, 2, 0) === 0)', 'console.assert(x_or_y(2, 2, 0) === 2)']
```"
1125,"    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","```javascript
function doubleTheDifference(lst) {
  return lst.reduce((acc, i) => {
    if (i > 0 && i % 2 !== 0 && !String(i).includes(""."")) {
      return acc + i ** 2;
    }
    return acc;
  }, 0);
}
```",1126,"```javascript
console.assert(double_the_difference([]) === 0, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(double_the_difference([5, 4]) === 25, ""This prints if this assert fails 2 (good for debugging!)"");
console.assert(double_the_difference([0.1, 0.2, 0.3]) === 0, ""This prints if this assert fails 3 (good for debugging!)"");
console.assert(double_the_difference([-10, -20, -30]) === 0, ""This prints if this assert fails 4 (good for debugging!)"");
console.assert(double_the_difference([-1, -2, 8]) === 0, ""This prints if this assert fails 5 (also good for debugging!)"");
console.assert(double_the_difference([0.2, 3, 5]) === 34, ""This prints if this assert fails 6 (also good for debugging!)"");
console.assert(double_the_difference(lst) === odd_sum, ""This prints if this assert fails 7 (good for debugging!)"");
```"
1126,"    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","```javascript
function compare(game, guess) {
    return game.map((x, i) => Math.abs(x - guess[i]));
}
```",1127,"```javascript
console.assert(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]).toString() === [0,0,0,0,3,3].toString(), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(compare([0,0,0,0,0,0],[0,0,0,0,0,0]).toString() === [0,0,0,0,0,0].toString(), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(compare([1,2,3],[-1,-2,-3]).toString() === [2,4,6].toString(), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(compare([1,2,3,5],[-1,2,3,4]).toString() === [2,0,0,1].toString(), ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
1127,"    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
","```javascript
function Strongest_Extension(class_name, extensions) {
    let strong = extensions[0];
    let my_val = [...extensions[0]].filter(x => /[A-Z]/.test(x) && /^[A-Za-z]+$/.test(x)).length - 
                  [...extensions[0]].filter(x => /[a-z]/.test(x) && /^[A-Za-z]+$/.test(x)).length;

    for (let s of extensions) {
        let val = [...s].filter(x => /[A-Z]/.test(x) && /^[A-Za-z]+$/.test(x)).length - 
                  [...s].filter(x => /[a-z]/.test(x) && /^[A-Za-z]+$/.test(x)).length;
        if (val > my_val) {
            strong = s;
            my_val = val;
        }
    }

    return class_name + ""."" + strong;
}
```",1128,"```javascript
console.assert(Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) === 'Watashi.eIGHt8OKe');
console.assert(Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) === 'Boku123.YEs.WeCaNe');
console.assert(Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) === '__YESIMHERE.NuLl__');
console.assert(Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR');
console.assert(Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-']) === '__HAHA.123');
console.assert(Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) === 'YameRore.okIWILL123');
console.assert(Strongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) === 'finNNalLLly.WoW');
console.assert(Strongest_Extension('_', ['Bb', '91245']) === '_.Bb');
console.assert(Strongest_Extension('Sp', ['671235', 'Bb']) === 'Sp.671235');
```"
1128,"    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","```javascript
function cycpattern_check(a, b) {
    const l = b.length;
    const pat = b + b;
    for (let i = 0; i <= a.length - l; i++) {
        for (let j = 0; j <= l; j++) {
            if (a.slice(i, i + l) === pat.slice(j, j + l)) {
                return true;
            }
        }
    }
    return false;
}
```",1129,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 
 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 
 'console.assert(cycpattern_check(""xyzw"", ""xyw"") === false, ""test #0"")', 
 'console.assert(cycpattern_check(""yello"", ""ell"") === true, ""test #1"")', 
 'console.assert(cycpattern_check(""whattup"", ""ptut"") === false, ""test #2"")', 
 'console.assert(cycpattern_check(""efef"", ""fee"") === true, ""test #3"")', 
 'console.assert(cycpattern_check(""abab"", ""aabb"") === false, ""test #4"")', 
 'console.assert(cycpattern_check(""winemtt"", ""tinem"") === true, ""test #5"")']
```"
1129,"    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","```javascript
function evenOddCount(num) {
    let evenCount = 0;
    let oddCount = 0;
    for (let i of Math.abs(num).toString()) {
        if (parseInt(i) % 2 === 0) {
            evenCount += 1;
        } else {
            oddCount += 1;
        }
    }
    return [evenCount, oddCount];
}
```",1130,"```javascript
['console.assert(even_odd_count(7).toString() === (0, 1).toString())', 'console.assert(even_odd_count(-78).toString() === (1, 1).toString())', 'console.assert(even_odd_count(3452).toString() === (2, 2).toString())', 'console.assert(even_odd_count(346211).toString() === (3, 3).toString())', 'console.assert(even_odd_count(-345821).toString() === (3, 3).toString())', 'console.assert(even_odd_count(-2).toString() === (1, 0).toString())', 'console.assert(even_odd_count(-45347).toString() === (2, 3).toString())', 'console.assert(even_odd_count(0).toString() === (1, 0).toString())', 'console.assert(true)'];
```"
1130,"    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","```javascript
function intToMiniRoman(number) {
    const num = [1, 4, 5, 9, 10, 40, 50, 90,  
                 100, 400, 500, 900, 1000]; 
    const sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
                 ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""]; 
    let i = 12;
    let res = '';
    while (number) { 
        const div = Math.floor(number / num[i]); 
        number %= num[i]; 
        while (div) { 
            res += sym[i]; 
            div -= 1;
        }
        i -= 1;
    }
    return res.toLowerCase();
}
```",1131,"```javascript
[""console.assert(int_to_mini_roman(19) === 'xix')"", ""console.assert(int_to_mini_roman(152) === 'clii')"", ""console.assert(int_to_mini_roman(251) === 'ccli')"", ""console.assert(int_to_mini_roman(426) === 'cdxxvi')"", ""console.assert(int_to_mini_roman(500) === 'd')"", ""console.assert(int_to_mini_roman(1) === 'i')"", ""console.assert(int_to_mini_roman(4) === 'iv')"", ""console.assert(int_to_mini_roman(43) === 'xliii')"", ""console.assert(int_to_mini_roman(90) === 'xc')"", ""console.assert(int_to_mini_roman(94) === 'xciv')"", ""console.assert(int_to_mini_roman(532) === 'dxxxii')"", ""console.assert(int_to_mini_roman(900) === 'cm')"", ""console.assert(int_to_mini_roman(994) === 'cmxciv')"", ""console.assert(int_to_mini_roman(1000) === 'm')"", 'console.assert(true)']
```"
1131,"    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","```javascript
function rightAngleTriangle(a, b, c) {
    return a * a === b * b + c * c || b * b === a * a + c * c || c * c === a * a + b * b;
}
```",1132,"```javascript
console.assert(right_angle_triangle(3, 4, 5) === true, ""This prints if this assert fails 1 (good for debugging!)"");
console.assert(right_angle_triangle(1, 2, 3) === false);
console.assert(right_angle_triangle(10, 6, 8) === true);
console.assert(right_angle_triangle(2, 2, 2) === false);
console.assert(right_angle_triangle(7, 24, 25) === true);
console.assert(right_angle_triangle(10, 5, 7) === false);
console.assert(right_angle_triangle(5, 12, 13) === true);
console.assert(right_angle_triangle(15, 8, 17) === true);
console.assert(right_angle_triangle(48, 55, 73) === true);
console.assert(right_angle_triangle(1, 1, 1) === false, ""This prints if this assert fails 2 (also good for debugging!)"");
console.assert(right_angle_triangle(2, 2, 10) === false);
```"
1132,"    """""" this function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","```javascript
function findMax(words) {
    return words.sort((a, b) => {
        const setA = new Set(a);
        const setB = new Set(b);
        return setB.size - setA.size || (a > b ? 1 : -1);
    })[0];
}
```",1133,"```javascript
['console.assert(find_max([""name"", ""of"", ""string""]) == ""string"", ""t1""', 'console.assert(find_max([""name"", ""enam"", ""game""]) == ""enam"", ""t2""', 'console.assert(find_max([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa"", ""t3""', 'console.assert(find_max([""abc"", ""cba""]) == ""abc"", ""t4""', 'console.assert(find_max([""play"", ""this"", ""game"", ""of"",""footbott""]) == ""footbott"", ""t5""', 'console.assert(find_max([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna"", ""t6""', 'console.assert(find_max([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation"", ""t7""', 'console.assert(find_max([""this"", ""is"", ""a"", ""prrk""]) == ""this"", ""t8""', 'console.assert(find_max([""b""]) == ""b"", ""t9""', 'console.assert(find_max([""play"", ""play"", ""play""]) == ""play"", ""t10""'];
```"
1133,"    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","```javascript
function eat(number, need, remaining) {
    if (need <= remaining) {
        return [number + need, remaining - need];
    } else {
        return [number + remaining, 0];
    }
}
```",1134,"```javascript
['console.assert(true, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(eat(5, 6, 10).toString() === [11, 4].toString(), ""Error"")', 'console.assert(eat(4, 8, 9).toString() === [12, 1].toString(), ""Error"")', 'console.assert(eat(1, 10, 10).toString() === [11, 0].toString(), ""Error"")', 'console.assert(eat(2, 11, 5).toString() === [7, 0].toString(), ""Error"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")', 'console.assert(eat(4, 5, 7).toString() === [9, 2].toString(), ""Error"")', 'console.assert(eat(4, 5, 1).toString() === [5, 0].toString(), ""Error"")']
```"
1134,"    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","```javascript
function doAlgebra(operator, operand) {
    let expression = String(operand[0]);
    for (let i = 0; i < operator.length; i++) {
        expression += operator[i] + String(operand[i + 1]);
    }
    return eval(expression);
}
```",1135,"```javascript
[""console.assert(do_algebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)"", ""console.assert(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)"", 'console.assert(do_algebra([""//"", ""*""], [7, 3, 4]) === 8, ""This prints if this assert fails 1 (good for debugging!)"")', 'console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")']
```"
1135,"    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","```javascript
function solve(s) {
    let flg = 0;
    let idx = 0;
    let new_str = s.split('');
    for (let i of s) {
        if (/[a-zA-Z]/.test(i)) {
            new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();
            flg = 1;
        }
        idx++;
    }
    s = new_str.join('');
    if (flg === 0) {
        return s.split('').reverse().join('');
    }
    return s;
}
```",1136,"```javascript
['console.assert(solve(""AsDf"") === ""aSdF"")', 'console.assert(solve(""1234"") === ""4321"")', 'console.assert(solve(""ab"") === ""AB"")', 'console.assert(solve(""#a@C"") === ""#A@c"")', 'console.assert(solve(""#AsdfW^45"") === ""#aSDFw^45"")', 'console.assert(solve(""#6@2"") === ""2@6#"")', 'console.assert(solve(""#$a^D"") === ""#$A^d"")', 'console.assert(solve(""#ccc"") === ""#CCC"")']
```"
1136,"    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","```javascript
function stringToMd5(text) {
    const crypto = require('crypto');
    return text ? crypto.createHash('md5').update(text, 'ascii').digest('hex') : null;
}
```",1137,"```javascript
console.assert(string_to_md5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62');
console.assert(string_to_md5('') === null);
console.assert(string_to_md5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888');
console.assert(string_to_md5('password') === '5f4dcc3b5aa765d61d8327deb882cf99');
console.assert(true);
```"
1137,"    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
","```javascript
function generateIntegers(a, b) {
    const lower = Math.max(2, Math.min(a, b));
    const upper = Math.min(8, Math.max(a, b));

    const result = [];
    for (let i = lower; i <= upper; i++) {
        if (i % 2 === 0) {
            result.push(i);
        }
    }
    return result;
}
```",1138,"```javascript
console.assert(JSON.stringify(generate_integers(2, 10)) === JSON.stringify([2, 4, 6, 8]), ""Test 1"");
console.assert(JSON.stringify(generate_integers(10, 2)) === JSON.stringify([2, 4, 6, 8]), ""Test 2"");
console.assert(JSON.stringify(generate_integers(132, 2)) === JSON.stringify([2, 4, 6, 8]), ""Test 3"");
console.assert(JSON.stringify(generate_integers(17, 89)) === JSON.stringify([]), ""Test 4"");
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"");
```"
