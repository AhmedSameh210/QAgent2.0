Unnamed: 0,text,code,task_id,test_list,Unnamed: 5
0," this function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","
const R = 3;
const C = 3;

function min_cost(cost, m, n) {
    let tc = Array.from({ length: R }, () => Array(C).fill(0));
    tc[0][0] = cost[0][0];
    
    for (let i = 1; i <= m; i++) {
        tc[i][0] = tc[i - 1][0] + cost[i][0];
    }
    
    for (let j = 1; j <= n; j++) {
        tc[0][j] = tc[0][j - 1] + cost[0][j];
    }
    
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            tc[i][j] = Math.min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j];
        }
    }
    
    return tc[m][n];
}
",1,"
[console.assert(min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) === 8), console.assert(min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) === 12), console.assert(min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) === 16)]
",
1, this function to find the similar elements from the given two tuple lists.,"function max_difference(test_list) {
    let temp = test_list.map(([a, b]) => Math.abs(b - a));  
    let res = Math.max(...temp);  
    return res;
}",2,"[console.assert(max_difference([[3, 5], [1, 7], [10, 3], [1, 2]]) === 7),
console.assert(max_difference([[4, 6], [2, 17], [9, 13], [11, 12]]) === 15),
console.assert(max_difference([[12, 35], [21, 27], [13, 23], [41, 22]]) === 23)]",
2, this   function to identify non-prime numbers.,"
function isNotPrime(n) {
    let result = false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            result = true;
        }
    }
    return result;
}
",3,"[
    console.assert(isNotPrime(2) === false), 
    console.assert(isNotPrime(10) === true), 
    console.assert(isNotPrime(35) === true) 
]",
3, this function to find the largest integers from a given list of numbers using heap queue algorithm.,"
function heapQueueLargest(nums, n) {
  return nums.sort((a, b) => b - a).slice(0, n);
}
",4,"
[console.assert(heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3).toString() === [85, 75, 65].toString()), console.assert(heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2).toString() === [85, 75].toString()), console.assert(heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5).toString() === [85, 75, 65, 58, 35].toString())]
",
4, this function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"function countWays(n) { 
    let A = new Array(n + 1).fill(0); 
    let B = new Array(n + 1).fill(0); 
    A[0] = 1; 
    A[1] = 0; 
    B[0] = 0; 
    B[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        A[i] = A[i - 2] + 2 * B[i - 1]; 
        B[i] = A[i - 1] + B[i - 2]; 
    } 
    return A[n]; 
}",5,"[
    console.assert(countWays(2) === 3),
    console.assert(countWays(8) === 153),
    console.assert(countWays(12) === 2131)
]",0
5, this   function to check whether the two numbers differ at one bit position only or not.,"function differAtOneBitPos(a, b) { 
    return (a ^ b) && !((a ^ b) & ((a ^ b) - 1));
}",6,"
[console.assert(differAtOneBitPos(13,9) === true), console.assert(differAtOneBitPos(15,8) === false), console.assert(differAtOneBitPos(2,4) === false)]
",
7, this function to find squares of individual elements in a list using lambda function.,"
function squareNums(nums) {
    const squareNums = nums.map(x => x ** 2);
    return squareNums;
}
",8,"[console.assert(JSON.stringify(squareNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))) === JSON.stringify([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]), console.assert(JSON.stringify(squareNums([10,20,30])) === JSON.stringify([100,400,900])), console.assert(JSON.stringify(squareNums([12,15])) === JSON.stringify([144,225]))]",
8, this   function to find the minimum number of rotations required to get the same string.,"
function findRotations(str) {
    let tmp = str + str;
    let n = str.length;
    for (let i = 1; i <= n; i++) {
        let substring = tmp.slice(i, i + n);
        if (str === substring) {
            return i;
        }
    }
    return n;
}
",9,"[
    console.assert(findRotations(""aaaa"") === 1),
    console.assert(findRotations(""ab"") === 2),
    console.assert(findRotations(""abc"") === 3)
]",
10, this   function to remove first and last occurrence of a given character from the string.,"
function remove_Occ(s, ch) { 
    for (let i = 0; i < s.length; i++) { 
        if (s[i] === ch) { 
            s = s.slice(0, i) + s.slice(i + 1); 
            break; 
        } 
    } 
    for (let i = s.length - 1; i >= 0; i--) {  
        if (s[i] === ch) { 
            s = s.slice(0, i) + s.slice(i + 1); 
            break; 
        } 
    } 
    return s; 
}
",11,"
[console.assert(remove_Occ(""hello"",""l"") === ""heo""), console.assert(remove_Occ(""abcda"",""a"") === ""bcd""), console.assert(remove_Occ(""PHP"",""P"") === ""H"")]
",
11, this function to sort a given matrix in ascending order according to the sum of its rows.,"
function sortMatrix(M) {
    const result = M.sort((a, b) => a.reduce((acc, val) => acc + val, 0) - b.reduce((acc, val) => acc + val, 0));
    return result;
}
",12,"[
    console.assert(JSON.stringify(sortMatrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])) === JSON.stringify([[1, 1, 1], [1, 2, 3], [2, 4, 5]])),
    console.assert(JSON.stringify(sortMatrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])) === JSON.stringify([[-2, 4, -5], [1, -1, 1], [1, 2, 3]])),
    console.assert(JSON.stringify(sortMatrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])) === JSON.stringify([[2, 1, 4], [6, 4, 3], [5, 8, 9]]))
]",
12, this function to count the most common words in a dictionary.,"function countCommon(words) {
    const wordCounts = {};
    words.forEach(word => {
      wordCounts[word] = (wordCounts[word] || 0) + 1;
    });
  
    const topFour = Object.entries(wordCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 4);
    
    return topFour;
  }",13,"  
  [
      console.assert(JSON.stringify(countCommon([""red"", ""green"", ""black"", ""pink"", ""black"", ""white"", ""black"", ""eyes"", ""white"", ""black"", ""orange"", ""pink"", ""pink"", ""red"", ""red"", ""white"", ""orange"", ""white"", ""black"", ""pink"", ""green"", ""green"", ""pink"", ""green"", ""pink"", ""white"", ""orange"", ""orange"", ""red""])) === JSON.stringify([[""pink"", 6], [""black"", 5], [""white"", 5], [""red"", 4]])),
      console.assert(JSON.stringify(countCommon([""one"", ""two"", ""three"", ""four"", ""five"", ""one"", ""two"", ""one"", ""three"", ""one""])) === JSON.stringify([[""one"", 4], [""two"", 2], [""three"", 2], [""four"", 1]])),
      console.assert(JSON.stringify(countCommon([""Facebook"", ""Apple"", ""Amazon"", ""Netflix"", ""Google"", ""Apple"", ""Netflix"", ""Amazon""])) === JSON.stringify([[""Apple"", 2], [""Amazon"", 2], [""Netflix"", 2], [""Facebook"", 1]]))
  ]
  ",
13, this   function to find the volume of a triangular prism.,"
function findVolume(l, b, h) {
    return (l * b * h) / 2;
}
",14,"
[console.assert(findVolume(10, 8, 6) === 240), console.assert(findVolume(3, 2, 2) === 6), console.assert(findVolume(1, 2, 1) === 1)];
",
14, this function to split a string at lowercase letters.,"function splitLowerString(text) {
    return text.match(/[a-z]|[^a-z]+/g) || [];
}",15,"[console.assert(JSON.stringify(splitLowerString(""AbCd"")) === JSON.stringify([""A"", ""b"", ""C"", ""d""])),
console.assert(JSON.stringify(splitLowerString(""Python"")) === JSON.stringify([""P"", ""y"", ""t"", ""h"", ""o"", ""n""])),
console.assert(JSON.stringify(splitLowerString(""Programming"")) === JSON.stringify([""P"", ""r"", ""o"", ""g"", ""r"", ""a"", ""m"", ""m"", ""i"", ""n"", ""g""]))]",
15, this function to find sequences of lowercase letters joined with an underscore.,"function textLowercaseUnderscore(text) {
    const patterns = /^[a-z]+_[a-z]+$/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",16,"[
    console.assert(textLowercaseUnderscore(""aab_cbbbc"") === ""Found a match!""),
    console.assert(textLowercaseUnderscore(""aab_Abbbc"") === ""Not matched!""),
    console.assert(textLowercaseUnderscore(""Aaab_abbbc"") === ""Not matched!"")
]",
16, this function to find the perimeter of a square.,"
function squarePerimeter(a) {
  const perimeter = 4 * a;
  return perimeter;
}
",17,"
[console.assert(squarePerimeter(10) === 40), console.assert(squarePerimeter(5) === 20), console.assert(squarePerimeter(4) === 16)]
",
17, this function to remove characters from the first string which are present in the second string.,"function removeDirtyChars(string, secondString) {
    let count = new Array(256).fill(0); 
    
    for (let char of secondString) {
        count[char.charCodeAt(0)] = 1;
    }

    let result = [];

    for (let char of string) {
        if (!count[char.charCodeAt(0)]) {
            result.push(char);
        }
    }

    return result.join(''); 
}",18,"[console.assert(removeDirtyChars(""probasscurve"", ""pros"") === ""bacuve""),
console.assert(removeDirtyChars(""digitalindia"", ""talent"") === ""digiidi""),
console.assert(removeDirtyChars(""exoticmiles"", ""toxic"") === ""emles"")]",
18, this function to find whether a given array of integers contains any duplicate element.,"
function testDuplicate(arrayNums) {
    const numsSet = new Set(arrayNums);
    return arrayNums.length !== numsSet.size;
}
",19,"[
    console.assert(testDuplicate([1, 2, 3, 4, 5]) === false),
    console.assert(testDuplicate([1, 2, 3, 4, 4]) === true),
    console.assert(testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5]) === true)
]",
19, this function to check if the given number is woodball or not.,"
function isWoodall(x) {
    if (x % 2 == 0) {
        return false;
    }
    if (x == 1) {
        return true;
    }
    x = x + 1;
    let p = 0;
    while (x % 2 == 0) {
        x = x / 2;
        p = p + 1;
        if (p == x) {
            return true;
        }
    }
    return false;
}
",20,"[
    console.assert(isWoodall(383) === true),
    console.assert(isWoodall(254) === false),
    console.assert(isWoodall(200) === false)
]",
20, this function to find m number of multiples of n.,"function multiples_of_num(m, n) {
    let multiples_of_num = [];
    for (let i = n; i < (m + 1) * n; i += n) { 
        multiples_of_num.push(i);
    }
    return multiples_of_num;
}",21,"
[console.assert(multiples_of_num(4,3).toString() === [3,6,9,12].toString()), console.assert(multiples_of_num(2,5).toString() === [5,10].toString()), console.assert(multiples_of_num(9,2).toString() === [2,4,6,8,10,12,14,16,18].toString())]
",
21, this function to find the first duplicate element in a given array of integers.,"
function findFirstDuplicate(nums) {
    let numSet = new Set();
    let noDuplicate = -1;

    for (let i = 0; i < nums.length; i++) {
        if (numSet.has(nums[i])) {
            return nums[i];
        } else {
            numSet.add(nums[i]);
        }
    }

    return noDuplicate;
}
",22,"
[console.assert(findFirstDuplicate([1, 2, 3, 4, 4, 5]) === 4), console.assert(findFirstDuplicate([1, 2, 3, 4]) === -1), console.assert(findFirstDuplicate([1, 1, 2, 3, 3, 2, 2]) === 1)]
",
22, this   function to find the maximum sum of elements of list in a list of lists.,"
function maximum_Sum(list1) { 
    let maxi = -100000;
    for (let x of list1) { 
        let sum = 0; 
        for (let y of x) { 
            sum += y;      
        }
        maxi = Math.max(sum, maxi);     
    }
    return maxi; 
}
",23,"
[console.assert(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) === 33), console.assert(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) === 6), console.assert(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) === 19)];
",
23, this function to convert the given binary number to its decimal equivalent.,"
function binaryToDecimal(binary) {
    let decimal = 0, i = 0;
    while (binary !== 0) {
        let dec = binary % 10;
        decimal += dec * Math.pow(2, i);
        binary = Math.floor(binary / 10);
        i++;
    }
    return decimal;
}
",24,"
[console.assert(binaryToDecimal(100) === 4), console.assert(binaryToDecimal(1011) === 11), console.assert(binaryToDecimal(1101101) === 109)]
",
24, this   function to find the product of non-repeated elements in a given array.,"function find_Product(arr) { 
    let uniqueNumbers = new Set(arr); 
    let prod = 1; 
    
    for (let num of uniqueNumbers) { 
        prod *= num; 
    } 
    
    return prod; 
}",25,"
[console.assert(find_Product([1,1,2,3]) === 6), console.assert(find_Product([1,2,3,1,1]) === 6), console.assert(find_Product([1,1,4,5,6]) === 120)]
",
25, this function to check if the given tuple list has all k elements.,"function checkKElements(testList, K) {
    for (let tup of testList) {
        for (let ele of tup) {
            if (ele !== K) {
                return false; 
            }
        }
    }
    return true;
}",26,"[console.assert(checkKElements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4) === true, ""Test Case 1 Failed""),
console.assert(checkKElements([[7, 7, 7], [7, 7]], 7) === true, ""Test Case 2 Failed""),
console.assert(checkKElements([[9, 9], [9, 9, 9, 9]], 7) === false, ""Test Case 3 Failed"")]",
26, this   function to remove all digits from a list of strings.,"function remove(list) {
    var pattern = /[0-9]/g; 
    return list.map(i => i.replace(pattern, '')); 
}",27,"[console.assert(
    JSON.stringify(remove([""4words"", ""3letters"", ""4digits""])) === JSON.stringify([""words"", ""letters"", ""digits""]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(remove([""28Jan"", ""12Jan"", ""11Jan""])) === JSON.stringify([""Jan"", ""Jan"", ""Jan""]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(remove([""wonder1"", ""wonder2"", ""wonder3""])) === JSON.stringify([""wonder"", ""wonder"", ""wonder""]),
    ""Test Case 3 Failed""
)]",
27, this   function to find binomial co-efficient.,"
function binomial_Coeff(n, k) { 
    if (k > n) { 
        return 0; 
    } 
    if (k === 0 || k === n) { 
        return 1; 
    } 
    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k); 
}
",28,"
[console.assert(binomial_Coeff(5, 2) === 10), console.assert(binomial_Coeff(4, 3) === 4), console.assert(binomial_Coeff(3, 2) === 3)]
",
28, this   function to find the element occurring odd number of times.,"function getOddOccurrence(arr) {
    let result = 0;
    for (let num of arr) {
        result ^= num; 
    }
    return result;
}",29,"
[console.assert(getOddOccurrence([1,2,3,1,2,3,1]) === 1), console.assert(getOddOccurrence([1,2,3,2,3,1,3]) === 3), console.assert(getOddOccurrence([2,3,5,4,5,2,4,3,5,2,4,4,2]) === 5)]
",
29, this   function to count all the substrings starting and ending with same characters.,"function countSubstringWithEqualEnds(s) { 
    let result = 0; 
    let n = s.length; 
    for (let i = 0; i < n; i++) { 
        for (let j = 1; j <= n - i; j++) {  
            if (s.charCodeAt(i) === s.charCodeAt(i + j - 1)) { 
                result++; 
            } 
        } 
    } 
    return result; 
}",30,"
[console.assert(countSubstringWithEqualEnds(""abc"") === 3), console.assert(countSubstringWithEqualEnds(""abcda"") === 6), console.assert(countSubstringWithEqualEnds(""ab"") === 2)]
",
30, this function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"
function func(nums, k) {
    const d = {};
    for (const row of nums) {
        for (const i of row) {
            d[i] = (d[i] || 0) + 1;
        }
    }
    const temp = [];
    for (const [key, v] of Object.entries(d)) {
        if (temp.length < k) {
            temp.push([v, key]);
            if (temp.length === k) {
                temp.sort(([a], [b]) => a - b);
            }
        } else {
            if (v > temp[0][0]) {
                temp.shift();
                temp.push([v, key]);
                temp.sort(([a], [b]) => a - b);
            }
        }
    }
    const result = [];
    while (temp.length) {
        const [v, key] = temp.shift();
        result.push(key);
    }
    return result;
}",31,"[
    console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3).toString() === [5, 7, 1].toString()),
    console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1).toString() === [1].toString()),
    console.assert(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5).toString() === [ '4', '5', '7', '8', '1' ].toString())
]",
31, this   function to find the largest prime factor of a given number.,"
function maxPrimeFactors(n) { 
    let maxPrime = -1; 
    while (n % 2 === 0) { 
        maxPrime = 2; 
        n >>= 1;    
    } 
    for (let i = 3; i <= Math.sqrt(n); i += 2) { 
        while (n % i === 0) { 
            maxPrime = i; 
            n /= i; 
        } 
    } 
    if (n > 2) { 
        maxPrime = n;  
    } 
    return Math.floor(maxPrime); 
}
",32,"
[console.assert(maxPrimeFactors(15) === 5), console.assert(maxPrimeFactors(6) === 3), console.assert(maxPrimeFactors(2) === 2)];
",
32, this   function to convert a decimal number to binary number.,"
function decimalToBinary(N) {
    let B_Number = 0;
    let cnt = 0;
    while (N !== 0) {
        let rem = N % 2;
        let c = Math.pow(10, cnt);
        B_Number += rem * c;
        N = Math.floor(N / 2);
        cnt++;
    }
    return B_Number;
}
",33,"
[console.assert(decimalToBinary(10) === 1010), console.assert(decimalToBinary(1) === 1), console.assert(decimalToBinary(20) === 10100)]
",
33, this   function to find the missing number in a sorted array.,"function findMissing(ar, N) {
    let l = 0;
    let r = N - 1;
    
    while (l <= r) {
        let mid = Math.floor((l + r) / 2);
        if (ar[mid] !== mid + 1) {
            if (mid === 0 || ar[mid - 1] === mid) {
                return mid + 1;
            } else {
                r = mid - 1;
            }
        } else {
            l = mid + 1;
        }
    }
    return N;
}",34,"[console.assert(findMissing([1, 2, 3, 5], 5) === 4),
console.assert(findMissing([1, 3, 4, 5], 5) === 2),
console.assert(findMissing([1, 2, 3, 5, 6, 7], 7) === 4)]",
34, this function to find the n-th rectangular number.,"
function findRectNum(n) {
  return n * (n + 1);
}
",35,"
[console.assert(findRectNum(4) === 20), console.assert(findRectNum(5) === 30), console.assert(findRectNum(6) === 42)]",
35, this   function to find the nth digit in the proper fraction of two given numbers.,"
function find_Nth_Digit(p, q, N) {  
    while (N > 0) { 
        N -= 1;  
        p *= 10;  
        res = Math.floor(p / q);  
        p %= q;  
    } 
    return res;  
}
",36,"
[console.assert(find_Nth_Digit(1, 2, 1) === 5), console.assert(find_Nth_Digit(3, 5, 1) === 6), console.assert(find_Nth_Digit(5, 6, 5) === 3)]
",
36, this function to sort a given mixed list of integers and strings.,"function sortMixedList(mixedList) {
    const intPart = mixedList.filter(i => typeof i === 'number').sort((a, b) => a - b);
    const strPart = mixedList.filter(i => typeof i === 'string').sort();
    return intPart.concat(strPart);
}",37,"[
    console.assert(sortMixedList([19, ""red"", 12, ""green"", ""blue"", 10, ""white"", ""green"", 1]).toString() === [1, 10, 12, 19, ""blue"", ""green"", ""green"", ""red"", ""white""].toString()),
    console.assert(sortMixedList([19, ""red"", 12, ""green"", ""blue"", 10, ""white"", ""green"", 1]).toString() === [1, 10, 12, 19, ""blue"", ""green"", ""green"", ""red"", ""white""].toString()),
    console.assert(sortMixedList([19, ""red"", 12, ""green"", ""blue"", 10, ""white"", ""green"", 1]).toString() === [1, 10, 12, 19, ""blue"", ""green"", ""green"", ""red"", ""white""].toString())
]",
37, this function to find the division of first even and odd number of a given list.,"
function divEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) || -1;
    const firstOdd = list1.find(el => el % 2 !== 0) || -1;
    return firstEven / firstOdd;
}
",38,"
[console.assert(divEvenOdd([1,3,5,7,4,1,6,8]) === 4), console.assert(divEvenOdd([1,2,3,4,5,6,7,8,9,10]) === 2), console.assert(divEvenOdd([1,5,7,9,10]) === 10)]
",
38, this function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"function rearrangeString(S) {
    const ctr = {};
    for (const char of S) {
        ctr[char] = (ctr[char] || 0) + 1;
    }
    
    const heap = Object.entries(ctr).map(([key, value]) => [-value, key]);

    for (let i = Math.floor(heap.length / 2) - 1; i >= 0; i--) {
        let idx = i;
        while (true) {
            const left = 2 * idx + 1;
            const right = 2 * idx + 2;
            let largest = idx;

            if (left < heap.length && heap[left][0] > heap[largest][0]) {
                largest = left;
            }
            if (right < heap.length && heap[right][0] > heap[largest][0]) {
                largest = right;
            }
            if (largest !== idx) {
                [heap[idx], heap[largest]] = [heap[largest], heap[idx]];
                idx = largest;
            } else {
                break;
            }
        }
    }

   if (-heap[0][0] * 2 > S.length + 1) {
        return """";
    }

    const ans = [];
    while (heap.length >= 2) {
        const [nct1, char1] = heap[0];
        heap[0] = heap[heap.length - 1];
        heap.pop();
        let idx = 0;
        while (true) {
            const left = 2 * idx + 1;
            const right = 2 * idx + 2;
            let largest = idx;

            if (left < heap.length && heap[left][0] > heap[largest][0]) {
                largest = left;
            }
            if (right < heap.length && heap[right][0] > heap[largest][0]) {
                largest = right;
            }
            if (largest !== idx) {
                [heap[idx], heap[largest]] = [heap[largest], heap[idx]];
                idx = largest;
            } else {
                break;
            }
        }

        const [nct2, char2] = heap[0];
        heap[0] = heap[heap.length - 1];
        heap.pop();
        idx = 0;
        while (true) {
            const left = 2 * idx + 1;
            const right = 2 * idx + 2;
            let largest = idx;

            if (left < heap.length && heap[left][0] > heap[largest][0]) {
                largest = left;
            }
            if (right < heap.length && heap[right][0] > heap[largest][0]) {
                largest = right;
            }
            if (largest !== idx) {
                [heap[idx], heap[largest]] = [heap[largest], heap[idx]];
                idx = largest;
            } else {
                break;
            }
        }

        ans.push(char1, char2);
        if (nct1 + 1) heap.push([nct1 + 1, char1]);
        if (nct2 + 1) heap.push([nct2 + 1, char2]);
        
        let idx1 = heap.length - 1;
        while (idx1 > 0) {
            const parent = Math.floor((idx1 - 1) / 2);
            if (heap[idx1][0] > heap[parent][0]) {
                [heap[idx1], heap[parent]] = [heap[parent], heap[idx1]];
                idx1 = parent;
            } else {
                break;
            }
        }
    }

    return ans.join("""") + (heap.length ? heap[0][1] : """");
}",39,"[console.assert([ ""aba"", ""baa"" ].includes(rearrangeString(""aab""))),
console.assert([ ""abab"", ""baba"" ].includes(rearrangeString(""aabb""))),
console.assert([ ""abcdcd"", ""abdcdb"" ].includes(rearrangeString(""abccdd"")))]",
39, this function to find frequency of the elements in a given list of lists using collections module.,"
function freqElement(nums) {
  const result = {};
  nums.flat().forEach(num => {
    result[num] = (result[num] || 0) + 1;
  });
  return result;
}
",40,"[
    console.assert(JSON.stringify(freqElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])) === JSON.stringify({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})),
    console.assert(JSON.stringify(freqElement([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})),
    console.assert(JSON.stringify(freqElement([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])) === JSON.stringify({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}))
]",
40, this function to filter even numbers using lambda function.,"
function filterEvenNumbers(nums) {
    const evenNums = nums.filter(x => x % 2 === 0);
    return evenNums;
}
",41,"
[console.assert(filterEvenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [2, 4, 6, 8, 10].toString()), console.assert(filterEvenNumbers([10,20,45,67,84,93]).toString() === [10,20,84].toString()), console.assert(filterEvenNumbers([5,7,9,8,6,4,3]).toString() === [8,6,4].toString())]
",
41, this   function to find the sum of repeated elements in a given array.,"
function findSum(arr, n) {
    return arr.filter(x => arr.filter(y => y === x).length > 1).reduce((a, b) => a + b, 0);
}
",42,"
[console.assert(findSum([1,2,3,1,1,4,5,6],8) === 3), console.assert(findSum([1,2,3,1,1],5) === 3), console.assert(findSum([1,1,2],3) === 2)]
",
42, this function to find sequences of lowercase letters joined with an underscore using regex.,"
function textMatch(text) {
  const patterns = /^[a-z]+_[a-z]+$/;
  if (patterns.test(text)) {
    return Found a match!;
  } else {
    return Not matched!;
  }
}
",43,"[
    console.assert(textMatch(""aab_cbbbc"") === ""Found a match!""),
    console.assert(textMatch(""aab_Abbbc"") === ""Not matched!""),
    console.assert(textMatch(""Aaab_abbbc"") === ""Not matched!"")
]",
43, this function that matches a word at the beginning of a string.,"function textMatchString(text) {
    const patterns = /^\s*\w+/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",44,"[
    console.assert(textMatchString(""  "") === ""Not matched!""),
    console.assert(textMatchString("" "") === ""Not matched!""), 
    console.assert(textMatchString(""  lang"") === ""Found a match!"")
]",
44, this function to find the gcd of the given array elements.,"function getGCD(l) {
    let gcd = l[0];
    for (let i = 1; i < l.length; i++) {
        while (l[i]) {
            let temp = l[i];
            l[i] = gcd % l[i];
            gcd = temp;
        }
    }
    return gcd;
}",45,"
[console.assert(getGCD([2, 4, 6, 8, 16]) === 2), console.assert(getGCD([1, 2, 3]) === 1), console.assert(getGCD([2, 4, 6, 8]) === 2)]
",
45, this   function to determine whether all the numbers are different from each other are not.,"
function testDistinct(data) {
  return data.length === new Set(data).size;
}
",46,"[
    console.assert(testDistinct([1,5,7,9]) === true),
    console.assert(testDistinct([2,4,5,5,7,9]) === false),
    console.assert(testDistinct([1,2,3]) === true)
]",
46, this   function to find the last digit when factorial of a divides factorial of b.,"
function compute_Last_Digit(A, B) {
    let variable = 1;
    if (A === B) {
        return 1;
    } else if ((B - A) >= 5) {
        return 0;
    } else {
        for (let i = A + 1; i <= B; i++) {
            variable = (variable * (i % 10)) % 10;
        }
        return variable % 10;
    }
}
",47,"
[console.assert(compute_Last_Digit(2, 4) === 2), console.assert(compute_Last_Digit(6, 8) === 6), console.assert(compute_Last_Digit(1, 2) === 2)]
",
47, this   function to set all odd bits of a given number.,"
function oddBitSetNumber(n) {
    let count = 0, res = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 0) {
            res |= (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return (n | res);
}
",48,"[
    console.assert(oddBitSetNumber(10) === 15),
    console.assert(oddBitSetNumber(20) === 21),
    console.assert(oddBitSetNumber(30) === 31)
]",
48, this function to extract every first or specified element from a given two-dimensional list.,"function specifiedElement(matrix, index) {
    return matrix.map(row => row[index]);
}",49,"[console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) === JSON.stringify([1, 4, 7])),
console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) === JSON.stringify([3, 6, 9])),
console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) === JSON.stringify([2, 5, 1]))]",
49, this function to find the list with minimum length using lambda function.,"function minLengthList(arrays) {
    let minLength = Infinity;
    let minList = [];

    for (let array of arrays) {
        if (array.length < minLength) {
            minLength = array.length;
            minList = array;
        }
    }

    return [minLength, minList];
}",50,"[console.assert(JSON.stringify(minLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([1, [0]])),
console.assert(JSON.stringify(minLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])) === JSON.stringify([1, [1]])),
console.assert(JSON.stringify(minLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])) === JSON.stringify([2, [1, 2]]))]",
51, this function to caluclate area of a parallelogram.,"
function parallelogramArea(b, h) {
  const area = b * h;
  return area;
}
",52,"
[console.assert(parallelogramArea(10, 20) === 200), console.assert(parallelogramArea(15, 20) === 300), console.assert(parallelogramArea(8, 9) === 72)]
",
53, this function to sort the given array by using counting sort.,"
function countingSort(myList) {
    let maxValue = 0;
    for (let i = 0; i < myList.length; i++) {
        if (myList[i] > maxValue) {
            maxValue = myList[i];
        }
    }
    let buckets = new Array(maxValue + 1).fill(0);
    for (let i of myList) {
        buckets[i]++;
    }
    let i = 0;
    for (let j = 0; j <= maxValue; j++) {
        for (let a = 0; a < buckets[j]; a++) {
            myList[i] = j;
            i++;
        }
    }
    return myList;
}",54,"[console.assert(JSON.stringify(countingSort([1,23,4,5,6,7,8]))) === JSON.stringify([1, 4, 5, 6, 7, 8, 23]), console.assert(JSON.stringify(countingSort([12, 9, 28, 33, 69, 45]))) === JSON.stringify([9, 12, 28, 33, 45, 69]), console.assert(JSON.stringify(countingSort([8, 4, 14, 3, 2, 1]))) === JSON.stringify([1, 2, 3, 4, 8, 14])]",
54, this function to find t-nth term of geometric series.,"
function tn_gp(a, n, r) {
  const tn = a * Math.pow(r, n - 1);
  return tn;
}
",55,"
[console.assert(tn_gp(1, 5, 2) === 16), console.assert(tn_gp(1, 5, 4) === 256), console.assert(tn_gp(2, 6, 3) === 486)]
",
55, this   function to check if a given number is one less than twice its reverse.,"function check(n) {
    let rev_num = 0;
    let num = n; 
    while (num > 0) {
        rev_num = rev_num * 10 + num % 10;
        num = Math.floor(num / 10);
    }
    return (2 * rev_num === n + 1);
}",56,"[console.assert(check(70) === false), console.assert(check(23) === false), console.assert(check(73) === true)]",
56, this   function to find the largest number that can be formed with the given digits.,"function findMaxNum(arr, n) {
    arr.sort((a, b) => b - a);  
    let num = arr[0];  
    for (let i = 1; i < n; i++) {  
        num = num * 10 + arr[i];  
    }
    return num;
}",57,"[console.assert(findMaxNum([1, 2, 3], 3) === 321),
console.assert(findMaxNum([4, 5, 6, 1], 4) === 6541),
console.assert(findMaxNum([1, 2, 3, 9], 4) === 9321)]",
57, this   function to check whether the given two integers have opposite sign or not.,"
function opposite_Signs(x, y) { 
    return (x ^ y) < 0; 
}
",58,"[
    console.assert(opposite_Signs(1, -2) === true),
    console.assert(opposite_Signs(3, 2) === false),
    console.assert(opposite_Signs(-10, -10) === false)
]",
59, this function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"
function max_len_sub(arr, n) {
    let mls = [];
    let max = 0;
    for (let i = 0; i < n; i++) {
        mls.push(1);
    }
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {
                mls[i] = mls[j] + 1;
            }
        }
    }
    for (let i = 0; i < n; i++) {
        if (max < mls[i]) {
            max = mls[i];
        }
    }
    return max;
}
",60,"
[console.assert(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) === 5), console.assert(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) === 4), console.assert(max_len_sub([9, 11, 13, 15, 18], 5) === 1)]
",
60, this   function to count number of substrings with the sum of digits equal to their length.,"function countSubstrings(s, n) {
    s = s.toString();

    let count = 0, sum = 0;
    const mp = new Map();
    mp.set(0, 1);

    for (let i = 0; i < n; i++) {
        sum += parseInt(s.charAt(i));
        count += (mp.get(sum - (i + 1)) || 0);
        mp.set(sum - (i + 1), (mp.get(sum - (i + 1)) || 0) + 1);
    }

    return count;
}",61,"[console.assert(countSubstrings(112112, 6) === 6),
console.assert(countSubstrings(111, 3) === 6),
console.assert(countSubstrings(1101112, 7) === 12)]",
61, this   function to find smallest number in a list.,"
function smallestNum(xs) {
  return Math.min(...xs);
}
",62,"
[console.assert(smallestNum([10, 20, 1, 45, 99]) === 1), console.assert(smallestNum([1, 2, 3]) === 1), console.assert(smallestNum([45, 46, 50, 60]) === 45)]
",
62, this function to find the maximum difference between available pairs in the given tuple list.,"function max_difference(test_list) {
    let temp = test_list.map(([a, b]) => Math.abs(b - a));  
    let res = Math.max(...temp); 
    return res;
}",63,"[console.assert(max_difference([[3, 5], [1, 7], [10, 3], [1, 2]]) === 7),
console.assert(max_difference([[4, 6], [2, 17], [9, 13], [11, 12]]) === 15),
console.assert(max_difference([[12, 35], [21, 27], [13, 23], [41, 22]]) === 23)]",
63, this function to sort a list of tuples using lambda.,"
function subjectMarks(subjectmarks) {
    subjectmarks.sort((a, b) => a[1] - b[1]);
    return subjectmarks;
}
",64,"[
  console.assert(JSON.stringify(subjectMarks([[""English"", 88], [""Science"", 90], [""Maths"", 97], [""Social sciences"", 82]])) === JSON.stringify([[""Social sciences"", 82], [""English"", 88], [""Science"", 90], [""Maths"", 97]])),
  console.assert(JSON.stringify(subjectMarks([[""Telugu"", 49], [""Hindhi"", 54], [""Social"", 33]])) === JSON.stringify([[""Social"", 33], [""Telugu"", 49], [""Hindhi"", 54]])),
  console.assert(JSON.stringify(subjectMarks([[""Physics"", 96], [""Chemistry"", 97], [""Biology"", 45]])) === JSON.stringify([[""Biology"", 45], [""Physics"", 96], [""Chemistry"", 97]]))
]",
64, this function of recursion list sum.,"
function recursiveListSum(dataList) {
    let total = 0;
    for (let element of dataList) {
        if (Array.isArray(element)) {
            total += recursiveListSum(element);
        } else {
            total += element;
        }
    }
    return total;
}
",65,"
[console.assert(recursiveListSum([1, 2, [3, 4], [5, 6]]) === 21), console.assert(recursiveListSum([7, 10, [15, 14], [19, 41]]) === 106), console.assert(recursiveListSum([10, 20, [30, 40], [50, 60]]) === 210)]
",
65, this   function to count positive numbers in a list.,"
function posCount(list) {
  let posCount = 0;
  for (let num of list) {
    if (num >= 0) {
      posCount++;
    }
  }
  return posCount;
}
",66,"
[console.assert(posCount([1,-2,3,-4]) === 2), console.assert(posCount([3,4,5,-1]) === 3), console.assert(posCount([1,2,3,4]) === 4)]
",
66, this function to find the number of ways to partition a set of bell numbers.,"function bellNumber(n) {
    const bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    bell[0][0] = 1;  
    
    for (let i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        
        for (let j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    
    return bell[n][0];
}",67,"[console.assert(bellNumber(2) === 2),
console.assert(bellNumber(10) === 115975),
console.assert(bellNumber(20) === 51724158235372)]",
67, this   function to check whether the given array is monotonic or not.,"
function isMonotonic(A) {
    return (A.every((val, i) => i === 0 || A[i - 1] <= val) || 
            A.every((val, i) => i === 0 || A[i - 1] >= val));
}
",68,"[
  console.assert(isMonotonic([6, 5, 4, 4]) === true),
  console.assert(isMonotonic([1, 2, 2, 3]) === true),
  console.assert(isMonotonic([1, 3, 2]) === false)
]",
68, this function to check whether a list contains the given sublist or not.,"
function isSublist(l, s) {
    let subSet = false;
    if (s.length === 0) {
        subSet = true;
    } else if (s.length === l.length) {
        subSet = true;
    } else if (s.length > l.length) {
        subSet = false;
    } else {
        for (let i = 0; i < l.length; i++) {
            if (l[i] === s[0]) {
                let n = 1;
                while (n < s.length && l[i + n] === s[n]) {
                    n++;
                }
                if (n === s.length) {
                    subSet = true;
                }
            }
        }
    }
    return subSet;
}
",69,"
[console.assert(isSublist([2,4,3,5,7],[3,7]) === false), console.assert(isSublist([2,4,3,5,7],[4,3]) === true), console.assert(isSublist([2,4,3,5,7],[1,6]) === false)]
",
69, this function to find whether all the given tuples have equal length or not.,"function getEqual(input, k) {
    for (let tuple of input) {
        if (tuple.length !== k) {
            return ""All tuples do not have same length"";
        }
    }
    return ""All tuples have same length"";
}",70,"[console.assert(getEqual([[11, 22, 33], [44, 55, 66]], 3) === ""All tuples have same length""),
console.assert(getEqual([[1, 2, 3], [4, 5, 6, 7]], 3) === ""All tuples do not have same length""),
console.assert(getEqual([[1, 2], [3, 4]], 2) === ""All tuples have same length"")]",
71, this   function to check whether the given number can be represented as difference of two squares or not.,"
function dif_Square(n) { 
    if (n % 4 != 2) { 
        return true; 
    } 
    return false; 
}
",72,"
[console.assert(dif_Square(5) === true), console.assert(dif_Square(10) === false), console.assert(dif_Square(15) === true)]
",
73, this function to check whether it follows the sequence given in the patterns array.,"
function isSamePatterns(colors, patterns) {
    if (colors.length !== patterns.length) {
        return false;
    }
    let sdict = {};
    let pset = new Set();
    let sset = new Set();
    
    for (let i = 0; i < patterns.length; i++) {
        pset.add(patterns[i]);
        sset.add(colors[i]);
        if (!(patterns[i] in sdict)) {
            sdict[patterns[i]] = [];
        }

        let keys = sdict[patterns[i]];
        keys.push(colors[i]);
        sdict[patterns[i]] = keys;
    }

    if (pset.size !== sset.size) {
        return false;
    }

    for (let values of Object.values(sdict)) {
        for (let j = 0; j < values.length - 1; j++) {
            if (values[j] !== values[j + 1]) {
                return false;
            }
        }
    }

    return true;
}
",74,"[
  console.assert(isSamePatterns([""red"", ""green"", ""green""], [""a"", ""b"", ""b""]) === true),
  console.assert(isSamePatterns([""red"", ""green"", ""greenn""], [""a"", ""b"", ""b""]) === false),
  console.assert(isSamePatterns([""red"", ""green"", ""greenn""], [""a"", ""b""]) === false)
]",
74, this function to find tuples which have all elements divisible by k from the given list of tuples.,"function findTuples(testList, K) {
    const res = testList.filter(sub => sub.every(ele => ele % K === 0));
    return res;
}",75,"[console.assert(JSON.stringify(findTuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6)) === JSON.stringify([[6, 24, 12]])),
console.assert(JSON.stringify(findTuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5)) === JSON.stringify([[5, 25, 30]])),
console.assert(JSON.stringify(findTuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4)) === JSON.stringify([[8, 16, 4]]))]",
75, this   function to count the number of squares in a rectangle.,"
function count_Squares(m, n) {
    if (n < m) {
        let temp = m;
        m = n;
        n = temp;
    }
    return (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2);
}
",76,"
[console.assert(count_Squares(4,3) === 20), console.assert(count_Squares(2,2) === 5), console.assert(count_Squares(1,1) === 1)]
",
76, this   function to find the difference between sum of even and odd digits.,"
function is_Diff(n) {
    return (n % 11 === 0);
}
",77,"
[console.assert(is_Diff(12345) === false), console.assert(is_Diff(1212112) === true), console.assert(is_Diff(1212) === false)]
",
77, this   function to find number of integers with odd number of set bits.,"
function count_With_Odd_SetBits(n) { 
    if (n % 2 !== 0) { 
        return (n + 1) / 2; 
    }
    let count = n.toString(2).split(0).join().length; 
    let ans = n / 2; 
    if (count % 2 !== 0) { 
        ans += 1; 
    }
    return ans; 
}
",78,"
[console.assert(count_With_Odd_SetBits(5) == 3), console.assert(count_With_Odd_SetBits(10) == 5), console.assert(count_With_Odd_SetBits(15) == 8)]
",
78, this   function to check whether the length of the word is odd or not.,"
function word_len(s) {
    s = s.split( );
    for (let word of s) {
        if (word.length % 2 !== 0) {
            return true;
        } else {
            return false;
        }
    }
}
",79,"[
    console.assert(word_len(""Hadoop"") === false),
    console.assert(word_len(""great"") === true),
    console.assert(word_len(""structure"") === true)
]",
79, this function to find the nth tetrahedral number.,"
function tetrahedralNumber(n) {
    return (n * (n + 1) * (n + 2)) / 6;
}
",80,"[
    console.assert(tetrahedralNumber(5) === 35.0),
    console.assert(tetrahedralNumber(6) === 56.0),
    console.assert(tetrahedralNumber(7) === 84.0)
]",
82, this   function to find the character made by adding all the characters of the given string.,"function get_Char(strr) {  
    const a = 'a';
    const z = 'z';
    let summ = 0;  

    for (let i = 0; i < strr.length; i++) {  
        summ += (strr.charCodeAt(i) - a.charCodeAt(0) + 1);  
    }  

    if (summ % 26 === 0) {  
        return z;  
    } else {  
        summ = summ % 26;  
        return String.fromCharCode(a.charCodeAt(0) + summ - 1);  
    }  
}",83,"[console.assert(get_Char(""abc"") === ""f"", ""Test Case 1 Failed""),
console.assert(get_Char(""gfg"") === ""t"", ""Test Case 2 Failed""),
console.assert(get_Char(""ab"") === ""c"", ""Test Case 3 Failed"")]",
83, this function to find the n-th number in newman conway sequence.,"
function sequence(n) {
    if (n === 1 || n === 2) {
        return 1;
    } else {
        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));
    }
}
",84,"
[console.assert(sequence(10) === 6), console.assert(sequence(2) === 1), console.assert(sequence(3) === 2)]
",
84, this function to find the surface area of a sphere.,"
function surfacearea_sphere(r) {
  var surfacearea = 4 * Math.PI * r * r;
  return surfacearea;
}
",85,"
[console.assert(surfacearea_sphere(10) === 1256.6370614359173), console.assert(surfacearea_sphere(15) === 2827.4333882308138), console.assert(surfacearea_sphere(20) === 5026.548245743669)]
",
85, this function to find nth centered hexagonal number.,"
function centeredHexagonalNumber(n) {
  return 3 * n * (n - 1) + 1;
}
",86,"[
  console.assert(centeredHexagonalNumber(10) === 271),
  console.assert(centeredHexagonalNumber(2) === 7),
  console.assert(centeredHexagonalNumber(9) === 217)
]",
86, this function to merge three dictionaries into a single expression.,"function mergeDictionariesThree(dict1, dict2, dict3) {
    return { ...dict1, ...dict2, ...dict3 }; 
}",87,"[console.assert(
    JSON.stringify(mergeDictionariesThree(
        { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, 
        { ""G"": ""Green"", ""W"": ""White"" }, 
        { ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" }
    )) === JSON.stringify({ R: ""Red"", B: ""Black"", P: ""Pink"", G: ""Green"", W: ""White"", O: ""Orange"" }),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(mergeDictionariesThree(
        { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, 
        { ""G"": ""Green"", ""W"": ""White"" }, 
        { ""L"": ""lavender"", ""B"": ""Blue"" }
    )) === JSON.stringify({ R: ""Red"", B: ""Blue"", P: ""Pink"", G: ""Green"", W: ""White"", L: ""lavender"" }),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(mergeDictionariesThree(
        { ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, 
        { ""L"": ""lavender"", ""B"": ""Blue"" }, 
        { ""G"": ""Green"", ""W"": ""White"" }
    )) === JSON.stringify({ R: ""Red"", B: ""Blue"", P: ""Pink"", L: ""lavender"", G: ""Green"", W: ""White"" }),
    ""Test Case 3 Failed""
)]",
87, this function to get the frequency of the elements in a list.,"
function freqCount(list1) {
  const freqCount = {};
  list1.forEach(item => {
    freqCount[item] = (freqCount[item] || 0) + 1;
  });
  return freqCount;
}
",88,"
[console.assert(JSON.stringify(freqCount([10,10,10,10,20,20,20,20,40,40,50,50,30])) === JSON.stringify({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})), console.assert(JSON.stringify(freqCount([1,2,3,4,3,2,4,1,3,1,4])) === JSON.stringify({1:3, 2:2, 3:3, 4:3})), console.assert(JSON.stringify(freqCount([5,6,7,4,9,10,4,5,6,7,9,5])) === JSON.stringify({10:1, 5:3, 6:2, 7:2, 4:2, 9:2}))]
",
89, this   function to find the length of the longest word.,"function lenLog(list1) {
    let max = 0; 
    for (let i of list1) {
        if (i.length > max) {
            max = i.length;
        }
    }
    return max;
}",90,"[console.assert(lenLog(["" "", ""PHP"", ""bigdata""]) === 7, ""Test Case 1 Failed""),
console.assert(lenLog([""a"", ""ab"", ""abc""]) === 3, ""Test Case 2 Failed""),
console.assert(lenLog([""small"", ""big"", ""tall""]) === 5, ""Test Case 3 Failed"")]",
90, this function to check if a substring is present in a given list of string values.,"
function findSubstring(str1, subStr) {
    return str1.some(s => s.includes(subStr));
}
",91,"[
  console.assert(findSubstring([""red"", ""black"", ""white"", ""green"", ""orange""], ""ack"") === true),
  console.assert(findSubstring([""red"", ""black"", ""white"", ""green"", ""orange""], ""abc"") === false),
  console.assert(findSubstring([""red"", ""black"", ""white"", ""green"", ""orange""], ""ange"") === true)
]",
91, this function to check whether the given number is undulating or not.,"
function isUndulating(n) {
    if (n.length <= 2) {
        return false;
    }
    for (let i = 2; i < n.length; i++) {
        if (n[i - 2] !== n[i]) {
            return false;
        }
    }
    return true;
}
",92,"
[console.assert(isUndulating(""1212121"") === true), console.assert(isUndulating(""1991"") === false), console.assert(isUndulating(""121"") === true)]
",
93, this function to extract the index minimum value record from the given tuples.,"
function index_minimum(test_list) {
  const res = test_list.reduce((min, current) => current[1] < min[1] ? current : min);
  return res[0];
}
",94,"[
  console.assert(index_minimum([[""Rash"", 143], [""Manjeet"", 200], [""Varsha"", 100]]) === ""Varsha""),
  console.assert(index_minimum([[""Yash"", 185], [""Dawood"", 125], [""Sanya"", 175]]) === ""Dawood""),
  console.assert(index_minimum([[""Sai"", 345], [""Salman"", 145], [""Ayesha"", 96]]) === ""Ayesha"")
]",
94, this   function to find the minimum length of sublist.,"
function Find_Min_Length(lst) {
    const minLength = Math.min(...lst.map(x => x.length));
    return [minLength];
}
",95,"[
  console.assert(Find_Min_Length([[1],[1,2]]) == 1),
  console.assert(Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2),
  console.assert(Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3)
]",
96, this function to find frequency count of list of lists.,"
function frequencyLists(list1) {
    list1 = [].concat(...list1);
    let dicData = {};
    for (let num of list1) {
        if (dicData.hasOwnProperty(num)) {
            dicData[num] += 1;
        } else {
            dicData[num] = 1;
        }
    }
    return dicData;
}
",97,"[
  console.assert(JSON.stringify(frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])) === JSON.stringify({1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1})),
  console.assert(JSON.stringify(frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})),
  console.assert(JSON.stringify(frequencyLists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])) === JSON.stringify({20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}))
]",
97, this function to multiply all the numbers in a list and divide with the length of the list.,"function multiplyNum(...numbers) {
    let total = 1;
    for (let x of numbers) {
        total *= x;
    }
    return total / numbers.length;
}",98,"[
    console.assert(multiplyNum(8, 2, 3, -1, 7) === -67.2, ""Test Case 1 Failed""),
    console.assert(multiplyNum(-10, -20, -30) === -2000.0, ""Test Case 2 Failed""),
    console.assert(multiplyNum(19, 15, 18) === 1710.0, ""Test Case 3 Failed"")
]",
98, this function to convert the given decimal number to its binary equivalent.,"function frequencyLists(lists) {
    const frequency = {};
    for (const sublist of lists) {
        for (const item of sublist) {
            frequency[item] = (frequency[item] || 0) + 1;
        }
    }
    return frequency;
}",99,"[
    console.assert(
        JSON.stringify(frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])) === 
        JSON.stringify({1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}),
        ""Test Case 1 Failed""
    ),
    console.assert(
        JSON.stringify(frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])) === 
        JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}),
        ""Test Case 2 Failed""
    ),
    console.assert(
        JSON.stringify(frequencyLists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])) === 
        JSON.stringify({20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}),
        ""Test Case 3 Failed""
    )
]",
99, this function to find the next smallest palindrome of a specified number.,"function next_smallest_palindrome(num) {
    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {
        if (i.toString() === i.toString().split('').reverse().join('')) {
            return i;
        }
    }
}",100,"[
    console.assert(next_smallest_palindrome(99) === 101, ""Test Case 1 Failed""),
    console.assert(next_smallest_palindrome(1221) === 1331, ""Test Case 2 Failed""),
    console.assert(next_smallest_palindrome(120) === 121, ""Test Case 3 Failed"")
]",
100, this function to find the kth element in the given array.,"function kth_element(arr, n, k) {
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]; 
            }
        }
    }

    console.log(""Sorted array:"", arr);  
    return arr[k - 1];  
}",101,"[console.assert(kth_element([12, 3, 5, 7, 19], 5, 2) === 5, ""Test Case 1 Failed""),
console.assert(kth_element([17, 24, 8, 23], 4, 3) === 23, ""Test Case 2 Failed""),
console.assert(kth_element([16, 21, 25, 36, 4], 5, 4) === 25, ""Test Case 3 Failed"")]",
101, this function to convert snake case string to camel case string.,"function snakeToCamel(word) {
    return word.split('_').map((x, index) => {
        if (index === 0) {
            return x.toLowerCase(); 
        }
        return x.charAt(0).toUpperCase() + x.slice(1).toLowerCase(); 
    }).join('');
}",102,"[
    console.assert(snakeToCamel(""_program"") === ""Program""),
    console.assert(snakeToCamel(""_language"") === ""Language""),
    console.assert(snakeToCamel(""programming_language"") === ""programmingLanguage"")
  ]",
102," this function to find eulerian number a(n, m).","
function eulerian_num(n, m) { 
    if (m >= n || n === 0) { 
        return 0; 
    } 
    if (m === 0) { 
        return 1; 
    } 
    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)); 
}
",103,"
[console.assert(eulerian_num(3, 1) === 4), console.assert(eulerian_num(4, 1) === 11), console.assert(eulerian_num(5, 3) === 26)]
",
103, this function to sort each sublist of strings in a given list of lists using lambda function.,"function sortSublists(...inputLists) {
    return inputLists.map(x => x.sort());
}",104,"[

    console.assert(JSON.stringify(sortSublists([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) === JSON.stringify([[""green"", ""orange""], [""black"", ""white""], [""black"", ""orange"", ""white""]])),
    console.assert(JSON.stringify(sortSublists(["" red "", ""green""], [""blue "", "" black""], ["" orange"", ""brown""])) === JSON.stringify([["" red "",""green""],["" black"",""blue ""],["" orange"",""brown""]])),
    console.assert(JSON.stringify(sortSublists([""zilver"", ""gold""], [""magnesium"", ""aluminium""], [""steel"", ""bronze""])) === JSON.stringify([[""gold"", ""zilver""], [""aluminium"", ""magnesium""], [""bronze"", ""steel""]]))

]",
104, this   function to count true booleans in the given list.,"
function count(lst) {
    return lst.reduce((a, b) => a + b, 0);
}
",105,"
[console.assert(count([true,false,true]) === 2), console.assert(count([false,false]) === 0), console.assert(count([true,true,true]) === 3)]
",
105, this function to add the given list to the given tuples.,"
function addLists(testList, testTup) {
    let res = [...testTup, ...testList];
    return res;
}
",106,"
[console.assert(addLists([5, 6, 7], [9, 10]).toString() === [9, 10, 5, 6, 7].toString()), console.assert(addLists([6, 7, 8], [10, 11]).toString() === [10, 11, 6, 7, 8].toString()), console.assert(addLists([7, 8, 9], [11, 12]).toString() === [11, 12, 7, 8, 9].toString())]
",
106, this   function to count hexadecimal numbers for a given range.,"
function count_Hexadecimal(L, R) {
    let count = 0;
    for (let i = L; i <= R; i++) {
        if (i >= 10 && i <= 15) {
            count += 1;
        } else if (i > 15) {
            let k = i;
            while (k !== 0) {
                if (k % 16 >= 10) {
                    count += 1;
                }
                k = Math.floor(k / 16);
            }
        }
    }
    return count;
}
",107,"
[console.assert(count_Hexadecimal(10, 15) === 6), console.assert(count_Hexadecimal(2, 4) === 0), console.assert(count_Hexadecimal(15, 16) === 1)]
",
107, this function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"function mergeSortedList(num1, num2, num3) {
    
    return Array.from(new Set([...num1, ...num2, ...num3])).sort((a, b) => a - b);
}",108,"[console.assert(JSON.stringify(mergeSortedList([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])) === JSON.stringify([4, 5, 11, 15, 19, 20, 24, 25, 26, 29, 48, 54, 56, 110, 154, 233])),
console.assert(JSON.stringify(mergeSortedList([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12])),
console.assert(JSON.stringify(mergeSortedList([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])) === JSON.stringify([1, 2, 3, 4, 7, 8, 9, 10, 12, 14,18, 22, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]))
]",
108, this   function to find the count of rotations of a binary string with odd value.,"function odd_Equivalent(s) { 
    let count = 0; 
    for (let i = 0; i < s.length; i++) { 
        if (s[i] === '1') { 
            count++; 
        } 
    } 
    return count;  
}",109,"[
    console.assert(odd_Equivalent(""011001"") === 3),
    console.assert(odd_Equivalent(""11011"") === 4),
    console.assert(odd_Equivalent(""1010"") === 2)
]",
109, this function to extract the ranges that are missing from the given list with the given start range and end range values.,"function extractMissing(testList, strtVal, stopVal) {
    let res = [];
    testList = testList.sort((a, b) => a[0] - b[0]);

    if (strtVal < testList[0][0]) {
        res.push([strtVal, testList[0][0]]);
        strtVal = testList[0][1];
    }

    for (let sub of testList) {
        if (strtVal < sub[0]) {
            res.push([strtVal, sub[0]]);
        }
        strtVal = sub[1];
    }

    if (strtVal < stopVal) {
        res.push([strtVal, stopVal]);
    }

    return res;
}",110,"[
    console.assert(JSON.stringify(extractMissing([[6, 9], [15, 34], [48, 70]], 2, 100)) === JSON.stringify([[2, 6], [9, 15], [34, 48], [70, 100]])),
    console.assert(JSON.stringify(extractMissing([[2, 7], [15, 19], [38, 50]], 5, 60)) === JSON.stringify([[7, 15], [19, 38], [50, 60]])),
    console.assert(JSON.stringify(extractMissing([[2, 7], [15, 19], [38, 50]], 1, 52)) === JSON.stringify([[1, 2], [7, 15], [19, 38], [50, 52]]))
]",
110, this function to find common elements in given nested lists. * list item * list item * list item * list item,"function commonInNestedLists(nestedlist) {
    const result = [...new Set(nestedlist.reduce((acc, curr) => acc.filter(x => curr.includes(x)), nestedlist[0]))];
    return result;
}",111,"
[
    console.assert(JSON.stringify(commonInNestedLists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) === JSON.stringify([12, 18])),
    console.assert(JSON.stringify(commonInNestedLists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) === JSON.stringify([5, 23])),
    console.assert(JSON.stringify(commonInNestedLists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])) === JSON.stringify([4]))
]",
111, this   function to find the perimeter of a cylinder.,"
function perimeter(diameter, height) {
    return 2 * (diameter + height);
}
",112,"
[console.assert(perimeter(2, 4) === 12), console.assert(perimeter(1, 2) === 6), console.assert(perimeter(3, 1) === 8)]
",
112, this function to check if a string represents an integer or not.,"function checkInteger(text) {
    text = text.trim();
    if (text.length < 1) {
        return false; 
    } else {
       if ([...text].every(char => ""0123456789"".includes(char))) {
            return true;
        }
       else if ((text[0] === '+' || text[0] === '-') && 
                 [...text].every((char, i) => i === 0 || ""0123456789"".includes(char))) {
            return true;
        } else {
            return false;
        }
    }
}",113,"[console.assert(checkInteger("" "") === false),
console.assert(checkInteger(""1"") === true),
console.assert(checkInteger(""12345"") === true)]",
113, this function to assign frequency to each tuple in the given tuple list.,"function assignFreq(testList) {
    const res = Object.entries(testList.reduce((acc, key) => {
        const keyStr = JSON.stringify(key); 
        acc[keyStr] = (acc[keyStr] || 0) + 1;
        return acc;
    }, {}));
    
    return res.map(([key, val]) => [JSON.parse(key), val]); 
}",114,"[console.assert(JSON.stringify(assignFreq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]])) === JSON.stringify([[[6, 5, 8], 3], [[2, 7], 2], [[9], 1]])),
console.assert(JSON.stringify(assignFreq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]])) === JSON.stringify([[[4, 2, 4], 2], [[7, 1], 2], [[4, 8], 1], [[9, 2], 1]])),
console.assert(JSON.stringify(assignFreq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]])) === JSON.stringify([[[11, 13, 10], 1], [[17, 21], 2], [[4, 2, 3], 2], [[9, 2], 1]]))]",
114, this function to check whether all dictionaries in a list are empty or not.,"function empty_dit(list1) {
    return Array.isArray(list1) && list1.every(d =>
        Object.prototype.toString.call(d) === ""[object Object]"" && Object.keys(d).length === 0
    );
}",115,"[
    console.assert(empty_dit([{}, {}, {}]) === true, ""Test 1 failed""), 
    console.assert(empty_dit([new Set([1, 2]), {}, {}]) === false, ""Test 2 failed""), 
    console.assert(empty_dit([]) === true, ""Test 3 failed"") 
]",
115, this function to convert a given tuple of positive integers into an integer.,"function tupleToInt(nums) {
    const result = parseInt(nums.join(''), 10); 
    return result;
}",116,"[
    console.assert(tupleToInt([1, 2, 3]) === 123, ""Test 1 failed""),
    console.assert(tupleToInt([4, 5, 6]) === 456, ""Test 2 failed""),
    console.assert(tupleToInt([5, 6, 7]) === 567, ""Test 3 failed"")  
]",
116, this function to convert all possible convertible elements in the list to float.,"function listToFloat(testList) {
    let res = [];
    for (let tup of testList) {
        let temp = [];
        for (let ele of tup) {
            if (!isNaN(parseFloat(ele))) {
                temp.push(parseFloat(ele));
            } else {
                temp.push(ele); 
            }
        }
        res.push([temp[0], temp[1]]);
    }
    return res;
}",117,"[console.assert(JSON.stringify(listToFloat([[""3"", ""4""], [""1"", ""26.45""], [""7.32"", ""8""], [""4"", ""8""]])) === JSON.stringify([[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]), ""Test 1 failed""),
console.assert(JSON.stringify(listToFloat([[""4"", ""4""], [""2"", ""27""], [""4.12"", ""9""], [""7"", ""11""]])) === JSON.stringify([[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]), ""Test 2 failed""),
console.assert(JSON.stringify(listToFloat([[""6"", ""78""], [""5"", ""26.45""], [""1.33"", ""4""], [""82"", ""13""]])) === JSON.stringify([[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]), ""Test 3 failed"")]",
117,this function to convert a string to a list.,"function stringToList(string) {
    let lst = string.trim().split(/\s+/); 
    return lst;
}",118,"[
    console.assert(JSON.stringify(stringToList(""  programming"")) === JSON.stringify([""programming""]), ""Test 1 failed""),
    console.assert(JSON.stringify(stringToList(""lists tuples strings"")) === JSON.stringify([""lists"", ""tuples"", ""strings""]), ""Test 2 failed""),
    console.assert(JSON.stringify(stringToList("" this program"")) === JSON.stringify([""this"", ""program""]), ""Test 3 failed"")
]",
118, this   function to find the element that appears only once in a sorted array.,"function search(arr) {
    let XOR = 0;
    for (let i = 0; i < arr.length; i++) {
        XOR = XOR ^ arr[i];
    }
    return XOR;
}",119,"[
    console.assert(search([1, 1, 2, 2, 3]) === 3, ""Test 1 failed""),
    console.assert(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]) === 8, ""Test 2 failed""),
    console.assert(search([1, 2, 2, 3, 3, 4, 4]) === 1, ""Test 3 failed"")
]",
119, this function to find the maximum product from the pairs of tuples within a given list.,"function maxProductTuple(list1) {
    const resultMax = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));
    return resultMax;
}",120,"[ 
    console.assert(maxProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]]) === 36), 
    console.assert(maxProductTuple([[10, 20], [15, 2], [5, 10]]) === 200), 
    console.assert(maxProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]]) === 484)
]",
120, this function to find the triplet with sum of the given array,"function checkTriplet(A, n, sum, count) {
    if (count === 3 && sum === 0) {
        return true;
    }
    if (count === 3 || n === 0 || sum < 0) {
        return false;
    }
    
    return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) || 
           checkTriplet(A, n - 1, sum, count);  
}",121,"[
    console.assert(checkTriplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) === true),
    console.assert(checkTriplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) === false),
    console.assert(checkTriplet([10, 4, 2, 3, 5], 5, 15, 0) === true)
]",
121, this function to find nâ€™th smart number.,"
const MAX = 3000; 
function smartNumber(n) { 
    const primes = new Array(MAX).fill(0); 
    const result = []; 
    for (let i = 2; i < MAX; i++) { 
        if (primes[i] === 0) { 
            primes[i] = 1; 
            let j = i * 2; 
            while (j < MAX) { 
                primes[j] -= 1; 
                if ((primes[j] + 3) === 0) { 
                    result.push(j); 
                } 
                j += i; 
            } 
        } 
    } 
    result.sort((a, b) => a - b); 
    return result[n - 1]; 
}
",122,"[
    console.assert(smartNumber(1) === 30),
    console.assert(smartNumber(50) === 273),
    console.assert(smartNumber(1000) === 2664)
]",
122, this function to sum all amicable numbers from 1 to a specified number.,"function amicableNumbersSum(limit) {
    if (typeof limit !== ""number"" || !Number.isInteger(limit)) {
        return ""Input is not an integer!"";
    }
    if (limit < 1) {
        return ""Input must be bigger than 0!"";
    }
    const amicables = new Set();
    for (let num = 2; num <= limit; num++) {
        if (amicables.has(num)) {
            continue;
        }
        const sumFact = Array.from({ length: num - 1 }, (_, i) => i + 1)
                             .filter(fact => num % fact === 0)
                             .reduce((a, b) => a + b, 0);
        const sumFact2 = Array.from({ length: sumFact - 1 }, (_, i) => i + 1)
                              .filter(fact => sumFact % fact === 0)
                              .reduce((a, b) => a + b, 0);
        if (num === sumFact2 && num !== sumFact) {
            amicables.add(num);
            amicables.add(sumFact2);
        }
    }
    return Array.from(amicables).reduce((a, b) => a + b, 0);
}",123,"[console.assert(amicableNumbersSum(999) === 504), console.assert(amicableNumbersSum(9999) === 31626), console.assert(amicableNumbersSum(99) === 0)]",
123, this function to get the angle of a complex number.,"function angleComplex(a, b) {
    const angle = Math.atan2(b, a);
    return [angle];
}",124,"[console.assert(Math.abs(angleComplex(0, 1)[0] - 1.5707963267948966) < 1e-10), 
 console.assert(Math.abs(angleComplex(2, 1)[0] - 0.4636476090008061) < 1e-10), 
 console.assert(Math.abs(angleComplex(0, 2)[0] - 1.5707963267948966) < 1e-10)]",
124, this function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"function findLength(string, n) {
    let currentSum = 0;
    let maxSum = 0;
    for (let i = 0; i < n; i++) {
        currentSum += (string[i] === '0' ? 1 : -1);
        if (currentSum < 0) {
            currentSum = 0; 
        }
        maxSum = Math.max(currentSum, maxSum); 
    }
    return maxSum || 0;
}",125,"[console.assert(findLength(""11000010001"", 11) === 6, ""Test 1 failed""),
console.assert(findLength(""10111"", 5) === 1, ""Test 2 failed""),
console.assert(findLength(""11011101100101"", 14) === 2, ""Test 3 failed"")]",
126, this function to multiply two integers without using the * operator in  .,"
function multiplyInt(x, y) {
    if (y < 0) {
        return -multiplyInt(x, -y);
    } else if (y === 0) {
        return 0;
    } else if (y === 1) {
        return x;
    } else {
        return x + multiplyInt(x, y - 1);
    }
}
",127,"
[console.assert(multiplyInt(10, 20) === 200), console.assert(multiplyInt(5, 10) === 50), console.assert(multiplyInt(4, 8) === 32)]
",
127, this function to shortlist words that are longer than n from a given list of words.,"function longWords(n, str) {
    let wordLen = [];
    let txt = str.trim().split("" "");
    for (let x of txt) {
        if (x.length > n) {
            wordLen.push(x);
        }
    }
    return wordLen;
}",128,"[console.assert(longWords(3, ""  is a programming language"").toString() === [""programming"", ""language""].toString(), ""Test 1 failed""),
console.assert(longWords(2, ""writing a program"").toString() === [""writing"", ""program""].toString(), ""Test 2 failed""),
console.assert(longWords(5, ""sorting list"").toString() === [""sorting""].toString(), ""Test 3 failed"")]",
129, this function to find the item with maximum frequency in a given list.,"function maxOccurrences(nums) {
    const dict = {};
    for (let i of nums) {
        dict[i] = (dict[i] || 0) + 1;
    }

    let maxValue = -1;
    let maxCount = 0;

    for (let i of nums) {
        if (dict[i] > maxCount) {
            maxValue = i;
            maxCount = dict[i];
        }
    }

    return [maxValue, maxCount];
}",130,"[console.assert(JSON.stringify(maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])) === JSON.stringify([2, 5]), ""Test 1 failed""),
console.assert(JSON.stringify(maxOccurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])) === JSON.stringify([8, 2]), ""Test 2 failed""),
console.assert(JSON.stringify(maxOccurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])) === JSON.stringify([20, 3]), ""Test 3 failed"")]",
130, this   function to reverse only the vowels of a given string.,"
function reverseVowels(str1) {
    let vowels = """";
    for (let char of str1) {
        if (""aeiouAEIOU"".includes(char)) {
            vowels += char;
        }
    }
    let resultString = """";
    for (let char of str1) {
        if (""aeiouAEIOU"".includes(char)) {
            resultString += vowels[vowels.length - 1];
            vowels = vowels.slice(0, -1);
        } else {
            resultString += char;
        }
    }
    return resultString;
}
",131,"
[console.assert(reverseVowels("" "") === "" ""), console.assert(reverseVowels(""USA"") === ""ASU""), console.assert(reverseVowels(""ab"") === ""ab"")]
",
131, this function to convert tuple to a string.,"function tup_string(tup1) {
    var str = tup1.join(''); 
    return str;
}",132,"[console.assert(tup_string([""e"", ""x"", ""e"", ""r"", ""c"", ""i"", ""s"", ""e"", ""s""]) === ""exercises""),
console.assert(tup_string([""p"", ""y"", ""t"", ""h"", ""o"", ""n""]) === ""python""),
console.assert(tup_string([""p"", ""r"", ""o"", ""g"", ""r"", ""a"", ""m""]) === ""program"")]",
132, this function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"
function sumNegativenum(nums) {
    const sumNegativenum = nums.filter(num => num < 0);
    return sumNegativenum.reduce((acc, num) => acc + num, 0);
}
",133,"[
    console.assert(sumNegativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) === -32),
    console.assert(sumNegativenum([10, 15, -14, 13, -18, 12, -20]) === -52),
    console.assert(sumNegativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) === -894)
]",
133, this   function to check whether the last element of given array is even or odd after performing an operation p times.,"
function check_last(arr, n, p) {
    let _sum = 0;
    for (let i = 0; i < n; i++) {
        _sum += arr[i];
    }
    if (p === 1) {
        if (_sum % 2 === 0) {
            return ""ODD"";
        } else {
            return ""EVEN"";
        }
    }
    return ""EVEN"";
}
",134,"
[console.assert(check_last([5,7,10],3,1) === ""ODD""), console.assert(check_last([2,3],2,3) === ""EVEN""), console.assert(check_last([1,2,3],3,1) === ""ODD"")]
",
134, this function to find the nth hexagonal number.,"
function hexagonal_num(n) {
    return n * (2 * n - 1);
}
",135,"[
    console.assert(hexagonal_num(10) == 190),
    console.assert(hexagonal_num(5) == 45),
    console.assert(hexagonal_num(7) == 91)
]",
135, this function to calculate electricity bill.,"
function cal_electbill(units) {
    let amount;
    let surcharge;
    
    if (units < 50) {
        amount = units * 2.60;
        surcharge = 25;
    } else if (units <= 100) {
        amount = 130 + ((units - 50) * 3.25);
        surcharge = 35;
    } else if (units <= 200) {
        amount = 130 + 162.50 + ((units - 100) * 5.26);
        surcharge = 45;
    } else {
        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);
        surcharge = 75;
    }
    
    let total = amount + surcharge;
    return total;
}",136,"
[console.assert(cal_electbill(75) === 246.25), console.assert(cal_electbill(265) === 1442.75), console.assert(cal_electbill(100) === 327.5)]
",
136, this function to find the ration of zeroes in an array of integers.,"
function zero_count(nums) {
    const n = nums.length;
    let n1 = 0;
    for (const x of nums) {
        if (x === 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
",137,"[
    console.assert(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.15),
    console.assert(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.00),
    console.assert(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.00)
]",
137, this   function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"
function is_Sum_Of_Powers_Of_Two(n) { 
    if (n % 2 === 1) { 
        return false; 
    } else { 
        return true; 
    } 
}
",138,"[
    console.assert(is_Sum_Of_Powers_Of_Two(10) === true),
    console.assert(is_Sum_Of_Powers_Of_Two(7) === false),
    console.assert(is_Sum_Of_Powers_Of_Two(14) === true)
]",
138, this function to find the circumference of a circle.,"
function circleCircumference(r) {
    let perimeter = 2 * 3.1415 * r;
    return perimeter;
}
",139,"
[console.assert(circleCircumference(10) === 62.830000000000005), console.assert(circleCircumference(5) === 31.415000000000003), console.assert(circleCircumference(4) === 25.132)]
",
139, this function to extract elements that occur singly in the given tuple list.,"function extractSingly(testList) {
    let res = [];
    let temp = new Set();
    for (let inner of testList) {
        for (let ele of inner) {
            if (!temp.has(ele)) {
                temp.add(ele);
                res.push(ele);
            }
        }
    }
    return res;
}",140,"[console.assert(JSON.stringify(pancakeSort([15, 79, 25, 38, 69])) === JSON.stringify([15, 25, 38, 69, 79])),
console.assert(JSON.stringify(pancakeSort([98, 12, 54, 36, 85])) === JSON.stringify([12, 36, 54, 85, 98])),
console.assert(JSON.stringify(pancakeSort([41, 42, 32, 12, 23])) === JSON.stringify([12, 23, 32, 41, 42]))]",
140, this function to sort a list of elements using pancake sort.,"function pancakeSort(nums) {
    let arrLen = nums.length;
    while (arrLen > 1) {
        const mi = nums.indexOf(Math.max(...nums.slice(0, arrLen)));

        nums = nums.slice(0, mi + 1).reverse().concat(nums.slice(mi + 1));

        nums = nums.slice(0, arrLen).reverse().concat(nums.slice(arrLen));

        arrLen--;
    }
    return nums;
}",141,"
[console.assert(pancakeSort([15, 79, 25, 38, 69]).toString() === [15, 25, 38, 69, 79].toString()), console.assert(pancakeSort([98, 12, 54, 36, 85]).toString() === [12, 36, 54, 85, 98].toString()), console.assert(pancakeSort([41, 42, 32, 12, 23]).toString() === [12, 23, 32, 41, 42].toString())]
",
141, this function to count the same pair in three given lists.,"
function countSamePair(list1, list2, list3) {
    let result = 0;
    for (let i = 0; i < list1.length; i++) {
        if (list1[i] === list2[i] && list2[i] === list3[i]) {
            result++;
        }
    }
    return result;
}
",142,"
[console.assert(countSamePair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])===3), 
 console.assert(countSamePair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])===4), 
 console.assert(countSamePair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])===5)]
",
142, this function to find number of lists present in the given tuple.,"function findLists(...inputs) {
    let count = 0;
    for (const input of inputs) {
        if (Array.isArray(input)) {
            count++;
        }
    }
    return count;
}",143,"[console.assert(findLists([1, 2, 3, 4], [5, 6, 7, 8]) === 2, ""Test case 1 failed""),
console.assert(findLists([1, 2], [3, 4], [5, 6]) === 3, ""Test case 2 failed""),
console.assert(findLists([9, 8, 7, 6, 5, 4, 3, 2, 1]) === 1, ""Test case 3 failed"")]",
143, this   function to find the sum of absolute differences in all pairs of the given array.,"
function sum_Pairs(arr, n) { 
    let sum = 0; 
    for (let i = n - 1; i >= 0; i--) { 
        sum += i * arr[i] - (n - 1 - i) * arr[i]; 
    } 
    return sum; 
}
",144,"
[console.assert(sum_Pairs([1,8,9,15,16],5) === 74), console.assert(sum_Pairs([1,2,3,4],4) === 10), console.assert(sum_Pairs([1,2,3,4,5,7,9,11,14],9) === 188)]
",
144, this   function to find the maximum difference between any two elements in a given array.,"function max_Abs_Diff(arr, n) { 
    let minEle = arr[0]; 
    let maxEle = arr[0]; 
    for (let i = 1; i < n; i++) { 
        minEle = Math.min(minEle, arr[i]); 
        maxEle = Math.max(maxEle, arr[i]); 
    } 
    return maxEle - minEle; 
}",145,"[console.assert(max_Abs_Diff([2, 1, 5, 3], 4) === 4, ""Test Case 1 Failed""),
console.assert(max_Abs_Diff([9, 3, 2, 5, 1], 5) === 8, ""Test Case 2 Failed""),
console.assert(max_Abs_Diff([3, 2, 1], 3) === 2, ""Test Case 3 Failed"")]",
145, this function to find the ascii value of total characters in a string.,"function asciiValueString(str1) {
    return str1.split('').map(char => char.charCodeAt(0));
}",146,"[console.assert(asciiValueString("" "").toString() === [32].toString(), ""Test Case 1 Failed""),
console.assert(asciiValueString(""Program"").toString() === [80, 114, 111, 103, 114, 97, 109].toString(), ""Test Case 2 Failed""),
console.assert(asciiValueString(""Language"").toString() === [76, 97, 110, 103, 117, 97, 103, 101].toString(), ""Test Case 3 Failed"")]",
146, this function to find the maximum total path sum in the given triangle.,"function maxPathSum(tri, m, n) {
    for (let i = m - 1; i >= 0; i--) {
        for (let j = 0; j <= i; j++) {
            if (tri[i + 1][j] > tri[i + 1][j + 1]) {
                tri[i][j] += tri[i + 1][j];
            } else {
                tri[i][j] += tri[i + 1][j + 1];
            }
        }
    }
    return tri[0][0];
}",147,"
[console.assert(maxPathSum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) === 14), console.assert(maxPathSum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) === 24), console.assert(maxPathSum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) === 53)];
",
147, this function to divide a number into two parts such that the sum of digits is maximum.,"function sumDigitsTwoParts(N) {
    let sumDigitsSingle = (x) => {
        let ans = 0;
        while (x) {
            ans += x % 10;
            x = Math.floor(x / 10);
        }
        return ans;
    };

    let ans = 0;
    while (ans * 10 + 9 <= N) {
        ans = ans * 10 + 9;
    }

    return sumDigitsSingle(ans) + sumDigitsSingle(N - ans);
}",148,"
[console.assert(sumDigitsTwoParts(35) === 17), console.assert(sumDigitsTwoParts(7) === 7), console.assert(sumDigitsTwoParts(100) === 19)]
",
148, this function to find the longest subsequence such that the difference between adjacents is one for the given array.,"
function longestSubseqWithDiffOne(arr, n) { 
    let dp = new Array(n).fill(1); 
    for (let i = 0; i < n; i++) { 
        for (let j = 0; j < i; j++) { 
            if ((arr[i] === arr[j] + 1) || (arr[i] === arr[j] - 1)) { 
                dp[i] = Math.max(dp[i], dp[j] + 1); 
            } 
        } 
    } 
    let result = 1; 
    for (let i = 0; i < n; i++) { 
        if (result < dp[i]) { 
            result = dp[i]; 
        } 
    } 
    return result; 
}
",149,"
[console.assert(longestSubseqWithDiffOne([1, 2, 3, 4, 5, 3, 2], 7) === 6), console.assert(longestSubseqWithDiffOne([10, 9, 4, 5, 4, 8, 6], 7) === 3), console.assert(longestSubseqWithDiffOne([1, 2, 3, 2, 3, 7, 2, 1], 8) === 7)]
",
150, this   function to check whether the given number is co-prime or not.,"
function gcd(p, q) {
    while (q !== 0) {
        [p, q] = [q, p % q];
    }
    return p;
}

function isCoprime(x, y) {
    return gcd(x, y) === 1;
}
",151,"
[console.assert(isCoprime(17, 13) === true), console.assert(isCoprime(15, 21) === false), console.assert(isCoprime(25, 45) === false)]
",
151, this function to sort the given array by using merge sort.,"function mergeSort(x) {
    if (x.length <= 1) {
        return x;
    } else {
        let middle = Math.floor(x.length / 2);
        let a = mergeSort(x.slice(0, middle));
        let b = mergeSort(x.slice(middle));
        
        let c = [];
        while (a.length !== 0 && b.length !== 0) {
            if (a[0] < b[0]) {
                c.push(a[0]);
                a.splice(0, 1);
            } else {
                c.push(b[0]);
                b.splice(0, 1);
            }
        }
        return c.concat(a.length === 0 ? b : a);
    }
}",152,"[console.assert(JSON.stringify(mergeSort([3, 4, 2, 6, 5, 7, 1, 9])) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 9])), 
 console.assert(JSON.stringify(mergeSort([7, 25, 45, 78, 11, 33, 19])) === JSON.stringify([7, 11, 19, 25, 33, 45, 78])), 
 console.assert(JSON.stringify(mergeSort([3, 1, 4, 9, 8])) === JSON.stringify([1, 3, 4, 8, 9]))]",
152, this function to find the vertex of a parabola.,"function parabolaVertex(a, b, c) {
    const x = -b / (2 * a); 
    const y = (4 * a * c - b * b) / (4 * a); 
    return [x, y]; 
}",153,"
[console.assert(parabolaVertex(5, 3, 2)[0] === -0.3 && parabolaVertex(5, 3, 2)[1] === 1.55), 
 console.assert(parabolaVertex(9, 8, 4)[0] === -0.4444444444444444 && parabolaVertex(9, 8, 4)[1] === 2.2222222222222223), 
 console.assert(parabolaVertex(2, 4, 6)[0] === -1.0 && parabolaVertex(2, 4, 6)[1] === 4.0)]
",
153, this function to extract every specified element from a given two dimensional list.,"
function specifiedElement(nums, N) {
    let result = nums.map(i => i[N]);
    return result;
}
",154,"[
console.assert(
    JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) === JSON.stringify([1, 4, 7]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) === JSON.stringify([3, 6, 9]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) === JSON.stringify([2, 2, 5]),
    ""Test Case 3 Failed""
)]",
154, this   function to toggle all even bits of a given number.,"
function evenBitToggleNumber(n) {
    let res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 1) {
            res |= (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return n ^ res;
}
",155,"
[console.assert(evenBitToggleNumber(10) === 0), console.assert(evenBitToggleNumber(20) === 30), console.assert(evenBitToggleNumber(30) === 20)]
",
155, this function to convert a tuple of string values to a tuple of integer values.,"
function tupleIntStr(tupleStr) {
    const result = tupleStr.map(x => [parseInt(x[0]), parseInt(x[1])]);
    return [result];
}
",156,"[
    console.assert(tupleIntStr([[333, 33], [1416, 55]]).toString() === [[333, 33], [1416, 55]].toString()),
    console.assert(tupleIntStr([[999, 99], [1000, 500]]).toString() === [[999, 99], [1000, 500]].toString()),
    console.assert(tupleIntStr([[666, 66], [1500, 555]]).toString() === [[666, 66], [1500, 555]].toString())
]",
156, this function to reflect the run-length encoding from a list.,"
function encodeList(list1) {
    const grouped = [];
    let count = 1;
    for (let i = 1; i <= list1.length; i++) {
        if (list1[i] === list1[i - 1]) {
            count++;
        } else {
            if (count > 0) {
                grouped.push([count, list1[i - 1]]);
            }
            count = 1;
        }
    }
    return grouped;
}
",157,"[
    console.assert(encodeList([1, 1, 2, 3, 4, 4.3, 5, 1]).toString() === [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]].toString()),
    console.assert(encodeList(""automatically"").toString() === [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']].toString()),
    console.assert(encodeList(""python"").toString() === [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']].toString())
]",
157, this   function to find k number of operations required to make all elements equal.,"
function min_Ops(arr, n, k) { 
    const max1 = Math.max(...arr); 
    let res = 0; 
    for (let i = 0; i < n; i++) {  
        if ((max1 - arr[i]) % k !== 0) { 
            return -1; 
        } else { 
            res += (max1 - arr[i]) / k; 
        } 
    } 
    return Math.floor(res); 
}
",158,"
[console.assert(min_Ops([2,2,2,2],4,3) === 0), console.assert(min_Ops([4,2,6,8],4,3) === -1), console.assert(min_Ops([21,33,9,45,63],5,6) === 24)]
",
158, this function to print the season for the given month and day.,"function monthSeason(month, days) {
    let season;

    // Convert month names to lowercase for uniform comparison
    const lowerMonth = month.toLowerCase();

    // Determine the initial season based on the month
    if (lowerMonth === ""january"" || lowerMonth === ""february"" || lowerMonth === ""march"") {
        season = ""winter"";
    } else if (lowerMonth === ""april"" || lowerMonth === ""may"" || lowerMonth === ""june"") {
        season = ""spring"";
    } else if (lowerMonth === ""july"" || lowerMonth === ""august"" || lowerMonth === ""september"") {
        season = ""summer"";
    } else {
        season = ""autumn"";
    }

    // Adjust season for specific dates
    if (lowerMonth === ""march"" && days > 19) {
        season = ""spring"";
    } else if (lowerMonth === ""june"" && days > 20) {
        season = ""summer"";
    } else if (lowerMonth === ""september"" && days > 21) {
        season = ""autumn"";
    } else if (lowerMonth === ""december"" && days > 20) {
        season = ""winter"";
    }

    return season;
}",159,"[
    console.assert(monthSeason(""January"", 4) === ""winter""),
    console.assert(monthSeason(""October"", 28) === ""autumn""),
    console.assert(monthSeason(""June"", 6) === ""spring"")
]",
159, this function to find x and y that satisfies ax + by = n.,"function solution(a, b, n) {
    let i = 0;
    while (i * a <= n) {
        if ((n - (i * a)) % b === 0) {
            return { x: i, y: Math.floor((n - (i * a)) / b) };
        }
        i++;
    }
    return ""No solution"";
}",160,"[
    console.assert(JSON.stringify(solution(2, 3, 7)) === JSON.stringify({ x: 2, y: 1 }), ""Test Case 1 Failed""),
    console.assert(solution(4, 2, 7) === ""No solution"", ""Test Case 2 Failed""),
    console.assert(JSON.stringify(solution(1, 13, 17)) === JSON.stringify({ x: 4, y: 1 }), ""Test Case 3 Failed"")
]",
160, this function to remove all elements from a given list present in another list.,"
function removeElements(list1, list2) {
    let result = list1.filter(x => !list2.includes(x));
    return result;
}
",161,"[console.assert(JSON.stringify(removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])) === JSON.stringify([1, 3, 5, 7, 9, 10]), ""Test Case 1 Failed""),
console.assert(JSON.stringify(removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])) === JSON.stringify([2, 4, 6, 8, 9, 10]), ""Test Case 2 Failed""),
console.assert(JSON.stringify(removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])) === JSON.stringify([1, 2, 3, 4, 6, 8, 9, 10]), ""Test Case 3 Failed"")]",
161, this function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"
function sumSeries(n) {
  if (n < 1) {
    return 0;
  } else {
    return n + sumSeries(n - 2);
  }
}
",162,"
[console.assert(sumSeries(6) === 12), console.assert(sumSeries(10) === 30), console.assert(sumSeries(9) === 25)]
",
162, this function to calculate the area of a regular polygon.,"
function areaPolygon(s, l) {
  const area = s * (l ** 2) / (4 * Math.tan(Math.PI / s));
  return area;
}
",163,"[console.assert(areaPolygon(4,20) === 400.00000000000006), console.assert(areaPolygon(10,15) === 1731.1969896610804), console.assert(areaPolygon(9,7) === 302.90938549487214)]",
163, this   function to check whether the sum of divisors are same or not.,"function areEquivalent(num1, num2) {
    let sum1 = 1;
    let sum2 = 1;
    let i = 2;

    while (i * i <= num1 || i * i <= num2) {
        if (num1 % i === 0) {
            sum1 += i + Math.floor(num1 / i);
        }
        if (num2 % i === 0) {
            sum2 += i + Math.floor(num2 / i);
        }
        i++;
    }

    return sum1 === sum2;
}",164,"
[console.assert(areEquivalent(36, 57) === false), console.assert(areEquivalent(2, 4) === false), console.assert(areEquivalent(23, 47) === true)]
",
164, this   function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"function countCharPosition(str1) {
    let countChars = 0;
    for (let i = 0; i < str1.length; i++) {
        if ((i === str1.charCodeAt(i) - ""A"".charCodeAt(0)) || 
            (i === str1.charCodeAt(i) - ""a"".charCodeAt(0))) {
            countChars += 1;
        }
    }
    return countChars;
}",165,"
[console.assert(countCharPosition(""xbcefg"") === 2), console.assert(countCharPosition(""ABcED"") === 3), console.assert(countCharPosition(""AbgdeF"") === 5)]
",
165, this   function to count the pairs with xor as an even number.,"
function findEvenPair(A, N) {
    let evenPair = 0;
    for (let i = 0; i < N; i++) {
        for (let j = i + 1; j < N; j++) {
            if ((A[i] ^ A[j]) % 2 === 0) {
                evenPair++;
            }
        }
    }
    return evenPair;
}
",166,"
[console.assert(findEvenPair([5,4,7,2,1],5) === 4), console.assert(findEvenPair([7,2,8,1,0,5,11],7) === 9), console.assert(findEvenPair([1,2,3],3) === 1)]
",
166, this   function to find smallest power of 2 greater than or equal to n.,"
function nextPowerOf2(n) { 
    let count = 0; 
    if (n && !(n & (n - 1))) { 
        return n;   
    } 
    while (n !== 0) { 
        n >>= 1; 
        count++; 
    } 
    return 1 << count; 
}
",167,"
[console.assert(nextPowerOf2(0) === 1), console.assert(nextPowerOf2(5) === 8), console.assert(nextPowerOf2(17) === 32)]
",
167, this   function to find the frequency of a number in a given array.,"function frequency(a, x) { 
    let count = 0;  
    for (let i of a) { 
        if (i === x) count++; 
    } 
    return count; 
}",168,"
[console.assert(frequency([1,2,3],4) === 0), console.assert(frequency([1,2,2,3,3,3,4],3) === 3), console.assert(frequency([0,1,2,3,1,2],1) === 2)]
",
168, this function to calculate the nth pell number.,"
function getPell(n) {
    if (n <= 2) {
        return n;
    }
    let a = 1;
    let b = 2;
    for (let i = 3; i <= n; i++) {
        let c = 2 * b + a;
        a = b;
        b = c;
    }
    return b;
}
",0,"
[console.assert(getPell(4) === 12), console.assert(getPell(7) === 169), console.assert(getPell(8) === 408)]
",
169, this function to find sum of the numbers in a list between the indices of a specified range.,"
function sumRangeList(list1, m, n) {
    let sumRange = 0;
    for (let i = m; i <= n; i++) {
        sumRange += list1[i];
    }
    return sumRange;
}
",170,"
[console.assert(sumRangeList([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) === 29), console.assert(sumRangeList([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) === 16), console.assert(sumRangeList([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) === 38)]
",
171, this function to find the occurence of characters std in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"function countOccurrence(s) {
    let count = 0;
    for (let i = 0; i < s.length - 2; i++) {
        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {
            count++;
        }
    }
    return count;
}",172,"
[console.assert(countOccurrence(""letstdlenstdporstd"") === 3), console.assert(countOccurrence(""truststdsolensporsd"") === 1), console.assert(countOccurrence(""makestdsostdworthit"") === 2)]
",
172, this function to remove everything except alphanumeric characters from a string.,"function removeSplChar(text) { 
    const pattern = /[\W_]+/g; 
    return text.replace(pattern, ''); 
}",173,"[
    console.assert(removeSplChar(""   @#&^%$*program123"") === ""program123"", ""Test Case 1 Failed""),
    console.assert(removeSplChar(""  %^$@!^&*()  programming24%$^^()    language"") === ""programming24language"", ""Test Case 2 Failed""),
    console.assert(removeSplChar(""    ^%&^()(+_)(_^&67)                  program"") === ""67program"", ""Test Case 3 Failed"")
]",
173, this function to group a sequence of key-value pairs into a dictionary of lists.,"function groupKeyValue(l) {
    const result = {};
    for (const [k, v] of l) {
        if (!result[k]) {
            result[k] = [];
        }
        result[k].push(v);
    }
    return result;
}",174,"[
  console.assert(JSON.stringify(groupKeyValue([[""yellow"", 1], [""blue"", 2], [""yellow"", 3], [""blue"", 4], [""red"", 1]])) === JSON.stringify({yellow: [1, 3], blue: [2, 4], red: [1]})),
  console.assert(JSON.stringify(groupKeyValue([["""", 1], ["""", 2], ["""", 3], ["""", 4], ["""", 5]])) === JSON.stringify({"""": [1, 2, 3, 4, 5]})),
  console.assert(JSON.stringify(groupKeyValue([[""yellow"", 100], [""blue"", 200], [""yellow"", 300], [""blue"", 400], [""red"", 100]])) === JSON.stringify({yellow: [100, 300], blue: [200, 400], red: [100]}))
]",
174, this function to verify validity of a string of parentheses.,"
function is_valid_parenthese(str1) {
    let stack = [];
    let pchar = { ""("": "")"", ""{"": ""}"", ""["": ""]"" };
    for (let parenthese of str1) {
        if (pchar.hasOwnProperty(parenthese)) {
            stack.push(parenthese);
        } else if (stack.length === 0 || pchar[stack.pop()] !== parenthese) {
            return false;
        }
    }
    return stack.length === 0;
}
",175,"[
  console.assert(is_valid_parenthese(""(){}[]"") === true),
  console.assert(is_valid_parenthese(""()[{)}"") === false),
  console.assert(is_valid_parenthese(""()"") === true)
]",
175, this function to find the perimeter of a triangle.,"
function perimeterTriangle(a, b, c) {
  const perimeter = a + b + c;
  return perimeter;
}
",176,"
[console.assert(perimeterTriangle(10, 20, 30) === 60), console.assert(perimeterTriangle(3, 4, 5) === 12), console.assert(perimeterTriangle(25, 35, 45) === 105)]
",
176, this   function to find two distinct numbers such that their lcm lies within the given range.,"function answer(L, R) { 
    if (2 * L <= R) { 
        return [L, 2 * L]; 
    } else { 
        return [-1]; 
    } 
}",177,"[console.assert(JSON.stringify(answer(3, 8)) === JSON.stringify([3, 6])),
console.assert(JSON.stringify(answer(2, 6)) === JSON.stringify([2, 4])),
console.assert(JSON.stringify(answer(1, 3)) === JSON.stringify([1, 2]))]",
177, this function to search some literals strings in a string.,"function stringLiterals(patterns, text) {
    for (let pattern of patterns) {
        if (new RegExp(pattern).test(text)) {
            return ""Matched!"";
        }
    }
    return ""Not Matched!"";
}",178,"[console.assert(stringLiterals([""language""], ""language"") === ""Matched!""),
console.assert(stringLiterals([""program""], ""language"") === ""Not Matched!""),
console.assert(stringLiterals([], ""programming language"") === ""Not Matched!"")]",
178, this function to find if the given number is a keith number or not.,"
function isNumKeith(x) {
    let terms = [];
    let temp = x;
    let n = 0;

    while (temp > 0) {
        terms.push(temp % 10);
        temp = Math.floor(temp / 10);
        n++;
    }
    
    terms.reverse();
    let nextTerm = 0;
    let i = n;

    while (nextTerm < x) {
        nextTerm = 0;
        for (let j = 1; j <= n; j++) {
            nextTerm += terms[i - j];
        }
        terms.push(nextTerm);
        i++;
    }
    
    return nextTerm === x;
}
",179,"[
  console.assert(isNumKeith(14) === true),
  console.assert(isNumKeith(12) === false),
  console.assert(isNumKeith(197) === true)
]",
179, this function to calculate distance between two points using latitude and longitude.,"
function distanceLatLong(slat, slon, elat, elon) {
    const dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));
    return dist;
}
",180,"
[console.assert(distanceLatLong(23.5, 67.5, 25.5, 69.5) === 12179.372041317429), console.assert(distanceLatLong(10.5, 20.5, 30.5, 40.5) === 6069.397933300514), console.assert(distanceLatLong(10, 20, 30, 40) === 6783.751974994595)]
",
180, this function to find the longest common prefix in the given set of strings.,"function commonPrefix(arr, n) {
    let result = arr[0];
    
    for (let i = 1; i < n; i++) {
        let tempResult = """";
        let str1 = result;
        let str2 = arr[i];
        let len1 = str1.length;
        let len2 = str2.length;
        let j = 0;

        while (j < len1 && j < len2 && str1[j] === str2[j]) {
            tempResult += str1[j];
            j++;
        }
        result = tempResult;  
    }

    return result;
}",181,"
[console.assert(commonPrefix([""tablets"", ""tables"", ""taxi"", ""tamarind""], 4) === ""ta""), console.assert(commonPrefix([""apples"", ""ape"", ""april""], 3) === ""ap""), console.assert(commonPrefix([""teens"", ""teenager"", ""teenmar""], 3) === ""teen"")]
",
181," this function to find uppercase, lowercase, special character and numeric values using regex.","function findCharacter(string) {
    const uppercaseCharacters = string.match(/[A-Z]/g) || [];
    const lowercaseCharacters = string.match(/[a-z]/g) || [];
    const numericalCharacters = string.match(/[0-9]/g) || [];
    const specialCharacters = string.match(/[,.!?]/g) || [];
    return [uppercaseCharacters, lowercaseCharacters, numericalCharacters, specialCharacters];
}",182,"[console.assert(JSON.stringify(findCharacter(""ThisIsGeeksforGeeks"")) === JSON.stringify([[""T"", ""I"", ""G"", ""G""], [""h"", ""i"", ""s"", ""s"", ""e"", ""e"", ""k"", ""s"", ""f"", ""o"", ""r"", ""e"", ""e"", ""k"", ""s""], [], []])),
console.assert(JSON.stringify(findCharacter(""Hithere2"")) === JSON.stringify([[""H""], [""i"", ""t"", ""h"", ""e"", ""r"", ""e""], [""2""], []])),
console.assert(JSON.stringify(findCharacter(""HeyFolks32"")) === JSON.stringify([[""H"", ""F""], [""e"", ""y"", ""o"", ""l"", ""k"", ""s""], [""3"", ""2""], []]))]",
182, this function to count all the distinct pairs having a difference of k in any array.,"
function countPairs(arr, n, k) {
  let count = 0;
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      if (arr[i] - arr[j] === k || arr[j] - arr[i] === k) {
        count++;
      }
    }
  }
  return count;
}
",183,"
[console.assert(countPairs([1, 5, 3, 4, 2], 5, 3) === 2), console.assert(countPairs([8, 12, 16, 4, 0, 20], 6, 4) === 5), console.assert(countPairs([2, 4, 1, 3, 4], 5, 2) === 3)]
",
183, this function to find all the values in a list that are greater than a specified number.,"
function greaterSpecificNum(list, num) {
    const greaterSpecificNum = list.every(x => x >= num);
    return greaterSpecificNum;
}
",184,"
[console.assert(greaterSpecificNum([220, 330, 500], 200) === true), console.assert(greaterSpecificNum([12, 17, 21], 20) === false), console.assert(greaterSpecificNum([1, 2, 3, 4], 10) === false)]
",
184, this function to find the focus of a parabola.,"
function parabolaFocus(a, b, c) {
    let focus = [(-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a))];
    return focus;
}
",185,"
[console.assert(parabolaFocus(5,3,2)[0] === -0.3 && parabolaFocus(5,3,2)[1] === 1.6), console.assert(parabolaFocus(9,8,4)[0] === -0.4444444444444444 && parabolaFocus(9,8,4)[1] === 2.25), console.assert(parabolaFocus(2,4,6)[0] === -1.0 && parabolaFocus(2,4,6)[1] === 4.125)]
",
185, this function to search some literals strings in a string by using regex.,"function checkLiterals(text, patterns) {
    for (let pattern of patterns) {
      if (new RegExp(pattern).test(text)) {
        return ""Matched!"";
      } else {
        return ""Not Matched!"";
      }
    }
  }",186,"[
  console.assert(checkLiterals(""The quick brown fox jumps over the lazy dog."", [""fox""]) === ""Matched!""),
  console.assert(checkLiterals(""The quick brown fox jumps over the lazy dog."", [""horse""]) === ""Not Matched!""),
  console.assert(checkLiterals(""The quick brown fox jumps over the lazy dog."", [""lazy""]) === ""Matched!"")
]",
186, this function to find the longest common subsequence for the given two sequences.,"
function longestCommonSubsequence(X, Y, m, n) {
    if (m === 0 || n === 0) {
        return 0;
    } else if (X[m - 1] === Y[n - 1]) {
        return 1 + longestCommonSubsequence(X, Y, m - 1, n - 1);
    } else {
        return Math.max(longestCommonSubsequence(X, Y, m, n - 1), longestCommonSubsequence(X, Y, m - 1, n));
    }
}
",187,"
[console.assert(longestCommonSubsequence(""AGGTAB"", ""GXTXAYB"", 6, 7) === 4), console.assert(longestCommonSubsequence(""ABCDGH"", ""AEDFHR"", 6, 6) === 3), console.assert(longestCommonSubsequence(""AXYT"", ""AYZX"", 4, 4) === 2)]
",
187, this   function to check whether the given number can be represented by product of two squares or not.,"
function prod_Square(n) {
    for (let i = 2; i <= n; i++) {
        if (i * i < (n + 1)) {
            for (let j = 2; j <= n; j++) {
                if ((i * i * j * j) === n) {
                    return true;
                }
            }
        }
    }
    return false;
}
",188,"[
  console.assert(prod_Square(25) === false),
  console.assert(prod_Square(30) === false),
  console.assert(prod_Square(16) === true)
]",
189, this   function to count the number of integral co-ordinates that lie inside a square.,"
function count_Intgral_Points(x1, y1, x2, y2) { 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)); 
}
",190,"[
  console.assert(count_Intgral_Points(1, 1, 4, 4) === 4),
  console.assert(count_Intgral_Points(1, 2, 1, 2) === 1),
  console.assert(count_Intgral_Points(4, 2, 6, 4) === 1)
]",
190, this function to check whether the given month name contains 30 days or not.,"
function checkMonthNumber(monthName3) {
  if (monthName3 === ""April"" || monthName3 === ""June"" || monthName3 === ""September"" || monthName3 === ""November"") {
    return true;
  } else {
    return false;
  }
}
",191,"
[console.assert(checkMonthNumber(""February"") === false), console.assert(checkMonthNumber(""June"") === true), console.assert(checkMonthNumber(""April"") === true)]
",
191, this   function to check whether a string has atleast one letter and one number.,"
function check_String(str) {
    let flag_l = false;
    let flag_n = false;
    for (let i of str) {
        if (isNaN(i) === false) {
            flag_n = true;
        }
        if (isNaN(i) === true) {
            flag_l = true;
        }
    }
    return flag_l && flag_n;
}
",192,"[
  console.assert(check_String(""thishasboth29"") === true),
  console.assert(check_String("""") === false),
  console.assert(check_String(""string"") === false)
]",
192, this function to remove the duplicates from the given tuple.,"function removeTuples(testList, K) {
    let res = testList.filter(ele => ele.length !== K);
    return res;
}",193,"[console.assert(JSON.stringify(removeTuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)) === JSON.stringify([[4, 5], [8, 6, 7], [3, 4, 6, 7]]), ""Assertion failed for first test case.""),
console.assert(JSON.stringify(removeTuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)) === JSON.stringify([[1, 2, 3], [3, 4, 6, 7]]), ""Assertion failed for second test case.""),
console.assert(JSON.stringify(removeTuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)) === JSON.stringify([[4, 3], [1]]), ""Assertion failed for third test case."")]",
193, this   function to convert octal number to decimal number.,"
function octal_To_Decimal(n) {  
    let num = n; 
    let dec_value = 0; 
    let base = 1; 
    let temp = num; 
    while (temp) { 
        let last_digit = temp % 10; 
        temp = Math.floor(temp / 10); 
        dec_value += last_digit * base; 
        base = base * 8; 
    } 
    return dec_value; 
}
",194,"[
  console.assert(octal_To_Decimal(25) === 21),
  console.assert(octal_To_Decimal(30) === 24),
  console.assert(octal_To_Decimal(40) === 32)
]",
194, this   function to find the first position of an element in a sorted array.,"
function first(arr, x, n) {
    let low = 0;
    let high = n - 1;
    let res = -1;  
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        if (arr[mid] > x) {
            high = mid - 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            res = mid;
            high = mid - 1;
        }
    }
    return res;
}
",195,"
[console.assert(first([1,2,3,4,5,6,6],6,6) === 5), console.assert(first([1,2,2,2,3,2,2,4,2],2,9) === 1), console.assert(first([1,2,3],1,3) === 0)]
",
195, this function to remove all the tuples with length k.,"function removeTuples(testList, K) {
    let res = testList.filter(ele => ele.length !== K);
    return res;
}",196,"
[console.assert(removeTuples([(4
[console.assert(removeTuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1).toString() === [(4, 5), (8, 6, 7), (3, 4, 6, 7)].toString()), console.assert(removeTuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2).toString() === [(1, 2, 3), (3, 4, 6, 7)].toString()), console.assert(removeTuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3).toString() === [(4, 3), (1,)].toString())], 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1).toString() === [(4, 5), (8, 6, 7), (3, 4, 6, 7)].toString()), console.assert(removeTuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2).toString() === [(1, 2, 3), (3, 4, 6, 7)].toString()), console.assert(removeTuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3).toString() === [(4, 3), (1,)].toString())]
",
197, this function to find the largest triangle that can be inscribed in an ellipse.,"
function largestTriangle(a, b) {
    if (a < 0 || b < 0) {
        return -1;
    }
    var area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);
    return area;
}
",198,"
[console.assert(largestTriangle(4,2) === 10.392304845413264), console.assert(largestTriangle(5,7) === 4.639421805988064), console.assert(largestTriangle(9,1) === 105.2220865598093)]
",
198, this   function to find highest power of 2 less than or equal to given number.,"
function highestPowerOf2(n) { 
    let res = 0; 
    for (let i = n; i > 0; i--) {  
        if ((i & (i - 1)) === 0) { 
            res = i; 
            break;      
        }      
    } 
    return res; 
}
",199,"
[console.assert(highestPowerOf2(10) === 8), console.assert(highestPowerOf2(19) === 16), console.assert(highestPowerOf2(32) === 32)]
",
199, this function to find all index positions of the maximum values in a given list.,"
function positionMax(list1) {
    const maxVal = Math.max(...list1);
    const maxResult = list1.map((j, i) => j === maxVal ? i : -1).filter(i => i !== -1);
    return maxResult;
}
",200,"[console.assert(JSON.stringify(positionMax([12,33,23,10,67,89,45,667,23,12,11,10,54]))) === JSON.stringify([7]), console.assert(JSON.stringify(positionMax([1,2,2,2,4,4,4,5,5,5,5]))) === JSON.stringify([7,8,9,10]), console.assert(JSON.stringify(positionMax([2,1,5,6,8,3,4,9,10,11,8,12]))) === JSON.stringify([11])]",
200, this   function to check whether the elements in a list are same or not.,"
function chkList(lst) { 
    return new Set(lst).size === 1; 
}
",201,"[
  console.assert(chkList([""one"", ""one"", ""one""]) === true),
  console.assert(chkList([""one"", ""Two"", ""Three""]) === false),
  console.assert(chkList([""bigdata"", """", ""Django""]) === false)
]",
201, this function to remove even characters in a string.,"function removeEven(str1) {
    let str2 = """"; 
    for (let i = 0; i < str1.length; i++) { 
        if (i % 2 === 0) { 
            continue; 
        }
        str2 += str1[i]; 
    }
    return str2;
}",202,"[console.assert(removeEven(""program"") === ""rga"", ""Assertion failed for program""),
console.assert(removeEven(""language"") === ""agae"", ""Assertion failed for language""),
console.assert(removeEven("" "") === """", ""Assertion failed for empty space"")]",
202, this   function to find the hamming distance between given two integers.,"
function hammingDistance(n1, n2) {
    let x = n1 ^ n2;
    let setBits = 0;
    while (x > 0) {
        setBits += x & 1;
        x >>= 1;
    }
    return setBits;
}
",203,"
[console.assert(hammingDistance(4, 8) === 2), console.assert(hammingDistance(2, 4) === 2), console.assert(hammingDistance(1, 2) === 2)]
",
204, this function to find the inversions of tuple elements in the given tuple list.,"function inversionElements(testTup) {
    const res = Array.from(testTup, x => ~x); 
    return res; 
}",205,"[console.assert(JSON.stringify(inversionElements([7, 8, 9, 1, 10, 7])) === JSON.stringify([-8, -9, -10, -2, -11, -8]), ""Assertion failed for [7, 8, 9, 1, 10, 7]""),
console.assert(JSON.stringify(inversionElements([2, 4, 5, 6, 1, 7])) === JSON.stringify([-3, -5, -6, -7, -2, -8]), ""Assertion failed for [2, 4, 5, 6, 1, 7]""),
console.assert(JSON.stringify(inversionElements([8, 9, 11, 14, 12, 13])) === JSON.stringify([-9, -10, -12, -15, -13, -14]), ""Assertion failed for [8, 9, 11, 14, 12, 13]"")]",
205, this function to perform the adjacent element concatenation in the given tuples.,"function concatenateElements(testTup) {
    let res = Array.from({length: testTup.length - 1}, (_, i) => testTup[i] + testTup[i + 1]);
    return res;
}",206,"[console.assert(JSON.stringify(concatenateElements([""DSP "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""UTS""])) === JSON.stringify([""DSP IS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL UTS""]), ""Assertion failed for first test case""),
console.assert(JSON.stringify(concatenateElements([""RES "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""QESR""])) === JSON.stringify([""RES IS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL QESR""]), ""Assertion failed for second test case""),
console.assert(JSON.stringify(concatenateElements([""MSAM"", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""SKD""])) === JSON.stringify([""MSAMIS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL SKD""]), ""Assertion failed for third test case"")]",
206, this function to count the longest repeating subsequences such that the two subsequences donâ€™t have same string characters at same positions.,"
function findLongestRepeatingSubseq(str) {
    const n = str.length;
    const dp = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    
    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= n; j++) {
            if (str[i - 1] === str[j - 1] && i !== j) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
            }
        }
    }
    return dp[n][n];
}
",207,"[
console.assert(findLongestRepeatingSubseq(""AABEBCDD"") === 3),
console.assert(findLongestRepeatingSubseq(""aabb"") === 2),
console.assert(findLongestRepeatingSubseq(""aab"") === 1)]
",
207, this function to check the given decimal with a precision of 2 by using regex.,"function isDecimal(num) {
    const numFetch = /^[0-9]+(\.[0-9]{1,2})?$/;
    const result = numFetch.test(num);
    return result;  
}",208,"[
    console.assert(isDecimal(123.11) === true),
    console.assert(isDecimal(0.21) === true),
   console.assert(isDecimal(123.1214) === false)
  ]",
208, this function to delete the smallest element from the given heap and then insert a new item.,"function heapReplace(heap, a) {
    heap[0] = a;
    
    heap.sort((x, y) => x - y);
    return heap;
}",209,"[ 
    console.assert(heapReplace([25, 44, 68, 21, 39, 23, 89], 21).toString() === [21, 21, 23, 39, 44, 68, 89].toString()), 
    console.assert(heapReplace([25, 44, 68, 21, 39, 23, 89], 110).toString() === [21, 23, 39, 44, 68, 89, 110].toString()), 
    console.assert(heapReplace([25, 44, 68, 21, 39, 23, 89], 500).toString() === [21, 23, 39, 44, 68, 89, 500].toString()) 
]",
209," this function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","
function isAllowedSpecificChar(string) {
    const getChar = /[^a-zA-Z0-9.]/;
    const result = getChar.test(string);
    return !result;
}
",210,"[
  console.assert(isAllowedSpecificChar(""ABCDEFabcdef123450"") === true),
  console.assert(isAllowedSpecificChar(""*&%@#!}{"") === false),
  console.assert(isAllowedSpecificChar(""HELLOhowareyou98765"") === true)
]",
210, this   function to count numbers whose oth and nth bits are set.,"
function count_Num(n) { 
    if (n === 1) { 
        return 1; 
    } 
    let count = Math.pow(2, n - 2); 
    return count; 
}
",211,"[ 
    console.assert(count_Num(2) === 1), 
    console.assert(count_Num(3) === 2), 
    console.assert(count_Num(1) === 1) 
]",
211, this   function to find the sum of fourth power of n natural numbers.,"
function fourthPowerSum(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += (i * i * i * i);
    }
    return sum;
}
",212,"[
  console.assert(fourthPowerSum(2) === 17),
  console.assert(fourthPowerSum(4) === 354),
  console.assert(fourthPowerSum(6) === 2275)
]",
213, this function to convert radians to degrees.,"
function degree_radian(radian) {
    var degree = radian * (180 / Math.PI);
    return degree;
}
",214,"
[console.assert(degree_radian(90) === 5156.620156177409), console.assert(degree_radian(60) === 3437.746770784939), console.assert(degree_radian(120) === 6875.493541569878)]
",
214, this function to decode a run-length encoded given list.,"function decodeList(alist) {
    function aux(g) {
        if (Array.isArray(g) && g.length === 2 && typeof g[0] === 'string' && typeof g[1] === 'string') {
            
            return g;
        } else if (Array.isArray(g)) {
            return Array(g[0]).fill(g[1]);
        } else {
            return [g];
        }
    }

    return [].concat(...alist.map(g => aux(g)));
}",215,"[
    console.assert(JSON.stringify(decodeList([[2, 1], 2, 3, [2, 4], 5, 1])) === JSON.stringify([1, 1, 2, 3, 4, 4, 5, 1]), `Test 1 Failed: ${JSON.stringify(decodeList([[2, 1], 2, 3, [2, 4], 5, 1]))}`),
    console.assert(JSON.stringify(decodeList(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', ['l', 'l'], 'y'])) === JSON.stringify(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']), `Test 2 Failed: ${JSON.stringify(decodeList(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', ['l', 'l'], 'y']))}`),
    console.assert(JSON.stringify(decodeList(['p', 'y', 't', 'h', 'o', 'n'])) === JSON.stringify(['p', 'y', 't', 'h', 'o', 'n']), `Test 3 Failed: ${JSON.stringify(decodeList(['p', 'y', 't', 'h', 'o', 'n']))}`)
  ]",
215, this function to check if a nested list is a subset of another nested list.,"function checkSubsetList(list1, list2) {
    let exist = true;
    for (let sublist of list2) {
        for (let item of sublist) {
            if (!list1.includes(item)) {
                exist = false;
                break;
            }
        }
        if (!exist) break; 
    }
    r",216,"[console.assert(checkSubsetList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) === false, ""Test 1 Failed""),
console.assert(checkSubsetList([2, 3, 1, 4, 5, 6, 8], [[4, 5], [6, 8]]) === true, ""Test 2 Failed""),
console.assert(checkSubsetList([""a"", ""b"", ""c""], [[""a"", ""b""], [""c""]]) === true, ""Test 3 Failed""),
console.assert(checkSubsetList([[""a"", ""b""], [""e""], [""c"", ""d""]], [[""g""]]) === false, ""Test 4 Failed"")]",
216, this   function to find the first repeated character in a given string.,"function firstRepeatedChar(str) {
    let h = {};
    for (let ch of str) {
        if (h[ch]) {
            return ch;  
        } else {
            h[ch] = 1;  
        }
    }
    return null;  
}",217,"[
  console.assert(firstRepeatedChar(""Google"") === ""o"", ""Test 1 Failed""), 
  console.assert(firstRepeatedChar(""data"") === ""a"", ""Test 2 Failed""), 
  console.assert(firstRepeatedChar("" "") === null, ""Test 3 Failed"")
]",
218, this function to extract maximum and minimum k elements in the given tuple.,"function extractMinMax(testTup, K) {
    let res = [];
    testTup = Array.from(testTup);
    let temp = testTup.sort((a, b) => a - b);
    for (let idx = 0; idx < temp.length; idx++) {
      let val = temp[idx];
      if (idx < K || idx >= temp.length - K) {
        res.push(val); 
      }
    }
    return res;  
}",219,"[
    console.assert(JSON.stringify(extractMinMax([5, 20, 3, 7, 6, 8], 2)) === JSON.stringify([3, 5, 8, 20]), ""Test 1 Failed""), 
    console.assert(JSON.stringify(extractMinMax([4, 5, 6, 1, 2, 7], 3)) === JSON.stringify([1, 2, 4, 5, 6, 7]), ""Test 2 Failed""), 
    console.assert(JSON.stringify(extractMinMax([2, 3, 4, 8, 9, 11, 7], 4)) === JSON.stringify([2, 3, 4, 7, 8, 9, 11]), ""Test 3 Failed"")
]",
219," this function to replace maximum n occurrences of spaces, commas, or dots with a colon.","function replaceMaxSpecialChar(text, n) {
    let replacedCount = 0;
    let result = '';

    for (let i = 0; i < text.length; i++) {
        let char = text[i];
        if (/[ ,.\s]/.test(char) && replacedCount < n) {
            result += ':'; 
            replacedCount++; 
            console.log(`Replacing '${char}' with ':'`);
        } else {
            result += char; 
        }
    }

    return result;
}",220,"[console.assert(replaceMaxSpecialChar(""language, Programming language."", 2) === ""language::Programming language."", ""Test Case 1 Failed""),
console.assert(replaceMaxSpecialChar(""a b c,d e f"", 3) === ""a:b:c:d e f"", ""Test Case 2 Failed""),
console.assert(replaceMaxSpecialChar(""ram reshma,ram rahim"", 1) === ""ram:reshma,ram rahim"", ""Test Case 3 Failed""),
console.log(replaceMaxSpecialChar(""language, Programming language."", 2)) ]",
221, this function to check if all the elements in tuple have same data type or not.,"
function checkType(testTuple) {
  let res = true;
  for (let ele of testTuple) {
    if (typeof ele !== typeof testTuple[0]) {
      res = false;
      break;
    }
  }
  return res;
}
",222,"
[console.assert(checkType([5, 6, 7, 3, 5, 6]) === true), console.assert(checkType([1, 2, ""4""]) === false), console.assert(checkType([3, 2, 1, 4, 5]) === true)]
",
222, this function to check for majority element in the given sorted array.,"function isMajority(arr, n, x) {
    let low = 0, high = n - 1;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        
        if (arr[mid] === x && (mid === 0 || arr[mid - 1] < x)) {
            let firstIndex = mid;
            let majorityIndex = firstIndex + Math.floor(n / 2);

            return (majorityIndex < n && arr[majorityIndex] === x);
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return false; 
}",223,"
[
  console.assert(isMajority([1, 2, 3, 3, 3, 3, 10], 7, 3) === true),
  console.assert(isMajority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) === false),
  console.assert(isMajority([1, 1, 1, 2, 2], 5, 1) === true)
]",
223, this   function to count set bits of a given number.,"
function countSetBits(n) {
    let count = 0;
    while (n) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}
",224,"
[console.assert(countSetBits(2) === 1), console.assert(countSetBits(4) === 1), console.assert(countSetBits(6) === 2)]
",
224, this   function to find the minimum element in a sorted and rotated array.,"
function findMin(arr, low, high) {
    while (low < high) {
        let mid = low + Math.floor((high - low) / 2);
        if (arr[mid] === arr[high]) {
            high -= 1;
        } else if (arr[mid] > arr[high]) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    return arr[high];
}
",225,"
[console.assert(findMin([1,2,3,4,5],0,4) === 1), console.assert(findMin([4,6,8],0,2) === 4), console.assert(findMin([2,3,5,7,9],0,4) === 2)]
",
225, this   function to remove the characters which have odd index values of a given string.,"
function oddValuesString(str) {
  let result = """";
  for (let i = 0; i < str.length; i++) {
    if (i % 2 === 0) {
      result += str[i];
    }
  }
  return result;
}
",226,"  [
  console.assert(oddValuesString(""abcdef"") === ""ace""),
  console.assert(oddValuesString(""pto"") === ""po""),
  console.assert(oddValuesString(""data"") === ""dt"")
]",
227, this   function to check whether all the bits are unset in the given range or not.,"
function allBitsSetInTheGivenRange(n, l, r) {
    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));
    let new_num = n & num;
    if (new_num === 0) {
        return true;
    }
    return false;
}
",228,"[
  console.assert(allBitsSetInTheGivenRange(4, 1, 2) === true),
  console.assert(allBitsSetInTheGivenRange(17, 2, 4) === true),
  console.assert(allBitsSetInTheGivenRange(39, 4, 6) === false)
]",
228, this function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"
function reArrangeArray(arr, n) {
  let j = 0;
  for (let i = 0; i < n; i++) {
    if (arr[i] < 0) {
      let temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
      j++;
    }
  }
  return arr;
}
",229,"
[console.assert(reArrangeArray([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9).toString() === [-1, -3, -7, 4, 5, 6, 2, 8, 9].toString()), console.assert(reArrangeArray([12, -14, -26, 13, 15], 5).toString() === [-14, -26, 12, 13, 15].toString()), console.assert(reArrangeArray([10, 24, 36, -42, -39, -78, 85], 7).toString() === [-42, -39, -78, 10, 24, 36, 85].toString())]
",
229, this function to replace blank spaces with any character in a string.,"
function replace_blank(str1, char) {
    let str2 = str1.replace(/ /g, char);
    return str2;
}
",230,"[
    console.assert(replace_blank(""hello people"", ""@"") === ""hello@people""),
    console.assert(replace_blank("" program language"", ""$"") === ""$program$language""),
    console.assert(replace_blank(""blank space"", ""-"") === ""blank-space"")
  ]",
230, this function to find the maximum sum in the given right triangle of numbers.,"
function max_sum(tri, n) { 
    if (n > 1) { 
        tri[1][1] = tri[1][1] + tri[0][0]; 
        tri[1][0] = tri[1][0] + tri[0][0]; 
    }
    for (let i = 2; i < n; i++) { 
        tri[i][0] = tri[i][0] + tri[i - 1][0]; 
        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]; 
        for (let j = 1; j < i; j++) { 
            if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) { 
                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]; 
            } else { 
                tri[i][j] = tri[i][j] + tri[i - 1][j]; 
            } 
        } 
    }
    return Math.max(...tri[n - 1]); 
}
",231,"
[console.assert(max_sum([[1], [2,1], [3,3,2]], 3) === 6), console.assert(max_sum([[1], [1, 2], [4, 1, 12]], 3) === 15), console.assert(max_sum([[2], [3,2], [13,23,12]], 3) === 28)]
",
231, this function to get the n largest items from a dataset.,"
function larg_nnum(list1, n) {
    return list1.sort((a, b) => b - a).slice(0, n);
}
",232,"
[console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2).toString() === [100, 90].toString()), console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5).toString() === [100, 90, 80, 70, 60].toString()), console.assert(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3).toString() === [100, 90, 80].toString())]
",
232, this function to find the lateral surface area of a cylinder.,"function lateralsuface_cylinder(r, h) {
    let lateralsurface = 2 * 3.1415 * r * h;
    return lateralsurface;
}",233,"
[console.assert(lateralsuface_cylinder(10, 5) === 314.15000000000003), console.assert(lateralsuface_cylinder(4, 5) === 125.66000000000001), console.assert(lateralsuface_cylinder(4, 10) === 251.32000000000002)]
",
233, this function to find the volume of a cube.,"
function volumeCube(l) {
  var volume = l * l * l;
  return volume;
}
",234,"
[console.assert(volumeCube(3) === 27), console.assert(volumeCube(2) === 8), console.assert(volumeCube(5) === 125)]
",
235, this   function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"
function No_of_Triangle(N, K) {
    if (N < K) {
        return -1;
    } else {
        let Tri_up = ((N - K + 1) * (N - K + 2)) / 2;
        let Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) / 2;
        return Tri_up + Tri_down;
    }
}
",236,"
[console.assert(No_of_Triangle(4, 2) === 7), console.assert(No_of_Triangle(4, 3) === 3), console.assert(No_of_Triangle(1, 3) === -1)]
",
236, this function to check the occurrences of records which occur similar times in the given tuples.,"function checkOccurrences(testList) {
    const res = {};
    testList.map(arr => JSON.stringify(arr.slice().sort((a, b) => a - b))) 
            .forEach(ele => {
                res[ele] = (res[ele] || 0) + 1;
            });
    return res;
}",237,"[console.assert(JSON.stringify(checkOccurrences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])) === JSON.stringify({ 
    ""[1,3]"": 2, ""[2,5]"": 2, ""[3,6]"": 1 
}), ""Test Case 1 Failed""),
console.assert(JSON.stringify(checkOccurrences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])) === JSON.stringify({ 
    ""[2,4]"": 2, ""[3,6]"": 2, ""[4,7]"": 1 
}), ""Test Case 2 Failed""),
console.assert(JSON.stringify(checkOccurrences([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]])) === JSON.stringify({ 
    ""[2,13]"": 1, ""[11,23]"": 1, ""[12,25]"": 2, ""[16,23]"": 1 
}), ""Test Case 3 Failed"")]",
237, this   function to count number of non-empty substrings of a given string.,"
function number_of_substrings(str) {
    const str_len = str.length;
    return Math.floor(str_len * (str_len + 1) / 2);
}
",238,"
[console.assert(number_of_substrings(""abc"") === 6), console.assert(number_of_substrings(""abcd"") === 10), console.assert(number_of_substrings(""abcde"") === 15)]
",
238, this function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"
function getTotalNumberOfSequences(m, n) {
    let T = Array.from(Array(m + 1), () => Array(n + 1).fill(0));
    for (let i = 0; i <= m; i++) {
        for (let j = 0; j <= n; j++) {
            if (i === 0 || j === 0) {
                T[i][j] = 0;
            } else if (i < j) {
                T[i][j] = 0;
            } else if (j === 1) {
                T[i][j] = i;
            } else {
                T[i][j] = T[i - 1][j] + T[Math.floor(i / 2)][j - 1];
            }
        }
    }
    return T[m][n];
}",239,"[
  console.assert(getTotalNumberOfSequences(10, 4) === 4),
  console.assert(getTotalNumberOfSequences(5, 2) === 6),
  console.assert(getTotalNumberOfSequences(16, 3) === 84)
]",
239, this function to replace the last element of the list with another list.,"
function replaceList(list1, list2) {
    list1.splice(-1, 1, ...list2);
    return list1;
}
",240,"
[console.assert(replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]).toString() === [1, 3, 5, 7, 9, 2, 4, 6, 8].toString()), console.assert(replaceList([1, 2, 3, 4, 5], [5, 6, 7, 8]).toString() === [1, 2, 3, 4, 5, 6, 7, 8].toString()), console.assert(replaceList([""red"", ""blue"", ""green""], [""yellow""]).toString() === [""red"", ""blue"", ""yellow""].toString())]
",
240, this function to generate a 3d array having each element as *.,"function array_3d(m, n, o) {
    let array_3d = Array.from({ length: m }, () => 
        Array.from({ length: n }, () => 
            Array.from({ length: o }, () => '*') 
        )
    );
    return array_3d;
}",241,"[console.assert(
    JSON.stringify(array_3d(6, 4, 3)) === JSON.stringify([
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ],
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ],
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ],
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ],
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ],
        [
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*'], 
            ['*', '*', '*']
        ]
    ])
),
console.assert(
    JSON.stringify(array_3d(5, 3, 4)) === JSON.stringify([
        [
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*']
        ],
        [
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*']
        ],
        [
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*']
        ],
        [
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*']
        ],
        [
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*'], 
            ['*', '*', '*', '*']
        ]
    ])
),
console.assert(
    JSON.stringify(array_3d(1, 2, 3)) === JSON.stringify([
        [
            ['*', '*', '*'], 
            ['*', '*', '*']
        ]
    ])
)]",
241, this function to count total characters in a string.,"function countCharac(str) {
    return str.length; 
}",242,"[console.assert(countCharac(""  programming"") === 13), console.assert(countCharac(""language"") === 8), console.assert(countCharac(""words"") === 5)]",
242, this function to sort the given list based on the occurrence of first element of tuples.,"function sortOnOccurrence(lst) {
    const dct = {};
    for (const [i, j] of lst) {
        if (!dct[i]) {
            dct[i] = [];
        }
        dct[i].push(j);
    }
    return Object.entries(dct).map(([i, j]) => [isNaN(i) ? i : parseInt(i), ...Array.from(new Set(j)), j.length]);
}",243,"[
    console.assert(
        JSON.stringify(sortOnOccurrence([[1, 'Jake'], [2, 'Bob'], [1, 'Cara']])) ===
        JSON.stringify([[1, 'Jake', 'Cara', 2], [2, 'Bob', 1]]),
        ""Test 1 Failed""
    ),
    console.assert(
        JSON.stringify(sortOnOccurrence([['b', 'ball'], ['a', 'arm'], ['b', 'b'], ['a', 'ant']])) ===
        JSON.stringify([['b', 'ball', 'b', 2], ['a', 'arm', 'ant', 2]]),
        ""Test 2 Failed""
    ),
    console.assert(
        JSON.stringify(sortOnOccurrence([[2, 'Mark'], [3, 'Maze'], [2, 'Sara']])) ===
        JSON.stringify([[2, 'Mark', 'Sara', 2], [3, 'Maze', 1]]),
        ""Test 3 Failed""
    )
]",
243, this   function to find the next perfect square greater than a given number.,"
function nextPerfectSquare(N) {
    let nextN = Math.floor(Math.sqrt(N)) + 1;
    return nextN * nextN;
}
",244,"[
  console.assert(nextPerfectSquare(35) === 36),
  console.assert(nextPerfectSquare(6) === 9),
  console.assert(nextPerfectSquare(9) === 16)
]",
244, this function to find the maximum sum of bi-tonic sub-sequence for the given array.,"function maxSum(arr, n) {
    let MSIBS = arr.slice(); 
    let MSDBS = arr.slice(); 

    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {
                MSIBS[i] = MSIBS[j] + arr[i];
            }
        }
    }

    for (let i = n - 2; i >= 0; i--) {
        for (let j = n - 1; j > i; j--) {
            if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) {
                MSDBS[i] = MSDBS[j] + arr[i];
            }
        }
    }

    let max_sum = Number.NEGATIVE_INFINITY;
    for (let k = 0; k < n; k++) {
        max_sum = Math.max(max_sum, MSIBS[k] + MSDBS[k] - arr[k]);
    }

    return max_sum;
}",245,"[
  console.assert(maxSum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) === 194),
  console.assert(maxSum([80, 60, 30, 40, 20, 10], 6) === 210),
  console.assert(maxSum([2, 3, 14, 16, 21, 23, 29, 30], 8) === 138)
]",
245, this function for computing square roots using the babylonian method.,"
function babylonianSquareroot(number) {
    if (number === 0) {
        return 0;
    }
    let g = number / 2.0;
    let g2 = g + 1;
    while (g !== g2) {
        let n = number / g;
        g2 = g;
        g = (g + n) / 2;
    }
    return g;
}
",246,"
[console.assert(babylonianSquareroot(10) === 3.162277660168379), console.assert(babylonianSquareroot(2) === 1.414213562373095), console.assert(babylonianSquareroot(9) === 3.0)]
",
246, this function to find the longest palindromic subsequence in the given string.,"
function lps(str) { 
    const n = str.length; 
    const L = Array.from({ length: n }, () => Array(n).fill(0)); 
    for (let i = 0; i < n; i++) { 
        L[i][i] = 1; 
    } 
    for (let cl = 2; cl <= n; cl++) { 
        for (let i = 0; i <= n - cl; i++) { 
            const j = i + cl - 1; 
            if (str[i] === str[j] && cl === 2) { 
                L[i][j] = 2; 
            } else if (str[i] === str[j]) { 
                L[i][j] = L[i + 1][j - 1] + 2; 
            } else { 
                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]); 
            } 
        } 
    } 
    return [L[0][n - 1]]; 
}
",247,"[   
    console.assert(lps(""TENS FOR TENS"")[0] === 5, ""Test 1 Failed"", lps(""TENS FOR TENS"")),
    console.assert(lps(""CARDIO FOR CARDS"")[0] === 7, ""Test 2 Failed"", lps(""CARDIO FOR CARDS"")),
    console.assert(lps(""PART OF THE JOURNEY IS PART"")[0] === 9, ""Test 3 Failed"", lps(""PART OF THE JOURNEY IS PART""))
]",
247, this function to calculate the harmonic sum of n-1.,"
function harmonicSum(n) {
  if (n < 2) {
    return 1;
  } else {
    return 1 / n + harmonicSum(n - 1);
  }
}
",248,"
[console.assert(harmonicSum(7) === 2.5928571428571425), console.assert(harmonicSum(4) === 2.083333333333333), console.assert(harmonicSum(19) === 3.547739657143682)]
",
248, this function to find the intersection of two arrays using lambda function.,"
function intersectionArray(array_nums1, array_nums2) {
    const result = array_nums2.filter(x => array_nums1.includes(x));
    return result;
}
",249,"
[console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9]).toString() === [1, 2, 8, 9].toString()), console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9]).toString() === [3,5,7,9].toString()), console.assert(intersectionArray([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40]).toString() === [10].toString())]
",
249, this   function to count the occcurences of an element in a tuple.,"
function count_X(tup, x) {
    let count = 0;
    for (let ele of tup) {
        if (ele === x) {
            count++;
        }
    }
    return count;
}
",250,"
[console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) === 0), console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) === 3), console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) === 4)]
",
250, this function to insert an element before each element of a list.,"function insertElement(list, element) {
    return [].concat(...list.map(elt => [element, elt]));
}",251,"[
    console.assert(
        JSON.stringify(insertElement(['Red', 'Green', 'Black'], 'c')) === JSON.stringify(['c', 'Red', 'c', 'Green', 'c', 'Black']),
        ""Test 1 Failed"",
        insertElement(['Red', 'Green', 'Black'], 'c')
    ),
    console.assert(
        JSON.stringify(insertElement(['', 'java'], 'program')) === JSON.stringify(['program', '', 'program', 'java']),
        ""Test 2 Failed"",
        insertElement(['', 'java'], 'program')
    ),
    console.assert(
        JSON.stringify(insertElement(['happy', 'sad'], 'laugh')) === JSON.stringify(['laugh', 'happy', 'laugh', 'sad']),
        ""Test 3 Failed"",
        insertElement(['happy', 'sad'], 'laugh')
    )
]",
251, this   function to convert complex numbers to polar coordinates.,"function convert(numbers) {    
    let num = Math.sqrt(numbers.re * numbers.re + numbers.im * numbers.im);
    let angle = Math.atan2(numbers.im, numbers.re);
    return [num, angle];
}",252,"[
    console.assert(
        JSON.stringify(convert({ re: 1, im: 0 })) === JSON.stringify([1.0, 0.0]),
        ""Test 1 Failed"",
        convert({ re: 1, im: 0 })
    ),
    console.assert(
        JSON.stringify(convert({ re: 4, im: 0 })) === JSON.stringify([4.0, 0.0]),
        ""Test 2 Failed"",
        convert({ re: 4, im: 0 })
    ),
    console.assert(
        JSON.stringify(convert({ re: 5, im: 0 })) === JSON.stringify([5.0, 0.0]),
        ""Test 3 Failed"",
        convert({ re: 5, im: 0 })
    )
]",
252, this   function to count integers from a given list.,"function countInteger(list1) {
    let ctr = 0;
    for (let i of list1) {
        if (typeof i === ""number"" && Number.isInteger(i)) {
            ctr++;
        }
    }
    return ctr;
}",253,"[console.assert(countInteger([1,2,'abc',1.2]) === 2), console.assert(countInteger([1,2,3]) === 3), console.assert(countInteger([1,1.2,4,5.1]) === 2)]",
253, this function to find all words starting with a or e in a given string.,"function words_ae(text) {
    return text.match(/\b[ae]\w*/gi) || []; 
}",254,"[
    console.assert(
        JSON.stringify(words_ae(""programe"")) === JSON.stringify([]),
        ""Test 1 Failed"",
        words_ae(""programe"")
    ),
    console.assert(
        JSON.stringify(words_ae(""assert statement"")) === JSON.stringify([""assert""]),
        ""Test 2 Failed"",
        words_ae(""assert statement"")
    ),
    console.assert(
        JSON.stringify(words_ae(""an example of an assertion"")) === JSON.stringify([""an"", ""example"", ""an"", ""assertion""]),
        ""Test 3 Failed"",
        words_ae(""an example of an assertion"")
    )
]",
254, this function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"function combinationsColors(l, n) {
    function* combinationsWithReplacement(arr, n) {
        const indices = Array(n).fill(0);

        while (true) {
            yield indices.map(i => arr[i]);

            let i = n - 1;
            while (i >= 0 && indices[i] === arr.length - 1) {
                i--;
            }
            if (i < 0) break;
            indices[i]++;
            for (let j = i + 1; j < n; j++) {
                indices[j] = indices[i];
            }
        }
    }

    return Array.from(combinationsWithReplacement(l, n));
}",255,"[
console.assert(
    JSON.stringify(combinationsColors([""Red"", ""Green"", ""Blue""], 1)) ===
        JSON.stringify([[""Red""], [""Green""], [""Blue""]])
),
console.assert(
    JSON.stringify(combinationsColors([""Red"", ""Green"", ""Blue""], 2)) ===
        JSON.stringify([
            [""Red"", ""Red""],
            [""Red"", ""Green""],
            [""Red"", ""Blue""],
            [""Green"", ""Green""],
            [""Green"", ""Blue""],
            [""Blue"", ""Blue""],
        ])
),
console.assert(
    JSON.stringify(combinationsColors([""Red"", ""Green"", ""Blue""], 3)) ===
        JSON.stringify([
            [""Red"", ""Red"", ""Red""],
            [""Red"", ""Red"", ""Green""],
            [""Red"", ""Red"", ""Blue""],
            [""Red"", ""Green"", ""Green""],
            [""Red"", ""Green"", ""Blue""],
            [""Red"", ""Blue"", ""Blue""],
            [""Green"", ""Green"", ""Green""],
            [""Green"", ""Green"", ""Blue""],
            [""Green"", ""Blue"", ""Blue""],
            [""Blue"", ""Blue"", ""Blue""],
        ])
)]",
255, this   function to count the number of prime numbers less than a given non-negative number.,"function countPrimesNums(n) {
    let ctr = 0;
    for (let num = 2; num < n; num++) {
        let isPrime = true;
        for (let i = 2; i * i <= num; i++) {
            if (num % i === 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            ctr++;
        }
    }
    return ctr;
}",256," [
    console.assert(countPrimesNums(5) === 2),
    console.assert(countPrimesNums(10) === 4),
    console.assert(countPrimesNums(100) === 25)
]",
256, this function to swap two numbers.,"
function swapNumbers(a, b) {
    let temp = a;
    a = b;
    b = temp;
    return [a, b];
}
",257,"
[console.assert(swapNumbers(10, 20)[0] === 20 && swapNumbers(10, 20)[1] === 10), console.assert(swapNumbers(15, 17)[0] === 17 && swapNumbers(15, 17)[1] === 15), console.assert(swapNumbers(100, 200)[0] === 200 && swapNumbers(100, 200)[1] === 100)]
",
257, this function to find number of odd elements in the given list using lambda function.,"
function countOdd(arrayNums) {
    const countOdd = arrayNums.filter(x => x % 2 !== 0).length;
    return countOdd;
}
",258,"
console.assert(countOdd([1, 2, 3, 5, 7, 8, 10]) === 4);
console.assert(countOdd([10, 15, 14, 13, -18, 12, -20]) === 2);
console.assert(countOdd([1, 2, 4, 8, 9]) === 2);
",
258, this function to maximize the given two tuples.,"
function maximizeElements(testTup1, testTup2) {
    let res = testTup1.map((tup1, index) => 
        tup1.map((a, i) => Math.max(a, testTup2[index][i]))
    );
    return res;
}
",259,"[
  console.assert(JSON.stringify(maximizeElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[6, 7], [4, 9], [2, 9], [7, 10]])),
  console.assert(JSON.stringify(maximizeElements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[7, 8], [5, 10], [3, 10], [8, 11]])),
  console.assert(JSON.stringify(maximizeElements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[8, 9], [6, 11], [4, 11], [9, 12]]))
]",
259, this function to find the nth newmanâ€“shanksâ€“williams prime number.,"
function newmanPrime(n) {
    if (n === 0 || n === 1) {
        return 1;
    }
    return 2 * newmanPrime(n - 1) + newmanPrime(n - 2);
}
",260,"
[console.assert(newmanPrime(3) === 7), console.assert(newmanPrime(4) === 17), console.assert(newmanPrime(5) === 41)]
",
260, this function to perform mathematical division operation across the given tuples.,"
function divisionElements(testTup1, testTup2) {
    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));
    return res;
}
",261,"[
  console.assert(JSON.stringify(divisionElements([10, 4, 6, 9], [5, 2, 3, 3])) === JSON.stringify([2, 2, 2, 3])),
  console.assert(JSON.stringify(divisionElements([12, 6, 8, 16], [6, 3, 4, 4])) === JSON.stringify([2, 2, 2, 4])),
  console.assert(JSON.stringify(divisionElements([20, 14, 36, 18], [5, 7, 6, 9])) === JSON.stringify([4, 2, 6, 2]))
]",
261, this function to split a given list into two parts where the length of the first part of the list is given.,"function splitTwoParts(list1, L) {
    return [list1.slice(0, L), list1.slice(L)];
}",262,"[
    console.assert(
        JSON.stringify(splitTwoParts([1, 1, 2, 3, 4, 4, 5, 1], 3)) === JSON.stringify([[1, 1, 2], [3, 4, 4, 5, 1]])
    ),
    console.assert(
        JSON.stringify(splitTwoParts(['a', 'b', 'c', 'd'], 2)) === JSON.stringify([['a', 'b'], ['c', 'd']])
    ),
    console.assert(
        JSON.stringify(splitTwoParts(['p', 'y', 't', 'h', 'o', 'n'], 4)) === JSON.stringify([['p', 'y', 't', 'h'], ['o', 'n']])
    )
]",
262, this function to merge two dictionaries.,"function mergeDict(d1, d2) {
    let d = Object.assign({}, d1);
    Object.assign(d, d2);
    return d;
}",263,"[
    console.assert(
        JSON.stringify(mergeDict({a: 100, b: 200}, {x: 300, y: 200})) === JSON.stringify({a: 100, b: 200, x: 300, y: 200})
    ),
    console.assert(
        JSON.stringify(mergeDict({a: 900, b: 900, d: 900}, {a: 900, b: 900, d: 900})) === JSON.stringify({a: 900, b: 900, d: 900})
    ),
    console.assert(
        JSON.stringify(mergeDict({a: 10, b: 20}, {x: 30, y: 40})) === JSON.stringify({a: 10, b: 20, x: 30, y: 40})
    )
]",
263, this function to calculate a dogs age in dogs years.,"
function dogAge(h_age) {
    if (h_age < 0) {
        exit();
    } else if (h_age <= 2) {
        var d_age = h_age * 10.5;
    } else {
        var d_age = 21 + (h_age - 2) * 4;
    }
    return d_age;
}
",264,"
[console.assert(dogAge(12) === 61), console.assert(dogAge(15) === 73), console.assert(dogAge(24) === 109)]
",
264, this function to split a list for every nth element.,"function listSplit(S, step) {
    return Array.from({ length: step }, (_, i) =>
        S.filter((_, index) => index % step === i)
    );
}",265,"[
    console.assert(
        JSON.stringify(listSplit(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)) ===
        JSON.stringify([['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']])
    ),
    console.assert(
        JSON.stringify(listSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)) ===
        JSON.stringify([[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])
    ),
    console.assert(
        JSON.stringify(listSplit([' ', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)) ===
        JSON.stringify([[' ', 'C', 'DBMS'], ['java', 'C++', 'SQL']])
    )
]",
265, this function to find the lateral surface area of a cube.,"
function lateralsurface_cube(l) {
  const LSA = 4 * (l * l);
  return LSA;
}
",266,"
[console.assert(lateralsurface_cube(5) === 100), console.assert(lateralsurface_cube(9) === 324), console.assert(lateralsurface_cube(10) === 400)]
",
266, this   function to find the sum of squares of first n odd natural numbers.,"
function square_Sum(n) {
    return Math.floor(n * (4 * n * n - 1) / 3);
}
",267,"
[console.assert(square_Sum(2) === 10), console.assert(square_Sum(3) === 35), console.assert(square_Sum(4) === 84)]
",
267, this function to find the nth star number.,"
function findStarNum(n) { 
    return (6 * n * (n - 1) + 1); 
}
",268,"
[console.assert(findStarNum(3) === 37), console.assert(findStarNum(4) === 73), console.assert(findStarNum(5) === 121)]
",
268, this function to find the ascii value of a character.,"
function ascii_value(k) {
  let ch = k;
  return ch.charCodeAt(0);
}
",269,"[
  console.assert(ascii_value('A') === 65),
  console.assert(ascii_value('R') === 82),
  console.assert(ascii_value('S') === 83)
]",
269, this   function to find the sum of even numbers at even positions.,"
function sumEvenAndEvenIndex(arr, n) {  
    let sum = 0;  
    for (let i = 0; i < n; i += 2) {  
        if (arr[i] % 2 === 0) {  
            sum += arr[i];  
        }  
    }  
    return sum;  
}
",270,"
[console.assert(sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6) === 30), console.assert(sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10) === 26), console.assert(sumEvenAndEvenIndex([5, 6, 12, 1], 4) === 12)]
",
270, this   function to find the sum of fifth power of first n even natural numbers.,"
function evenPowerSum(n) { 
    let sum = 0; 
    for (let i = 1; i <= n; i++) { 
        let j = 2 * i; 
        sum += (j * j * j * j * j); 
    } 
    return sum; 
}
",271,"
[console.assert(evenPowerSum(2) === 1056), console.assert(evenPowerSum(3) === 8832), console.assert(evenPowerSum(1) === 32)]
",
271, this function to perfom the rear element extraction from list of tuples records.,"function rearExtract(testList) {
    let res = testList.map(lis => lis[lis.length - 1]);
    return res;
}",272,"[
    console.assert(
        JSON.stringify(rearExtract([[1, 'Rash', 21], [2, 'Varsha', 20], [3, 'Kil', 19]])) === JSON.stringify([21, 20, 19])
    ),
    console.assert(
        JSON.stringify(rearExtract([[1, 'Sai', 36], [2, 'Ayesha', 25], [3, 'Salman', 45]])) === JSON.stringify([36, 25, 45])
    ),
    console.assert(
        JSON.stringify(rearExtract([[1, 'Sudeep', 14], [2, 'Vandana', 36], [3, 'Dawood', 56]])) === JSON.stringify([14, 36, 56])
    )
]",
272, this function to substract the contents of one tuple with corresponding index of other tuple.,"
function subtractElements(test_tup1, test_tup2) {
  const res = test_tup1.map((value, index) => value - test_tup2[index]);
  return res;
}
",273,"
[console.assert(subtractElements([10, 4, 5], [2, 5, 18]).toString() === [8, -1, -13].toString()), console.assert(subtractElements([11, 2, 3], [24, 45 ,16]).toString() === [-13, -43, -13].toString()), console.assert(subtractElements([7, 18, 9], [10, 11, 12]).toString() === [-3, 7, -3].toString())]
",
273, this   function to find sum of even index binomial coefficients.,"
function evenBinomialCoeffSum(n) { 
    return 1 << (n - 1); 
}
",274,"
[console.assert(evenBinomialCoeffSum(4) === 8), console.assert(evenBinomialCoeffSum(6) === 32), console.assert(evenBinomialCoeffSum(2) === 2)]
",
274, this   function to find the position of the last removed element from the given array.,"function getPosition(a, n, m) {
    for (let i = 0; i < n; i++) {
        a[i] = Math.floor(a[i] / m) + (a[i] % m !== 0 ? 1 : 0);
    }
    let result = -1, maxx = -1;
    for (let i = n - 1; i >= 0; i--) {
        if (maxx < a[i]) {
            maxx = a[i];
            result = i;
        }
    }
    return result + 1; 
}",275,"[
    console.assert(getPosition([2, 5, 4], 3, 2) === 2),
    console.assert(getPosition([4, 3], 2, 2) === 2),
    console.assert(getPosition([1, 2, 3, 4], 4, 1) === 4)
]",
275, this function to find the volume of a cylinder.,"
function volumeCylinder(r, h) {
  let volume = 3.1415 * r * r * h;
  return volume;
}
",276,"
[console.assert(volumeCylinder(10, 5) === 1570.7500000000002), console.assert(volumeCylinder(4, 5) === 251.32000000000002), console.assert(volumeCylinder(4, 10) === 502.64000000000004)]
",
276, this function to filter a dictionary based on values.,"function dictFilter(dict, n) {
    let result = {};
    for (let [key, value] of Object.entries(dict)) {  
        if (value >= n) {
            result[key] = value;
        }
    }
 
    return result;
}",277,"[
  console.assert(JSON.stringify(dictFilter({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 170)) === JSON.stringify({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190 })),
  console.assert(JSON.stringify(dictFilter({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 180)) === JSON.stringify({ 'Alden Cantrell': 180, 'Pierre Cox': 190 })),
  console.assert(JSON.stringify(dictFilter({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 190)) === JSON.stringify({ 'Pierre Cox': 190 }))
]",
277, this function to find the element count that occurs before the record in the given tuple.,"function countFirstElements(testTup) {
    let count = 0; 
    for (count = 0; count < testTup.length; count++) {
        const ele = testTup[count];
        if (Array.isArray(ele)) {
            break; 
        }
    }
    return count;
}",278,"[
    console.assert(countFirstElements([1, 5, 7, [4, 6], 10]) === 3),
    console.assert(countFirstElements([2, 9, [5, 7], 11]) === 2),
    console.assert(countFirstElements([11, 15, 5, 8, [2, 3], 8]) === 4)
]",
278, this function to find the nth decagonal number.,"
function isNumDecagonal(n) {
    return 4 * n * n - 3 * n;
}
",279,"[
  console.assert(isNumDecagonal(3) === 27),
  console.assert(isNumDecagonal(7) === 175),
  console.assert(isNumDecagonal(10) === 370)
]",
279, this function to search an element in the given array by using sequential search.,"
function sequentialSearch(dlist, item) {
    let pos = 0;
    let found = false;
    while (pos < dlist.length && !found) {
        if (dlist[pos] === item) {
            found = true;
        } else {
            pos = pos + 1;
        }
    }
    return [found, pos];
}
",280,"
[console.assert(sequentialSearch([11,23,58,31,56,77,43,12,65,19],31)[0] === true && sequentialSearch([11,23,58,31,56,77,43,12,65,19],31)[1] === 3), console.assert(sequentialSearch([12, 32, 45, 62, 35, 47, 44, 61],61)[0] === true && sequentialSearch([12, 32, 45, 62, 35, 47, 44, 61],61)[1] === 7), console.assert(sequentialSearch([9, 10, 17, 19, 22, 39, 48, 56],48)[0] === true && sequentialSearch([9, 10, 17, 19, 22, 39, 48, 56],48)[1] === 6)]
",
280, this   function to check if the elements of a given list are unique or not.,"
function allUnique(testList) {
    return testList.length === new Set(testList).size;
}
",281,"
[console.assert(allUnique([1,2,3]) === true), console.assert(allUnique([1,2,1,2]) === false), console.assert(allUnique([1,2,3,4,5]) === true)]
",
282, this   function to check whether the frequency of each digit is less than or equal to the digit itself.,"
function validate(n) {
    for (let i = 0; i < 10; i++) {
        let temp = n;
        let count = 0;
        while (temp) {
            if (temp % 10 === i) {
                count++;
            }
            if (count > i) {
                return false;
            }
            temp = Math.floor(temp / 10);
        }
    }
    return true;
}
",283,"
[console.assert(validate(1234) === true), console.assert(validate(51241) === false), console.assert(validate(321) === true)]",
284, this function that matches a string that has an a followed by two to three b.,"function textMatchTwoThree(text) {
    const patterns = /ab{2,3}/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",285,"
[console.assert(textMatchTwoThree(""ac"") === ""Not matched!""), console.assert(textMatchTwoThree(""dc"") === ""Not matched!""), console.assert(textMatchTwoThree(""abbbba"") === ""Found a match!"")]
",
285, this function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"
function maxSubArraySumRepeated(a, n, k) { 
    let maxSoFar = -2147483648; 
    let maxEndingHere = 0; 
    for (let i = 0; i < n * k; i++) { 
        maxEndingHere += a[i % n]; 
        if (maxSoFar < maxEndingHere) { 
            maxSoFar = maxEndingHere; 
        } 
        if (maxEndingHere < 0) { 
            maxEndingHere = 0; 
        } 
    } 
    return maxSoFar; 
}
",286,"[
  console.assert(maxSubArraySumRepeated([10, 20, -30, -1], 4, 3) === 30),
  console.assert(maxSubArraySumRepeated([-1, 10, 20], 3, 2) === 59),
  console.assert(maxSubArraySumRepeated([-1, -2, -3], 3, 3) === -1)
]",
286, this   function to find the sum of squares of first n even natural numbers.,"
function square_Sum(n) {  
    return Math.floor(2 * n * (n + 1) * (2 * n + 1) / 3);
}
",287,"
[console.assert(square_Sum(2) === 20), console.assert(square_Sum(3) === 56), console.assert(square_Sum(4) === 120)]",
287, this function to count array elements having modular inverse under given prime number p equal to itself.,"function modular_inverse(arr, N, P) {
    let current_element = 0;
    for (let i = 0; i < N; i++) {
        if ((arr[i] * arr[i]) % P === 1) {
            current_element++;
        }
    }
    return [current_element];
}",288,"[
    console.assert(
        JSON.stringify(modular_inverse([1, 6, 4, 5], 4, 7)) === JSON.stringify([2]),
        ""Test case 1 failed""
    ),
    console.assert(
        JSON.stringify(modular_inverse([1, 3, 8, 12, 12], 5, 13)) === JSON.stringify([3]),
        ""Test case 2 failed""
    ),
    console.assert(
        JSON.stringify(modular_inverse([2, 3, 4, 5], 4, 6)) === JSON.stringify([1]),
        ""Test case 3 failed""
    )
]",
288, this   function to calculate the number of odd days in a given year.,"function oddDays(N) {
    const hund1 = Math.floor(N / 100);
    const hund4 = Math.floor(N / 400);
    let leap = Math.floor(N / 4);
    let ordd = N - leap;
    if (hund1) {
        ordd += hund1;
        leap -= hund1;
    }
    if (hund4) {
        ordd -= hund4;
        leap += hund4;
    }
    const days = ordd + leap * 2;
    const odd = days % 7;
    return [odd];
}",289,"[
    console.assert(
        JSON.stringify(oddDays(100)) === JSON.stringify([5]),
        ""Test case 1 failed""
    ),
    console.assert(
        JSON.stringify(oddDays(50)) === JSON.stringify([6]),
        ""Test case 2 failed""
    ),
    console.assert(
        JSON.stringify(oddDays(75)) === JSON.stringify([2]),
        ""Test case 3 failed""
    )
]",
289, this function to find the list of lists with maximum length.,"
function max_length(list1) {
    const max_length = Math.max(...list1.map(x => x.length));
    const max_list = list1.reduce((a, b) => a.length > b.length ? a : b);
    return [max_length, max_list];
}
",290,"[
  console.assert(max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === (3, [13, 15, 17])),
  console.assert(max_length([[1], [5, 7], [10, 12, 14, 15]]) === (4, [10, 12, 14, 15])),
  console.assert(max_length([[5], [15, 20, 25]]) === (3, [15, 20, 25]))
]",
290, this function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"function countNoOfWays(n, k) {
    const dp = new Array(n + 1).fill(0);
    const mod = 1000000007;

    dp[1] = k;
    dp[2] = (k * k) % mod;

    for (let i = 3; i <= n; i++) {
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;
    }

    return [dp[n]];
}",291,"[
    console.assert(
        countNoOfWays(2, 4)[0] === 16,
        ""Test case 1 failed""
    ),
    console.assert(
        countNoOfWays(3, 2)[0] === 6,
        ""Test case 2 failed""
    ),
    console.assert(
        countNoOfWays(4, 4)[0] === 228,
        ""Test case 3 failed""
    )
]",
291, this   function to find quotient of two numbers.,"
function find(n, m) {
    let q = Math.floor(n / m);
    return q;
}
",292,"[
  console.assert(find(10, 3) === 3),
  console.assert(find(4, 2) === 2),
  console.assert(find(20, 5) === 4)
]",
292, this function to find the third side of a right angled triangle.,"function otherside_rightangle(w, h) {
    let s = Math.sqrt((w * w) + (h * h));
    return s;
}",293,"[
    console.assert(
        otherside_rightangle(7, 8) === 10.63014581273465,
        ""Test case 1 failed""
    ),
    console.assert(
        otherside_rightangle(3, 4) === 5,
        ""Test case 2 failed""
    ),
    console.assert(
        otherside_rightangle(7, 15) === 16.55294535724685,
        ""Test case 3 failed""
    )
]",
293, this function to find the maximum value in a given heterogeneous list.,"function maxVal(listVal) {
    let maxVal = Math.max(...listVal.filter(i => typeof i === ""number""));
    return maxVal;
}",294,"[
    console.assert(maxVal([undefined, 3, 2, 4, 5]) === 5, ""Test case 1 failed""),
    console.assert(maxVal([undefined, 15, 20, 25]) === 25, ""Test case 2 failed""),
    console.assert(maxVal([undefined, 30, 20, 40, 50]) === 50, ""Test case 3 failed"")
]",
294, this function to return the sum of all divisors of a number.,"
function sumDiv(number) {
    let divisors = [1];
    for (let i = 2; i < number; i++) {
        if (number % i === 0) {
            divisors.push(i);
        }
    }
    return divisors.reduce((a, b) => a + b, 0);
}
",295,"
[console.assert(sumDiv(8) === 7), console.assert(sumDiv(12) === 16), console.assert(sumDiv(7) === 1)]
",
295, this   function to count inversions in an array.,"function get_Inv_Count(arr, n) { 
    let inv_count = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] > arr[j]) { 
                inv_count++; 
            } 
        } 
    } 
    return inv_count; 
}",296,"[console.assert(get_Inv_Count([1, 20, 6, 4, 5], 5) === 5, ""Test case 1 failed""),
console.assert(get_Inv_Count([1, 2, 1], 3) === 1, ""Test case 2 failed""),
console.assert(get_Inv_Count([1, 2, 5, 6, 1], 5) === 3, ""Test case 3 failed"")]",
296, this function to flatten a given nested list structure.,"
function flattenList(list1) {
    let resultList = [];
    if (!list1) return resultList;
    let stack = [Array.from(list1)];
  
    while (stack.length) {
        let cNum = stack.pop();
        let next = cNum.pop();
        if (cNum.length) stack.push(cNum);
        if (Array.isArray(next)) {
            if (next.length) stack.push(Array.from(next));
        } else {
            resultList.push(next);
        }
    }
    resultList.reverse();
    return resultList;
}
",297,"[console.assert(JSON.stringify(flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])) === JSON.stringify([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])),
console.assert(JSON.stringify(flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])) === JSON.stringify([10, 20, 40, 30, 56, 25, 10, 20, 33, 40])),
console.assert(JSON.stringify(flattenList([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) === JSON.stringify([1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]))
]",
297, this function to find the nested list elements which are present in another list.,"function intersectionNestedLists(mainList, nestedLists) {
    return nestedLists.map(sublist => sublist.filter(item => mainList.includes(item)));
}",298,"[console.assert(
    JSON.stringify(
        intersectionNestedLists(
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
            [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
        )
    ) === JSON.stringify([[12], [7, 11], [1, 5, 8]]),
    ""Test 1 Failed""
),
console.assert(
    JSON.stringify(
        intersectionNestedLists(
            [[2, 3, 1], [4, 5], [6, 8]], 
            [[4, 5], [6, 8]]
        )
    ) === JSON.stringify([[], []]),
    ""Test 2 Failed""
),
console.assert(
    JSON.stringify(
        intersectionNestedLists(
            ['john', 'amal', 'joel', 'george'], 
            [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]
        )
    ) === JSON.stringify([['john'], ['john'], ['john'], []]),
    ""Test 3 Failed""
)]",
298, this function to calculate the maximum aggregate from the list of tuples.,"function maxAggregate(stdata) {
    const temp = {};
    for (const [name, marks] of stdata) {
        temp[name] = (temp[name] || 0) + marks;
    }
    return Object.entries(temp).reduce((max, curr) => curr[1] > max[1] ? curr : max);
}",299,"[console.assert(JSON.stringify(maxAggregate([['Juan Whelan', 90], ['Sabah Colley', 88], ['Peter Nichols', 7], ['Juan Whelan', 122], ['Sabah Colley', 84]])) === JSON.stringify(['Juan Whelan', 212])),
console.assert(JSON.stringify(maxAggregate([['Juan Whelan', 50], ['Sabah Colley', 48], ['Peter Nichols', 37], ['Juan Whelan', 22], ['Sabah Colley', 14]])) === JSON.stringify(['Juan Whelan', 72])),
console.assert(JSON.stringify(maxAggregate([['Juan Whelan', 10], ['Sabah Colley', 20], ['Peter Nichols', 30], ['Juan Whelan', 40], ['Sabah Colley', 50]])) === JSON.stringify(['Sabah Colley', 70]))]",
299, this function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"
function countBinarySeq(n) {
    let nCr = 1;
    let res = 1;
    for (let r = 1; r <= n; r++) {
        nCr = (nCr * (n + 1 - r)) / r;
        res += nCr * nCr;
    }
    return res;
}
",300,"
[console.assert(countBinarySeq(1) === 2.0), console.assert(countBinarySeq(2) === 6.0), console.assert(countBinarySeq(3) === 20.0)]
",
300, this function to find the depth of a dictionary.,"function dictDepth(d)
{
    if (typeof d === 'object' && d !== null && !Array.isArray(d))
    {
        let maxDepth = 0;
        for (let key in d)
        {
            if (typeof d[key] === 'object' && d[key] !== null)
            {
                maxDepth = Math.max(maxDepth, dictDepth(d[key]));
            }
        }
        return 1 + maxDepth;
    }
    return 0;
}",301,"[console.assert(dictDepth({a: 1, b: {c: {d: {}}}}) === 4),
console.assert(dictDepth({a: 1, b: {c: {}}}) === 3),
console.assert(dictDepth({1: ""Sun"", 2: {3: {4: ""Mon""}}}) === 3)]",
301, this   function to find the most significant bit number which is also a set bit.,"
function set_Bit_Number(n) {
    if (n === 0) {
        return 0;
    }
    let msb = 0;
    n = Math.floor(n / 2);
    while (n > 0) {
        n = Math.floor(n / 2);
        msb += 1;
    }
    return (1 << msb);
}
",302,"
[console.assert(set_Bit_Number(6) === 4), console.assert(set_Bit_Number(10) === 8), console.assert(set_Bit_Number(18) === 16)]
",
302, this   function to check whether the count of inversion of two types are same or not.,"
function solve(a, n) {   
    let mx = -Infinity;
    for (let j = 1; j < n; j++) {  
        if (mx > a[j]) {  
            return false;  
        }  
        mx = Math.max(mx, a[j - 1]);    
    }  
    return true; 
}
",303,"
[console.assert(solve([1,0,2],3) === true), console.assert(solve([1,2,0],3) === false), console.assert(solve([1,2,1],3) === true)]
",
303, this   function to find element at a given index after number of rotations.,"
function find_Element(arr, ranges, rotations, index) {  
    for (let i = rotations - 1; i >= 0; i--) { 
        let left = ranges[i][0]; 
        let right = ranges[i][1]; 
        if (left <= index && right >= index) { 
            if (index === left) { 
                index = right; 
            } else { 
                index = index - 1; 
            } 
        } 
    } 
    return arr[index]; 
}
",304,"
[console.assert(find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) === 3), 
 console.assert(find_Element([1,2,3,4],[[0,1],[0,2]],1,2) === 3), 
 console.assert(find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) === 1)]
",
304, this function to match two words from a list of words starting with letter p.,"function startWithP(words) {
    for (let w of words) {
        let m = w.match(/\b(P\w*)\b(?:\W+(P\w*))?/); 
        if (m) {
            return m.slice(1, 3).filter(Boolean);
        }
    }
    return [];
}",305,"[console.assert(JSON.stringify(startWithP([""  PHP"", ""Java JavaScript""])) === JSON.stringify([""PHP""])),
console.assert(JSON.stringify(startWithP([""  Programming"", ""Java Programming""])) === JSON.stringify([""Programming""])),
console.assert(JSON.stringify(startWithP([""Pqrst Pqr"", ""qrstuv""])) === JSON.stringify([""Pqrst"", ""Pqr""]))]",
305," this function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","[
    console.assert(maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) === 11),
    console.assert(maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) === 7),
    console.assert(maxSumIncreasingSubseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) === 71)
]",306,"function maxSumIncreasingSubseq(a, n, index, k) {
    let dp = Array.from({ length: n }, () => Array(n).fill(0));
    for (let i = 0; i < n; i++) {
        if (a[i] > a[0]) {
            dp[0][i] = a[i] + a[0];
        } else {
            dp[0][i] = a[i];
        }
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (a[j] > a[i] && j > i) {
                if (dp[i - 1][i] + a[j] > dp[i - 1][j]) {
                    dp[i][j] = dp[i - 1][i] + a[j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    return dp[index][k];  
}",
307, this function to find the specified number of largest products from two given lists.,"function largeProduct(nums1, nums2, N) {
    const result = [...nums1.flatMap(x => nums2.map(y => x * y))].sort((a, b) => b - a).slice(0, N);
    return result;
}",308,"[
    console.assert(JSON.stringify(largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)) === JSON.stringify([60, 54, 50]), ""Test 1 Failed""),
    console.assert(JSON.stringify(largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)) === JSON.stringify([60, 54, 50, 48]), ""Test 2 Failed""),
    console.assert(JSON.stringify(largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)) === JSON.stringify([60, 54, 50, 48, 45]), ""Test 3 Failed"")
]",
309, this function to convert a given string to a tuple.,"function stringToTuple(str1) {
    let result = Array.from(str1).filter(x => !/\s/.test(x));
    return result;  
}",310,"[
    console.assert(JSON.stringify(stringToTuple(""  3.0"")) === JSON.stringify(['3', '.', '0']), ""Test 1 Failed""),
    console.assert(JSON.stringify(stringToTuple(""item1"")) === JSON.stringify(['i', 't', 'e', 'm', '1']), ""Test 2 Failed""),
    console.assert(JSON.stringify(stringToTuple(""15.10"")) === JSON.stringify(['1', '5', '.', '1', '0']), ""Test 3 Failed"")
]",
310, this   function to set the left most unset bit.,"
function setLeftMostUnsetBit(n) {
    if (!(n & (n + 1))) {
        return n;
    }
    let pos = 0, temp = n, count = 0;
    while (temp) {
        if (!(temp & 1)) {
            pos = count;
        }
        count += 1; 
        temp >>= 1;
    }
    return (n | (1 << pos));
}
",311,"[
  console.assert(setLeftMostUnsetBit(10) === 14),
  console.assert(setLeftMostUnsetBit(12) === 14),
  console.assert(setLeftMostUnsetBit(15) === 15)
]",
311, this function to find the volume of a cone.,"function volumeCone(r, h) {
    var volume = (1.0 / 3) * Math.PI * r * r * h;
    return volume;
}",312,"[
    console.assert(volumeCone(5,12) === 314.15926535897927),
    console.assert(volumeCone(10,15) === 1570.7963267948965),
    console.assert(volumeCone(19,17) === 6426.651371693521)
]",
312, this   function to print positive numbers in a list.,"function pos_nos(list1) {
    let positiveNumbers = []; 
    for (let num of list1) {
        if (num >= 0) {
            positiveNumbers.push(num); 
        }
    }
    return positiveNumbers; 
}",313,"[
    console.assert(JSON.stringify(pos_nos([-1,-2,1,2])) === JSON.stringify([1, 2]), ""Test case failed""),
    console.assert(JSON.stringify(pos_nos([3,4,-5])) === JSON.stringify([3, 4]), ""Test case failed""),
    console.assert(JSON.stringify(pos_nos([-2,-3,1])) === JSON.stringify([1]), ""Test case failed"")
]",
313, this function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"
function maxSumRectangularGrid(grid, n) {
    let incl = Math.max(grid[0][0], grid[1][0]);
    let excl = 0;
    for (let i = 1; i < n; i++) {
        let excl_new = Math.max(excl, incl);
        incl = excl + Math.max(grid[0][i], grid[1][i]);
        excl = excl_new;
    }
    return Math.max(excl, incl);
}
",314,"[
  console.assert(maxSumRectangularGrid([[1, 4, 5], [2, 0, 0]], 3) === 7),
  console.assert(maxSumRectangularGrid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5) === 24),
  console.assert(maxSumRectangularGrid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5) === 81)
]",
314, this   function to find the first maximum length of even word.,"function find_Max_Len_Even(str) {
    let n = str.length;
    let i = 0;
    let currlen = 0;
    let maxlen = 0;
    let st = -1;

    while (i < n) {
        if (str[i] === ' ' || i === n - 1) {  
            if (str[i] !== ' ') {
                currlen += 1; 
            }

            if (currlen % 2 === 0) {
                if (maxlen < currlen) {
                    maxlen = currlen;
                    st = i - currlen + 1;
                }
            }
            currlen = 0;
        } else {
            currlen += 1;
        }
        i += 1;
    }

    if (st === -1) {
        return ""-1"";
    }
    return str.substring(st, st + maxlen);
}",315,"[
    console.assert(find_Max_Len_Even(""  language"") === ""language"", ""Test case failed""),
    console.assert(find_Max_Len_Even(""maximum even length"") === ""length"", ""Test case failed""),
    console.assert(find_Max_Len_Even(""eve"") === ""-1"", ""Test case failed"")
]",
315, this function to find the index of the last occurrence of a given number in a sorted array.,"
function findLastOccurrence(A, x) {
    let left = 0, right = A.length - 1;
    let result = -1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (x === A[mid]) {
            result = mid;
            left = mid + 1;
        } else if (x < A[mid]) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}
",316,"
[console.assert(findLastOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 3), console.assert(findLastOccurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) === 9), console.assert(findLastOccurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) === 6)]
",
316, this function to reflect the modified run-length encoding from a list.,"function modifiedEncode(alist) {
    function ctrEle(el) {
        if (el.length > 1) return [el.length, el[0]];
        else return el[0];
    }

    const grouped = [];
    let currentKey = null;
    let currentGroup = [];

    alist.forEach((item) => {
        if (item !== currentKey) {
            if (currentGroup.length > 0) {
                grouped.push(ctrEle(currentGroup));
            }
            currentKey = item;
            currentGroup = [item];
        } else {
            currentGroup.push(item);
        }
    });

    if (currentGroup.length > 0) {
        grouped.push(ctrEle(currentGroup));
    }

    return grouped;
}",317,"
[console.assert(modifiedEncode([1, 1, 2, 3, 4, 4, 5, 1]).toString() === [[2, 1], 2, 3, [2, 4], 5, 1].toString()), console.assert(modifiedEncode(""a[console.assert(modifiedEncode([1, 1, 2, 3, 4, 4, 5, 1]).toString() === [[2, 1], 2, 3, [2, 4], 5, 1].toString()),
console.assert(modifiedEncode(""automatically"".split('')).toString() === [""a"", ""u"", ""t"", ""o"", ""m"", ""a"", ""t"", ""i"", ""c"", ""a"", [2, ""l""], ""y""].toString()),
console.assert(modifiedEncode("" "".split('')).toString() === [' '].toString())]utomatically"").toString() === [""a"", ""u"", ""t"", ""o"", ""m"", ""a"", ""t"", ""i"", ""c"", ""a"", [2, ""l""], ""y""].toString()), console.assert(modifiedEncode("" "").toString() === [""p"", ""y"", ""t"", ""h"", ""o"", ""n""].toString())]
",
317, this   function to find the maximum volume of a cuboid with given sum of sides.,"
function maxVolume(s) {
    let maxvalue = 0;
    for (let i = 1; i < s - 1; i++) {
        for (let j = 1; j < s; j++) {
            let k = s - i - j;
            maxvalue = Math.max(maxvalue, i * j * k);
        }
    }
    return maxvalue;
}
",318,"
[console.assert(maxVolume(8) === 18), console.assert(maxVolume(4) === 2), console.assert(maxVolume(1) === 0)]
",
318, this function to find all five characters long word in the given string by using regex.,"
function findLongWord(text) {
  return text.match(/\b\w{5}\b/g);
}
",319,"[
  console.assert(findLongWord(""Please move back to strem"").toString() === [""strem""].toString()),
  console.assert(findLongWord(""4K Ultra HD streaming player"").toString() === [""Ultra""].toString()),
  console.assert(findLongWord(""Streaming Media Player"").toString() === [""Media""].toString())
]",
319, this function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"
function sumDifference(n) {
    let sumOfSquares = 0;
    let squareOfSum = 0;
    for (let num = 1; num <= n; num++) {
        sumOfSquares += num * num;
        squareOfSum += num;
    }
    squareOfSum = squareOfSum ** 2;
    return squareOfSum - sumOfSquares;
}
",320,"
[console.assert(sumDifference(12) === 5434), console.assert(sumDifference(20) === 41230), console.assert(sumDifference(54) === 2151270)]
",
320, this function to find the demlo number for the given number.,"
function find_demlo(s) {
    let l = s.length;
    let res = """";
    for (let i = 1; i <= l; i++) {
        res += i.toString();
    }
    for (let i = l - 1; i > 0; i--) {
        res += i.toString();
    }
    return res;
}
",321,"
[console.assert(find_demlo(""111111"") === ""12345654321""), console.assert(find_demlo(""1111"") === ""1234321""), console.assert(find_demlo(""13333122222"") === ""123456789101110987654321"")]
",
321, this function to find all index positions of the minimum values in a given list.,"
function positionMin(list1) {
    const minVal = Math.min(...list1);
    const minResult = list1.map((j, i) => j === minVal ? i : -1).filter(i => i !== -1);
    return [minResult];
}
",322,"
[console.assert(positionMin([12,33,23,10,67,89,45,667,23,12,11,10,54]).toString() === [3,11].toString()), 
 console.assert(positionMin([1,2,2,2,4,4,4,5,5,5,5]).toString() === [0].toString()), 
 console.assert(positionMin([2,1,5,6,8,3,4,9,10,11,8,12]).toString() === [1].toString())]
",
322, this function to re-arrange the given array in alternating positive and negative items.,"
function rightRotate(arr, n, outOfPlace, cur) {
    let temp = arr[cur];
    for (let i = cur; i > outOfPlace; i--) {
        arr[i] = arr[i - 1];
    }
    arr[outOfPlace] = temp;
    return arr;
}

function reArrange(arr, n) {
    let outOfPlace = -1;
    for (let index = 0; index < n; index++) {
        if (outOfPlace >= 0) {
            if ((arr[index] >= 0 && arr[outOfPlace] < 0) || (arr[index] < 0 && arr[outOfPlace] >= 0)) {
                arr = rightRotate(arr, n, outOfPlace, index);
                if (index - outOfPlace > 2) {
                    outOfPlace += 2;
                } else {
                    outOfPlace = -1;
                }
            }
        }
        if (outOfPlace === -1) {
            if ((arr[index] >= 0 && index % 2 === 0) || (arr[index] < 0 && index % 2 === 1)) {
                outOfPlace = index;
            }
        }
    }
    return arr;
}
",323,"[
  console.assert(JSON.stringify(reArrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) === JSON.stringify([-5, 5, -2, 2, -8, 4, 7, 1, 8, 0])),
  console.assert(JSON.stringify(reArrange([1, 2, 3, -4, -1, 4], 6)) === JSON.stringify([-4, 1, -1, 2, 3, 4])),
  console.assert(JSON.stringify(reArrange([4, 7, 9, 77, -4, 5, -3, -9], 8)) === JSON.stringify([-4, 4, -3, 7, -9, 9, 77, 5]))
]",
323, this function to extract the sum of alternate chains of tuples.,"function sumOfAlternates(testTuple) {
    let sum1 = 0;
    let sum2 = 0;
    for (let idx = 0; idx < testTuple.length; idx++) {
        let ele = testTuple[idx];
        if (idx % 2) {
            sum1 += ele;
        } else {
            sum2 += ele;
        }
    }
    return [sum1, sum2]; 
}",324,"[
console.assert(JSON.stringify(sumOfAlternates([5, 6, 3, 6, 10, 34])) === JSON.stringify([46, 18])),
console.assert(JSON.stringify(sumOfAlternates([1, 2, 3, 4, 5])) === JSON.stringify([6, 9])),
console.assert(JSON.stringify(sumOfAlternates([6, 7, 8, 9, 4, 5])) === JSON.stringify([21, 18]))
  ]",
324, this   function to find the minimum number of squares whose sum is equal to a given number.,"
function getMinSquares(n) {
    if (n <= 3) {
        return n;
    }
    let res = n;
    for (let x = 1; x <= n; x++) {
        let temp = x * x;
        if (temp > n) {
            break;
        } else {
            res = Math.min(res, 1 + getMinSquares(n - temp));
        }
    }
    return res;
}
",325,"
[console.assert(getMinSquares(6) === 3), console.assert(getMinSquares(2) === 2), console.assert(getMinSquares(4) === 1)]
",
325, this function to get the word with most number of occurrences in the given strings list.,"function mostOccurrences(testList) {
    const temp = {};
    for (const sub of testList) {
        sub.split(/\s+/).forEach(wrd => {
            temp[wrd] = (temp[wrd] || 0) + 1;
        });
    }

    const maxCount = Math.max(...Object.values(temp));
    const mostFrequentWords = Object.keys(temp).filter(word => temp[word] === maxCount);
    return [mostFrequentWords[0]];
}",326,"[console.assert(JSON.stringify(mostOccurrences([""UTS is best for RTF"", ""RTF love UTS""])) === JSON.stringify([""UTS""])),
console.assert(JSON.stringify(mostOccurrences([""Its been a great year"", ""this year is so worse"", ""this year is okay""])) === JSON.stringify([""year""])),
console.assert(JSON.stringify(mostOccurrences([""Families can be reunited"", ""people can be reunited"", ""Tasks can be achieved ""])) === JSON.stringify([""can""]))]",
326, this function to print check if the triangle is isosceles or not.,"
function checkIsosceles(x, y, z) {
  if (x === y || y === z || z === x) {
    return true;
  } else {
    return false;
  }
}
",327,"
[console.assert(checkIsosceles(6, 8, 12) === false), console.assert(checkIsosceles(6, 6, 12) === true), console.assert(checkIsosceles(6, 16, 20) === false)]
",
327, this function to rotate a given list by specified number of items to the left direction.,"function rotateLeft(list1, m, n) {
    if (list1.length === 0) return [];

    m = m % list1.length;
    n = n % list1.length;

    let firstPart = list1.slice(m, m + n); 
    let secondPart = list1.slice(0, m); 
    let thirdPart = list1.slice(m + n); 

    let result = firstPart.concat(secondPart, thirdPart);
    return result;
}",328,"[
    console.assert(rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4).toString() === [4, 5, 6, 7, 1, 2, 3, 8, 9, 10].toString()), 
    console.assert(rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2).toString() === [3, 4, 1, 2, 5, 6, 7, 8, 9, 10].toString()), 
    console.assert(rotateLeft([1, 2, 3, 4, 5], 0, 2).toString() === [1, 2, 3, 4, 5].toString())]
  ",
328, this   function to count negative numbers in a list.,"
function negCount(arr) {
  let negCount = 0;
  for (let num of arr) {
    if (num <= 0) {
      negCount += 1;
    }
  }
  return negCount;
}
",329,"[
  console.assert(negCount([-1, -2, 3, -4, -5]) === 4),
  console.assert(negCount([1, 2, 3]) === 0),
  console.assert(negCount([1, 2, -3, -10, 20]) === 2)
]",
329," this function to find all three, four, five characters long words in the given string by using regex.","
function findChar(text) {
  return text.match(/\b\w{3,5}\b/g);
}
",330,"[
  console.assert(findChar(""For the four consumer complaints contact manager AKR reddy"").toString() === [""For"", ""the"", ""four"", ""AKR"", ""reddy""].toString()),
  console.assert(findChar(""Certain service are subject to change MSR"").toString() === [""are"", ""MSR""].toString()),
  console.assert(findChar(""Third party legal desclaimers"").toString() === [""Third"", ""party"", ""legal""].toString())
]",
330, this   function to count unset bits of a given number.,"
function countUnsetBits(n) { 
    let count = 0; 
    let x = 1; 
    while (x < n + 1) { 
        if ((x & n) === 0) { 
            count++; 
        } 
        x = x << 1; 
    } 
    return count; 
}
",331,"
[console.assert(countUnsetBits(2) === 1), console.assert(countUnsetBits(4) === 2), console.assert(countUnsetBits(6) === 1)]
",
331, this function to count character frequency of a given string.,"
function charFrequency(str1) {
    let dict = {};
    for (let n of str1) {
        if (n in dict) {
            dict[n] += 1;
        } else {
            dict[n] = 1;
        }
    }
    return dict;
}
",332,"[
  console.assert(charFrequency(""python"").toString() === {p: 1, y: 1, t: 1, h: 1, o: 1, n: 1}.toString()),
  console.assert(charFrequency(""program"").toString() === {p: 1, r: 2, o: 1, g: 1, a: 1, m: 1}.toString()),
  console.assert(charFrequency(""language"").toString() === {l: 1, a: 2, n: 1, g: 2, u: 1, e: 1}.toString())
]",
332, this   function to sort a list according to the second element in sublist.,"
function Sort(sub_li) {
    sub_li.sort((a, b) => a[1] - b[1]);
    return sub_li;
}
",333,"[
  console.assert(JSON.stringify(Sort([[""a"", 10], [""b"", 5], [""c"", 20], [""d"", 15]])) === JSON.stringify([[""b"", 5], [""a"", 10], [""d"", 15], [""c"", 20]])),
  console.assert(JSON.stringify(Sort([[""452"", 10], [""256"", 5], [""100"", 20], [""135"", 15]])) === JSON.stringify([[""256"", 5], [""452"", 10], [""135"", 15], [""100"", 20]])),
  console.assert(JSON.stringify(Sort([[""rishi"", 10], [""akhil"", 5], [""ramya"", 20], [""gaur"", 15]])) === JSON.stringify([[""akhil"", 5], [""rishi"", 10], [""gaur"", 15], [""ramya"", 20]]))
]",
333, this   function to check whether the triangle is valid or not if sides are given.,"
function check_Validity(a, b, c) {  
    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { 
        return false;
    } else { 
        return true; 
    }
}
",334,"
[console.assert(check_Validity(1, 2, 3) === false), console.assert(check_Validity(2, 3, 5) === false), console.assert(check_Validity(7, 10, 5) === true)]
",
334, this function to find the sum of arithmetic progression.,"
function ap_sum(a, n, d) {
  let total = (n * (2 * a + (n - 1) * d)) / 2;
  return total;
}
",335,"
[console.assert(ap_sum(1,5,2) === 25), console.assert(ap_sum(2,6,4) === 72), console.assert(ap_sum(1,4,5) === 34)]
",
335, this function to check whether the given month name contains 28 days or not.,"
function checkMonthNum(monthname1) {
  if (monthname1 === ""February"") {
    return true;
  } else {
    return false;
  }
}
",336,"
[console.assert(checkMonthNum(""February"") === true), console.assert(checkMonthNum(""January"") === false), console.assert(checkMonthNum(""March"") === false)]
",
336," this function that matches a word at the end of a string, with optional punctuation.","function textMatchWord(text) {
    const pattern = /([a-zA-Z0-9]+)\b[^\w]*$/; 
    const trimmedText = text.trim(); 

    const match = trimmedText.match(pattern);
    return match ? ""Found a match!"" : ""Not matched!"";
}",337,"[console.assert(textMatchWord("" ."") === ""Not matched!"", 'Test Case 1 Failed'),  
console.assert(textMatchWord("" ."") === ""Not matched!"", 'Test Case 2 Failed'),
console.assert(textMatchWord(""  lang  ."") === ""Found a match!"", 'Test Case 3 Failed')]",
337, this   function to count the number of substrings with same first and last characters.,"function count_Substring_With_Equal_Ends(s) { 
    let result = 0; 
    const n = s.length; 
    for (let i = 0; i < n; i++) {
        for (let j = 1; j <= n - i; j++) { 
            if (s[i] === s[i + j - 1]) { 
                result++; 
            } 
        } 
    } 
    return result; 
}",338,"[
  console.assert(count_Substring_With_Equal_Ends(""aba"") === 4),
  console.assert(count_Substring_With_Equal_Ends(""abcab"") === 7),
  console.assert(count_Substring_With_Equal_Ends(""abc"") === 3)
]",
338, this   function to find the maximum occuring divisor in an interval.,"
function find_Divisor(x, y) {
    if (x === y) {
        return y;
    }
    return 2;
}
",339,"
[console.assert(find_Divisor(2, 2) === 2), console.assert(find_Divisor(2, 5) === 2), console.assert(find_Divisor(5, 10) === 2)]
",
339, this   function to find the sum of the three lowest positive numbers from a given list of numbers.,"function sumThreeSmallestNums(lst) {
    return lst.filter(x => x > 0) 
              .sort((a, b) => a - b)  
              .slice(0, 3)  
              .reduce((a, b) => a + b, 0);  
}",340,"[console.assert(sumThreeSmallestNums([10,20,30,40,50,60,7]) === 37), console.assert(sumThreeSmallestNums([1,2,3,4,5]) === 6), console.assert(sumThreeSmallestNums([0,1,2,3,4,5]) === 6)]",
340, this function to convert the given set into ordered tuples.,"
function setToTuple(s) {
  const t = Array.from(s).sort();
  return [t];
}
",341,"[console.assert(JSON.stringify(setToTuple(new Set([1, 2, 3, 4, 5])))) === JSON.stringify([1, 2, 3, 4, 5]), console.assert(JSON.stringify(setToTuple(new Set([6, 7, 8, 9, 10, 11])))) === JSON.stringify([6, 7, 8, 9, 10, 11]), console.assert(JSON.stringify(setToTuple(new Set([12, 13, 14, 15, 16])))) === JSON.stringify([12, 13, 14, 15, 16])]",
341, this function to find the smallest range that includes at-least one element from each of the given arrays.,"
class Node {
    constructor(value, listNum, index) {
        this.value = value;
        this.listNum = listNum;
        this.index = index;
    }
}

function findMinimumRange(lists) {
    let high = -Infinity;
    let p = [0, Infinity];
    let pq = [];

    for (let i = 0; i < lists.length; i++) {
        pq.push(new Node(lists[i][0], i, 0));
        high = Math.max(high, lists[i][0]);
    }

    while (true) {
        pq.sort((a, b) => a.value - b.value);
        let top = pq.shift();
        let low = top.value;
        let i = top.listNum;
        let j = top.index;

        if (high - low < p[1] - p[0]) {
            p = [low, high];
        }

        if (j === lists[i].length - 1) {
            return p;
        }

        pq.push(new Node(lists[i][j + 1], i, j + 1));
        high = Math.max(high, lists[i][j + 1]);
    }
}
",342,"[
  console.assert(JSON.stringify(findMinimumRange([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])) === JSON.stringify([4, 6]), ""Test Case 1 Failed""),
  console.assert(JSON.stringify(findMinimumRange([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])) === JSON.stringify([4, 7]), ""Test Case 2 Failed""),
  console.assert(JSON.stringify(findMinimumRange([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])) === JSON.stringify([5, 7]), ""Test Case 3 Failed"")
]",
342, this function to calculate the number of digits and letters in a string.,"function dig_let(s) {
    const digitCount = (s.match(/\d/g) || []).length; 
    return [digitCount];
}",343,"[console.assert(JSON.stringify(dig_let("" "")) === JSON.stringify([0]), 'Test Case 1 Failed'),
console.assert(JSON.stringify(dig_let(""program"")) === JSON.stringify([ 0]), 'Test Case 2 Failed'),
console.assert(JSON.stringify(dig_let("" 3.0"")) === JSON.stringify([2]), 'Test Case 3 Failed')]",
343, this   function to find number of elements with odd factors in a given range.,"
function count_Odd_Squares(n, m) {
    return Math.floor(Math.sqrt(m)) - Math.floor(Math.sqrt(n - 1));
}
",344,"
[console.assert(count_Odd_Squares(5, 100) === 8), console.assert(count_Odd_Squares(8, 65) === 6), console.assert(count_Odd_Squares(2, 5) === 1)]
",
344, this function to find the difference between two consecutive numbers in a given list.,"function diffConsecutiveNums(nums) {
    const result = nums.slice(0, nums.length - 1).map((a, i) => nums[i + 1] - a);
    return result;
}",345,"[console.assert(JSON.stringify(diffConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7]))) === JSON.stringify([0, 2, 1, 0, 1, 1, 1]), 
 console.assert(JSON.stringify(diffConsecutiveNums([4, 5, 8, 9, 6, 10]))) === JSON.stringify([1, 3, 1, -3, 4]), 
 console.assert(JSON.stringify(diffConsecutiveNums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]))) === JSON.stringify([1, 1, 1, 1, 0, 0, 0, 1, 2])]",
345," this function to find entringer number e(n, k).","
function zigzag(n, k) { 
    if (n === 0 && k === 0) { 
        return 1; 
    } 
    if (k === 0) { 
        return 0; 
    } 
    return zigzag(n, k - 1) + zigzag(n - 1, n - k); 
}
",346,"
[console.assert(zigzag(4, 3) === 5), console.assert(zigzag(4, 2) === 4), console.assert(zigzag(3, 1) === 1)]
",
346, this   function to count the number of squares in a rectangle.,"
function count_Squares(m, n) {
    if (n < m) {
        let temp = m;
        m = n;
        n = temp;
    }
    return (n * (n + 1) * (3 * m - n + 1)) / 6;
}
",347,"
[console.assert(count_Squares(4,3) === 20), console.assert(count_Squares(1,2) === 2), console.assert(count_Squares(2,2) === 5)];
",
347, this function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"function find_ways(M) { 
    let n = Math.floor(M / 2); 
    let val = 1; 
    if (n > (2 * n - n)) { 
        n = (2 * n - n); 
    } 
    for (let i = 0; i < n; i++) { 
        val *= (2 * n - i); 
        val = Math.floor(val / (i + 1)); 
    } 
    let a = val;
    let b = Math.floor(a / (n + 1)); 
    return b; 
}",348,"[console.assert(find_ways(4) === 2), console.assert(find_ways(6) === 5), console.assert(find_ways(8) === 14)]",
348, this   function to check whether the given string is a binary string or not.,"function check(string) {
    let p = new Set(string);
    if (p.size <= 2 && [...p].every(value => value === '0' || value === '1')) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}",349,"[console.assert(check(""01010101010"") === ""Yes""), console.assert(check(""name0"") === ""No""), console.assert(check(""101"") === ""Yes"")]",
349, this   function to minimize the length of the string by removing occurrence of only one character.,"function minimum_Length(s) {
    let maxOcc = 0;
    const n = s.length;
    const arr = new Array(26).fill(0);
    
    for (let i = 0; i < n; i++) {
        arr[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;  
    }
    
    for (let i = 0; i < 26; i++) {
        if (arr[i] > maxOcc) {
            maxOcc = arr[i];
        }
    }
    
    return n - maxOcc;
}",350,"
[console.assert(minimum_Length(""mnm"") === 1), console.assert(minimum_Length(""abcda"") === 3), console.assert(minimum_Length(""abcb"") === 2)]
",
350, this   function to find the first element occurring k times in a given array.,"function first_Element(arr, n, k) { 
    const countMap = {}; 
    for (let i = 0; i < n; i++) { 
        if (arr[i] in countMap) { 
            countMap[arr[i]] += 1; 
        } else { 
            countMap[arr[i]] = 1; 
        } 
    } 
    for (let i = 0; i < n; i++) {  
        if (countMap[arr[i]] === k) { 
            return arr[i]; 
        } 
    } 
    return -1; 
}",351,"
[console.assert(first_Element([0,1,2,3,4,5],6,1) === 0), console.assert(first_Element([1,2,1,3,4],5,2) === 1), console.assert(first_Element([2,3,4,3,5,7,1,2,3,5],10,2) === 2)]
",
351, this   function to check whether all the characters in a given string are unique.,"
function unique_Characters(str) {
    for (let i = 0; i < str.length; i++) {
        for (let j = i + 1; j < str.length; j++) {
            if (str[i] === str[j]) {
                return false;
            }
        }
    }
    return true;
}
",352,"[
  console.assert(unique_Characters(""aba"") === false),
  console.assert(unique_Characters(""abc"") === true),
  console.assert(unique_Characters(""abab"") === false)
]",
352, this function to remove a specified column from a given nested list.,"function removeColumn(list1, n) {
    for (let i = 0; i < list1.length; i++) {
        list1[i].splice(n, 1);  
    }
    return list1;
}",353,"
[console.assert(removeColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0).toString() === [[2, 3], [4, 5], [1, 1]].toString()), console.assert(removeColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2).toString() === [[1, 2], [-2, 4], [1, -1]].toString()), console.assert(removeColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0).toString() === [[3], [7], [3], [15, 17], [7], [11]].toString())]
",
353, this function to find t-nth term of arithemetic progression.,"
function tn_ap(a, n, d) {
  const tn = a + (n - 1) * d;
  return tn;
}
",354,"
[console.assert(tn_ap(1,5,2) === 9), console.assert(tn_ap(2,6,4) === 22), console.assert(tn_ap(1,4,5) === 16)]
",
354, this   function to count the number of rectangles in a circle of radius r.,"
function count_Rectangles(radius) {
    let rectangles = 0;
    const diameter = 2 * radius;
    const diameterSquare = diameter * diameter;
    for (let a = 1; a < 2 * radius; a++) {
        for (let b = 1; b < 2 * radius; b++) {
            const diagnalLengthSquare = (a * a + b * b);
            if (diagnalLengthSquare <= diameterSquare) {
                rectangles++;
            }
        }
    }
    return rectangles;
}
",355,"
[console.assert(count_Rectangles(2) === 8), console.assert(count_Rectangles(1) === 1), console.assert(count_Rectangles(0) === 0)]
",
355, this function to find the third angle of a triangle using two angles.,"
function findAngle(a, b) {
  let c = 180 - (a + b);
  return c;
}
",356,"
[console.assert(findAngle(47, 89) === 44), console.assert(findAngle(45, 95) === 40), console.assert(findAngle(50, 40) === 90)]
",
356, this function to find the maximum element of all the given tuple records.,"
function findMax(testList) {
    let res = Math.max(...testList.flat().map(j => parseInt(j)));
    return res;
}
",357,"
[console.assert(findMax([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) === 10), console.assert(findMax([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) === 11), console.assert(findMax([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) === 12)]
",
357, this function to find modulo division of two lists using map and lambda function.,"
function moddiv_list(nums1, nums2) {
  const result = nums1.map((x, index) => x % nums2[index]);
  return [result];
}
",358,"
[console.assert(moddiv_list([4,5,6],[1, 2, 3]).toString() == [0, 1, 0].toString()), console.assert(moddiv_list([3,2],[1,4]).toString() == [0, 2].toString()), console.assert(moddiv_list([90,120],[50,70]).toString() == [40, 50].toString())]
",
358, this   function to check whether one root of the quadratic equation is twice of the other or not.,"
function Check_Solution(a, b, c) { 
    if (2 * b * b === 9 * a * c) { 
        return ""Yes""; 
    } else { 
        return ""No""; 
    } 
}
",359,"
[console.assert(Check_Solution(1, 3, 2) === ""Yes""), console.assert(Check_Solution(1, 2, 3) === ""No""), console.assert(Check_Solution(1, -5, 6) === ""No"")]
",
359, this function to find the nâ€™th carol number.,"
function get_carol(n) {
    let result = (2 ** n) - 1;
    return result * result - 2;
}
",360,"
[console.assert(get_carol(2) === 7), console.assert(get_carol(4) === 223), console.assert(get_carol(5) === 959)]
",
360, this function to remove empty lists from a given list of lists.,"function remove_empty(list1) {
    const remove_empty = list1.filter(x => !(Array.isArray(x) && x.length === 0)); 
    return remove_empty;
}",361,"[
  console.assert(JSON.stringify(remove_empty([[], [], [], ""Red"", ""Green"", [1, 2], ""Blue"", [], []])) === JSON.stringify([""Red"", ""Green"", [1, 2], ""Blue""])),
  console.assert(JSON.stringify(remove_empty([[], [], [], [], [], ""Green"", [1, 2], ""Blue"", [], []])) === JSON.stringify([""Green"", [1, 2], ""Blue""])),
  console.assert(JSON.stringify(remove_empty([[], [], [], "" "", [], [], ""programming"", ""language"", [], [], [], [], []])) === JSON.stringify(["" "", ""programming"", ""language""]))
]",
361, this   function to find the item with maximum occurrences in a given list.,"function maxOccurrences(nums) {
    let maxVal = 0;
    let result = nums[0];
    for (let i of nums) {
        let occu = nums.filter(x => x === i).length;
        if (occu > maxVal) {
            maxVal = occu;
            result = i;
        }
    }
    return [result];
}",362,"[console.assert(JSON.stringify(maxOccurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])) === JSON.stringify([2]), 'Test Case 1 Failed'),
console.assert(JSON.stringify(maxOccurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])) === JSON.stringify([1]), 'Test Case 2 Failed'),
console.assert(JSON.stringify(maxOccurrences([1, 2, 3, 1, 2, 4, 1])) === JSON.stringify([1]), 'Test Case 3 Failed')]",
362, this function to add the k elements to each element in the tuple.,"
function add_K_element(test_list, K) {
    let res = test_list.map(sub => sub.map(j => j + K));
    return res;
}
",363,"
[console.assert(JSON.stringify(add_K_element([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)) === JSON.stringify([[5, 7, 8], [6, 8, 10], [7, 12, 5]])), 
 console.assert(JSON.stringify(add_K_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)) === JSON.stringify([[9, 10, 11], [12, 13, 14], [15, 16, 17]])), 
 console.assert(JSON.stringify(add_K_element([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)) === JSON.stringify([[20, 21, 22], [23, 24, 25], [26, 27, 28]]))]
",
363, this function to find the number of flips required to make the given binary string a sequence of alternate characters.,"function minFlipToMakeStringAlternate(str) {
    let getFlipWithStartingCharacter = (expected) => {
        let flipCount = 0;
        for (let i = 0; i < str.length; i++) {
            if (parseInt(str[i]) !== expected) {
                flipCount++;
            }
            expected = (expected === 0) ? 1 : 0;  
        }
        return flipCount;
    };

    return Math.min(getFlipWithStartingCharacter(0), getFlipWithStartingCharacter(1));
}",364,"
[console.assert(minFlipToMakeStringAlternate(""0001010111"") === 2), console.assert(minFlipToMakeStringAlternate(""001"") === 1), console.assert(minFlipToMakeStringAlternate(""010111011"") === 2)]
",
364, this   function to count the number of digits of a given number.,"
function countDigit(n) {
    let count = 0;
    while (n !== 0) {
        n = Math.floor(n / 10);
        count += 1;
    }
    return count;
}
",365,"
[console.assert(countDigit(12345) === 5), console.assert(countDigit(11223305) === 8), console.assert(countDigit(4123459) === 7)]
",
365, this   function to find the largest product of the pair of adjacent elements from a given list of integers.,"
function adjacentNumProduct(listNums) {
    return Math.max(...listNums.map((num, i) => num * listNums[i + 1]).slice(0, -1));
}
",366,"
[console.assert(adjacentNumProduct([1,2,3,4,5,6]) === 30), console.assert(adjacentNumProduct([1,2,3,4,5]) === 20), console.assert(adjacentNumProduct([2,3]) === 6)]
",
366, this function to check if a binary tree is balanced or not.,"
class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function isTreeBalanced(root) {
    function getHeightAndBalance(root) {
        if (root === null) {
            return { height: 0, isBalanced: true };
        }

        const left = getHeightAndBalance(root.left);
        const right = getHeightAndBalance(root.right);

        const isBalanced = left.isBalanced && right.isBalanced && Math.abs(left.height - right.height) <= 1;
        const height = Math.max(left.height, right.height) + 1;

        return { height, isBalanced };
    }

    return getHeightAndBalance(root).isBalanced;
}",367,"
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.left.left.left = new Node(6);  

const root1 = new Node(1);
root1.left = new Node(2);
root1.right = new Node(3);
root1.left.left = new Node(4);
root1.left.right = new Node(5);  

const root2 = new Node(1);
root2.left = new Node(2);
root2.right = new Node(3);
root2.right.left = new Node(4);
root2.right.right = new Node(5);
root2.right.right.left = new Node(6); 
[
console.assert(isTreeBalanced(root) === false, ""Test Case 1 Failed""),
console.assert(isTreeBalanced(root1) === true, ""Test Case 2 Failed""),
console.assert(isTreeBalanced(root2) === false, ""Test Case 3 Failed"") ]",
367, this function to repeat the given tuple n times.,"
function repeat_tuples(test_tup, N) {
    var res = Array(N).fill(test_tup);
    return res;
}
",368,"[
  console.assert(repeat_tuples([1, 3], 4).toString() === [[1, 3], [1, 3], [1, 3], [1, 3]].toString()),
  console.assert(repeat_tuples([1, 2], 3).toString() === [[1, 2], [1, 2], [1, 2]].toString()),
  console.assert(repeat_tuples([3, 4], 5).toString() === [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]].toString())
]",
368, this function to find the lateral surface area of cuboid,"
function lateralsurface_cuboid(l, w, h) {
    const LSA = 2 * h * (l + w);
    return LSA;
}
",369,"[
  console.assert(lateralsurface_cuboid(8, 5, 6) === 156),
  console.assert(lateralsurface_cuboid(7, 9, 10) === 320),
  console.assert(lateralsurface_cuboid(10, 20, 30) === 1800)
]",
369, this function to sort a tuple by its float element.,"
function floatSort(price) {
    const floatSort = price.sort((a, b) => parseFloat(b[1]) - parseFloat(a[1]));
    return floatSort;
}
",370,"[
  console.assert(JSON.stringify(floatSort([['item1', 12.20], ['item2', 15.10], ['item3', 24.5]])) === JSON.stringify([['item3', 24.5], ['item2', 15.10], ['item1', 12.20]])),
  console.assert(JSON.stringify(floatSort([['item1', 15], ['item2', 10], ['item3', 20]])) === JSON.stringify([['item3', 20], ['item1', 15], ['item2', 10]])),
  console.assert(JSON.stringify(floatSort([['item1', 5], ['item2', 10], ['item3', 14]])) === JSON.stringify([['item3', 14], ['item2', 10], ['item1', 5]]))
]",
370, this function to find the smallest missing element in a sorted array.,"
function smallestMissing(A, leftElement, rightElement) {
    if (leftElement > rightElement) {
        return leftElement;
    }
    const mid = leftElement + Math.floor((rightElement - leftElement) / 2);
    if (A[mid] === mid) {
        return smallestMissing(A, mid + 1, rightElement);
    } else {
        return smallestMissing(A, leftElement, mid - 1);
    }
}
",371,"[console.assert(smallestMissing([0, 1, 2, 3, 4, 5, 6], 0, 6) === 7), console.assert(smallestMissing([0, 1, 2, 6, 9, 11, 15], 0, 6) === 3), console.assert(smallestMissing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) === 0)]",
371, this function to sort a given list of elements in ascending order using heap queue algorithm.,"function heapAssending(nums) {
    const heapify = (arr) => {
      for (let i = Math.floor(arr.length / 2); i >= 0; i--) {
        siftDown(arr, i, arr.length);
      }
    };
  
    const siftDown = (arr, idx, max) => {
      let leftChildIdx = 2 * idx + 1;
      while (leftChildIdx < max) {
        let rightChildIdx = leftChildIdx + 1;
        let smallestIdx = leftChildIdx;
  
        if (rightChildIdx < max && arr[rightChildIdx] < arr[leftChildIdx]) {
          smallestIdx = rightChildIdx;
        }
        if (arr[smallestIdx] >= arr[idx]) {
          break;
        }
        [arr[idx], arr[smallestIdx]] = [arr[smallestIdx], arr[idx]];
        idx = smallestIdx;
        leftChildIdx = 2 * idx + 1;
      }
    };
  
    heapify(nums);
    const s_result = [];
    while (nums.length > 0) {
      s_result.push(nums[0]);
      nums[0] = nums[nums.length - 1];
      nums.pop();
      siftDown(nums, 0, nums.length);
    }
    return s_result;
  }",372,"
[console.assert(heapAssending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]).toString() === [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18].toString()), console.assert(heapAssending([25, 35, 22, 85, 14, 65, 75, 25, 58]).toString() === [14, 22, 25, 25, 35, 58, 65, 75, 85].toString()), console.assert(heapAssending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]).toString() === [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].toString())]
",
372, this function to find the volume of a cuboid.,"
function volumeCuboid(l, w, h) {
  var volume = l * w * h;
  return volume;
}
",373,"
[console.assert(volumeCuboid(1, 2, 3) === 6), console.assert(volumeCuboid(5, 7, 9) === 315), console.assert(volumeCuboid(10, 15, 21) === 3150)]
",
374, this function to round the given number to the nearest multiple of a specific number.,"
function roundNum(n, m) {
    const a = Math.floor(n / m) * m;
    const b = a + m;
    return (n - a > b - n) ? b : a;
}
",375,"
[console.assert(roundNum(4722, 10) === 4720), console.assert(roundNum(1111, 5) === 1110), console.assert(roundNum(219, 2) === 218)]
",
375, this function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"function removeReplica(testTup) {
    const MSP = 'MSP';  
    let temp = new Set();
    let res = Array.from(testTup, ele => {
        if (!temp.has(ele) && temp.add(ele)) {
            return ele;
        } else {
            return MSP;
        }
    });
    return [res];
}",376,"[
  console.assert(removeReplica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7]).toString() === [1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP'].toString()),
  console.assert(removeReplica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9]).toString() === [2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP'].toString()),
  console.assert(removeReplica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7]).toString() === [2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP'].toString())
]",
376, this   function to remove all occurrences of a character in a given string.,"function remove_Char(s, c) {
    let counts = (s.match(new RegExp(c, ""g"")) || []).length;
    s = s.split('');
    while (counts) {
        s.splice(s.indexOf(c), 1);
        counts -= 1;
    }
    s = s.join('');
    return s;
}",377,"[console.assert(remove_Char(""aba"", 'a') === ""b""),
console.assert(remove_Char(""toggle"", 'g') === ""tole""),
console.assert(remove_Char(""aabbc"", 'b') === ""aac"")]",
377, this   function to shift last element to first position in the given list.,"
function moveFirst(testList) {
  testList = testList.slice(-1).concat(testList.slice(0, -1));
  return testList;
}
",378,"
[console.assert(moveFirst([1,2,3,4]).toString() === [4,1,2,3].toString()), console.assert(moveFirst([0,1,2,3]).toString() === [3,0,1,2].toString()), console.assert(moveFirst([9,8,7,1]).toString() === [1,9,8,7].toString())]
",
378, this function to find the surface area of a cuboid.,"
function surfacearea_cuboid(l, w, h) {
  const SA = 2 * (l * w + l * h + w * h);
  return SA;
}
",379,"
[console.assert(surfacearea_cuboid(1,2,3) === 22), console.assert(surfacearea_cuboid(5,7,9) === 286), console.assert(surfacearea_cuboid(10,15,21) === 1350)]
",
379, this function to generate a two-dimensional array.,"
function multiList(rownum, colnum) {
    let multiList = Array.from({ length: rownum }, () => Array(colnum).fill(0));
    for (let row = 0; row < rownum; row++) {
        for (let col = 0; col < colnum; col++) {
            multiList[row][col] = row * col;
        }
    }
    return multiList;
}
",380,"[
    console.assert(multiList(3, 4).toString() === [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]].toString()),
    console.assert(multiList(5, 7).toString() === [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]].toString()),
    console.assert(multiList(10, 15).toString() === [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                                                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 
                                                    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], 
                                                    [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], 
                                                    [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], 
                                                    [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], 
                                                    [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], 
                                                    [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], 
                                                    [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], 
                                                    [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]].toString())
]",
380, this function to sort a list of lists by a given index of the inner list.,"function indexOnInnerList(listData, indexNo) {
    const result = listData.sort((a, b) => {
       if (typeof a[indexNo] === 'number' && typeof b[indexNo] === 'number') {
            return a[indexNo] - b[indexNo];
        }
        return a[indexNo].localeCompare(b[indexNo]);
    });
    return result;
}",381,"[console.assert(
    JSON.stringify(indexOnInnerList([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 0)) ===
    JSON.stringify([[""Beau Turnbull"", 94, 98], [""Brady Kent"", 97, 96], [""Greyson Fulton"", 98, 99], [""Wyatt Knott"", 91, 94]]), 
    ""Assertion 1 failed""
),
console.assert(
    JSON.stringify(indexOnInnerList([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 1)) ===
    JSON.stringify([[""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98], [""Brady Kent"", 97, 96], [""Greyson Fulton"", 98, 99]]), 
    ""Assertion 2 failed""
),
console.assert(
    JSON.stringify(indexOnInnerList([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 2)) ===
    JSON.stringify([[""Wyatt Knott"", 91, 94], [""Brady Kent"", 97, 96], [""Beau Turnbull"", 94, 98], [""Greyson Fulton"", 98, 99]]), 
    ""Assertion 3 failed""
)]",
381, this function to find the number of rotations in a circularly sorted array.,"
function findRotationCount(A) {
    let left = 0, right = A.length - 1;
    while (left <= right) {
        if (A[left] <= A[right]) {
            return left;
        }
        let mid = Math.floor((left + right) / 2);
        let next = (mid + 1) % A.length;
        let prev = (mid - 1 + A.length) % A.length;
        if (A[mid] <= A[next] && A[mid] <= A[prev]) {
            return mid;
        } else if (A[mid] <= A[right]) {
            right = mid - 1;
        } else if (A[mid] >= A[left]) {
            left = mid + 1;
        }
    }
    return -1;
}
",382,"
[console.assert(findRotationCount([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) === 3), 
 console.assert(findRotationCount([8, 9, 10, 2, 5, 6]) === 3), 
 console.assert(findRotationCount([2, 5, 6, 8, 9, 10]) === 0)]
",
382, this   function to toggle all odd bits of a given number.,"
function evenBitToggleNumber(n) {
    let res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 === 0) {
            res = res | (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return n ^ res;
}
",383,"
[console.assert(evenBitToggleNumber(10) === 15), console.assert(evenBitToggleNumber(20) === 1), console.assert(evenBitToggleNumber(30) === 11)]
",
384, this function to find the nth perrin number using recursion.,"
function get_perrin(n) {
  if (n === 0) {
    return 3;
  }
  if (n === 1) {
    return 0;
  }
  if (n === 2) {
    return 2;
  }
  return get_perrin(n - 2) + get_perrin(n - 3);
}
",385,"
[console.assert(get_perrin(9) === 12), console.assert(get_perrin(4) === 2), console.assert(get_perrin(6) === 5)]
",
385, this function to find out the minimum no of swaps required for bracket balancing in the given string.,"function swapCount(s) {
    let countLeft = 0; 
    let countRight = 0; 
    let swap = 0;
    let imbalance = 0; 
    
    for (let i = 0; i < s.length; i++) {
        if (s[i] === '[') {
            countLeft += 1;
            if (imbalance > 0) {
                swap += imbalance; 
                imbalance -= 1;
            }
        } else if (s[i] === ']') {
            countRight += 1;
            imbalance = countRight - countLeft; 
        }
    }
    return swap;
}",386,"[
    console.assert(swapCount(""[]][]["") === 2),
    console.assert(swapCount(""[[][]]"") === 0),
    console.assert(swapCount(""[[][]]]["") === 1)
]",
386, this   function to check whether the hexadecimal number is even or odd.,"function even_or_odd(N) {
    const lastChar = N[N.length - 1];
    const evenChars = ['0', '2', '4', '6', '8', 'A', 'C', 'E']; 
    
    if (evenChars.includes(lastChar)) {
        return ""Even"";
    } else {
        return ""Odd"";
    }
}",387,"
[console.assert(even_or_odd(""AB3454D"") === ""Odd""), console.assert(even_or_odd(""ABC"") === ""Even""), console.assert(even_or_odd(""AAD"") === ""Odd"")]
",
388, this function to find the nth lucas number.,"
function findLucas(n) {
    if (n === 0) {
        return 2;
    }
    if (n === 1) {
        return 1;
    }
    return findLucas(n - 1) + findLucas(n - 2);
}
",389,"
[console.assert(findLucas(9) === 76), console.assert(findLucas(4) === 7), console.assert(findLucas(3) === 4)]",
389, this function to insert a given string at the beginning of all items in a list.,"function addString(list, string) {
    let result = list.map(i => string.replace(/{}/g, i));
    return result;
}",390,"[console.assert(
    JSON.stringify(addString([1, 2, 3, 4], ""temp{}"")) === JSON.stringify([""temp1"", ""temp2"", ""temp3"", ""temp4""]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(addString([""a"", ""b"", ""c"", ""d""], ""{}"")) === JSON.stringify([""a"", ""b"", ""c"", ""d""]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(addString([5, 6, 7, 8], ""string{}"")) === JSON.stringify([""string5"", ""string6"", ""string7"", ""string8""]),
    ""Test Case 3 Failed""
)]",
390, this function to convert more than one list to nested dictionary.,"
function convertListDictionary(l1, l2, l3) {
    const result = l1.map((x, index) => ({ [x]: { [l2[index]]: l3[index] } }));
    return result;
}
",391,"[
    console.assert(
        JSON.stringify(convertListDictionary([""S001"", ""S002"", ""S003"", ""S004""], [""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""], [85, 98, 89, 92])) === JSON.stringify([{ ""S001"": { ""Adina Park"": 85 } }, { ""S002"": { ""Leyton Marsh"": 98 } }, { ""S003"": { ""Duncan Boyle"": 89 } }, { ""S004"": { ""Saim Richards"": 92 } }]),
        ""Test 1 failed""
    ),
    
    console.assert(
        JSON.stringify(convertListDictionary([""abc"", ""def"", ""ghi"", ""jkl""], ["" "", ""program"", ""language"", ""programs""], [100, 200, 300, 400])) === JSON.stringify([{ ""abc"": { "" "": 100 } }, { ""def"": { ""program"": 200 } }, { ""ghi"": { ""language"": 300 } }, { ""jkl"": { ""programs"": 400 } }]),
        ""Test 2 failed""
    ),
    
    console.assert(
        JSON.stringify(convertListDictionary([""A1"", ""A2"", ""A3"", ""A4""], [""java"", ""C"", ""C++"", ""DBMS""], [10, 20, 30, 40])) === JSON.stringify([{ ""A1"": { ""java"": 10 } }, { ""A2"": { ""C"": 20 } }, { ""A3"": { ""C++"": 30 } }, { ""A4"": { ""DBMS"": 40 } }]),
        ""Test 3 failed""
    )
]",0
391," this function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","
function getMaxSum(n) {
    let res = [];
    res.push(0);
    res.push(1);
    let i = 2;
    while (i <= n) {
        res.push(Math.max(i, (res[Math.floor(i / 2)] +
                               res[Math.floor(i / 3)] +
                               res[Math.floor(i / 4)] +
                               res[Math.floor(i / 5)])));
        i++;
    }
    return res[n];
}
",392,"
[console.assert(getMaxSum(60) === 106), console.assert(getMaxSum(10) === 12), console.assert(getMaxSum(2) === 2)]
",
392, this function to find the list with maximum length using lambda function.,"
function maxLengthList(inputList) {
    let maxLength = Math.max(...inputList.map(x => x.length));
    let maxList = inputList.reduce((a, b) => a.length >= b.length ? a : b);
    return [maxLength, maxList];
}
",393,"[
    console.assert(JSON.stringify(maxLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([3, [13, 15, 17]]), ""Test 1 failed""),
    console.assert(JSON.stringify(maxLengthList([[1,2,3,4,5], [1,2,3,4], [1,2,3], [1,2], [1]])) === JSON.stringify([5, [1,2,3,4,5]]), ""Test 2 failed""),
    console.assert(JSON.stringify(maxLengthList([[3,4,5], [6,7,8,9], [10,11,12]])) === JSON.stringify([4, [6,7,8,9]]), ""Test 3 failed"")
]",
393, this function to check if given tuple is distinct or not.,"
function checkDistinct(testTup) {
  let res = true;
  let temp = new Set();
  for (let ele of testTup) {
    if (temp.has(ele)) {
      res = false;
      break;
    }
    temp.add(ele);
  }
  return res;
}
",394,"[
    console.assert(checkDistinct([1, 4, 5, 6, 1, 4]) === false, ""Test 1 failed""),
    console.assert(checkDistinct([1, 4, 5, 6]) === true, ""Test 2 failed""),
    console.assert(checkDistinct([2, 3, 4, 5, 6]) === true, ""Test 3 failed"")
]",
394, this   function to find the first non-repeated character in a given string.,"
function firstNonRepeatingCharacter(str1) {
  let charOrder = [];
  let ctr = {};
  for (let c of str1) {
    if (ctr[c]) {
      ctr[c] += 1;
    } else {
      ctr[c] = 1;
      charOrder.push(c);
    }
  }
  for (let c of charOrder) {
    if (ctr[c] === 1) {
      return c;
    }
  }
  return null;
}
",395,"
[console.assert(firstNonRepeatingCharacter(""abcabc"") === null), console.assert(firstNonRepeatingCharacter(""abc"") === ""a""), console.assert(firstNonRepeatingCharacter(""ababc"") === ""c"")]
",
396, this function to find the median of three specific numbers.,"
function medianNumbers(a, b, c) {
    let median;
    if (a > b) {
        if (a < c) {
            median = a;
        } else if (b > c) {
            median = b;
        } else {
            median = c;
        }
    } else {
        if (a > c) {
            median = a;
        } else if (b < c) {
            median = b;
        } else {
            median = c;
        }
    }
    return median;
}
",397,"
[console.assert(medianNumbers(25,55,65) === 55.0), console.assert(medianNumbers(20,10,30) === 20.0), console.assert(medianNumbers(15,45,75) === 45.0)]
",
397, this function to compute the sum of digits of each number of a given list.,"
function sumOfDigits(nums) {
  return nums.reduce((acc, n) => {
    return acc + Array.from(String(n)).reduce((sum, el) => {
      return sum + (isFinite(el) ? parseInt(el) : 0);
    }, 0);
  }, 0);
}
",398,"
[console.assert(sumOfDigits([10, 2, 56]) === 14), ""console.assert(sumOfDigits([[10, 20, 4, 5, b, 70, a]]) === 19)"", console.assert(sumOfDigits([10, 20, -4, 5, -70]) === 19)]
",
398, this function to perform the mathematical bitwise xor operation across the given tuples.,"
function bitwiseXOR(testTup1, testTup2) {
  const res = testTup1.map((ele1, index) => ele1 ^ testTup2[index]);
  return res;
}
",399,"
[console.assert(bitwiseXOR([10, 4, 6, 9], [5, 2, 3, 3]).toString() === [15, 6, 5, 10].toString()), console.assert(bitwiseXOR([11, 5, 7, 10], [6, 3, 4, 4]).toString() === [13, 6, 3, 14].toString()), console.assert(bitwiseXOR([12, 6, 8, 11], [7, 4, 5, 6]).toString() === [11, 2, 13, 13].toString())]
",
399, this function to extract the frequency of unique tuples in the given list order irrespective.,"function extract_freq(test_list) {
    const res = new Set(test_list.map(sub => JSON.stringify(sub.sort((a, b) => a - b)))).size;
    return res;
}",400,"[console.assert(extract_freq([[3, 4], [1, 2], [4, 3], [5, 6]]) === 3, ""Test Case 1 Failed""),
console.assert(extract_freq([[4, 15], [2, 3], [5, 4], [6, 7]]) === 4, ""Test Case 2 Failed""),
console.assert(extract_freq([[5, 16], [2, 3], [6, 5], [6, 9]]) === 4, ""Test Case 3 Failed"")]",
400, this function to perform index wise addition of tuple elements in the given two nested tuples.,"
function addNestedTuples(test_tup1, test_tup2) {
    const res = test_tup1.map((tup1, index) => 
        tup1.map((a, j) => a + test_tup2[index][j])
    );
    return res;
}
",401,"[
    console.assert(
        JSON.stringify(addNestedTuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[7, 10], [7, 14], [3, 10], [8, 13]]), 
        ""Test 1 failed""
    ),
    console.assert(
        JSON.stringify(addNestedTuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[9, 12], [9, 16], [5, 12], [10, 15]]), 
        ""Test 2 failed""
    ),
    console.assert(
        JSON.stringify(addNestedTuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[11, 14], [11, 18], [7, 14], [12, 17]]), 
        ""Test 3 failed""
    )
]",
401, this function to compute the value of ncr%p.,"
function ncr_modp(n, r, p) {
    let C = new Array(r + 1).fill(0);
    C[0] = 1;
    for (let i = 1; i <= n; i++) {
        for (let j = Math.min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}
",402,"
[console.assert(ncr_modp(10,2,13)===6), console.assert(ncr_modp(15,12,43)===25), console.assert(ncr_modp(17,9,18)===10)]
",
402, this function to check if a url is valid or not using regex.,"
function isValidURL(str) {
    const regex = /((http|https):\/\/)(www\.)?[a-zA-Z0-9@:%._\+~#?&//=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%._\+~#?&//=]*)/;
    if (str == null) {
        return false;
    }
    return regex.test(str);
}
",403,"
[console.assert(isValidURL(""https://www.google.com"") === true), console.assert(isValidURL(""https:/www.gmail.com"") === false), console.assert(isValidURL(""https:// www.redit.com"") === false)]
",
403, this   function to find the minimum of two numbers.,"
function minimum(a, b) {   
    if (a <= b) { 
        return a; 
    } else { 
        return b; 
    }
}
",404,"
[console.assert(minimum(1, 2) === 1), console.assert(minimum(-5, -4) === -5), console.assert(minimum(0, 0) === 0)]
",
404, this function to check whether an element exists within a tuple.,"
function checkTuplex(tuplex, tuple1) {
  if (tuplex.includes(tuple1)) {
    return true;
  } else {
    return false;
  }
}
",405,"[
    console.assert(checkTuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], ""r"") === true, ""Test 1 failed""),
    console.assert(checkTuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 5) === false, ""Test 2 failed""),
    console.assert(checkTuplex([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 3) === true, ""Test 3 failed"")
]",
405, this   function to find the parity of a given number.,"
function find_Parity(x) { 
    let y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1) { 
        return ""Odd Parity""; 
    } 
    return ""Even Parity""; 
}
",406,"
[console.assert(find_Parity(12) === ""Even Parity""), console.assert(find_Parity(7) === ""Odd Parity""), console.assert(find_Parity(10) === ""Even Parity"")]
",
406, this function to create the next bigger number by rearranging the digits of a given number.,"function rearrangeBigger(n) {
    let nums = Array.from(String(n), Number); 

    for (let i = nums.length - 2; i >= 0; i--) {
        if (nums[i] < nums[i + 1]) {
            let z = nums.slice(i);
            let y = Math.min(...z.filter(x => x > nums[i])); 

            z.splice(z.indexOf(y), 1); 
            z.sort((a, b) => a - b); 
            nums = nums.slice(0, i).concat([y], z);
            return parseInt(nums.join(''), 10); 
        }
    }

    return false; 
}",407,"
[console.assert(rearrangeBigger(12) === 21), console.assert(rearrangeBigger(10) === false), console.assert(rearrangeBigger(102) === 120)]
",
407, this function to find k number of pairs which consist of one element from the first array and one element from the second array.,"function kSmallestPairs(nums1, nums2, k) {
    if (nums1.length === 0 || nums2.length === 0) return [];

    const minHeap = [];
    const result = [];

    minHeap.push([nums1[0] + nums2[0], 0, 0]);

    const heapify = () => {
        minHeap.sort((a, b) => a[0] - b[0]);
    };

    while (k > 0 && minHeap.length > 0) {
        const [sum, i, j] = minHeap.shift();

        result.push([nums1[i], nums2[j]]);
        k--;

        if (j + 1 < nums2.length) {
            minHeap.push([nums1[i] + nums2[j + 1], i, j + 1]);
            heapify();
        }

        if (j === 0 && i + 1 < nums1.length) {
            minHeap.push([nums1[i + 1] + nums2[0], i + 1, 0]);
            heapify();
        }
    }

    return result;
}",408,"[console.assert(
    JSON.stringify(kSmallestPairs([1, 3, 7], [2, 4, 6], 2)) === JSON.stringify([[1, 2], [1, 4]]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(kSmallestPairs([1, 3, 7], [2, 4, 6], 1)) === JSON.stringify([[1, 2]]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(kSmallestPairs([1, 3, 7], [2, 4, 6], 7)) === JSON.stringify([
        [ 1, 2 ], [ 1, 4 ],
        [ 3, 2 ], [ 1, 6 ],
        [ 3, 4 ], [ 7, 2 ],
        [ 3, 6 ]
      ]),
    ""Test Case 3 Failed""
)]",
408, this function to find the minimum product from the pairs of tuples within a given list.,"function minProductTuple(list1) {
    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));
    return [resultMin];
}",409,"[console.assert(minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])[0] === 8, ""Test 1 failed""),
console.assert(minProductTuple([[10, 20], [15, 2], [5, 10]])[0] === 30, ""Test 2 failed""),
console.assert(minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])[0] === 100, ""Test 3 failed"")]",
411, this   function to remove odd numbers from a given list.,"
function removeOdd(l) {
    for (let i of l) {
        if (i % 2 !== 0) {
            l.splice(l.indexOf(i), 1);
        }
    }
    return l;
}
",412,"
[console.assert(removeOdd([1,2,3]).toString() === [2].toString()), console.assert(removeOdd([2,4,6]).toString() === [2,4,6].toString()), console.assert(removeOdd([10,20,3]).toString() === [10,20].toString())]
",
412, this function to extract the nth element from a given list of tuples.,"
function extractNthElement(list1, n) {
    let result = list1.map(x => x[n]);
    return result;
}
",413,"[
    console.assert(extractNthElement([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 0).toString() === [""Greyson Fulton"", ""Brady Kent"", ""Wyatt Knott"", ""Beau Turnbull""].toString(), ""Test 1 failed""),
    console.assert(extractNthElement([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 2).toString() === [99, 96, 94, 98].toString(), ""Test 2 failed""),
    console.assert(extractNthElement([[""Greyson Fulton"", 98, 99], [""Brady Kent"", 97, 96], [""Wyatt Knott"", 91, 94], [""Beau Turnbull"", 94, 98]], 1).toString() === [98, 97, 91, 94].toString(), ""Test 3 failed"")
]",
413, this   function to check whether the value exists in a sequence or not.,"function overlapping(list1, list2) {  
    for (let i of list1) { 
        if (list2.includes(i)) {  
            return true; 
        }
    }
    return false;  
}",414,"[console.assert(overlapping([1,2,3,4,5],[6,7,8,9]) === false), console.assert(overlapping([1,2,3],[4,5,6]) === false), console.assert(overlapping([1,4,5],[1,4,5]) === true)]",
414, this   function to find a pair with highest product from a given array of integers.,"function max_Product(arr) { 
    let arr_len = arr.length; 
    if (arr_len < 2) { 
        return ""No pairs exist"";           
    } 
    let x = arr[0]; 
    let y = arr[1];      
    for (let i = 0; i < arr_len; i++) { 
        for (let j = i + 1; j < arr_len; j++) { 
            if (arr[i] * arr[j] > x * y) { 
                x = arr[i]; 
                y = arr[j]; 
            } 
        } 
    } 
    return [x, y]; 
}",415,"[console.assert(JSON.stringify(max_Product([1, 2, 3, 4, 7, 0, 8, 4])) === JSON.stringify([7, 8]), ""Test 1 failed""),
console.assert(JSON.stringify(max_Product([0, -1, -2, -4, 5, 0, -6])) === JSON.stringify([-4, -6]), ""Test 2 failed""),
console.assert(JSON.stringify(max_Product([1, 2, 3])) === JSON.stringify([2, 3]), ""Test 3 failed"")]",
415, this function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"
const MAX = 1000000;
function breakSum(n) {
    const dp = new Array(n + 1).fill(0);
    dp[0] = 0;
    dp[1] = 1;
    for (let i = 2; i <= n; i++) {
        dp[i] = Math.max(dp[Math.floor(i / 2)] + dp[Math.floor(i / 3)] + dp[Math.floor(i / 4)], i);
    }
    return dp[n];
}
",416,"
[console.assert(breakSum(12) === 13), console.assert(breakSum(24) === 27), console.assert(breakSum(23) === 23)]
",
416, this function to find common first element in given list of tuple.,"
function group_tuples(Input) { 
    let out = {}; 
    for (let elem of Input) { 
        try { 
            out[elem[0]].push(...elem.slice(1)); 
        } catch (e) { 
            out[elem[0]] = Array.from(elem); 
        } 
    } 
    return Object.values(out).map(values => Array.from(values)); 
}
",417,"[
    console.assert(JSON.stringify(group_tuples([[""x"", ""y""], [""x"", ""z""], [""w"", ""t""]])) === JSON.stringify([[""x"", ""y"", ""z""], [""w"", ""t""]]), ""Test 1 failed""),
    console.assert(JSON.stringify(group_tuples([[""a"", ""b""], [""a"", ""c""], [""d"", ""e""]])) === JSON.stringify([[""a"", ""b"", ""c""], [""d"", ""e""]]), ""Test 2 failed""),
    console.assert(JSON.stringify(group_tuples([[""f"", ""g""], [""f"", ""g""], [""h"", ""i""]])) === JSON.stringify([[""f"", ""g"", ""g""], [""h"", ""i""]]), ""Test 3 failed"")
]",
417, this   function to find the sublist having maximum length.,"function Find_Max(lst) { 
    let maxList = lst.reduce((max, current) => (current.length > max.length ? current : max), []);
    return maxList; 
}",418,"[
    console.assert(JSON.stringify(Find_Max([[""A""], [""A"", ""B""], [""A"", ""B"", ""C""]])) === JSON.stringify([""A"", ""B"", ""C""]), ""Test 1 failed""),
    console.assert(JSON.stringify(Find_Max([[1], [1, 2], [1, 2, 3]])) === JSON.stringify([1, 2, 3]), ""Test 2 failed""),
    console.assert(JSON.stringify(Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])) === JSON.stringify([1, 5, 6, 1]), ""Test 3 failed"")
]",
418, this function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"
function roundAndSum(list1) {
  const length = list1.length;
  const roundAndSum = list1.map(Math.round).reduce((a, b) => a + b, 0) * length;
  return roundAndSum;
}
",419,"
[console.assert(roundAndSum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) === 243), console.assert(roundAndSum([5, 2, 9, 24.3, 29]) === 345), console.assert(roundAndSum([25.0, 56.7, 89.2]) === 513)]
",
419, this   function to find the cube sum of first n even natural numbers.,"
function cube_Sum(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += (2 * i) * (2 * i) * (2 * i);
    }
    return sum;
}
",420,"
[console.assert(cube_Sum(2) === 72), console.assert(cube_Sum(3) === 288), console.assert(cube_Sum(4) === 800)];
",
420, this function to concatenate each element of tuple by the delimiter.,"function concatenateTuple(test_tup) {
    const delim = ""-"";
    let res = test_tup.map(ele => String(ele)).join(delim);
    return res;
}",421,"[
    console.assert(concatenateTuple([""ID"", ""is"", 4, ""UTS""]) === ""ID-is-4-UTS"", ""Test 1 failed""),
    console.assert(concatenateTuple([""QWE"", ""is"", 4, ""RTY""]) === ""QWE-is-4-RTY"", ""Test 2 failed""),
    console.assert(concatenateTuple([""ZEN"", ""is"", 4, ""OP""]) === ""ZEN-is-4-OP"", ""Test 3 failed"")
]",
421, this   function to find the average of cubes of first n natural numbers.,"
function find_Average_Of_Cube(n) {  
    let sum = 0;  
    for (let i = 1; i <= n; i++) {  
        sum += i * i * i;  
    }  
    return Math.round((sum / n) * 1e6) / 1e6;  
}
",422,"
[console.assert(find_Average_Of_Cube(2) === 4.5), console.assert(find_Average_Of_Cube(3) === 12), console.assert(find_Average_Of_Cube(1) === 1)]
",
422, this function to solve gold mine problem.,"
function get_maxgold(gold, m, n) { 
    let goldTable = Array.from({ length: m }, () => Array(n).fill(0));   
    for (let col = n - 1; col >= 0; col--) { 
        for (let row = 0; row < m; row++) {  
            let right = (col === n - 1) ? 0 : goldTable[row][col + 1]; 
            let right_up = (row === 0 || col === n - 1) ? 0 : goldTable[row - 1][col + 1]; 
            let right_down = (row === m - 1 || col === n - 1) ? 0 : goldTable[row + 1][col + 1]; 
            goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down); 
        } 
    } 
    let res = goldTable[0][0]; 
    for (let i = 1; i < m; i++) { 
        res = Math.max(res, goldTable[i][0]);  
    } 
    return res; 
}
",423,"
[console.assert(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4) === 16), console.assert(get_maxgold([[10,20],[30,40]],2,2) === 70), console.assert(get_maxgold([[4,9],[3,7]],2,2) === 13)]
",
423, this function to extract only the rear index element of each string in the given tuple.,"
function extractRear(testTuple) {
  const res = testTuple.map(sub => sub[sub.length - 1]);
  return res;
}
",424,"[
    console.assert(JSON.stringify(extractRear([""Mers"", ""for"", ""Vers""])) === JSON.stringify([""s"", ""r"", ""s""])),
    console.assert(JSON.stringify(extractRear([""Avenge"", ""for"", ""People""])) === JSON.stringify([""e"", ""r"", ""e""])),
    console.assert(JSON.stringify(extractRear([""Gotta"", ""get"", ""go""])) === JSON.stringify([""a"", ""t"", ""o""]))
]",
424, this function to count the number of sublists containing a particular element.,"
function countElementInList(list1, x) {
    let ctr = 0;
    for (let i = 0; i < list1.length; i++) {
        if (list1[i].includes(x)) {
            ctr++;
        }
    }
    return ctr;
}
",425,"
[console.assert(countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) === 3), console.assert(countElementInList([[""A"", ""B""], [""A"", ""C""], [""A"", ""D"", ""E""], [""B"", ""C"", ""D""]], ""A"") === 3), console.assert(countElementInList([[""A"", ""B""], [""A"", ""C""], [""A"", ""D"", ""E""], [""B"", ""C"", ""D""]], ""E"") === 1)]
",
426, this function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"function changeDateFormat(dt) {
    return dt.replace(/(\d{4})-(\d{1,2})-(\d{1,2})/, function(_, year, month, day) {
        return `${day}-${month}-${year}`;
    });
}",427,"[
    console.assert(changeDateFormat(""2026-01-02"") === ""02-01-2026""),
    console.assert(changeDateFormat(""2020-11-13"") === ""13-11-2020""),
    console.assert(changeDateFormat(""2021-04-26"") === ""26-04-2021"")
]",
427, this function to sort the given array by using shell sort.,"
function shellSort(myList) {
    let gap = Math.floor(myList.length / 2);
    while (gap > 0) {
        for (let i = gap; i < myList.length; i++) {
            let currentItem = myList[i];
            let j = i;
            while (j >= gap && myList[j - gap] > currentItem) {
                myList[j] = myList[j - gap];
                j -= gap;
            }
            myList[j] = currentItem;
        }
        gap = Math.floor(gap / 2);
    }
    return myList;
}
",428,"
[console.assert(shellSort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]).toString() === [2, 3, 4, 5, 12, 12, 23, 56, 81, 95].toString()), console.assert(shellSort([24, 22, 39, 34, 87, 73, 68]).toString() === [22, 24, 34, 39, 68, 73, 87].toString()), console.assert(shellSort([32, 30, 16, 96, 82, 83, 74]).toString() === [16, 30, 32, 74, 82, 83, 96].toString())]
",
428, this function to extract the elementwise and tuples from the given two tuples.,"
function andTuples(testTup1, testTup2) {
  const res = testTup1.map((ele1, index) => ele1 & testTup2[index]);
  return res;
}
",429,"
[console.assert(andTuples([10, 4, 6, 9], [5, 2, 3, 3]).toString() === [0, 0, 2, 1].toString()), console.assert(andTuples([1, 2, 3, 4], [5, 6, 7, 8]).toString() === [1, 2, 3, 0].toString()), console.assert(andTuples([8, 9, 11, 12], [7, 13, 14, 17]).toString() === [0, 9, 10, 0].toString())]
",
429, this function to find the directrix of a parabola.,"
function parabola_directrix(a, b, c) { 
    let directrix = Math.floor(c - ((b * b) + 1) * 4 * a);
    return directrix;
  }",430,"
[console.assert(parabola_directrix(5,3,2) === -198), console.assert(parabola_directrix(9,8,4) === -2336), console.assert(parabola_directrix(2,4,6) === -130)]
",
430, this function that takes two lists and returns true if they have at least one common element.,"function commonElement(list1, list2) {
    let result = false;
    for (let x of list1) {
        for (let y of list2) {
            if (x === y) {
                result = true;
                return result;
            }
        }
    }
    return result;  
}",431,"[console.assert(commonElement([1,2,3,4,5], [5,6,7,8,9]) === true), console.assert(commonElement([1,2,3,4,5], [6,7,8,9]) === false), console.assert(commonElement([""a"",""b"",""c""], [""d"",""b"",""e""]) === true)]",
431, this function to find the median of a trapezium.,"
function median_trapezium(base1, base2, height) {
    const median = 0.5 * (base1 + base2);
    return median;
}
",432,"
[console.assert(median_trapezium(15,25,35) === 20), console.assert(median_trapezium(10,20,30) === 15), console.assert(median_trapezium(6,9,4) === 7.5)]
",
432, this function to check whether the entered number is greater than the elements of the given array.,"
function checkGreater(arr, number) {
  arr.sort((a, b) => a - b);
  if (number > arr[arr.length - 1]) {
    return Yes, the entered number is greater than those in the array;
  } else {
    return No, entered number is less than those in the array;
  }
}
",433,"function checkGreater(arr, number) {
    arr.sort((a, b) => a - b);
    if (number > arr[arr.length - 1]) {
      return ""Yes, the entered number is greater than those in the array"";
    } else {
      return ""No, entered number is less than those in the array"";
    }
  }",
433, this function that matches a string that has an a followed by one or more bs.,"function textMatchOne(text) {
    const patterns = /ab+/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",434,"
[console.assert(textMatchOne(""ac"") === ""Not matched!""), console.assert(textMatchOne(""dc"") === ""Not matched!""), console.assert(textMatchOne(""abba"") === ""Found a match!"")]
",
434, this   function to find the last digit of a given number.,"
function last_Digit(n) {
    return n % 10;
}
",435,"
[console.assert(last_Digit(123) === 3), console.assert(last_Digit(25) === 5), console.assert(last_Digit(30) === 0)]
",
435, this   function to print negative numbers in a list.,"function neg_nos(list1) {
    let negatives = [];
    for (let num of list1) {
        if (num < 0) {
            negatives.push(num);
        }
    }
    return negatives;
}",436,"[
    console.assert(JSON.stringify(neg_nos([-1, 4, 5, -6])) === JSON.stringify([-1, -6])),
    console.assert(JSON.stringify(neg_nos([-1, -2, 3, 4])) === JSON.stringify([-1, -2])),
    console.assert(JSON.stringify(neg_nos([-7, -6, 8, 9])) === JSON.stringify([-7, -6]))
]",
436, this function to remove odd characters in a string.,"function remove_odd(str1) {
    let str2 = """";  
    for (let i = 0; i < str1.length; i++) {
        if (i % 2 !== 0) {  
            str2 += str1[i];  
        }
    }
    return str2;
}",437,"[console.assert(remove_odd(""program"") === ""rga"", ""Test 1 failed""),
console.assert(remove_odd(""language"") === ""agae"", ""Test 2 failed""),
console.assert(remove_odd(""abcde"") === ""bd"", ""Test 3 failed"")]",
437, this function to count bidirectional tuple pairs.,"function countBidirectional(testList) {
    let res = 0;
    for (let idx = 0; idx < testList.length; idx++) {
        for (let iidx = idx + 1; iidx < testList.length; iidx++) {
            if (testList[iidx][0] === testList[idx][1] && testList[idx][1] === testList[iidx][0]) {
                res += 1;
            }
        }
    }
    return res.toString();  
}",438,"[console.assert(countBidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]) === ""3"", ""Test 1 failed""),
console.assert(countBidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]) === ""2"", ""Test 2 failed""),
console.assert(countBidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]) === ""4"", ""Test 3 failed"")]",
438, this function to convert a list of multiple integers into a single integer.,"function multipleToSingle(L) {
    let x = parseInt(L.join(''));
    return x;
}",439,"
[console.assert(multipleToSingle([11, 33, 50]) === 113350), console.assert(multipleToSingle([-1, 2, 3, 4, 5, 6]) === -123456), console.assert(multipleToSingle([10, 15, 20, 25]) === 10152025)]
",
439, this function to find all adverbs and their positions in a given sentence.,"function findAdverbPosition(text) {
    const regex = /\w+ly/g;
    let match;
    const result = [];
    while ((match = regex.exec(text)) !== null) {
        result.push([match.index, regex.lastIndex, match[0]]);
    }
    return result;
}",440,"[console.assert(JSON.stringify(findAdverbPosition(""clearly!! we can see the sky"")) === JSON.stringify([[0, 7, ""clearly""]]), ""Test 1 failed""),
console.assert(JSON.stringify(findAdverbPosition(""seriously!! there are many roses"")) === JSON.stringify([[0, 9, ""seriously""]]), ""Test 2 failed""),
console.assert(JSON.stringify(findAdverbPosition(""unfortunately!! sita is going to home"")) === JSON.stringify([[0, 13, ""unfortunately""]]), ""Test 3 failed"")]",
440, this function to find the surface area of a cube.,"
function surfacearea_cube(l) {
  var surfacearea = 6 * l * l;
  return surfacearea;
}
",441,"
[console.assert(surfacearea_cube(5) === 150), console.assert(surfacearea_cube(3) === 54), console.assert(surfacearea_cube(10) === 600)]
",
441, this function to find the ration of positive numbers in an array of integers.,"
function positiveCount(nums) {
    let n = nums.length;
    let n1 = 0;
    for (let x of nums) {
        if (x > 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
",442,"
[console.assert(positiveCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])===0.54), console.assert(positiveCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])===0.69), console.assert(positiveCount([2, 4, -6, -9, 11, -12, 14, -5, 17])===0.56)]
",
442, this   function to find the largest negative number from the given list.,"
function largestNeg(list1) { 
    let max = list1[0]; 
    for (let x of list1) { 
        if (x < max) { 
            max = x;  
        } 
    } 
    return max; 
}
",443,"
[console.assert(largestNeg([1,2,3,-4,-6]) === -6), console.assert(largestNeg([1,2,3,-8,-9]) === -9), console.assert(largestNeg([1,2,3,4,-1]) === -1)]
",
443, this function to trim each tuple by k in the given tuple list.,"function trimTuple(testList, K) {
    let res = [];
    for (let ele of testList) {
        let N = ele.length;
        res.push(ele.slice(K, N - K));
    }
    return res;
}",444,"[console.assert(JSON.stringify(trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)) === JSON.stringify([[2], [9], [2], [2]]), ""Test 1 failed""),
console.assert(JSON.stringify(trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)) === JSON.stringify([[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]), ""Test 2 failed""),
console.assert(JSON.stringify(trimTuple([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)) === JSON.stringify([[8, 4], [8, 12], [1, 7], [6, 9]]), ""Test 3 failed"")]",
444, this function to perform index wise multiplication of tuple elements in the given two tuples.,"function indexMultiplication(testTup1, testTup2) {
    let res = testTup1.map((tup1, index) => 
        tup1.map((a, i) => a * testTup2[index][i])
    );
    return res;
}",445,"[console.assert(JSON.stringify(indexMultiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[6, 21], [12, 45], [2, 9], [7, 30]]), ""Test 1 failed""),
console.assert(JSON.stringify(indexMultiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[14, 32], [20, 60], [6, 20], [16, 44]]), ""Test 2 failed""),
console.assert(JSON.stringify(indexMultiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[24, 45], [30, 77], [12, 33], [27, 60]]), ""Test 3 failed"")]",
445, this   function to count the occurence of all elements of list in a tuple.,"function count_Occurrence(tup, lst) {
    let count = 0;
    for (let item of tup) {
        if (lst.includes(item)) {
            count++;
        }
    }
    return count;
}",446,"
[console.assert(count_Occurrence(['a', 'a', 'c', 'b', 'd'], ['a', 'b']) === 3, ""Test 1 failed""),
console.assert(count_Occurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]) === 6, ""Test 2 failed""),
console.assert(count_Occurrence([1, 2, 3, 4, 5, 6], [1, 2]) === 2, ""Test 3 failed"")]",
446, this function to find cubes of individual elements in a list using lambda function.,"
function cubeNums(nums) {
    const cubeNums = nums.map(x => x ** 3);
    return cubeNums;
}
",447,"
[console.assert(cubeNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000].toString()), console.assert(cubeNums([10,20,30]).toString() === [1000, 8000, 27000].toString()), console.assert(cubeNums([12,15]).toString() === [1728, 3375].toString())]
",
447, this function to calculate the sum of perrin numbers.,"
function cal_sum(n) {
    let a = 3;
    let b = 0;
    let c = 2;
    if (n === 0) {
        return 3;
    }
    if (n === 1) {
        return 3;
    }
    if (n === 2) {
        return 5;
    }
    let sum = 5;
    while (n > 2) {
        let d = a + b;
        sum += d;
        a = b;
        b = c;
        c = d;
        n--;
    }
    return sum;
}
",448,"
[console.assert(cal_sum(9) === 49), console.assert(cal_sum(10) === 66), console.assert(cal_sum(11) === 88)]
",
449, this function to extract specified size of strings from a give list of string values.,"function extractString(arr, l) {
    if (!Array.isArray(arr)) {
        throw new Error(""First argument must be an array"");
    }
    return arr.filter(e => typeof e === ""string"" && e.length === l);
}",450,"[
    console.assert(JSON.stringify(extractString([undefined, ""list"", ""exercises"", ""practice"", ""solution""], 8)) === JSON.stringify([""practice"", ""solution""])),
    console.assert(JSON.stringify(extractString([undefined, ""list"", ""exercises"", ""practice"", ""solution""], 6)) === JSON.stringify([])),
    console.assert(JSON.stringify(extractString([undefined, ""list"", ""exercises"", ""practice"", ""solution""], 9)) === JSON.stringify([""exercises""]))
]",
451, this function that gives loss amount if the given amount has loss else return none.,"function lossAmount(actualCost, saleAmount) {
    if (saleAmount < actualCost) {
        let amount = actualCost - saleAmount;
        return amount;
    } else {
        return undefined;  
    }
}",452,"[console.assert(lossAmount(1500, 1200) === 300, ""Test 1 failed""),
console.assert(lossAmount(100, 200) === undefined, ""Test 2 failed""),
console.assert(lossAmount(2000, 5000) === undefined, ""Test 3 failed"")]",
452, this   function to find the sum of even factors of a number.,"
function sumofFactors(n) {
    if (n % 2 !== 0) {
        return 0;
    }
    let res = 1;
    for (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {
        let count = 0;
        let curr_sum = 1;
        let curr_term = 1;
        while (n % i === 0) {
            count++;
            n = Math.floor(n / i);
            if (i === 2 && count === 1) {
                curr_sum = 0;
            }
            curr_term *= i;
            curr_sum += curr_term;
        }
        res *= curr_sum;
    }
    if (n >= 2) {
        res *= (1 + n);
    }
    return res;
}",453,"
[console.assert(sumofFactors(18) === 26), console.assert(sumofFactors(30) === 48), console.assert(sumofFactors(6) === 8)]
",
453, this function that matches a word containing z.,"function textMatchWordz(text) {
    const patterns = /\w*z.\w*/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",454,"[
    console.assert(textMatchWordz("" z."") === ""Found a match!""),
    console.assert(textMatchWordz(""xyz."") === ""Found a match!""),
    console.assert(textMatchWordz(""  lang  ."") === ""Not matched!"")
]",
454, this function to check whether the given month number contains 31 days or not.,"
function check_monthnumb_number(monthnum2) {
  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {
    return true;
  } else {
    return false;
  }
}
",455,"
[console.assert(check_monthnumb_number(5) === true), console.assert(check_monthnumb_number(2) === false), console.assert(check_monthnumb_number(6) === false)]
",
455, this function to reverse strings in a given list of string values.,"function reverseStringList(stringList) {
    var result = stringList.map(function(x) {
        return x.split('').reverse().join(''); 
    });
    return result;
}",456,"[console.assert(reverseStringList([""Red"", ""Green"", ""Blue"", ""White"", ""Black""]).toString() === [""deR"", ""neerG"", ""eulB"", ""etihW"", ""kcalB""].toString(), ""Test 1 failed""),
console.assert(reverseStringList([""john"", ""amal"", ""joel"", ""george""]).toString() === [""nhoj"", ""lama"", ""leoj"", ""egroeg""].toString(), ""Test 2 failed""),
console.assert(reverseStringList([""jack"", ""john"", ""mary""]).toString() === [""kcaj"", ""nhoj"", ""yram""].toString(), ""Test 3 failed"")]",
456, this   function to find the sublist having minimum length.,"function Find_Min(lst) {
    let flatList = lst.flat();
    let minList = flatList.sort()[0]; 
    return [minList];
}",457,"[console.assert(JSON.stringify(Find_Min([[1],[1,2],[1,2,3]])) === JSON.stringify([1]), ""Test 1 failed""),
console.assert(JSON.stringify(Find_Min([[1,1],[1,1,1],[1,2,7,8]])) === JSON.stringify([1]), ""Test 2 failed""),
console.assert(JSON.stringify(Find_Min([[""x""],[""x"",""y""],[""x"",""y"",""z""]])) === JSON.stringify([""x""]), ""Test 3 failed"")]",
457, this function to find the area of a rectangle.,"
function rectangleArea(l, b) {
  const area = l * b;
  return area;
}
",458,"
[console.assert(rectangleArea(10, 20) === 200), console.assert(rectangleArea(10, 5) === 50), console.assert(rectangleArea(4, 2) === 8)]
",
458, this function to remove uppercase substrings from a given string by using regex.,"function removeUppercase(str1) {
    const removeUpper = text => text.replace(/[A-Z]/g, '');  
    const result = removeUpper(str1);
    return result;
}",459,"[console.assert(removeUppercase(""cAstyoUrFavoRitETVshoWs"") === ""cstyoravoitshos"", ""Test 1 failed""),
console.assert(removeUppercase(""wAtchTheinTernEtrAdIo"") === ""wtchheinerntrdo"", ""Test 2 failed""),
console.assert(removeUppercase(""VoicESeaRchAndreComMendaTionS"") === ""oiceachndreomendaion"", ""Test 3 failed"")]",
459, this   function to get the first element of each sublist.,"function Extract(lst) {
    return lst.map(item => item[0]);
}",460,"[console.assert(JSON.stringify(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])) === JSON.stringify([1, 3, 6]), ""Test 1 failed""),
console.assert(JSON.stringify(Extract([[1,2,3],[4, 5]])) === JSON.stringify([1,4]), ""Test 2 failed""),
console.assert(JSON.stringify(Extract([[9,8,1],[1,2]])) === JSON.stringify([9,1]), ""Test 3 failed"")]",
460, this   function to count the upper case characters in a given string.,"function upperCtr(str) {
    let upperCtr = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') {
            upperCtr += 1;
        }
    }
    return upperCtr;
}",461,"[console.assert(upperCtr(""BigData"") === 2, ""Test 1 failed""),
console.assert(upperCtr(""program"") === 0, ""Test 2 failed""),
console.assert(upperCtr(""HelloWorld"") === 2, ""Test 3 failed"")]",
461, this function to find all possible combinations of the elements of a given list.,"
function combinationsList(list1) {
    if (list1.length === 0) {
        return [[]];
    }
    let result = [];
    for (let el of combinationsList(list1.slice(1))) {
        result.push(el);
        result.push(el.concat(list1[0]));
    }
    return result;
}
",462,"[
console.assert(JSON.stringify(combinationsList([""orange"", ""red"", ""green"", ""blue""])) === JSON.stringify([[], [""orange""], [""red""], [""red"", ""orange""], [""green""], [""green"", ""orange""], [""green"", ""red""], [""green"", ""red"", ""orange""], [""blue""], [""blue"", ""orange""], [""blue"", ""red""], [""blue"", ""red"", ""orange""], [""blue"", ""green""], [""blue"", ""green"", ""orange""], [""blue"", ""green"", ""red""], [""blue"", ""green"", ""red"", ""orange""]])),
console.assert(JSON.stringify(combinationsList([""red"", ""green"", ""blue"", ""white"", ""black"", ""orange""])) === JSON.stringify([[], [""red""], [""green""], [""green"", ""red""], [""blue""], [""blue"", ""red""], [""blue"", ""green""], [""blue"", ""green"", ""red""], [""white""], [""white"", ""red""], [""white"", ""green""], [""white"", ""green"", ""red""], [""white"", ""blue""], [""white"", ""blue"", ""red""], [""white"", ""blue"", ""green""], [""white"", ""blue"", ""green"", ""red""], [""black""], [""black"", ""red""], [""black"", ""green""], [""black"", ""green"", ""red""], [""black"", ""blue""], [""black"", ""blue"", ""red""], [""black"", ""blue"", ""green""], [""black"", ""blue"", ""green"", ""red""], [""black"", ""white""], [""black"", ""white"", ""red""], [""black"", ""white"", ""green""], [""black"", ""white"", ""green"", ""red""], [""black"", ""white"", ""blue""], [""black"", ""white"", ""blue"", ""red""], [""black"", ""white"", ""blue"", ""green""], [""black"", ""white"", ""blue"", ""green"", ""red""], [""orange""], [""orange"", ""red""], [""orange"", ""green""], [""orange"", ""green"", ""red""], [""orange"", ""blue""], [""orange"", ""blue"", ""red""], [""orange"", ""blue"", ""green""], [""orange"", ""blue"", ""green"", ""red""], [""orange"", ""white""], [""orange"", ""white"", ""red""], [""orange"", ""white"", ""green""], [""orange"", ""white"", ""green"", ""red""], [""orange"", ""white"", ""blue""], [""orange"", ""white"", ""blue"", ""red""], [""orange"", ""white"", ""blue"", ""green""], [""orange"", ""white"", ""blue"", ""green"", ""red""], [""orange"", ""black""], [""orange"", ""black"", ""red""], [""orange"", ""black"", ""green""], [""orange"", ""black"", ""green"", ""red""], [""orange"", ""black"", ""blue""], [""orange"", ""black"", ""blue"", ""red""], [""orange"", ""black"", ""blue"", ""green""], [""orange"", ""black"", ""blue"", ""green"", ""red""], [""orange"", ""black"", ""white""], [""orange"", ""black"", ""white"", ""red""], [""orange"", ""black"", ""white"", ""green""], [""orange"", ""black"", ""white"", ""green"", ""red""], [""orange"", ""black"", ""white"", ""blue""], [""orange"", ""black"", ""white"", ""blue"", ""red""], [""orange"", ""black"", ""white"", ""blue"", ""green""], [""orange"", ""black"", ""white"", ""blue"", ""green"", ""red""]])),
console.assert(JSON.stringify(combinationsList([""red"", ""green"", ""black"", ""orange""])) === JSON.stringify([[], [""red""], [""green""], [""green"", ""red""], [""black""], [""black"", ""red""], [""black"", ""green""], [""black"", ""green"", ""red""], [""orange""], [""orange"", ""red""], [""orange"", ""green""], [""orange"", ""green"", ""red""], [""orange"", ""black""], [""orange"", ""black"", ""red""], [""orange"", ""black"", ""green""], [""orange"", ""black"", ""green"", ""red""]]))
]",
462, this function to find the maximum product subarray of the given array.,"
function maxSubarrayProduct(arr) {
    const n = arr.length;
    let maxEndingHere = 1;
    let minEndingHere = 1;
    let maxSoFar = 0;
    let flag = 0;
    
    for (let i = 0; i < n; i++) {
        if (arr[i] > 0) {
            maxEndingHere = maxEndingHere * arr[i];
            minEndingHere = Math.min(minEndingHere * arr[i], 1);
            flag = 1;
        } else if (arr[i] === 0) {
            maxEndingHere = 1;
            minEndingHere = 1;
        } else {
            const temp = maxEndingHere;
            maxEndingHere = Math.max(minEndingHere * arr[i], 1);
            minEndingHere = temp * arr[i];
        }
        if (maxSoFar < maxEndingHere) {
            maxSoFar = maxEndingHere;
        }
    }
    
    if (flag === 0 && maxSoFar === 0) {
        return 0;
    }
    return maxSoFar;
}
",463,"
[console.assert(maxSubarrayProduct([1, -2, -3, 0, 7, -8, -2]) === 112), console.assert(maxSubarrayProduct([6, -3, -10, 0, 2]) === 180), console.assert(maxSubarrayProduct([-2, -40, 0, -2, -3]) === 80)]
",
463, this function to check if all values are same in a dictionary.,"function checkValue(dict, n) {
    let result = Object.values(dict).every(x => x === n);
    return result;
}",464,"[
    console.assert(checkValue({""Cierra Vega"": 12, ""Alden Cantrell"": 12, ""Kierra Gentry"": 12, ""Pierre Cox"": 12}, 10) === false),
    console.assert(checkValue({""Cierra Vega"": 12, ""Alden Cantrell"": 12, ""Kierra Gentry"": 12, ""Pierre Cox"": 12}, 12) === true),
    console.assert(checkValue({""Cierra Vega"": 12, ""Alden Cantrell"": 12, ""Kierra Gentry"": 12, ""Pierre Cox"": 12}, 5) === false)
]",
464, this function to drop empty items from a given dictionary.,"
function dropEmpty(dict1) {
  dict1 = Object.fromEntries(Object.entries(dict1).filter(([key, value]) => value !== null));
  return dict1;
}
",465,"[
    console.assert(JSON.stringify(dropEmpty({c1: ""Red"", c2: ""Green"", c3: null})) === JSON.stringify({c1: ""Red"", c2: ""Green""})),
    console.assert(JSON.stringify(dropEmpty({c1: ""Red"", c2: null, c3: null})) === JSON.stringify({c1: ""Red""})),
    console.assert(JSON.stringify(dropEmpty({c1: null, c2: ""Green"", c3: null})) === JSON.stringify({c2: ""Green""}))
]",
466, this   function to convert decimal number to octal number.,"
function decimal_to_Octal(deciNum) {
    let octalNum = 0;
    let countval = 1;
    let dNo = deciNum;
    while (deciNum != 0) {
        let remainder = deciNum % 8;
        octalNum += remainder * countval;
        countval = countval * 10;
        deciNum = Math.floor(deciNum / 8);
    }
    return octalNum;
}
",467,"
[console.assert(decimal_to_Octal(10) === 12), console.assert(decimal_to_Octal(2) === 2), console.assert(decimal_to_Octal(33) === 41)]
",
467, this function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"
function maxProduct(arr, n) {
    let mpis = new Array(n).fill(0);
    for (let i = 0; i < n; i++) {
        mpis[i] = arr[i];
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {
                mpis[i] = mpis[j] * arr[i];
            }
        }
    }
    return Math.max(...mpis);
}
",468,"
[console.assert(maxProduct([3, 100, 4, 5, 150, 6], 6) === 45000), console.assert(maxProduct([4, 42, 55, 68, 80], 5) === 50265600), console.assert(maxProduct([10, 22, 9, 33, 21, 50, 41, 60], 8) === 21780000)]
",
468, this function to find the maximum profit earned from a maximum of k stock transactions,"
function max_profit(price, k) {
    const n = price.length;
    const final_profit = Array.from({ length: k + 1 }, () => Array(n).fill(null));
    
    for (let i = 0; i <= k; i++) {
        for (let j = 0; j < n; j++) {
            if (i === 0 || j === 0) {
                final_profit[i][j] = 0;
            } else {
                let max_so_far = 0;
                for (let x = 0; x < j; x++) {
                    const curr_price = price[j] - price[x] + final_profit[i - 1][x];
                    if (max_so_far < curr_price) {
                        max_so_far = curr_price;
                    }
                }
                final_profit[i][j] = Math.max(final_profit[i][j - 1], max_so_far);
            }
        }
    }
    return final_profit[k][n - 1];
}
",469,"
[console.assert(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) === 10), console.assert(max_profit([2, 4, 7, 5, 4, 3, 5], 2) === 7), console.assert(max_profit([10, 6, 8, 4, 2], 2) === 2)]
",
469, this function to find the pairwise addition of the elements of the given tuples.,"
function add_pairwise(test_tup) {
    const res = test_tup.slice(1).map((j, index) => test_tup[index] + j);
    return [res];
}
",470,"
[console.assert(add_pairwise([1, 5, 7, 8, 10]).toString() === [6, 12, 15, 18].toString()), console.assert(add_pairwise([2, 6, 8, 9, 11]).toString() === [8, 14, 17, 20].toString()), console.assert(add_pairwise([3, 7, 9, 10, 12]).toString() === [10, 16, 19, 22].toString())]
",
470, this   function to find remainder of array multiplication divided by n.,"
function findRemainder(arr, lens, n) { 
    let mul = 1; 
    for (let i = 0; i < lens; i++) {  
        mul = (mul * (arr[i] % n)) % n; 
    } 
    return mul % n; 
}
",471,"
[console.assert(findRemainder([100, 10, 5, 25, 35, 14], 6, 11) === 9), console.assert(findRemainder([1, 1, 1], 3, 1) === 0), console.assert(findRemainder([1, 2, 1], 3, 2) === 0)]
",
471, this   function to check whether the given list contains consecutive numbers or not.,"
function check_Consecutive(l) {
    return JSON.stringify(l.sort((a, b) => a - b)) === JSON.stringify(Array.from({length: Math.max(...l) - Math.min(...l) + 1}, (_, i) => i + Math.min(...l)));
}
",472,"[
  console.assert(check_Consecutive([1, 2, 3, 4, 5]) === true),
  console.assert(check_Consecutive([1, 2, 3, 5, 6]) === false),
  console.assert(check_Consecutive([1, 2, 1]) === false)
]",
472, this function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"function tupleIntersection(testList1, testList2) {
    const set1 = new Set(testList1.map(ele => JSON.stringify([...ele].sort())));
    const set2 = new Set(testList2.map(ele => JSON.stringify([...ele].sort())));

    const intersection = [...set1].filter(ele => set2.has(ele)).map(ele => JSON.parse(ele));

    return new Set(intersection.map(tuple => JSON.stringify(tuple)));
}",473,"[console.assert(JSON.stringify(tupleIntersection([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])) === JSON.stringify(new Set([[4, 5], [3, 4], [5, 6]])), ""Test 1 failed""),
console.assert(JSON.stringify(tupleIntersection([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]])) === JSON.stringify(new Set([[4, 7], [1, 4]])), ""Test 2 failed""),
console.assert(JSON.stringify(tupleIntersection([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])) === JSON.stringify(new Set([[1, 3], [2, 3]])), ""Test 3 failed"")]",
473, this function to replace characters in a string.,"function replaceChar(str1, ch, newch) {
    let str2 = str1.replace(new RegExp(ch, 'g'), newch);
    return str2;
}",474,"[
  console.assert(replaceChar(""polygon"", ""y"", ""l"") === ""pollgon""),
  console.assert(replaceChar(""character"", ""c"", ""a"") === ""aharaater""),
  console.assert(replaceChar("" "", ""l"", ""a"") === "" "")
]",
474, this function to sort counter by value.,"
function sortCounter(dict1) {
    const sortedCounter = Object.entries(dict1).sort((a, b) => b[1] - a[1]);
    return sortedCounter;
}
",475,"[
  console.assert(JSON.stringify(sortCounter({Math: 81, Physics: 83, Chemistry: 87})) === JSON.stringify([[""Chemistry"", 87], [""Physics"", 83], [""Math"", 81]])),
  console.assert(JSON.stringify(sortCounter({Math: 400, Physics: 300, Chemistry: 250})) === JSON.stringify([[""Math"", 400], [""Physics"", 300], [""Chemistry"", 250]])),
  console.assert(JSON.stringify(sortCounter({Math: 900, Physics: 1000, Chemistry: 1250})) === JSON.stringify([[""Chemistry"", 1250], [""Physics"", 1000], [""Math"", 900]]))
]",
475, this   function to find the sum of the largest and smallest value in a given array.,"
function big_sum(nums) {
    let sum = Math.max(...nums) + Math.min(...nums);
    return sum;
}
",476,"
[console.assert(big_sum([1,2,3]) === 4), console.assert(big_sum([-1,2,3,4]) === 3), console.assert(big_sum([2,3,6]) === 8)]
",
476, this   function to convert the given string to lower case.,"
function is_lower(string) {
  return string.toLowerCase();
}
",477,"
[console.assert(is_lower(""InValid"") === ""invalid""), console.assert(is_lower(""TruE"") === ""true""), console.assert(is_lower(""SenTenCE"") === ""sentence"")]
",
477, this function to remove lowercase substrings from a given string.,"function removeLowercase(str1) {
    const removeLower = text => text.replace(/[a-z]/g, ''); 
    const result = removeLower(str1);
    return result;
}",478,"[
    console.assert(removeLowercase(""PYTH"") === ""PYTH"", ""Test 1 failed""),
    console.assert(removeLowercase(""FInD"") === ""FID"", ""Test 2 failed""),
    console.assert(removeLowercase(""STRinG"") === ""STRG"", ""Test 3 failed"")
]",
479, this   function to find the maximum occurring character in a given string.,"
function getMaxOccuringChar(str1) {
  const ASCII_SIZE = 256;
  const ctr = new Array(ASCII_SIZE).fill(0);
  let max = -1;
  let ch = ;

  for (let i of str1) {
    ctr[i.charCodeAt(0)]++;
  }
  
  for (let i of str1) {
    if (max < ctr[i.charCodeAt(0)]) {
      max = ctr[i.charCodeAt(0)];
      ch = i;
    }
  }
  
  return [ch];
}
",480,"
[console.assert(getMaxOccuringChar(""data"") === ""a""), console.assert(getMaxOccuringChar(""create"") === ""e""), console.assert(getMaxOccuringChar(""brilliant girl"") === ""i"")]
",
480, this function to determine if there is a subset of the given set with sum equal to the given sum.,"
function isSubsetSum(set, n, sum) {
    if (sum === 0) {
        return true;
    }
    if (n === 0) {
        return false;
    }
    if (set[n - 1] > sum) {
        return isSubsetSum(set, n - 1, sum);
    }
    return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);
}
",481,"[
  console.assert(isSubsetSum([3, 34, 4, 12, 5, 2], 6, 9) === true),
  console.assert(isSubsetSum([3, 34, 4, 12, 5, 2], 6, 30) === false),
  console.assert(isSubsetSum([3, 34, 4, 12, 5, 2], 6, 15) === true)
]",
481, this function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"
function match(text) {
    const pattern = /^[A-Z]+[a-z]+$/;
    if (pattern.test(text)) {
        return Yes;
    } else {
        return No;
    }
}
",482,"[console.assert(match(""Geeks"") === ""Yes""),
console.assert(match(""geeksforGeeks"") === ""Yes""),
console.assert(match(""geeks"") === ""No"") ]",
482, this   function to find the first natural number whose factorial is divisible by x.,"
function first_Factorial_Divisible_Number(x) {
    let i = 1;
    let fact = 1;
    for (i = 1; i < x; i++) {
        fact = fact * i;
        if (fact % x === 0) {
            break;
        }
    }
    return i;
}
",483,"
[console.assert(first_Factorial_Divisible_Number(10) === 5), console.assert(first_Factorial_Divisible_Number(15) === 5), console.assert(first_Factorial_Divisible_Number(5) === 4)]
",
483, this function to remove the matching tuples from the given two tuples.,"function remove_matching_tuple(test_list1, test_list2) {
    let res = test_list1.filter(sub => !test_list2.some(tup => tup.length === sub.length && tup.every((value, index) => value === sub[index])));
    return res;
}",484,"[
    console.assert(remove_matching_tuple([[""Hello"", ""dude""], [""How"", ""are""], [""you"", ""?""]], [[""Hello"", ""dude""], [""How"", ""are""]]).toString() === [[""you"", ""?""]].toString(), ""Test 1 failed""),
    console.assert(remove_matching_tuple([[""Part"", ""of""], [""the"", ""journey""], [""is"", ""end""]], [[""Journey"", ""the""], [""is"", ""end""]]).toString() === [[""Part"", ""of""], [""the"", ""journey""]].toString(), ""Test 2 failed""),
    console.assert(remove_matching_tuple([[""Its"", ""been""], [""a"", ""long""], [""day"", ""without""]], [[""a"", ""long""], [""my"", ""friend""]]).toString() === [[""Its"", ""been""], [""day"", ""without""]].toString(), ""Test 3 failed"")
]",
484, this function to find the largest palindromic number in the given array.,"function largest_palindrome(A, n) {
    const is_palindrome = (num) => {
        let divisor = 1;
        while (num / divisor >= 10) {
            divisor *= 10;
        }
        while (num !== 0) {
            const leading = Math.floor(num / divisor);
            const trailing = num % 10;
            if (leading !== trailing) {
                return false;
            }
            num = Math.floor((num % divisor) / 10);
            divisor = Math.floor(divisor / 100);
        }
        return true;
    };

    A.sort((a, b) => b - a);  
    
    for (let i = 0; i < n; i++) {  
        if (is_palindrome(A[i])) {
            return A[i];  
        }
    }
    return -1;  
}",485,"[console.assert(largest_palindrome([1, 232, 54545, 999991], 4) === 54545, ""Test 1 failed""),
console.assert(largest_palindrome([1, 2, 3, 4, 5, 50], 6) === 5, ""Test 2 failed""),
console.assert(largest_palindrome([1, 3, 7, 9, 45], 5) === 9, ""Test 3 failed"")]",
486, this function to sort a list of tuples in increasing order by the last element in each tuple.,"function sortTuple(tup) {
    const lst = tup.length;
    for (let i = 0; i < lst; i++) {
        for (let j = 0; j < lst - i - 1; j++) {
            if (tup[j][tup[j].length - 1] > tup[j + 1][tup[j + 1].length - 1]) {
                let temp = tup[j];
                tup[j] = tup[j + 1];
                tup[j + 1] = temp;
            }
        }
    }
    return tup;
}",487,"[console.assert(JSON.stringify(sortTuple([[1, 3], [3, 2], [2, 1]])) === JSON.stringify([[2, 1], [3, 2], [1, 3]]), ""Test 1 failed""),
console.assert(JSON.stringify(sortTuple([[2, 4], [3, 3], [1, 1]])) === JSON.stringify([[1, 1], [3, 3], [2, 4]]), ""Test 2 failed""),
console.assert(JSON.stringify(sortTuple([[3, 9], [6, 7], [4, 3]])) === JSON.stringify([[4, 3], [6, 7], [3, 9]]), ""Test 3 failed"")]",
487, this function to find the area of a pentagon.,"
function areaPentagon(a) {
  var area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;
  return area;
}
",488,"
[console.assert(areaPentagon(5) === 43.01193501472417), console.assert(areaPentagon(10) === 172.0477400588967), console.assert(areaPentagon(15) === 387.10741513251753)]
",
488, this   function to find the frequency of the largest value in a given array.,"
function frequency_Of_Largest(n, arr) {
    let mn = arr[0];
    let freq = 1;
    for (let i = 1; i < n; i++) {
        if (arr[i] > mn) {
            mn = arr[i];
            freq = 1;
        } else if (arr[i] === mn) {
            freq += 1;
        }
    }
    return freq;
}",489,"[
  console.assert(frequency_Of_Largest(5,[1,2,3,4,4]) === 2),
  console.assert(frequency_Of_Largest(3,[5,6,5]) === 1),
  console.assert(frequency_Of_Largest(4,[2,7,7,7]) === 3)
]",
490, this function to find the sum of geometric progression series.,"
function sum_gp(a, n, r) {
    let total = (a * (1 - Math.pow(r, n))) / (1 - r);
    return total;
}
",491,"
[console.assert(sum_gp(1, 5, 2) === 31), console.assert(sum_gp(1, 5, 4) === 341), console.assert(sum_gp(2, 6, 3) === 728)]
",
491, this function to search an element in the given array by using binary search.,"function binarySearch(itemList, item) {
    let first = 0;
    let last = itemList.length - 1;
    let found = false;
    while (first <= last && !found) {
        let mid = Math.floor((first + last) / 2);
        if (itemList[mid] === item) {
            found = true;
        } else {
            if (item < itemList[mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    }
    ",492,"
[console.assert(binarySearch([1,2,3,5,8], 6) === false), console.assert(binarySearch([7, 8, 9, 10, 13], 10) === true), console.assert(binarySearch([11, 13, 14, 19, 22, 36], 23) === false)]
",
492," this function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","function calculatePolygons(startx, starty, endx, endy, radius) {
    const sl = (2 * radius) * Math.tan(Math.PI / 6);
    const p = sl * 0.5;
    const b = sl * Math.cos((30 * Math.PI) / 180);
    const w = b * 2;
    const h = 2 * radius;

    startx -= w;
    starty -= radius;
    endx += w;
    endy += radius;

    const origx = startx;
    const origy = starty;
    const xoffset = b;
    const yoffset = 1.5 * radius;
    const polygons = [];
    let row = 1;

    while (starty < endy) {
        startx = (row % 2 === 0) ? origx + xoffset : origx;

        while (startx < endx) {
            const p1 = [startx, starty + radius / 2];
            const p2 = [startx, starty + (3 * radius) / 2];
            const p3 = [startx + b, starty + 2 * radius];
            const p4 = [startx + w, starty + (3 * radius) / 2];
            const p5 = [startx + w, starty + radius / 2];
            const p6 = [startx + b, starty];
            const poly = [p1, p2, p3, p4, p5, p6, p1];

            polygons.push(poly);
            startx += w;
        }
        starty += yoffset;
        row += 1;
    }
    return polygons;
}",493,"
[console.assert(
    JSON.stringify(calculatePolygons(1, 1, 4, 4, 3)) === JSON.stringify([
        [
            [ -5, -0.5 ],
            [ -5, 2.5 ],
            [ -2, 4 ],
            [ 1, 2.5 ],
            [ 1, -0.5 ],
            [ -2, -2 ],
            [ -5, -0.5 ]
        ],
        [
            [ 1, -0.5 ],
            [ 1, 2.5 ],
            [ 4, 4 ],
            [ 7, 2.5 ],
            [ 7, -0.5 ],
            [ 4, -2 ],
            [ 1, -0.5 ]
        ],
        [
            [ 7, -0.5 ],
            [ 7, 2.5 ],
            [ 10, 4 ],
            [ 13, 2.5 ],
            [ 13, -0.5 ],
            [ 10, -2 ],
            [ 7, -0.5 ]
        ],
        [
            [ -2, 4 ],
            [ -2, 7 ],
            [ 1, 8.5 ],
            [ 4, 7 ],
            [ 4, 4 ],
            [ 1, 2.5 ],
            [ -2, 4 ]
        ],
        [
            [ 4, 4 ],
            [ 4, 7 ],
            [ 7, 8.5 ],
            [ 10, 7 ],
            [ 10, 4 ],
            [ 7, 2.5 ],
            [ 4, 4 ]
        ]
    ]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(calculatePolygons(5, 4, 7, 9, 8)) === JSON.stringify([
        [
            [ -11, 0 ],
            [ -11, 8 ],
            [ -3, 12 ],
            [ 5, 8 ],
            [ 5, 0 ],
            [ -3, -4 ],
            [ -11, 0 ]
        ],
        [
            [ 5, 0 ],
            [ 5, 8 ],
            [ 13, 12 ],
            [ 21, 8 ],
            [ 21, 0 ],
            [ 13, -4 ],
            [ 5, 0 ]
        ],
        [
            [ 21, 0 ],
            [ 21, 8 ],
            [ 29, 12 ],
            [ 37, 8 ],
            [ 37, 0 ],
            [ 29, -4 ],
            [ 21, 0 ]
        ],
        [
            [ -3, 12 ],
            [ -3, 20 ],
            [ 5, 24 ],
            [ 13, 20 ],
            [ 13, 12 ],
            [ 5, 8 ],
            [ -3, 12 ]
        ],
        [
            [ 13, 12 ],
            [ 13, 20 ],
            [ 21, 24 ],
            [ 29, 20 ],
            [ 29, 12 ],
            [ 21, 8 ],
            [ 13, 12 ]
        ]
    ]),
    ""Test Case 2 Failed""
)]",
493, this function to convert the given binary tuple to integer.,"function binaryToInteger(testTup) {
    let res = parseInt(testTup.join(''), 2); 
    return res;
}",494,"[
  console.assert(binaryToInteger([1, 1, 0, 1, 0, 0, 1]) === 105),
  console.assert(binaryToInteger([0, 1, 1, 0, 0, 1, 0, 1]) === 101),
  console.assert(binaryToInteger([1, 1, 0, 1, 0, 1]) === 53)
]",
494, this function to remove lowercase substrings from a given string by using regex.,"function removeLowercase(str1) {
    const removeLower = text => text.replace(/[a-z]/g, ''); 
    const result = removeLower(str1);
    return result;
}",495,"[console.assert(removeLowercase(""KDeoALOklOOHserfLoAJSIskdsf"") === ""KDALOOOHLAJSI"", ""Test Case 1 Failed""),
console.assert(removeLowercase(""ProducTnamEstreAmIngMediAplAYer"") === ""PTEAIMAAY"", ""Test Case 2 Failed""),
console.assert(removeLowercase(""maNufacTuredbYSheZenTechNolOGIes"") === ""NTYSZTNOGI"", ""Test Case 3 Failed"")]",
495, this function to find the smallest integers from a given list of numbers using heap queue algorithm.,"
function heapQueueSmallest(nums, n) {
    return nums.sort((a, b) => a - b).slice(0, n);
}
",496,"
[console.assert(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3).toString() === [14, 22, 25].toString()), 
 console.assert(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2).toString() === [14, 22].toString()), 
 console.assert(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5).toString() === [14, 22, 22, 25, 35].toString())]
",
496, this function to find the surface area of a cone.,"
function surfacearea_cone(r, h) {
  let l = Math.sqrt(r * r + h * h);
  let SA = Math.PI * r * (r + l);
  return SA;
}
",497,"
[console.assert(surfacearea_cone(5, 12) === 282.7433388230814), console.assert(surfacearea_cone(10, 15) === 880.5179353159282), console.assert(surfacearea_cone(19, 17) === 2655.923961165254)]
",
497, this   function to find gcd of two positive integers.,"
function gcd(x, y) {
    let gcd = 1;
    if (x % y === 0) {
        return y;
    }
    for (let k = Math.floor(y / 2); k > 0; k--) {
        if (x % k === 0 && y % k === 0) {
            gcd = k;
            break;
        }
    }
    return gcd;
}
",498,"
[console.assert(gcd(12, 17) === 1), console.assert(gcd(4, 6) === 2), console.assert(gcd(2, 9) === 1)]
",
498, this function to find the diameter of a circle.,"
function diameterCircle(r) {
    let diameter = 2 * r;
    return diameter;
}
",499,"
[console.assert(diameterCircle(10) === 20), console.assert(diameterCircle(40) === 80), console.assert(diameterCircle(15) === 30)]
",
499, this function to concatenate all elements of the given list into a string.,"function concatenateElements(list) {
    let ans = """"; 
    for (let i of list) {
        ans += (ans ? "" "" : """") + i; 
    }
    return ans;
}",500,"[
  console.assert(concatenateElements([""hello"", ""there"", ""have"", ""a"", ""rocky"", ""day""]) === ""hello there have a rocky day""),
  console.assert(concatenateElements([""Hi"", ""there"", ""How"", ""are"", ""you""]) === ""Hi there How are you""),
  console.assert(concatenateElements([""Part"", ""of"", ""the"", ""journey"", ""is"", ""end""]) === ""Part of the journey is end"")
]",
500, this   function to find common divisor between two numbers in a given pair.,"function num_comm_div(x, y) {
    let gcd = 1;
    let i = 1;
    while (i <= x && i <= y) {
        if (x % i === 0 && y % i === 0) {
            gcd = i;
        }
        i++;
    }

    let result = 0;
    let z = Math.floor(Math.sqrt(gcd));
    i = 1;
    while (i <= z) {
        if (gcd % i === 0) {
            result += 2;
            if (i === gcd / i) {
                result -= 1;
            }
        }
        i++;
    }
    return result;
}",501,"[console.assert(num_comm_div(2, 4) === 2, ""Test Case 1 Failed""),
console.assert(num_comm_div(2, 8) === 2, ""Test Case 2 Failed""),
console.assert(num_comm_div(12, 24) === 6, ""Test Case 3 Failed"")]",
501, this   function to find remainder of two numbers.,"
function find(n, m) {
  let r = n % m;
  return r;
}
",502,"
[console.assert(find(3, 3) === 0), console.assert(find(10, 3) === 1), console.assert(find(16, 5) === 1)];
",
502, this function to add consecutive numbers of a given list.,"function addConsecutiveNums(nums) {
    const result = nums.slice(1).map((b, i) => b + nums[i]);
    return result;
}",503,"[console.assert(
    JSON.stringify(addConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])) === 
    JSON.stringify([2, 4, 7, 8, 9, 11, 13]),
    ""Test case 1 failed""
),
console.assert(
    JSON.stringify(addConsecutiveNums([4, 5, 8, 9, 6, 10])) === 
    JSON.stringify([9, 13, 17, 15, 16]),
    ""Test case 2 failed""
),
console.assert(
    JSON.stringify(addConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === 
    JSON.stringify([3, 5, 7, 9, 11, 13, 15, 17, 19]),
    ""Test case 3 failed""
)]",
503, this   function to find the cube sum of first n natural numbers.,"
function sum_Of_Series(n) {
    let sum = 0;
    for (let i = 1; i <= n; i++) {
        sum += i * i * i;
    }
    return sum;
}
",504,"
[console.assert(sum_Of_Series(5) === 225), console.assert(sum_Of_Series(2) === 9), console.assert(sum_Of_Series(3) === 36)];
",
504, this function to move all zeroes to the end of the given array.,"
function reOrder(A) {
    let k = 0;
    for (let i of A) {
        if (i) {
            A[k] = i;
            k++;
        }
    }
    for (let i = k; i < A.length; i++) {
        A[i] = 0;
    }
    return A;
}
",505,"
[console.assert(reOrder([6, 0, 8, 2, 3, 0, 4, 0, 1]).toString() === [6, 8, 2, 3, 4, 1, 0, 0, 0].toString()), 
 console.assert(reOrder([4, 0, 2, 7, 0, 9, 0, 12, 0]).toString() === [4, 2, 7, 9, 12, 0, 0, 0, 0].toString()), 
 console.assert(reOrder([3, 11, 0, 74, 14, 0, 1, 0, 2]).toString() === [3, 11, 74, 14, 1, 2, 0, 0, 0].toString())]
",
505," this function to calculate the permutation coefficient of given p(n, k).","
function permutationCoefficient(n, k) {
    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));

    for (let i = 0; i <= n; i++) {
        for (let j = 0; j <= Math.min(i, k); j++) {
            if (j === 0) {
                P[i][j] = 1;
            } else {
                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);
            }
            if (j < k) {
                P[i][j + 1] = 0;
            }
        }
    }
    return P[n][k];
}
",506,"
[console.assert(permutationCoefficient(10, 2) === 90), console.assert(permutationCoefficient(10, 3) === 720), console.assert(permutationCoefficient(10, 1) === 10)]
",
506, this function to remove specific words from a given list.,"
function removeWords(list1, removeWords) {
    for (let word of [...list1]) {
        if (removeWords.includes(word)) {
            list1.splice(list1.indexOf(word), 1);
        }
    }
    return list1;
}
",507,"[
  console.assert(JSON.stringify(removeWords([""red"", ""green"", ""blue"", ""white"", ""black"", ""orange""], [""white"", ""orange""])) === JSON.stringify([""red"", ""green"", ""blue"", ""black""])),
  console.assert(JSON.stringify(removeWords([""red"", ""green"", ""blue"", ""white"", ""black"", ""orange""], [""black"", ""orange""])) === JSON.stringify([""red"", ""green"", ""blue"", ""white""])),
  console.assert(JSON.stringify(removeWords([""red"", ""green"", ""blue"", ""white"", ""black"", ""orange""], [""blue"", ""white""])) === JSON.stringify([""red"", ""green"", ""black"", ""orange""]))
]",
507, this function to check if the common elements between two given lists are in the same order or not.,"function sameOrder(l1, l2) {
    const commonElements = new Set(l1.filter(e => l2.includes(e)));
    l1 = l1.filter(e => commonElements.has(e));
    l2 = l2.filter(e => commonElements.has(e));
    return l1.length === l2.length && l1.every((val, index) => val === l2[index]);
}",508,"[
  console.assert(sameOrder([""red"", ""green"", ""black"", ""orange""], [""red"", ""pink"", ""green"", ""white"", ""black""]) === true),
  console.assert(sameOrder([""red"", ""pink"", ""green"", ""white"", ""black""], [""white"", ""orange"", ""pink"", ""black""]) === false),
  console.assert(sameOrder([""red"", ""green"", ""black"", ""orange""], [""red"", ""pink"", ""green"", ""white"", ""black""]) === true)
]",
508, this   function to find the average of odd numbers till a given odd number.,"
function average_Odd(n) {
    if (n % 2 === 0) {
        return ""Invalid Input"";
        return -1;
    }
    let sm = 0;
    let count = 0;
    while (n >= 1) {
        count = count + 1;
        sm = sm + n;
        n = n - 2;
    }
    return Math.floor(sm / count);
}
",509,"
[console.assert(average_Odd(9) === 5), console.assert(average_Odd(5) === 3), console.assert(average_Odd(11) === 6)]
",
509, this function to find the number of subsequences having product smaller than k for the given non negative array.,"
function noOfSubsequences(arr, k) {
    let n = arr.length;
    let dp = Array.from({ length: k + 1 }, () => Array(n + 1).fill(0));
    
    for (let i = 1; i <= k; i++) {
        for (let j = 1; j <= n; j++) {
            dp[i][j] = dp[i][j - 1];
            if (arr[j - 1] <= i && arr[j - 1] > 0) {
                dp[i][j] += dp[Math.floor(i / arr[j - 1])][j - 1] + 1;
            }
        }
    }
    return dp[k][n];
}
",510,"
[console.assert(noOfSubsequences([1,2,3,4], 10) === 11), console.assert(noOfSubsequences([4,8,7,2], 50) === 9), console.assert(noOfSubsequences([5,6,7,8], 15) === 4)]
",
511, this function to count the element frequency in the mixed nested tuple.,"function countElementFreq(testTuple) {
    const res = {};
    
    function* flatten(tup) {
        for (const ele of tup) {
            if (Array.isArray(ele)) {
                yield* flatten(ele);
            } else {
                yield ele;
            }
        }
    }

    for (const ele of flatten(testTuple)) {
        if (!(ele in res)) {
            res[ele] = 0;
        }
        res[ele] += 1;
    }

    return res; 
}",512,"[
    console.assert(JSON.stringify(countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])) === JSON.stringify({5: 2, 6: 2, 7: 1, 8: 1, 9: 2})),
    console.assert(JSON.stringify(countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])) === JSON.stringify({6: 2, 7: 2, 8: 1, 9: 1, 10: 2})),
    console.assert(JSON.stringify(countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])) === JSON.stringify({7: 2, 8: 2, 9: 1, 10: 1, 11: 2}))
]",
512, this function to convert tuple into list by adding the given string after every element.,"
function addStr(testTup, K) {
    let res = [];
    for (let sub of testTup) {
        res.push(sub, K);
    }
    return res;
}
",513,"
[console.assert(addStr([5, 6, 7, 4, 9], ""FDF"").toString() === [5, ""FDF"", 6, ""FDF"", 7, ""FDF"", 4, ""FDF"", 9, ""FDF""].toString()), console.assert(addStr([7, 8, 9, 10], ""PF"").toString() === [7, ""PF"", 8, ""PF"", 9, ""PF"", 10, ""PF""].toString()), console.assert(addStr([11, 14, 12, 1, 4], ""JH"").toString() === [11, ""JH"", 14, ""JH"", 12, ""JH"", 1, ""JH"", 4, ""JH""].toString())]
",
513, this function to find the summation of tuple elements in the given tuple list.,"
function sumElements(testTup) {
    let res = testTup.reduce((a, b) => a + b, 0);
    return res;
}
",514,"[
  console.assert(sumElements([7, 8, 9, 1, 10, 7]) === 42),
  console.assert(sumElements([1, 2, 3, 4, 5, 6]) === 21),
  console.assert(sumElements([11, 12, 13, 45, 14]) === 95)
]",
514, this function to check if there is a subset with sum divisible by m.,"
function modularSum(arr, n, m) {
    if (n > m) {
        return true;
    }
    let DP = Array(m).fill(false);
    for (let i = 0; i < n; i++) {
        if (DP[0]) {
            return true;
        }
        let temp = Array(m).fill(false);
        for (let j = 0; j < m; j++) {
            if (DP[j] === true) {
                if (DP[(j + arr[i]) % m] === false) {
                    temp[(j + arr[i]) % m] = true;
                }
            }
        }
        for (let j = 0; j < m; j++) {
            if (temp[j]) {
                DP[j] = true;
            }
        }
        DP[arr[i] % m] = true;
    }
    return DP[0];
}
",515,"[
  console.assert(modularSum([3, 1, 7, 5], 4, 6) === true),
  console.assert(modularSum([1, 7], 2, 5) === false),
  console.assert(modularSum([1, 6], 2, 5) === false)
]",
515, this function to sort a list of elements using radix sort.,"
function radixSort(nums) {
  const RADIX = 10;
  let placement = 1;
  const maxDigit = Math.max(...nums);

  while (placement < maxDigit) {
    const buckets = Array.from({ length: RADIX }, () => []);
    for (const i of nums) {
      const tmp = Math.floor((i / placement) % RADIX);
      buckets[tmp].push(i);
    }
    let a = 0;
    for (let b = 0; b < RADIX; b++) {
      const buck = buckets[b];
      for (const i of buck) {
        nums[a] = i;
        a++;
      }
    }
    placement *= RADIX;
  }
  return nums;
}
",516,"[
  console.assert(radixSort([15, 79, 25, 68, 37]).toString() === [15, 25, 37, 68, 79].toString()),
  console.assert(radixSort([9, 11, 8, 7, 3, 2]).toString() === [2, 3, 7, 8, 9, 11].toString()),
  console.assert(radixSort([36, 12, 24, 26, 29]).toString() === [12, 24, 26, 29, 36].toString())
]",
516, this   function to find the largest postive number from the given list.,"
function largestPos(list1) { 
    let max = list1[0]; 
    for (let x of list1) { 
        if (x > max) { 
            max = x;  
        } 
    } 
    return max; 
}
",517,"
[console.assert(largestPos([1,2,3,4,-1]) == 4), console.assert(largestPos([0,1,2,-5,-1,6]) == 6), console.assert(largestPos([0,0,1,0]) == 1)]
",
517, this function to find the square root of a perfect number.,"
function sqrtRoot(num) {
    const sqrtRoot = Math.pow(num, 0.5);
    return sqrtRoot;
}
",518,"
[console.assert(sqrtRoot(4)===2), console.assert(sqrtRoot(16)===4), console.assert(sqrtRoot(400)===20)]
",
518, this function to calculate volume of a tetrahedron.,"
function volumeTetrahedron(num) {
    const volume = (num ** 3) / (6 * Math.sqrt(2));
    return Math.round(volume * 100) / 100;
}
",519,"
[console.assert(volumeTetrahedron(10) === 117.85), console.assert(volumeTetrahedron(15) === 397.75), console.assert(volumeTetrahedron(20) === 942.81)]
",
519, this function to find the lcm of the given array elements.,"function getLcm(l) {
    function findLcm(num1, num2) {
        let num, den;
        if (num1 > num2) {
            num = num1;
            den = num2;
        } else {
            num = num2;
            den = num1;
        }
        let rem = num % den;
        while (rem !== 0) {
            num = den;
            den = rem;
            rem = num % den;
        }
        const gcd = den;
        return Math.floor((num1 * num2) / gcd);
    }

    let lcm = l[0];
    for (let i = 1; i < l.length; i++) {
        lcm = findLcm(lcm, l[i]);
    }
    return lcm;
}",520,"[
  console.assert(getLcm([2, 7, 3, 9, 4]) === 252),
  console.assert(getLcm([1, 2, 8, 3]) === 24),
  console.assert(getLcm([3, 8, 4, 10, 5]) === 120)
]",
520, this function to print check if the triangle is scalene or not.,"
function check_isosceles(x, y, z) {
  if (x !== y && y !== z && z !== x) {
    return true;
  } else {
    return false;
  }
}
",521,"
[console.assert(check_isosceles(6, 8, 12) === true), console.assert(check_isosceles(6, 6, 12) === false), console.assert(check_isosceles(6, 15, 20) === true)]
",
521, this function to find the longest bitonic subsequence for the given array.,"
function lbs(arr) { 
    let n = arr.length; 
    let lis = Array(n + 1).fill(1); 
    for (let i = 1; i < n; i++) { 
        for (let j = 0; j < i; j++) { 
            if ((arr[i] > arr[j]) && (lis[i] < lis[j] + 1)) { 
                lis[i] = lis[j] + 1; 
            } 
        } 
    } 
    let lds = Array(n + 1).fill(1); 
    for (let i = n - 2; i >= 0; i--) { 
        for (let j = n - 1; j > i; j--) { 
            if (arr[i] > arr[j] && lds[i] < lds[j] + 1) { 
                lds[i] = lds[j] + 1; 
            } 
        } 
    } 
    let maximum = lis[0] + lds[0] - 1; 
    for (let i = 1; i < n; i++) { 
        maximum = Math.max((lis[i] + lds[i] - 1), maximum); 
    } 
    return maximum; 
}
",522,"
[console.assert(lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]) === 7), console.assert(lbs([1, 11, 2, 10, 4, 5, 2, 1]) === 6), console.assert(lbs([80, 60, 30, 40, 20, 10]) === 5)]
",
522," this function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","function checkString(str1) {
    const messg = [
        str => /[A-Z]/.test(str) || 'String must have 1 upper case character.',
        str => /[a-z]/.test(str) || 'String must have 1 lower case character.',
        str => /\d/.test(str) || 'String must have 1 number.',
        str => str.length >= 7 || 'String length should be at least 8.'
    ];
    const result = messg.map(fn => fn(str1)).filter(x => x !== true);
    if (result.length === 0) {
        result.push('Valid string.');
    }
    return result;
}",523,"[console.assert(checkString(""123"").toString() === ['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String length should be at least 8.'].toString()),
console.assert(checkString(""A1b"").toString() === ['String length should be at least 8.'].toString()),
console.assert(checkString(""Valid1String"").toString() === ['Valid string.'].toString())]",
523, this function to find the sum of maximum increasing subsequence of the given array.,"
function maxSumIncreasingSubsequence(arr, n) {
    let max = 0;
    let msis = new Array(n).fill(0);
    for (let i = 0; i < n; i++) {
        msis[i] = arr[i];
    }
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {
                msis[i] = msis[j] + arr[i];
            }
        }
    }
    for (let i = 0; i < n; i++) {
        if (max < msis[i]) {
            max = msis[i];
        }
    }
    return max;
}
",524,"
[console.assert(maxSumIncreasingSubsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106), console.assert(maxSumIncreasingSubsequence([3, 4, 5, 10], 4) == 22), console.assert(maxSumIncreasingSubsequence([10, 5, 4, 3], 4) == 10)]
",
525, this   function to capitalize first and last letters of each word of a given string.,"function capitalizeFirstLastLetters(str1) {
    if (str1.trim() === """") return str1; 
    
    let result = """";
    for (let word of str1.split("" "")) {
        if (word.length > 1) {
            result += word.charAt(0).toUpperCase() + word.slice(1, -1).toLowerCase() + word.charAt(word.length - 1).toUpperCase() + "" "";
        } else {
            result += word.toUpperCase() + "" "";  
        }
    }
    return result.trim();
}",526,"
[console.assert(capitalizeFirstLastLetters("" "") === "" ""), console.assert(capitalizeFirstLastLetters(""bigdata"") === ""BigdatA""), console.assert(capitalizeFirstLastLetters(""Hadoop"") === ""HadooP"")]
",
526, this function to find all pairs in an integer array whose sum is equal to a given number.,"
function getPairsCount(arr, n, sum) {
    let count = 0; 
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] === sum) {
                count++;
            }
        }
    }
    return count;
}
",527,"
[console.assert(getPairsCount([1, 5, 7, -1, 5], 5, 6) === 3), console.assert(getPairsCount([1, 5, 7, -1], 4, 6) === 2), console.assert(getPairsCount([1, 1, 1, 1], 4, 2) === 6)]
",
527, this function to find the list of lists with minimum length.,"function minLength(list1) {
    let minLength = Math.min(...list1.map(x => x.length));
    let minList = list1.reduce((a, b) => (a.length < b.length ? a : b));
    return [minLength, minList];
}",528,"[console.assert(JSON.stringify(minLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))) === JSON.stringify([1, [0]]), console.assert(JSON.stringify(minLength([[1], [5, 7], [10, 12, 14, 15]]))) === JSON.stringify([1, [1]]), console.assert(JSON.stringify(minLength([[5], [15, 20, 25]])) === JSON.stringify([1, [5]]))]",
528, this function to find the nth jacobsthal-lucas number.,"function jacobsthal_lucas(n) { 
    let dp = new Array(n + 1).fill(0); 
    dp[0] = 2; 
    dp[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
    } 
    return dp[n]; 
}",529,"
[console.assert(jacobsthal_lucas(5) === 31), console.assert(jacobsthal_lucas(2) === 5), console.assert(jacobsthal_lucas(4) === 17)]
",
529, this function to find the ration of negative numbers in an array of integers.,"
function negativeCount(nums) {
    let n = nums.length;
    let n1 = 0;
    for (let x of nums) {
        if (x < 0) {
            n1 += 1;
        }
    }
    return Math.round((n1 / n) * 100) / 100;
}
",530,"
[console.assert(negativeCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.31), console.assert(negativeCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.31), console.assert(negativeCount([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.44)]
",
530, this function to find minimum number of coins that make a given value.,"
function minCoins(coins, m, V) { 
    if (V === 0) { 
        return 0; 
    } 
    let res = Number.MAX_VALUE; 
    for (let i = 0; i < m; i++) { 
        if (coins[i] <= V) { 
            let subRes = minCoins(coins, m, V - coins[i]); 
            if (subRes !== Number.MAX_VALUE && subRes + 1 < res) { 
                res = subRes + 1; 
            } 
        } 
    } 
    return res; 
}
",531,"
[console.assert(minCoins([9, 6, 5, 1], 4, 11) === 2), console.assert(minCoins([4, 5, 6, 7, 8, 9], 6, 9) === 1), console.assert(minCoins([1, 2, 3], 3, 4) === 2)]
",
531, this function to check if the two given strings are permutations of each other.,"
function checkPermutation(str1, str2) {
  var n1 = str1.length;
  var n2 = str2.length;
  if (n1 !== n2) {
    return false;
  }
  var a = str1.split("""").sort();
  str1 = a.join("" "");
  var b = str2.split("""").sort();
  str2 = b.join("" "");
  for (var i = 0; i < n1; i++) {
    if (str1[i] !== str2[i]) {
      return false;
    }
  }
  return true;
}
",532,"
[console.assert(checkPermutation(""abc"", ""cba"") === true), console.assert(checkPermutation(""test"", ""ttew"") === false), console.assert(checkPermutation(""xxyz"", ""yxzx"") === true)]
",
532, this function to remove particular data type elements from the given tuple.,"function remove_datatype(test_tuple, data_type) {
    let res = [];
    for (let ele of test_tuple) {
        if (typeof ele !== data_type) {
            res.push(ele);
        }
    }
    return res;
}",533,"[console.assert(JSON.stringify(remove_datatype([4, 5, 4, 7.7, 1.2], ""number"")) === JSON.stringify([])),
console.assert(JSON.stringify(remove_datatype([7, 8, 9, ""SR""], ""string"")) === JSON.stringify([7, 8, 9])),
console.assert(JSON.stringify(remove_datatype([7, 1.1, 2, 2.2], ""number"")) === JSON.stringify([]))]",
533, this function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"function searchLiteral(substring, string) {
    let startIndex = string.indexOf(substring);
    if (startIndex === -1) return []; 
    let endIndex = startIndex + substring.length - 1;
    return [startIndex, endIndex];
  }",534,"  [console.assert(JSON.stringify(searchLiteral(""programming"", ""programming language"")) === JSON.stringify([0, 10])),
  console.assert(JSON.stringify(searchLiteral(""programming"", ""programming language"")) === JSON.stringify([0, 10])),
  console.assert(JSON.stringify(searchLiteral(""language"", ""programming language"")) === JSON.stringify([12, 19]))]  ",
534, this function to find the top or bottom surface area of a cylinder.,"
function topbottom_surfacearea(r) {
  let toporbottomarea = 3.1415 * r * r;
  return toporbottomarea;
}
",535,"
[console.assert(topbottom_surfacearea(10) === 314.15000000000003), console.assert(topbottom_surfacearea(5) === 78.53750000000001), console.assert(topbottom_surfacearea(4) === 50.264)]
",
535, this function to select the nth items of a list.,"
function nthItems(array, n) {
    return array.filter((_, index) => index % n === 0);
}
",536,"
[console.assert(nthItems([1, 2, 3, 4, 5, 6, 7, 8, 9], 2).toString() === [1, 3, 5, 7, 9].toString()), console.assert(nthItems([10, 15, 19, 17, 16, 18], 3).toString() === [10, 17].toString()), console.assert(nthItems([14, 16, 19, 15, 17], 4).toString() === [14, 17].toString())]
",
536, this   function to find the first repeated word in a given string.,"function firstRepeatedWord(str1) {
    const temp = new Set();
    const words = str1.split("" "");
  
    for (let word of words) {
      if (temp.has(word)) {
        return word;
      } else {
        temp.add(word);
      }
    }
    return null; 
}",537,"[console.assert(firstRepeatedWord(""ab ca bc ab"") === ""ab""), console.assert(firstRepeatedWord(""ab ca bc"") === null), console.assert(firstRepeatedWord(""ab ca bc ca ab bc"") === ""ca"")]",
537, this   function to convert a given string list to a tuple.,"function stringListToTuple(str1) {
    let result = Array.from(str1).filter(x => x !== ' '); 
    return [result];
}",538,"[console.assert(JSON.stringify(stringListToTuple(""  3.0"")) === JSON.stringify([['3', '.', '0']])),
console.assert(JSON.stringify(stringListToTuple(""bigdata"")) === JSON.stringify([['b', 'i', 'g', 'd', 'a', 't', 'a']])),
console.assert(JSON.stringify(stringListToTuple(""language"")) === JSON.stringify([['l', 'a', 'n', 'g', 'u', 'a', 'g', 'e']]))]",
538, this function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"function basesnum_coresspondingnum(bases_num, index) {
    const result = bases_num.map((base, i) => Math.pow(base, index[i]));
    return [result];
  }",539,"[console.assert(basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString()=== [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000].toString()),
 console.assert(basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21]).toString()=== [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728].toString())]",
539, this   function to find the difference between highest and least frequencies in a given array.,"
function find_Diff(arr, n) {
    arr.sort();  
    let count = 0, max_count = 0, min_count = n; 
    for (let i = 0; i < (n - 1); i++) { 
        if (arr[i] === arr[i + 1]) { 
            count++; 
            continue; 
        } else { 
            max_count = Math.max(max_count, count); 
            min_count = Math.min(min_count, count); 
            count = 0; 
        }
    }
    return max_count - min_count;
}
",540,"
[console.assert(find_Diff([1,1,2,2,7,8,4,5,1,4],10) === 2), console.assert(find_Diff([1,7,9,2,3,3,1,3,3],9) === 3), console.assert(find_Diff([1,2,1,2],4) === 0)]
",
540, this function to find if the given number is abundant or not.,"function checkAbundant(n) {
    let sum = 0;
    let i = 1;
    while (i <= Math.sqrt(n)) {
        if (n % i === 0) {
            if (n / i === i) {
                sum += i;
            } else {
                sum += i;
                sum += (n / i);
            }
        }
        i++;
    }
    sum -= n;
    return sum > n;
}",541,"[
    console.assert(checkAbundant(12) === true),
    console.assert(checkAbundant(15) === false),
    console.assert(checkAbundant(18) === true)
]",
542, this function to add two numbers and print number of digits of sum.,"
function countDigits(num1, num2) {
    let number = num1 + num2;
    let count = 0;
    while (number > 0) {
        number = Math.floor(number / 10);
        count += 1;
    }
    return count;
}
",543,"
[console.assert(countDigits(9875, 10) === 4), console.assert(countDigits(98759853034, 100) === 11), console.assert(countDigits(1234567, 500) === 7)]
",
543, this function to flatten the tuple list to a string.,"function flattenTuple(testList) {
    let res = testList.flat().join(' ');
    return res;
}",544,"[
    console.assert(flattenTuple([[1, 4, 6], [5, 8], [2, 9], [1, 10]]) === '1 4 6 5 8 2 9 1 10'),
    console.assert(flattenTuple([[2, 3, 4], [6, 9], [3, 2], [2, 11]]) === '2 3 4 6 9 3 2 2 11'),
    console.assert(flattenTuple([[14, 21, 9], [24, 19], [12, 29], [23, 17]]) === '14 21 9 24 19 12 29 23 17')
]",
544, this   function to toggle only first and last bits of a given number.,"function toggle_F_and_L_bits(n) {  
    if (n === 1) { 
        return 0; 
    }
    let modifiedN = n | (n >> 1);
    modifiedN = modifiedN | (modifiedN >> 2);
    modifiedN = modifiedN | (modifiedN >> 4);
    modifiedN = modifiedN | (modifiedN >> 8);
    modifiedN = modifiedN | (modifiedN >> 16);

    return n ^ ((modifiedN + 1) >> 1) + 1;
}",545,"[console.assert(toggle_F_and_L_bits(10) === 3), console.assert(toggle_F_and_L_bits(15) === 6), console.assert(toggle_F_and_L_bits(20) === 5)]",
546, this   function to find the sum of hamming distances of all consecutive numbers from o to n.,"
function Total_Hamming_Distance(n) {   
    let i = 1;
    let sum = 0;
    while (n / i > 0) {  
        sum += Math.floor(n / i);  
        i *= 2;     
    }
    return sum;
}
",547,"[
    console.assert(Total_Hamming_Distance(4) === 7),
    console.assert(Total_Hamming_Distance(2) === 3),
    console.assert(Total_Hamming_Distance(5) === 8)
]",
547, this function to find the length of the longest increasing subsequence of the given sequence.,"
function longestIncreasingSubsequence(arr) {
    const n = arr.length;
    const longestIncreasingSubsequence = new Array(n).fill(1);
    
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i] > arr[j] && longestIncreasingSubsequence[i] < longestIncreasingSubsequence[j] + 1) {
                longestIncreasingSubsequence[i] = longestIncreasingSubsequence[j] + 1;
            }
        }
    }
    
    let maximum = 0;
    for (let i = 0; i < n; i++) {
        maximum = Math.max(maximum, longestIncreasingSubsequence[i]);
    }
    
    return maximum;
}
",548,"[
    console.assert(longestIncreasingSubsequence([10, 22, 9, 33, 21, 50, 41, 60]) === 5),
    console.assert(longestIncreasingSubsequence([3, 10, 2, 1, 20]) === 3),
    console.assert(longestIncreasingSubsequence([50, 3, 10, 7, 40, 80]) === 4)
]",
548, this   function to find the sum of fifth power of first n odd natural numbers.,"function odd_Num_Sum(n) {
    let sm = 0;
    for (let i = 1; i <= n; i++) {
        let j = (2 * i - 1); 
        sm += (j * j * j * j * j); 
    }
    return sm; 
}",549,"
[console.assert(odd_Num_Sum(1) === 1), console.assert(odd_Num_Sum(2) === 244), console.assert(odd_Num_Sum(3) === 3369)]
",
549, this   function to find the maximum element in a sorted and rotated array.,"
function find_Max(arr, low, high) {
    if (high < low) {
        return arr[0];
    }
    if (high === low) {
        return arr[low];
    }
    let mid = low + Math.floor((high - low) / 2);
    if (mid < high && arr[mid + 1] < arr[mid]) {
        return arr[mid];
    }
    if (mid > low && arr[mid] < arr[mid - 1]) {
        return arr[mid - 1];
    }
    if (arr[low] > arr[mid]) {
        return find_Max(arr, low, mid - 1);
    } else {
        return find_Max(arr, mid + 1, high);
    }
}
",550,"
[console.assert(find_Max([2,3,5,6,9], 0, 4) === 9), console.assert(find_Max([3,4,5,2,1], 0, 4) === 5), console.assert(find_Max([1,2,3], 0, 2) === 3)]
",
550, this function to extract a specified column from a given nested list.,"
function extractColumn(list1, n) {
    let result = list1.map(i => {
        return i.splice(n, 1)[0];
    });
    return result;
}
",551,"[console.assert(JSON.stringify(extractColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0))) === JSON.stringify([1, 2, 1]), console.assert(JSON.stringify(extractColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2))) === JSON.stringify([3, -5, 1]), console.assert(JSON.stringify(extractColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0))) === JSON.stringify([1, 5, 1, 13, 5, 9])]",
551, this   function to check whether a given sequence is linear or not.,"
function Seq_Linear(seq_nums) {
    seq_nums = seq_nums.map((num, x) => x === 0 ? 0 : num - seq_nums[x - 1]).slice(1);
    if (new Set(seq_nums).size === 1) {
        return ""Linear Sequence"";
    } else {
        return ""Non Linear Sequence"";
    }
}
",552,"
[console.assert(Seq_Linear([0,2,4,6,8,10]) === ""Linear Sequence""), console.assert(Seq_Linear([1,2,3]) === ""Linear Sequence""), console.assert(Seq_Linear([1,5,2]) === ""Non Linear Sequence"")]
",
552, this function to convert the given tuple to a floating-point number.,"function tupleToFloat(testTup) {
    const res = parseFloat(testTup.join('.'));
    return res;
}",553,"[
    console.assert(tupleToFloat([4, 56]) === 4.56),
    console.assert(tupleToFloat([7, 256]) === 7.256),
    console.assert(tupleToFloat([8, 123]) === 8.123)
]",
553, this   function to find odd numbers from a mixed list.,"
function Split(list) {
    let od_li = [];
    for (let i of list) {
        if (i % 2 !== 0) {
            od_li.push(i);
        }
    }
    return [od_li];
}
",554,"
[console.assert(Split([1,2,3,4,5,6]).toString() === [1,3,5].toString()), console.assert(Split([10,11,12,13]).toString() === [11,13].toString()), console.assert(Split([7,8,9,1]).toString() === [7,9,1].toString())]
",
554, this   function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"
function difference(n) {
    let S = (n * (n + 1)) / 2;
    let res = S * (S - 1);
    return res;
}
",555,"
[console.assert(difference(3) === 30), console.assert(difference(5) === 210), console.assert(difference(2) === 6)]
",
555, this   function to count the pairs with xor as an odd number.,"function find_Odd_Pair(A, N) {
    let oddPair = 0;
    for (let i = 0; i < N; i++) {
        for (let j = i + 1; j < N; j++) {
            if ((A[i] % 2 !== A[j] % 2)) {
                oddPair++;
            }
        }
    }
    return oddPair;
}",556,"[console.assert(find_Odd_Pair([5, 4, 7, 2, 1], 5) === 6),
console.assert(find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7) === 12),
console.assert(find_Odd_Pair([1, 2, 3], 3) === 2)]",
556, this function to toggle characters case in a string.,"function toggleString(string) {
    let string1 = string.split('').map(char => 
        char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()
    ).join('');
    return string1;
}",557,"
[console.assert(toggleString("" "") === "" ""), console.assert(toggleString(""Pangram"") === ""pANGRAM""), console.assert(toggleString(""LIttLE"") === ""liTTle"")]
",
557, this   function to find the digit distance between two integers.,"
function digitDistanceNums(n1, n2) {
    return Array.from(String(Math.abs(n1 - n2)), Number).reduce((a, b) => a + b, 0);
}
",558,"
[console.assert(digitDistanceNums(1, 2) === 1), console.assert(digitDistanceNums(23, 56) === 6), console.assert(digitDistanceNums(123, 256) === 7)]
",
558, this function to find the largest sum of contiguous subarray in the given array.,"
function maxSubArraySum(a, size) {
  let maxSoFar = 0;
  let maxEndingHere = 0;
  for (let i = 0; i < size; i++) {
    maxEndingHere += a[i];
    if (maxEndingHere < 0) {
      maxEndingHere = 0;
    } else if (maxSoFar < maxEndingHere) {
      maxSoFar = maxEndingHere;
    }
  }
  return maxSoFar;
}
",559,"
[console.assert(maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8) === 7), console.assert(maxSubArraySum([-3, -4, 5, -2, -3, 2, 6, -4], 8) === 8), console.assert(maxSubArraySum([-4, -5, 6, -3, -4, 3, 7, -5], 8) === 10)]
",
559, this function to find the union of elements of the given tuples.,"
function unionElements(testTup1, testTup2) {
    let res = [...new Set([...testTup1, ...testTup2])];
    return res;
}
",560,"[console.assert(JSON.stringify(unionElements([3, 4, 5, 6], [5, 7, 4, 10]))) === JSON.stringify([3, 4, 5, 6, 7, 10]), 
 console.assert(JSON.stringify(unionElements([1, 2, 3, 4], [3, 4, 5, 6]))) === JSON.stringify([1, 2, 3, 4, 5, 6]), 
 console.assert(JSON.stringify(unionElements([11, 12, 13, 14], [13, 15, 16, 17]))) === JSON.stringify([11, 12, 13, 14, 15, 16, 17])];",
560," this function to assign with each element, its pair elements from other similar pairs in the given tuple.","
function assignElements(testList) {
    let res = {};
    for (let [key, val] of testList) {
        if (!res[val]) res[val] = [];
        if (!res[key]) res[key] = [];
        res[key].push(val);
    }
    return res;
}
",561,"[console.assert(JSON.stringify(assignElements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])) === JSON.stringify({3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []})), console.assert(JSON.stringify(assignElements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])) === JSON.stringify({4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}))
, console.assert(JSON.stringify(assignElements([[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]])) === JSON.stringify({2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}))]",
561, this   function to find the maximum length of sublist.,"
function Find_Max_Length(lst) {  
    const maxLength = Math.max(...lst.map(x => x.length));
    return maxLength;
}
",562,"[
    console.assert(Find_Max_Length([[1],[1,4],[5,6,7,8]]) === 4),
    console.assert(Find_Max_Length([[0,1],[2,2,],[3,2,1]]) === 3),
    console.assert(Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) === 5)
]",
562, this function to extract values between quotation marks of a string.,"function extractValues(text) {
    return text.match(/""(.*?)""/g).map(val => val.slice(1, -1));
}",563,"[console.assert(JSON.stringify(extractValues('"" "" ""PHP"" ""Java""')) === JSON.stringify(["" "", ""PHP"", ""Java""])),
console.assert(JSON.stringify(extractValues('"" "" ""program"" ""language""')) === JSON.stringify(["" "", ""program"", ""language""])),
console.assert(JSON.stringify(extractValues('""red"" ""blue"" ""green"" ""yellow""')) === JSON.stringify([""red"", ""blue"", ""green"", ""yellow""]))]",
563, this   function to count unequal element pairs from the given array.,"function count_Pairs(arr, n) { 
    let cnt = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] !== arr[j]) { 
                cnt++; 
            } 
        } 
    } 
    return cnt; 
}",564,"[console.assert(count_Pairs([1, 2, 1], 3) === 2, ""Test Case 1 Failed""),
console.assert(count_Pairs([1, 1, 1, 1], 4) === 0, ""Test Case 2 Failed""),
console.assert(count_Pairs([1, 2, 3, 4, 5], 5) === 10, ""Test Case 3 Failed"")]",
564, this   function to split a string into characters.,"function split(word) {
    if (typeof word !== ""string"") {
        throw new TypeError(""The input must be a string"");
    }
    return word.split("""");
}",565,"[    console.assert(split(""python"").toString() === [""p"", ""y"", ""t"", ""h"", ""o"", ""n""].toString(), ""Test Case 1 Failed""),
    console.assert(split(""Name"").toString() === [""N"", ""a"", ""m"", ""e""].toString(), ""Test Case 2 Failed""),
    console.assert(split(""program"").toString() === [""p"", ""r"", ""o"", ""g"", ""r"", ""a"", ""m""].toString(), ""Test Case 3 Failed"")]",
566, this function to check whether a specified list is sorted or not.,"
function issort_list(list1) {
    const result = list1.every((value, index) => index === 0 || value >= list1[index - 1]);
    return result;
}
",567,"[
console.assert(issort_list([1,2,4,6,8,10,12,14,16,17]) === true),
console.assert(issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) === false),
console.assert(issort_list([1, 2, 4, 6, 8, 10,15,14,20]) === false)]
",
567, this function to create a list of empty dictionaries.,"function emptyList(length) {
    let emptyList = Array.from({ length: length }, () => ({}));
    return emptyList;
}",568,"[console.assert(emptyList(5).length === 5 && JSON.stringify(emptyList(5))) === JSON.stringify([{}, {}, {}, {}, {}]), 
 console.assert(emptyList(6).length === 6 && JSON.stringify(emptyList(6))) === JSON.stringify([{}, {}, {}, {}, {}, {}]), 
 console.assert(emptyList(7).length === 7 && JSON.stringify(emptyList(7))) === JSON.stringify([{}, {}, {}, {}, {}, {}, {}])];",
569, this function to remove words from a given list of strings containing a character or string.,"function removeWords(list1, charlist) {
    let newList = [];

    for (let line of list1) {
        let words = line.split("" ""); 

        let filteredWords = words.filter(word => 
            !charlist.some(char => word.includes(char))
        );

        newList.push(filteredWords.join("" "")); 
    }
    
    return newList.filter(line => line.trim() !== """");
}",570,"[console.assert(
    JSON.stringify(removeWords([""Red color"", ""Orange#"", ""Green"", ""Orange @"", ""White""], [""#"", ""color"", ""@""])) 
    === JSON.stringify([ 'Red', 'Green', 'Orange', 'White' ])
),
console.assert(
    JSON.stringify(removeWords([""Red &"", ""Orange+"", ""Green"", ""Orange @"", ""White""], [""&"", ""+"", ""@""])) 
    === JSON.stringify([ 'Red', 'Green', 'Orange', 'White' ])
),
console.assert(
    JSON.stringify(removeWords([""Red &"", ""Orange+"", ""Green"", ""Orange @"", ""White""], [""@""])) 
    === JSON.stringify([ 'Red &', 'Orange+', 'Green', 'Orange', 'White' ])
)]",
571, this   function to remove two duplicate numbers from a given number of lists.,"
function twoUniqueNums(nums) {
  return nums.filter(i => nums.indexOf(i) === nums.lastIndexOf(i));
}
",572,"[console.assert(JSON.stringify(twoUniqueNums([1,2,3,2,3,4,5]))) === JSON.stringify([1, 4, 5]), console.assert(JSON.stringify(twoUniqueNums([1,2,3,2,4,5]))) === JSON.stringify([1, 3, 4, 5]), console.assert(JSON.stringify(twoUniqueNums([1,2,3,4,5]))) === JSON.stringify([1, 2, 3, 4, 5])]",
572, this   function to calculate the product of the unique numbers of a given list.,"
function uniqueProduct(listData) {
    const temp = Array.from(new Set(listData));
    let p = 1;
    for (let i of temp) {
        p *= i;
    }
    return p;
}
",573,"[console.assert(uniqueProduct([10, 20, 30, 40, 20, 50, 60, 40]) === 720000000), console.assert(uniqueProduct([1, 2, 3, 1]) === 6), console.assert(uniqueProduct([7, 8, 9, 0, 1, 1]) === 0)]",
573, this function to find the surface area of a cylinder.,"function surfacearea_cylinder(r, h) {
    var surfacearea = (2 * 3.1415 * r * r) + (2 * 3.1415 * r * h);
    return surfacearea;
}",574,"const epsilon = 0.001;
[console.assert(Math.abs(surfacearea_cylinder(10, 5) - 942.45) <= epsilon, ""Test Case 1 Failed""),
console.assert(Math.abs(surfacearea_cylinder(4, 5) - 226.188) <= epsilon, ""Test Case 2 Failed""),
console.assert(Math.abs(surfacearea_cylinder(4, 10) - 351.848) <= epsilon, ""Test Case 3 Failed"")]",
574, this   function to find nth number in a sequence which is not a multiple of a given number.,"
function count_no(A, N, L, R) {
    let count = 0;
    let i;
    for (i = L; i <= R; i++) {
        if (i % A !== 0) {
            count++;
        }
        if (count === N) {
            break;
        }
    }
    return i;
}
",575,"
[console.assert(count_no(2,3,1,10) === 5), console.assert(count_no(3,6,4,20) === 11), console.assert(count_no(5,10,4,20) === 16)]
",
575, this   function to check whether an array is subarray of another or not.,"
function is_Sub_Array(A, B, n, m) {
    let i = 0, j = 0;
    while (i < n && j < m) {
        if (A[i] === B[j]) {
            i++;
            j++;
            if (j === m) {
                return true;
            }
        } else {
            i = i - j + 1;
            j = 0;
        }
    }
    return false;
}
",576,"
[console.assert(is_Sub_Array([1,4,3,5],[1,2],4,2) == false), console.assert(is_Sub_Array([1,2,1],[1,2,1],3,3) == true), console.assert(is_Sub_Array([1,0,2,2],[2,2,0],4,3) == false)]
",
576, this   function to find the last digit in factorial of a given number.,"
function lastDigitFactorial(n) {
    if (n === 0) return 1;
    else if (n <= 2) return n;
    else if (n === 3) return 6;
    else if (n === 4) return 4;
    else return 0;
}
",577,"
[console.assert(lastDigitFactorial(4) === 4), console.assert(lastDigitFactorial(21) === 0), console.assert(lastDigitFactorial(30) === 0)]
",
577, this function to interleave lists of the same length.,"function interleaveLists(list1, list2, list3) {
    let result = [].concat(...list1.map((_, i) => [list1[i], list2[i], list3[i]]));
    return result;
}",578,"[console.assert(JSON.stringify(interleaveLists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]))) === JSON.stringify([1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]),
 console.assert(JSON.stringify(interleaveLists([10,20],[15,2],[5,10]))) === JSON.stringify([10,15,5,20,2,10]), 
 console.assert(JSON.stringify(interleaveLists([11,44], [10,15], [20,5]))) === JSON.stringify([11,10,20,44,15,5])]",
578, this function to find the dissimilar elements in the given two tuples.,"function find_dissimilar(test_tup1, test_tup2) {
    return [...new Set([...test_tup1, ...test_tup2])].filter(x => !test_tup1.includes(x) || !test_tup2.includes(x));
}",579,"[console.assert(JSON.stringify(find_dissimilar([3, 4, 5, 6], [5, 7, 4, 10]).sort()) === JSON.stringify([3, 6, 7, 10].sort()), ""Test case 1 failed""),
console.assert(JSON.stringify(find_dissimilar([1, 2, 3, 4], [7, 2, 3, 9]).sort()) === JSON.stringify([1, 4, 7, 9].sort()), ""Test case 2 failed""),
console.assert(JSON.stringify(find_dissimilar([21, 11, 25, 26], [26, 34, 21, 36]).sort()) === JSON.stringify([34, 36, 11, 25].sort()), ""Test case 3 failed"")]",
579, this function to extract the even elements in the nested mixed tuple.,"function extract_even(testTuple) {
    let res = [];
    for (let ele of testTuple) { 
        if (Array.isArray(ele)) { 
            res.push(...extract_even(ele)); 
        } else if (ele % 2 === 0) { 
            res.push(ele);
        } 
    } 

    return [res]; 
}",580,"[console.assert(JSON.stringify(extract_even([4, 5, [7, 6, [2, 4]], 6, 8]))) === JSON.stringify([4, [6, [2, 4]], 6, 8]), console.assert(JSON.stringify(extract_even([5, 6, [8, 7, [4, 8]], 7, 9]))) === JSON.stringify([6, [8, [4, 8]]]), console.assert(JSON.stringify(extract_even([5, 6, [9, 8, [4, 6]], 8, 10]))) === JSON.stringify([6, [8, [4, 6]], 8, 10])]",
580, this   function to find the surface area of the square pyramid.,"
function surface_Area(b, s) { 
    return 2 * b * s + Math.pow(b, 2); 
}
",581,"
[console.assert(surface_Area(3, 4) === 33), console.assert(surface_Area(4, 5) === 56), console.assert(surface_Area(1, 2) === 5)];
",
581, this function to check if a dictionary is empty or not.,"function myDict(dict1) {
    return dict1.size > 0; 
}",582,"[
    console.assert(myDict(new Set([10])) === false),
    console.assert(myDict(new Set([11])) === false),
    console.assert(myDict(new Set([])) === true)
]",
582, this function for nth catalan number.,"
function catalanNumber(num) {
    if (num <= 1) {
        return 1;
    }
    let resNum = 0;
    for (let i = 0; i < num; i++) {
        resNum += catalanNumber(i) * catalanNumber(num - i - 1);
    }
    return resNum;
}
",583,"[
    console.assert(catalanNumber(10) === 16796),
    console.assert(catalanNumber(9) === 4862),
    console.assert(catalanNumber(7) === 429)
]",
583, this function to find all adverbs and their positions in a given sentence by using regex.,"
function findAdverbs(text) {
    const regex = /\w+ly/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
        return `${match.index}-${regex.lastIndex}: ${match[0]}`;
    }
}
",584,"[
    console.assert(findAdverbs(""Clearly, he has no excuse for such behavior."") === ""0-7: Clearly""),
    console.assert(findAdverbs(""Please handle the situation carefuly"") === ""28-36: carefuly""),
    console.assert(findAdverbs(""Complete the task quickly"") === ""18-25: quickly"")
]",
584, this function to find the n - expensive price items from a given dataset using heap queue algorithm.,"
function expensiveItems(items, n) {
  return items
    .sort((a, b) => b.price - a.price)
    .slice(0, n);
}
",585,"[
    console.assert(JSON.stringify(expensiveItems([{name: ""Item-1"", price: 101.1}, {name: ""Item-2"", price: 555.22}], 1)) === JSON.stringify([{name: ""Item-2"", price: 555.22}])),
    console.assert(JSON.stringify(expensiveItems([{name: ""Item-1"", price: 101.1}, {name: ""Item-2"", price: 555.22}, {name: ""Item-3"", price: 45.09}], 2)) === JSON.stringify([{name: ""Item-2"", price: 555.22}, {name: ""Item-1"", price: 101.1}])),
    console.assert(JSON.stringify(expensiveItems([{name: ""Item-1"", price: 101.1}, {name: ""Item-2"", price: 555.22}, {name: ""Item-3"", price: 45.09}, {name: ""Item-4"", price: 22.75}], 1)) === JSON.stringify([{name: ""Item-2"", price: 555.22}]))
]",
585, this   function to split the array and add the first part to the end.,"
function split_Arr(a, n, k) {
    const b = a.slice(0, k);
    return [a.slice(k).concat(b)];
}
",586,"
[console.assert(split_Arr([12,10,5,6,52,36],6,2).toString() === [5,6,52,36,12,10].toString()), 
 console.assert(split_Arr([1,2,3,4],4,1).toString() === [2,3,4,1].toString()), 
 console.assert(split_Arr([0,1,2,3,4,5,6,7],8,3).toString() === [3,4,5,6,7,0,1,2].toString())]
",
586, this function to convert a list to a tuple.,"function listTuple(listx) {
    const tuplex = Array.from(listx);
    return tuplex;
  }",587,"[
    console.assert(JSON.stringify(listTuple([5, 10, 7, 4, 15, 3])) === JSON.stringify([5, 10, 7, 4, 15, 3])),
    console.assert(JSON.stringify(listTuple([2, 4, 5, 6, 2, 3, 4, 4, 7])) === JSON.stringify([2, 4, 5, 6, 2, 3, 4, 4, 7])),
    console.assert(JSON.stringify(listTuple([58, 44, 56])) === JSON.stringify([58, 44, 56]))
]",
587, this   function to find the difference between largest and smallest value in a given array.,"
function big_diff(nums) {
    let diff = Math.max(...nums) - Math.min(...nums);
    return diff;
}
",588,"[
    console.assert(big_diff([1, 2, 3, 4]) === 3),
    console.assert(big_diff([4, 5, 12]) === 8),
    console.assert(big_diff([9, 2, 3]) === 7)
]",
588, this function to find perfect squares between two given numbers.,"
function perfectSquares(a, b) {
    let lists = [];
    for (let i = a; i <= b; i++) {
        let j = 1;
        while (j * j <= i) {
            if (j * j === i) {
                lists.push(i);
            }
            j++;
        }
    }
    return lists;
}
",589,"
[console.assert(perfectSquares(1, 30).toString() === [1, 4, 9, 16, 25].toString()), console.assert(perfectSquares(50, 100).toString() === [64, 81, 100].toString()), console.assert(perfectSquares(100, 200).toString() === [100, 121, 144, 169, 196].toString())]
",
589, this function to convert polar coordinates to rectangular coordinates.,"function polarRect(x, y) {
    const cn = Math.sqrt(x * x + y * y); 
    const angle = Math.atan2(y, x); 
    const cn1 = { 
        real: x, 
        imag: y 
    };

    return [cn, angle, cn1];
}",590,"[console.assert(polarRect(3, 4)[0] === 5.0 && Math.abs(polarRect(3, 4)[1] - 0.9272952180016122) < 1e-9 && JSON.stringify(polarRect(3, 4)[2]) === '{""real"":3,""imag"":4}'),
console.assert(polarRect(4, 7)[0] === 8.06225774829855 && Math.abs(polarRect(4, 7)[1] - 1.0516502125483738) < 1e-9 && JSON.stringify(polarRect(4, 7)[2]) === '{""real"":4,""imag"":7}'),
console.assert(polarRect(15, 17)[0] === 22.67156809750927 && Math.abs(polarRect(15, 17)[1] - 0.8478169733934057) < 1e-9 && JSON.stringify(polarRect(15, 17)[2]) === '{""real"":15,""imag"":17}')]",
590, this   function to interchange the first and last elements in a list.,"
function swap_List(newList) { 
    var size = newList.length; 
    var temp = newList[0]; 
    newList[0] = newList[size - 1]; 
    newList[size - 1] = temp;  
    return newList; 
}
",591,"[
    console.assert(swap_List([12, 35, 9, 56, 24]).toString() === [24, 35, 9, 56, 12].toString()),
    console.assert(swap_List([1, 2, 3]).toString() === [3, 2, 1].toString()),
    console.assert(swap_List([4, 5, 6]).toString() === [6, 5, 4].toString())
]",
591, this   function to find sum of product of binomial co-efficients.,"function sumOfProduct(n) {
    let C = new Array(n).fill(0); 
    C[0] = 1; 
    for (let i = 1; i <= 2 * n; i++) {  
        for (let j = Math.min(i, n - 1); j > 0; j--) { 
            C[j] = C[j] + C[j - 1]; 
        } 
    } 

    return C[n - 1]; 
}",592,"
[console.assert(sumOfProduct(3) === 15), console.assert(sumOfProduct(4) === 56), console.assert(sumOfProduct(1) === 1)]
",
592, this function to remove leading zeroes from an ip address.,"function removezero_ip(ip) {
    return ip.split('.').map(num => parseInt(num, 10)).join('.');
}",593,"[console.assert(removezero_ip(""216.08.094.196"") === ""216.8.94.196""),
console.assert(removezero_ip(""12.01.024"") === ""12.1.24""),
console.assert(removezero_ip(""216.08.094.0196"") === ""216.8.94.196"")]",
593, this function to find the difference of first even and odd number of a given list.,"
function diffEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) || -1;
    const firstOdd = list1.find(el => el % 2 !== 0) || -1;
    return (firstEven - firstOdd);
}
",594,"
[console.assert(diffEvenOdd([1,3,5,7,4,1,6,8]) === 3), console.assert(diffEvenOdd([1,2,3,4,5,6,7,8,9,10]) === 1), console.assert(diffEvenOdd([1,5,7,9,10]) === 9)]
",
594, this   function to count minimum number of swaps required to convert one binary string to another.,"
function minSwaps(str1, str2) {
    let count = 0;
    for (let i = 0; i < str1.length; i++) {
        if (str1[i] !== str2[i]) {
            count++;
        }
    }
    if (count % 2 === 0) {
        return Math.floor(count / 2);
    } else {
        return ""Not Possible"";
    }
}
",595,"
[console.assert(minSwaps(""1101"", ""1110"") === 1), console.assert(minSwaps(""111"", ""000"") === ""Not Possible""), console.assert(minSwaps(""111"", ""110"") === ""Not Possible"")]
",
596, this function to find kth element from the given two sorted arrays.,"
function find_kth(arr1, arr2, m, n, k) {
    let sorted1 = new Array(m + n).fill(0);
    let i = 0;
    let j = 0;
    let d = 0;

    while (i < m && j < n) {
        if (arr1[i] < arr2[j]) {
            sorted1[d] = arr1[i];
            i++;
        } else {
            sorted1[d] = arr2[j];
            j++;
        }
        d++;
    }
    while (i < m) {
        sorted1[d] = arr1[i];
        d++;
        i++;
    }
    while (j < n) {
        sorted1[d] = arr2[j];
        d++;
        j++;
    }
    return sorted1[k - 1];
}
",597,"
[console.assert(find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) === 6), console.assert(find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) === 256), console.assert(find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) === 8)]
",
597, this function to check whether the given number is armstrong or not.,"
function armstrongNumber(number) {
    let sum = 0;
    let times = 0;
    let temp = number;
    
    while (temp > 0) {
        times += 1;
        temp = Math.floor(temp / 10);
    }
    
    temp = number;
    
    while (temp > 0) {
        let reminder = temp % 10;
        sum += Math.pow(reminder, times);
        temp = Math.floor(temp / 10);
    }
    
    return number === sum;
}
",598,"[
    console.assert(armstrongNumber(153) === true),
    console.assert(armstrongNumber(259) === false),
    console.assert(armstrongNumber(4458) === false)
]",
598, this function to find sum and average of first n natural numbers.,"
function sumAverage(number) {
    let total = 0;
    for (let value = 1; value <= number; value++) {
        total += value;
    }
    let average = total / number;
    return [total, average];
}
",599,"
[console.assert(sumAverage(10)[0] === 55 && sumAverage(10)[1] === 5.5), console.assert(sumAverage(15)[0] === 120 && sumAverage(15)[1] === 8.0), console.assert(sumAverage(20)[0] === 210 && sumAverage(20)[1] === 10.5)];
",
600, this function to find the longest chain which can be formed from the given set of pairs.,"
class Pair {
    constructor(a, b) {
        this.a = a;
        this.b = b;
    }
}

function maxChainLength(arr, n) {
    let max = 0;
    let mcl = new Array(n).fill(1);
    
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (arr[i].a > arr[j].b && mcl[i] < mcl[j] + 1) {
                mcl[i] = mcl[j] + 1;
            }
        }
    }
    
    for (let i = 0; i < n; i++) {
        if (max < mcl[i]) {
            max = mcl[i];
        }
    }
    
    return max;
}
",601,"
[console.assert(maxChainLength([new Pair(5, 24), new Pair(15, 25), new Pair(27, 40), new Pair(50, 60)], 4) === 3), 
 console.assert(maxChainLength([new Pair(1, 2), new Pair(3, 4), new Pair(5, 6), new Pair(7, 8)], 4) === 4), 
 console.assert(maxChainLength([new Pair(19, 10), new Pair(11, 12), new Pair(13, 14), new Pair(15, 16), new Pair(31, 54)], 5) === 5)]
",
602, this function to get a lucid number smaller than or equal to n.,"
function getLudic(n) {
    let ludics = [];
    for (let i = 1; i <= n; i++) {
        ludics.push(i);
    }
    let index = 1;
    while (index !== ludics.length) {
        let firstLudic = ludics[index];
        let removeIndex = index + firstLudic;
        while (removeIndex < ludics.length) {
            ludics.splice(removeIndex, 1);
            removeIndex = removeIndex + firstLudic - 1;
        }
        index++;
    }
    return ludics;
}
",603,"
[console.assert(getLudic(10).toString() === [1, 2, 3, 5, 7].toString()), console.assert(getLudic(25).toString() === [1, 2, 3, 5, 7, 11, 13, 17, 23, 25].toString()), console.assert(getLudic(45).toString() === [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43].toString())];
",
604, this function to check if the given integer is a prime number.,"
function primeNum(num) {
    if (num >= 1) {
        for (let i = 2; i <= num / 2; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
",605,"
[console.assert(primeNum(13) === true), console.assert(primeNum(7) === true), console.assert(primeNum(-1010) === false)]
",
605, this function to convert degrees to radians.,"
function radian_degree(degree) {
    const radian = degree * (Math.PI / 180);
    return radian;
}
",606,"
[console.assert(radian_degree(90) === 1.5707963267948966), console.assert(radian_degree(60) === 1.0471975511965976), console.assert(radian_degree(120) === 2.0943951023931953)]
",
606, this function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"  const pattern = ""fox""; 
  const text = ""The quick brown fox jumps over the lazy dog.""; 
  
  function find_literals(text, pattern) {
    const match = text.match(new RegExp(pattern));
    if (match) {
      const s = match.index; 
      const e = s + match[0].length; 
      return [match[0], s, e]; 
    } else {
      return []; 
    }
  }",607,"[
    console.assert(find_literals(""The quick brown fox jumps over the lazy dog."", ""fox"")[0] === ""fox"" && find_literals(""The quick brown fox jumps over the lazy dog."", ""fox"")[1] === 16 && find_literals(""The quick brown fox jumps over the lazy dog."", ""fox"")[2] === 19),
    console.assert(find_literals(""Its been a very crazy procedure right"", ""crazy"")[0] === ""crazy"" && find_literals(""Its been a very crazy procedure right"", ""crazy"")[1] === 16 && find_literals(""Its been a very crazy procedure right"", ""crazy"")[2] === 21),
    console.assert(find_literals(""Hardest choices required strongest will"", ""will"")[0] === ""will"" && find_literals(""Hardest choices required strongest will"", ""will"")[1] === 35 && find_literals(""Hardest choices required strongest will"", ""will"")[2] === 39)
  ]",
607, this   function to find nth bell number.,"
function bellNumber(n) {
    let bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(0));
    bell[0][0] = 1;
    for (let i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        for (let j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    return bell[n][0];
}
",608,"
[console.assert(bellNumber(2) === 2), console.assert(bellNumber(3) === 5), console.assert(bellNumber(4) === 15)];
",
609, this   function to remove the kth element from a given list.,"
function removeKthElement(list1, L) {
    return list1.slice(0, L - 1).concat(list1.slice(L));
}
",610,"[console.assert(JSON.stringify(removeKthElement([1,1,2,3,4,4,5,1],3))) === JSON.stringify([1, 1, 3, 4, 4, 5, 1]), console.assert(JSON.stringify(removeKthElement([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4))) === JSON.stringify([0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]), console.assert(JSON.stringify(removeKthElement([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5))) === JSON.stringify([10,10,15,19, 18, 17, 26, 26, 17, 18, 10])]",
610, this function to find the maximum of nth column from the given tuple list.,"function maxOfNth(testList, N) {
    let res = Math.max(...testList.map(sub => sub[N]));
    return res;
}",611,"[console.assert(maxOfNth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) === 19),
console.assert(maxOfNth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) === 10),
console.assert(maxOfNth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) === 11)]",
612, this function to find the maximum value in record list as tuple attribute in the given tuple list.,"function maximumValue(testList) {
    let res = testList.map(([key, lst]) => [key, Math.max(...lst)]);
    return res;
}",613,"[console.assert(JSON.stringify(maximumValue([[""key1"", [3, 4, 5]], [""key2"", [1, 4, 2]], [""key3"", [9, 3]]])) === JSON.stringify([[""key1"", 5], [""key2"", 4], [""key3"", 9]])),
console.assert(JSON.stringify(maximumValue([[""key1"", [4, 5, 6]], [""key2"", [2, 5, 3]], [""key3"", [10, 4]]])) === JSON.stringify([[""key1"", 6], [""key2"", 5], [""key3"", 10]])),
console.assert(JSON.stringify(maximumValue([[""key1"", [5, 6, 7]], [""key2"", [3, 6, 4]], [""key3"", [11, 5]]])) === JSON.stringify([[""key1"", 7], [""key2"", 6], [""key3"", 11]]))]",
613, this function to find the cumulative sum of all the values that are present in the given tuple list.,"function cummulative_sum(test_list) {
    let res = test_list.flat().reduce((a, b) => a + b, 0);
    return res;
}",614,"[console.assert(cummulative_sum([[1, 3], [5, 6, 7], [2, 6]]) === 30),
console.assert(cummulative_sum([[2, 4], [6, 7, 8], [3, 7]]) === 37),
console.assert(cummulative_sum([[3, 5], [7, 8, 9], [4, 8]]) === 44)]",
614, this function to find average value of the numbers in a given tuple of tuples.,"function averageTuple(nums) {
    const result = nums[0].map((_, colIndex) => {
        const columnSum = nums.reduce((acc, row) => acc + row[colIndex], 0);
        return columnSum / nums.length;
    });
    return result;
}",615,"[console.assert(JSON.stringify(averageTuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])) === JSON.stringify([30.5, 34.25, 27.0, 23.25])),
console.assert(JSON.stringify(averageTuple([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])) === JSON.stringify([25.5, -18.0, 3.75])),
console.assert(JSON.stringify(averageTuple([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])) === JSON.stringify([305.0, 342.5, 270.0, 232.5]))]",
615, this function to perfom the modulo of tuple elements in the given two tuples.,"
function tupleModulo(testTup1, testTup2) {
    let res = testTup1.map((ele1, index) => ele1 % testTup2[index]);
    return res;
}
",616,"[
    console.assert(tupleModulo([10, 4, 5, 6], [5, 6, 7, 5]).toString() === [0, 4, 5, 1].toString()),
    console.assert(tupleModulo([11, 5, 6, 7], [6, 7, 8, 6]).toString() === [5, 5, 6, 1].toString()),
    console.assert(tupleModulo([12, 6, 7, 8], [7, 8, 9, 7]).toString() === [5, 6, 7, 1].toString())
]",
616," this function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","
function min_Jumps(a, b, d) {
    let temp = a;
    a = Math.min(a, b);
    b = Math.max(temp, b);
    if (d >= b) {
        return (d + b - 1) / b;
    }
    if (d === 0) {
        return 0;
    }
    if (d === a) {
        return 1;
    } else {
        return 2;
    }
}
",617,"
[console.assert(min_Jumps(3, 4, 11) === 3.5), console.assert(min_Jumps(3, 4, 0) === 0), console.assert(min_Jumps(11, 14, 11) === 1)];
",
617, this function to divide two lists using map and lambda function.,"
function divList(nums1, nums2) {
  const result = nums1.map((x, index) => x / nums2[index]);
  return result;
}
",618,"
[console.assert(JSON.stringify(divList([4,5,6],[1, 2, 3])) === JSON.stringify([4.0,2.5,2.0])), console.assert(JSON.stringify(divList([3,2],[1,4])) === JSON.stringify([3.0, 0.5])), console.assert(JSON.stringify(divList([90,120],[50,70])) === JSON.stringify([1.8, 1.7142857142857142]))]
",
618, this function to move all the numbers in it to the given string.,"function moveNum(testStr) {
    let res = '';
    let dig = '';  
    for (let ele of testStr) {
        if (/\d/.test(ele)) {
            dig += ele;
        } else {
            res += ele;
        }
    }
    res += dig; 
    return res; 
}",619,"  [
    console.assert(moveNum(""I1love143you55three3000thousand"") === ""Iloveyouthreethousand1143553000""),
    console.assert(moveNum(""Avengers124Assemble"") === ""AvengersAssemble124""),
    console.assert(moveNum(""Its11our12path13to14see15things16do17things"") === ""Itsourpathtoseethingsdothings11121314151617"")
]",
619, this function to find the largest subset where each pair is divisible.,"
function largestSubset(a, n) {
    let dp = new Array(n).fill(0);
    dp[n - 1] = 1; 
    for (let i = n - 2; i >= 0; i--) {
        let mxm = 0;
        for (let j = i + 1; j < n; j++) {
            if (a[j] % a[i] === 0 || a[i] % a[j] === 0) {
                mxm = Math.max(mxm, dp[j]);
            }
        }
        dp[i] = 1 + mxm;
    }
    return Math.max(...dp);
}
",620,"[
    console.assert(largestSubset([1, 3, 6, 13, 17, 18], 6) === 4),
    console.assert(largestSubset([10, 5, 3, 15, 20], 5) === 3),
    console.assert(largestSubset([18, 1, 3, 6, 13, 17], 6) === 4)
]",
620, this function to increment the numeric values in the given strings by k.,"
function incrementNumerics(testList, K) {
    const res = testList.map(ele => /^\d+$/.test(ele) ? (parseInt(ele) + K).toString() : ele);
    return res;
}
",621,"[
    console.assert(incrementNumerics([""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""], 6).toString() === [""MSM"", ""240"", ""is"", ""104"", ""129"", ""best"", ""10""].toString()),
    console.assert(incrementNumerics([""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6""], 12).toString() === [""Dart"", ""368"", ""is"", ""100"", ""181"", ""Super"", ""18""].toString()),
    console.assert(incrementNumerics([""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12""], 33).toString() === [""Flutter"", ""484"", ""is"", ""77"", ""129"", ""Magnificent"", ""45""].toString())
]",
621, this function to find the median of two sorted arrays of same size.,"
function getMedian(arr1, arr2, n) {
  let i = 0;
  let j = 0;
  let m1 = -1;
  let m2 = -1;
  let count = 0;
  
  while (count < n + 1) {
    count += 1;
    if (i === n) {
      m1 = m2;
      m2 = arr2[0];
      break;
    } else if (j === n) {
      m1 = m2;
      m2 = arr1[0];
      break;
    }
    if (arr1[i] <= arr2[j]) {
      m1 = m2;
      m2 = arr1[i];
      i += 1;
    } else {
      m1 = m2;
      m2 = arr2[j];
      j += 1;
    }
  }
  return (m1 + m2) / 2;
}
",622,"
[console.assert(getMedian([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) === 16.0), console.assert(getMedian([2, 4, 8, 9], [7, 13, 19, 28], 4) === 8.5), console.assert(getMedian([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) === 25.0)]
",
622, this function to find the n-th power of individual elements in a list using lambda function.,"
function nthNums(nums, n) {
    const nthNums = nums.map(x => Math.pow(x, n));
    return nthNums;
}
",623,"[console.assert(JSON.stringify(nthNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))) === JSON.stringify([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]), console.assert(JSON.stringify(nthNums([10, 20, 30], 3)) === JSON.stringify([1000, 8000, 27000])), console.assert(JSON.stringify(nthNums([12, 15], 5)) === JSON.stringify([248832, 759375]))]",
623, this   function to convert the given string to upper case.,"
function isUpper(string) {
  return string.toUpperCase();
}
",624,"
[console.assert(isUpper(""person"") === ""PERSON""), console.assert(isUpper(""final"") === ""FINAL""), console.assert(isUpper(""Valid"") === ""VALID"")]
",
624, this   function to interchange first and last elements in a given list.,"
function swap_List(newList) { 
    let size = newList.length; 
    let temp = newList[0]; 
    newList[0] = newList[size - 1]; 
    newList[size - 1] = temp;   
    return newList; 
}
",625,"
[console.assert(swap_List([1,2,3]).toString() === [3,2,1].toString()), console.assert(swap_List([1,2,3,4,4]).toString() === [4,2,3,4,1].toString()), console.assert(swap_List([4,5,6]).toString() === [6,5,4].toString())]
",
625, this   function to find the largest triangle that can be inscribed in the semicircle.,"
function triangleArea(r) {
    if (r < 0) {
        return -1;
    }
    return r * r;
}
",626,"
[console.assert(triangleArea(0) === 0), console.assert(triangleArea(-1) === -1), console.assert(triangleArea(2) === 4)]
",
626, this   function to find the smallest missing number from the given array.,"
function findFirstMissing(array, start, end) {
    if (start > end) {
        return end + 1;
    }
    if (start !== array[start]) {
        return start;
    }
    const mid = Math.floor((start + end) / 2);
    if (array[mid] === mid) {
        return findFirstMissing(array, mid + 1, end);
    }
    return findFirstMissing(array, start, mid);
}
",627,"
[console.assert(findFirstMissing([0,1,2,3],0,3) === 4), console.assert(findFirstMissing([0,1,2,6,9],0,4) === 3), console.assert(findFirstMissing([2,3,5,8,9],0,4) === 0)]
",
627, this function to replace all spaces in the given string with character * list item * list item * list item * list item %20.,"function replaceSpaces(string) {
    const MAX = 1000;
    string = string.trim();
    let i = string.length;
    let spaceCount = (string.match(/ /g) || []).length;
    let newLength = i + spaceCount * 2;
    if (newLength > MAX) {
      return -1;
    }
    let index = newLength - 1;
    string = string.split('');
    for (let f = 0; f < spaceCount * 2; f++) {
      string.push(0);
    }
    for (let j = i - 1; j >= 0; j--) {
      if (string[j] === ' ') {
        string[index] = '0';
        string[index - 1] = '2';
        string[index - 2] = '%';
        index -= 3;
      } else {
        string[index] = string[j];
        index -= 1;
      }
    }
    return string.join('');
  }",628,"
[console.assert(replaceSpaces(""My Name is Dawood"") === ""My%20Name%20is%20Dawood""), console.assert(replaceSpaces(""I am a Programmer"") === ""I%20am%20a%20Programmer""), console.assert(replaceSpaces(""I love Coding"") === ""I%20love%20Coding"")]
",
628, this   function to find even numbers from a mixed list.,"
function Split(list) {
    let ev_li = [];
    for (let i of list) {
        if (i % 2 === 0) {
            ev_li.push(i);
        }
    }
    return ev_li;
}
",629,"
[console.assert(Split([1,2,3,4,5]).toString() === [2,4].toString()), console.assert(Split([4,5,6,7,8,0,1]).toString() === [4,6,8,0].toString()), console.assert(Split([8,12,15,19]).toString() === [8,12].toString())]
",
629, this function to extract all the adjacent coordinates of the given coordinate tuple.,"function getCoordinates(testTup) {
    function* adjac(ele, sub = []) { 
      if (!ele.length) { 
        yield sub; 
      } else { 
        for (let j = ele[0] - 1; j <= ele[0] + 1; j++) { 
          for (let idx of adjac(ele.slice(1), sub.concat(j))) { 
            yield idx; 
          } 
        } 
      } 
    }
    return Array.from(adjac(testTup)); 
  }",630,"
[console.assert(JSON.stringify(getCoordinates([3, 4])) === JSON.stringify([[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])), console.assert(JSON.stringify(getCoordinates([4, 5])) === JSON.stringify([[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])), console.assert(JSON.stringify(getCoordinates([5, 6])) === JSON.stringify([[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]))]
",
630, this function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"const text = ""Exercises"";

function replaceSpaces(text) {
  text = text.replace(/ /g, ""_"");
  return text;
}",631,"[
    console.assert(replaceSpaces('Jumanji The Jungle') === 'Jumanji_The_Jungle'),
    console.assert(replaceSpaces('The Avengers') === 'The_Avengers'),
    console.assert(replaceSpaces('Fast and Furious') === 'Fast_and_Furious')
  ]
  ",
631, this   function to move all zeroes to the end of the given list.,"
function moveZero(numList) {
    let a = Array(numList.filter(num => num === 0).length).fill(0);
    let x = numList.filter(i => i !== 0);
    x.push(...a);
    return x;
}
",632,"[console.assert(JSON.stringify(moveZero([1,0,2,0,3,4]))) === JSON.stringify([1,2,3,4,0,0]), console.assert(JSON.stringify(moveZero([2,3,2,0,0,4,0,5,0])) === JSON.stringify([2,3,2,4,5,0,0,0,0]), console.assert(JSON.stringify(moveZero([0,1,0,1,1]))) === JSON.stringify([1,1,1,0,0]))]",
632, this   function to find the sum of xor of all pairs of numbers in the given array.,"
function pair_OR_Sum(arr, n) {
    let ans = 0;
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            ans += (arr[i] ^ arr[j]);
        }
    }
    return ans;
}
",633,"
[console.assert(pair_OR_Sum([5,9,7,6],4) === 47), console.assert(pair_OR_Sum([7,3,5],3) === 12), console.assert(pair_OR_Sum([7,3],2) === 4)]
",
633, this   function to find the sum of fourth power of first n even natural numbers.,"
function evenPowerSum(n) {
    let sum = 0; 
    for (let i = 1; i <= n; i++) { 
        let j = 2 * i; 
        sum += j * j * j * j; 
    }
    return sum; 
}
",634,"
[console.assert(evenPowerSum(2) === 272), console.assert(evenPowerSum(3) === 1568), console.assert(evenPowerSum(4) === 5664)]
",
634, this function to push all values into a heap and then pop off the smallest values one at a time.,"function heapSort(iterable) {
    let n = iterable.length;

    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
        let largest = i;
        let left = 2 * i + 1;
        let right = 2 * i + 2;

        if (left < n && iterable[left] > iterable[largest]) {
            largest = left;
        }

        if (right < n && iterable[right] > iterable[largest]) {
            largest = right;
        }

        if (largest !== i) {
            [iterable[i], iterable[largest]] = [iterable[largest], iterable[i]];
            i = largest + 1;
        }
    }

    for (let i = n - 1; i > 0; i--) {
        [iterable[0], iterable[i]] = [iterable[i], iterable[0]];

        let largest = 0;
        let left, right;
        do {
            left = 2 * largest + 1;
            right = 2 * largest + 2;
            let newLargest = largest;

            if (left < i && iterable[left] > iterable[newLargest]) {
                newLargest = left;
            }

            if (right < i && iterable[right] > iterable[newLargest]) {
                newLargest = right;
            }

            if (newLargest !== largest) {
                [iterable[largest], iterable[newLargest]] = [iterable[newLargest], iterable[largest]];
                largest = newLargest;
            } else {
                break;
            }
        } while (true);
    }

    return iterable;
}",635,"  [
    console.assert(
      JSON.stringify(heapSort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])) ===
        JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
      ""Test case 1 failed""
    ),
    console.assert(
      JSON.stringify(heapSort([25, 35, 22, 85, 14, 65, 75, 25, 58])) ===
        JSON.stringify([14, 22, 25, 25, 35, 58, 65, 75, 85]),
      ""Test case 2 failed""
    ),
    console.assert(
      JSON.stringify(heapSort([7, 1, 9, 5])) === JSON.stringify([1, 5, 7, 9]),
      ""Test case 3 failed""
    ),
  ]",
635, this   function to check if roots of a quadratic equation are reciprocal of each other or not.,"
function Check_Solution(a, b, c) { 
    if (a === c) { 
        return ""Yes""; 
    } else { 
        return ""No""; 
    } 
}
",636,"
[console.assert(Check_Solution(2,0,2) === ""Yes""), console.assert(Check_Solution(2,-5,2) === ""Yes""), console.assert(Check_Solution(1,2,3) === ""No"")]
",
636, this function to check whether the given amount has no profit and no loss,"
function noprofit_noloss(actual_cost, sale_amount) {
  if (sale_amount === actual_cost) {
    return true;
  } else {
    return false;
  }
}
",637,"
[console.assert(noprofit_noloss(1500, 1200) === false), console.assert(noprofit_noloss(100, 100) === true), console.assert(noprofit_noloss(2000, 5000) === false)];
",
637, this function to calculate wind chill index.,"
function windChill(v, t) {
    const windchill = 13.12 + 0.6215 * t - 11.37 * Math.pow(v, 0.16) + 0.3965 * t * Math.pow(v, 0.16);
    return Math.round(windchill);
}
",638,"
[console.assert(windChill(120, 35) === 40), console.assert(windChill(40, 70) === 86), console.assert(windChill(10, 100) === 116)]
",
639, this function to remove the parenthesis area in a string.,"
function removeParenthesis(items) {
    return items.map(item => item.replace(/ ?\([^)]+\)/g, """"));
}
",640,"[console.assert(removeParenthesis([""  (chrome)""])[0] === "" ""), console.assert(removeParenthesis([""string(.abc)""])[0] === ""string""), console.assert(removeParenthesis([""alpha(num)""])[0] === ""alpha"")]",
641, this function to remove similar rows from the given tuple matrix.,"function removeSimilarRow(testList) {
    const seen = new Set();
    const result = [];

    testList.forEach(sub => {
        let sortedSub = sub.map(pair => pair.slice().sort((a, b) => a - b)); 
        sortedSub.sort((a, b) => JSON.stringify(a).localeCompare(JSON.stringify(b))); 

        let key = JSON.stringify(sortedSub);
        if (!seen.has(key)) {
            seen.add(key);
            result.push(sortedSub);
        }
    });

    return result;
}",642,"[console.assert(
    JSON.stringify(removeSimilarRow([[[4, 5], [3, 2]], [[2, 2], [4, 6]], [[3, 2], [4, 5]]])) === 
    JSON.stringify([ [ [ 2, 3 ], [ 4, 5 ] ], [ [ 2, 2 ], [ 4, 6 ] ] ])
),
console.assert(
    JSON.stringify(removeSimilarRow([[[5, 6], [4, 3]], [[3, 3], [5, 7]], [[4, 3], [5, 6]]])) === 
    JSON.stringify([ [ [ 3, 4 ], [ 5, 6 ] ], [ [ 3, 3 ], [ 5, 7 ] ] ])
),
console.assert(
    JSON.stringify(removeSimilarRow([[[6, 7], [5, 4]], [[4, 4], [6, 8]], [[5, 4], [6, 7]]])) === 
    JSON.stringify([ [ [ 4, 5 ], [ 6, 7 ] ], [ [ 4, 4 ], [ 6, 8 ] ] ])
)]",
642," this function that matches a word containing z, not at the start or end of the word.","
function textMatchWordzMiddle(text) {
    const patterns = /\Bz\B/;
    if (patterns.test(text)) {
        return Found a match!;
    } else {
        return Not matched!;
    }
}
",643,"[console.assert(textMatchWordzMiddle("" zabc."") === ""Not matched!""), 
    console.assert(textMatchWordzMiddle(""xyzabc."") === ""Found a match!""), 
    console.assert(textMatchWordzMiddle(""  lang  ."") === ""Not matched!"")]",
643, this   function to reverse an array upto a given position.,"  function reverseArrayUptoK(input, k) {
    return input.slice(0, k).reverse().concat(input.slice(k));
  }",644,"[
    console.assert(JSON.stringify(reverseArrayUptoK([1, 2, 3, 4, 5, 6], 4)) === JSON.stringify([4, 3, 2, 1, 5, 6])),
    console.assert(JSON.stringify(reverseArrayUptoK([4, 5, 6, 7], 2)) === JSON.stringify([5, 4, 6, 7])),
    console.assert(JSON.stringify(reverseArrayUptoK([9, 8, 7, 6, 5], 3)) === JSON.stringify([7, 8, 9, 6, 5]))
  ]",
645, this   function to count number of cubes of size k in a cube of size n.,"
function No_of_cubes(N, K) {
    let No = 0;
    No = (N - K + 1);
    No = Math.pow(No, 3);
    return No;
}
",646,"
[console.assert(No_of_cubes(2, 1) === 8), console.assert(No_of_cubes(5, 2) === 64), console.assert(No_of_cubes(1, 1) === 1)]
",
646, this function to split a string at uppercase letters.,"
function split_upperstring(text) {
    return text.match(/[A-Z][^A-Z]*/g);
}
",647,"[console.assert(split_upperstring("" ProgramLanguage"").toString()===[""Program"",""Language""].toString()), 
console.assert(split_upperstring("" Program"").toString()===[""Program""].toString()), 
console.assert(split_upperstring(""ProgrammingLanguage"").toString()===[""Programming"",""Language""].toString())]",
647, this function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"function exchangeElements(lst) {
    let lst1 = [];
    let lst2 = [];
    
    for (let i = 0; i < lst.length; i += 2) {
        if (i + 1 < lst.length) {
            lst1.push(lst[i + 1]); 
            lst2.push(lst[i]);
        } else {
            lst2.push(lst[i]); 
        }
    }
    
    return [lst1, lst2]; 
}",648,"[console.assert(
    JSON.stringify(exchangeElements([0, 1, 2, 3, 4, 5])) === JSON.stringify([[1, 3, 5], [0, 2, 4]])
),
console.assert(
    JSON.stringify(exchangeElements([5, 6, 7, 8, 9, 10])) === JSON.stringify([[6, 8, 10], [5, 7, 9]])
),
console.assert(
    JSON.stringify(exchangeElements([25, 35, 45, 55, 75, 95])) === JSON.stringify([[35, 55, 95], [25, 45, 75]])
)]",
649, this   function to check whether the given two arrays are equal or not.,"
function are_Equal(arr1, arr2, n, m) {
    if (n !== m) {
        return false;
    }
    arr1.sort();
    arr2.sort();
    for (let i = 0; i < n; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
",650,"
[console.assert(are_Equal([1,2,3],[3,2,1],3,3) === true), console.assert(are_Equal([1,1,1],[2,2,2],3,3) === false), console.assert(are_Equal([8,9],[4,5,6],2,3) === false)]
",
650, this function to check if one tuple is a subset of another tuple.,"
function checkSubset(testTup1, testTup2) {
  const res = new Set(testTup2).size <= new Set(testTup1).size && [...new Set(testTup2)].every(item => new Set(testTup1).has(item));
  return res;
}
",651,"[
    console.assert(checkSubset([10, 4, 5, 6], [5, 10]) === true),
    console.assert(checkSubset([1, 2, 3, 4], [5, 6]) === false),
    console.assert(checkSubset([7, 8, 9, 10], [10, 8]) === true)
]",
651, this function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"function matrixToList(testList) {
    let temp = [];
    for (let sub of testList) {
        temp.push(...sub);
    }
    let res = [];
    for (let i = 0; i < temp[0].length; i++) {
        res.push(temp.map(row => row[i]));
    }
    return res;
}",652,"[console.assert(
    JSON.stringify(matrixToList([[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]])) === 
    JSON.stringify([[4, 7, 10, 18, 0, 10], [5, 8, 13, 17, 4, 1]])
),
console.assert(
    JSON.stringify(matrixToList([[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]])) === 
    JSON.stringify([[5, 8, 11, 19, 1, 11], [6, 9, 14, 18, 5, 2]])
),
console.assert(
    JSON.stringify(matrixToList([[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]])) === 
    JSON.stringify([[6, 9, 12, 20, 23, 15], [7, 10, 15, 21, 7, 8]])
)]",
652, this function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"
function groupingDictionary(l) {
    const d = {};
    for (const [k, v] of l) {
        if (!d[k]) {
            d[k] = [];
        }
        d[k].push(v);
    }
    return d;
}
",653,"[
    console.assert(JSON.stringify(groupingDictionary([[""yellow"", 1], [""blue"", 2], [""yellow"", 3], [""blue"", 4], [""red"", 1]])) === JSON.stringify({yellow: [1, 3], blue: [2, 4], red: [1]})),
    console.assert(JSON.stringify(groupingDictionary([[""yellow"", 10], [""blue"", 20], [""yellow"", 30], [""blue"", 40], [""red"", 10]])) === JSON.stringify({yellow: [10, 30], blue: [20, 40], red: [10]})),
    console.assert(JSON.stringify(groupingDictionary([[""yellow"", 15], [""blue"", 25], [""yellow"", 35], [""blue"", 45], [""red"", 15]])) === JSON.stringify({yellow: [15, 35], blue: [25, 45], red: [15]}))
]",
653, this function to find the perimeter of a rectangle.,"
function rectanglePerimeter(l, b) {
  const perimeter = 2 * (l + b);
  return perimeter;
}
",654,"
[console.assert(rectanglePerimeter(10, 20) === 60), console.assert(rectanglePerimeter(10, 5) === 30), console.assert(rectanglePerimeter(4, 2) === 12)]
",
654, this   function to find the sum of fifth power of n natural numbers.,"
function fifthPowerSum(n) { 
    let sm = 0; 
    for (let i = 1; i <= n; i++) { 
        sm += (i * i * i * i * i); 
    } 
    return sm; 
}
",655,"[
    console.assert(fifthPowerSum(2) === 33),
    console.assert(fifthPowerSum(4) === 1300),
    console.assert(fifthPowerSum(3) === 276)
]",
655, this   function to find the minimum sum of absolute differences of two arrays.,"
function find_Min_Sum(a, b, n) { 
    a.sort((x, y) => x - y); 
    b.sort((x, y) => x - y); 
    let sum = 0;  
    for (let i = 0; i < n; i++) { 
        sum += Math.abs(a[i] - b[i]); 
    } 
    return sum; 
}
",656,"
[console.assert(find_Min_Sum([3,2,1],[2,1,3],3) === 0), console.assert(find_Min_Sum([1,2,3],[4,5,6],3) === 9), console.assert(find_Min_Sum([4,1,8,7],[2,3,6,5],4) === 6)]
",
656, this   function to find the first digit in factorial of a given number.,"
function first_Digit(n) {
    let fact = 1;
    for (let i = 2; i <= n; i++) {
        fact = fact * i;
        while (fact % 10 === 0) {
            fact = Math.floor(fact / 10);
        }
    }
    while (fact >= 10) {
        fact = Math.floor(fact / 10);
    }
    return Math.floor(fact);
}
",657,"
[console.assert(first_Digit(5) === 1), console.assert(first_Digit(10) === 3), console.assert(first_Digit(7) === 5)]
",
657, this function to find the item with maximum occurrences in a given list.,"function maxOccurrences(list1) {
    let maxVal = 0;
    let result = list1[0];
    for (let i of list1) {
        let occu = list1.filter(x => x === i).length;
        if (occu > maxVal) {
            maxVal = occu;
            result = i;
        }
    }
    return result;",658,"
[console.assert(maxOccurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]) === 2), console.assert(maxOccurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11]) === 1), console.assert(maxOccurrences([1, 2, 3, 2, 4, 5, 1, 1, 1]) === 1)]
",
659, this   function to choose points from two ranges such that no point lies in both the ranges.,"function find_Points(l1, r1, l2, r2) {
    let x = (l1 !== l2) ? Math.min(l1, l2) : -1;
    let y = (r1 !== r2) ? Math.max(r1, r2) : -1;
    return [x, y];
}",660,"[console.assert(JSON.stringify(find_Points(5, 10, 1, 5)) === JSON.stringify([1, 10])),
console.assert(JSON.stringify(find_Points(3, 5, 7, 9)) === JSON.stringify([3, 9])),
console.assert(JSON.stringify(find_Points(1, 5, 2, 8)) === JSON.stringify([1, 8]))]",
660, this function to find the maximum sum that can be formed which has no three consecutive elements present.,"
function maxSumOfThreeConsecutive(arr, n) { 
    let sum = new Array(n).fill(0); 
    if (n >= 1) { 
        sum[0] = arr[0]; 
    } 
    if (n >= 2) { 
        sum[1] = arr[0] + arr[1]; 
    } 
    if (n > 2) { 
        sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2])); 
    } 
    for (let i = 3; i < n; i++) { 
        sum[i] = Math.max(Math.max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]); 
    } 
    return sum[n-1]; 
}
",661,"[
    console.assert(maxSumOfThreeConsecutive([100, 1000, 100, 1000, 1], 5) === 2101),
    console.assert(maxSumOfThreeConsecutive([3000, 2000, 1000, 3, 10], 5) === 5013),
    console.assert(maxSumOfThreeConsecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) === 27)
]",
661, this function to sort a list in a dictionary.,"function sortedDict(dict1) {
    const sortedDict = {};
    for (const [x, y] of Object.entries(dict1)) {
      sortedDict[x] = y.sort((a, b) => a - b); 
    }
    return sortedDict;
}",662,"[
    console.assert(JSON.stringify(sortedDict({n1: [2, 3, 1], n2: [5, 1, 2], n3: [3, 2, 4]})) === JSON.stringify({n1: [1, 2, 3], n2: [1, 2, 5], n3: [2, 3, 4]})),
    console.assert(JSON.stringify(sortedDict({n1: [25, 37, 41], n2: [41, 54, 63], n3: [29, 38, 93]})) === JSON.stringify({n1: [25, 37, 41], n2: [41, 54, 63], n3: [29, 38, 93]})),
    console.assert(JSON.stringify(sortedDict({n1: [58, 44, 56], n2: [91, 34, 58], n3: [100, 200, 300]})) === JSON.stringify({n1: [44, 56, 58], n2: [34, 58, 91], n3: [100, 200, 300]}))
]",
662, this function to find the largest possible value of k such that k modulo x is y.,"
function findMaxVal(n, x, y) { 
    let ans = -Number.MAX_SAFE_INTEGER; 
    for (let k = 0; k <= n; k++) { 
        if (k % x === y) { 
            ans = Math.max(ans, k); 
        } 
    } 
    return (ans >= 0 && ans <= n) ? ans : -1; 
}
",663,"
[console.assert(findMaxVal(15, 10, 5) === 15), console.assert(findMaxVal(187, 10, 5) === 185), console.assert(findMaxVal(16, 11, 1) === 12)]
",
663, this   function to find the average of even numbers till a given even number.,"
function average_Even(n) {
    if (n % 2 !== 0) {
        return ""Invalid Input"";
    }
    
    let sm = 0;
    let count = 0;
    while (n >= 2) {
        count++;
        sm += n;
        n -= 2;
    }
    return Math.floor(sm / count);
}
",664,"
[console.assert(average_Even(2) === 2), console.assert(average_Even(4) === 3), console.assert(average_Even(100) === 51)]
",
664, this   function to shift first element to the end of given list.,"
function moveLast(numList) {
    const a = Array(numList.filter(i => i === numList[0]).length).fill(numList[0]);
    const x = numList.filter(i => i !== numList[0]);
    x.push(...a);
    return x;
}
",665,"[
  console.assert(JSON.stringify(moveLast([1, 2, 3, 4])) === JSON.stringify([2, 3, 4, 1])),
  console.assert(JSON.stringify(moveLast([2, 3, 4, 1, 5, 0])) === JSON.stringify([3, 4, 1, 5, 0, 2])),
  console.assert(JSON.stringify(moveLast([5, 4, 3, 2, 1])) === JSON.stringify([4, 3, 2, 1, 5]))
]",
665, this function to count occurrence of a character in a string.,"
function countChar(string, char) {
    let count = 0;
    for (let i = 0; i < string.length; i++) {
        if (string[i] === char) {
            count++;
        }
    }
    return count;
}
",666,"[
    console.assert(countChar("" "", ""o"") === 0),
    console.assert(countChar(""little"", ""t"") === 2),
    console.assert(countChar(""assert"", ""s"") === 2)
  ]",
666, this   function to count number of vowels in the string.,"
function Check_Vow(string, vowels) {
    let final = [...string].filter(each => vowels.includes(each));
    return final.length;
}
",667,"[
  console.assert(Check_Vow(""corner"", ""AaEeIiOoUu"") === 2),
  console.assert(Check_Vow(""valid"", ""AaEeIiOoUu"") === 2),
  console.assert(Check_Vow(""true"", ""AaEeIiOoUu"") === 2)
]",
667, this   function to replace multiple occurence of character by single.,"function replace(string, char) {
    const pattern = new RegExp(char + ""{2,}"", ""g"");
    string = string.replace(pattern, char);
    return string;
}",668,"[console.assert(replace(""peep"", ""e"") === ""pep""),
    console.assert(replace(""Greek"", ""e"") === ""Grek""),
    console.assert(replace(""Moon"", ""o"") === ""Mon"")]",
668, this function to check whether the given ip address is valid or not using regex.,"function check_IP(Ip) {
    const regex = /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$/;

    if (regex.test(Ip)) {
        return ""Valid IP address"";
    } else {
        return ""Invalid IP address"";
    }
}",669,"[console.assert(check_IP(""192.168.0.1"") === ""Valid IP address""),
console.assert(check_IP(""110.234.52.124"") === ""Valid IP address""),
console.assert(check_IP(""366.1.2.2"") === ""Invalid IP address"")]",
669, this   function to check whether a sequence of numbers has a decreasing trend or not.,"
function decreasingTrend(nums) {
    if (nums.slice().sort((a, b) => b - a).toString() === nums.toString()) {
        return true;
    } else {
        return false;
    }
}
",670,"[
    console.assert(decreasingTrend([-4, -3, -2, -1]) === false),
    console.assert(decreasingTrend([1, 2, 3]) === false),
    console.assert(decreasingTrend([3, 2, 1]) === true)
  ]",
671, this function to find maximum of three numbers.,"
function maxOfThree(num1, num2, num3) { 
    let lnum;
    if (num1 >= num2 && num1 >= num3) {
        lnum = num1;
    } else if (num2 >= num1 && num2 >= num3) {
        lnum = num2;
    } else {
        lnum = num3;
    }
    return lnum;
}
",672,"
[console.assert(maxOfThree(10,20,30) === 30), console.assert(maxOfThree(55,47,39) === 55), console.assert(maxOfThree(10,49,30) === 49)]
",
672, this   function to convert a list of multiple integers into a single integer.,"
function convert(list) {
    let s = list.map(i => String(i));
    let res = parseInt(s.join(""""));
    return res;
}
",673,"
[console.assert(convert([1,2,3]) === 123), console.assert(convert([4,5,6]) === 456), console.assert(convert([7,8,9]) === 789)];
",
674," this function to add two integers. however, if the sum is between the given range it will return 20.","
function sumNums(x, y, m, n) {
    let sumNums = x + y;
    if (sumNums >= m && sumNums < n) {
        return 20;
    } else {
        return sumNums;
    }
}
",675,"
[console.assert(sumNums(2,10,11,20) === 20), console.assert(sumNums(15,17,1,10) === 32), console.assert(sumNums(10,15,5,30) === 20)]
",
675, this function to remove everything except alphanumeric characters from the given string by using regex.,"function removeExtraChar(text1) {
    const pattern = /[\W_]+/g;
    return text1.replace(pattern, '');
}",676,"[console.assert(removeExtraChar(""**//Google Android// - 12. "") === ""GoogleAndroid12""),
console.assert(removeExtraChar(""****//Google Flutter//*** - 36. "") === ""GoogleFlutter36""),
console.assert(removeExtraChar(""**//Google Firebase// - 478. "") === ""GoogleFirebase478"")]",
676, this function to check if the triangle is valid or not.,"
function validityTriangle(a, b, c) {
    const total = a + b + c;
    if (total === 180) {
        return true;
    } else {
        return false;
    }
}
",677,"
[console.assert(validityTriangle(60,50,90) === false), console.assert(validityTriangle(45,75,60) === true), console.assert(validityTriangle(30,50,100) === true)];
",
677, this   function to remove spaces from a given string.,"function remove_spaces(str1) {
    str1 = str1.replace(/ /g,'');
    return str1;
  }
  ",678,"
[console.assert(remove_spaces(""a b c"") === ""abc""), console.assert(remove_spaces(""1 2 3"") === ""123""), console.assert(remove_spaces("" b c"") === ""bc"")]
",
678, this function to access dictionary keyâ€™s element by index.,"function accessKey(dictionary, key) {
    return Object.keys(dictionary)[key];
}",679,"[
  console.assert(accessKey({physics: 80, math: 90, chemistry: 86}, 0) === ""physics""),
  console.assert(accessKey({java: 10, javaScript: 20, C: 30}, 2) === ""C""),
  console.assert(accessKey({program: 15, computer: 45}, 1) === ""computer"")
]",
679, this   function to check whether a sequence of numbers has an increasing trend or not.,"function increasingTrend(nums) {
    return nums.slice().sort((a, b) => a - b).toString() === nums.toString();
}",680,"[console.assert(increasingTrend([1, 2, 3, 4]) === true),
console.assert(increasingTrend([4, 3, 2, 1]) === false),
console.assert(increasingTrend([0, 1, 4, 9]) === true)]",
680, this   function to find the smallest prime divisor of a number.,"
function smallest_Divisor(n) {
    if (n % 2 === 0) {
        return 2;
    }
    let i = 3;
    while (i * i <= n) {
        if (n % i === 0) {
            return i;
        }
        i += 2;
    }
    return n;
}
",681,"
[console.assert(smallest_Divisor(10) === 2), console.assert(smallest_Divisor(25) === 5), console.assert(smallest_Divisor(31) === 31)]
",
682, this   function to check whether the given number can be represented by sum of two squares or not.,"
function sum_Square(n) {
    let i = 1;
    while (i * i <= n) {
        let j = 1;
        while (j * j <= n) {
            if (i * i + j * j === n) {
                return true;
            }
            j++;
        }
        i++;
    }
    return false;
}
",683,"
[console.assert(sum_Square(25) === true), console.assert(sum_Square(24) === false), console.assert(sum_Square(17) === true)]
",
683, this   function to count occurences of a character in a repeated string.,"function count_Char(str, x) {
    let count = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] === x) {
            count += 1;
        }
    }
    const n = 10;
    const repititions = Math.floor(n / str.length);
    count = count * repititions;
    const l = n % str.length;
    for (let i = 0; i < l; i++) {
        if (str[i] === x) {
            count += 1;
        }
    }
    return count;
}",684,"[console.assert(count_Char(""abcac"", 'a') === 4),
console.assert(count_Char(""abca"", 'c') === 2),
console.assert(count_Char(""aba"", 'a') === 7)]",
684, this   function to find sum of prime numbers between 1 to n.,"
function sumOfPrimes(n) { 
    let prime = new Array(n + 1).fill(true);  
    let p = 2;
    while (p * p <= n) { 
        if (prime[p] === true) {  
            let i = p * 2;
            while (i <= n) { 
                prime[i] = false;
                i += p; 
            }
        }
        p += 1;    
    }
    let sum = 0;
    for (let i = 2; i <= n; i++) { 
        if (prime[i]) { 
            sum += i; 
        }
    }
    return sum;
}
",685,"
[console.assert(sumOfPrimes(10) === 17), console.assert(sumOfPrimes(20) === 77), console.assert(sumOfPrimes(5) === 10)]
",
685, this function to find the frequency of each element in the given list.,"function freqElement(testTup) {
    let res = {};
    for (let ele of testTup) {
      res[ele] = (res[ele] || 0) + 1;
    }
    return res;
  }",686,"[
  console.assert(JSON.stringify(freqElement([4, 5, 4, 5, 6, 6, 5, 5, 4])) === JSON.stringify({4: 3, 5: 4, 6: 2})),
  console.assert(JSON.stringify(freqElement([7, 8, 8, 9, 4, 7, 6, 5, 4])) === JSON.stringify({7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1})),
  console.assert(JSON.stringify(freqElement([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])) === JSON.stringify({1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}))
]",
687, this function to get the length of a complex number.,"function lenComplex(a, b) {
    return Math.sqrt(a * a + b * b);
}",688,"[console.assert(lenComplex(3, 4) === 5.0),
console.assert(lenComplex(9, 10) === 13.45362404707371),
console.assert(lenComplex(7, 9) === 11.40175425099138)]",
688,##  this function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"function min_jumps(arr, n) {
    let jumps = new Array(n).fill(0);
    if (n === 0 || arr[0] === 0) {
        return Infinity;
    }
    jumps[0] = 0;
    for (let i = 1; i < n; i++) {
        jumps[i] = Infinity;
        for (let j = 0; j < i; j++) {
            if (i <= j + arr[j] && jumps[j] !== Infinity) {
                jumps[i] = Math.min(jumps[i], jumps[j] + 1);
                break;
            }
        }
    }
    return jumps[n - 1];
}",689,"[console.assert(min_jumps([1, 3, 6, 1, 0, 9], 6) === 3),
console.assert(min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) === 3),
console.assert(min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) === 10)]",
689, this function to multiply consecutive numbers of a given list.,"
function mulConsecutiveNums(nums) {
    const result = nums.slice(0, -1).map((a, i) => a * nums[i + 1]);
    return [result];
}
",690,"
[console.assert(mulConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7]).toString() === [1, 3, 12, 16, 20, 30, 42].toString()), console.assert(mulConsecutiveNums([4, 5, 8, 9, 6, 10]).toString() === [20, 40, 72, 54, 60].toString()), console.assert(mulConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).toString() === [2, 6, 12, 20, 30, 42, 56, 72, 90].toString())]
",
690, this function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"function groupElement(testList) {
    const res = {};
    testList.sort((a, b) => a[1] - b[1]); // Sort by the second element of each tuple
    const grouped = testList.reduce((acc, ele) => {
      const key = ele[1];
      if (!acc[key]) {
        acc[key] = [];
      }
      acc[key].push(ele[0]);
      return acc;
    }, {});
    Object.keys(grouped).forEach(key => {
      res[key] = grouped[key];
    });
    return res;
}",691,"[console.assert(JSON.stringify(groupElement([[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]])) === JSON.stringify({5: [6, 2], 7: [2, 8, 3], 8: [9]})),
console.assert(JSON.stringify(groupElement([[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]])) === JSON.stringify({6: [7, 3], 8: [3, 9, 4], 9: [10]})),
console.assert(JSON.stringify(groupElement([[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]])) === JSON.stringify({7: [8, 4], 9: [4, 10, 5], 10: [11]}))]",
691, this   function to find the last two digits in factorial of a given number.,"
function last_Two_Digits(N) {
    if (N >= 10) {
        return;
    }
    let fac = 1;
    for (let i = 1; i <= N; i++) {
        fac = (fac * i) % 100;
    }
    return fac;
}
",692,"[
  console.assert(last_Two_Digits(7) === 40),
  console.assert(last_Two_Digits(5) === 20),
  console.assert(last_Two_Digits(2) === 2)
]",
692, this function to remove multiple spaces in a string by using regex.,"function removeMultipleSpaces(text1) {
    return text1.replace(/ +/g, ' ' );
  }",693,"
[
console.assert(removeMultipleSpaces(""Google      Assistant"") === ""Google Assistant""),
console.assert(removeMultipleSpaces(""Quad      Core"") === ""Quad Core""),
console.assert(removeMultipleSpaces(""ChromeCast      Built-in"") === ""ChromeCast Built-in"")
]",
693, this function to extract unique values from the given dictionary values.,"function extractUnique(testDict) {
    const res = Array.from(new Set(Object.values(testDict).flat())).sort((a, b) => a - b);
    return res;
}",694,"[console.assert(JSON.stringify(extractUnique({msm: [5, 6, 7, 8], is: [10, 11, 7, 5], best: [6, 12, 10, 8], for: [1, 2, 5]})) === JSON.stringify([1, 2, 5, 6, 7, 8, 10, 11, 12])),
console.assert(JSON.stringify(extractUnique({Built: [7, 1, 9, 4], for: [11, 21, 36, 14, 9], ISP: [4, 1, 21, 39, 47], TV: [1, 32, 38]})) === JSON.stringify([1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47])),
console.assert(JSON.stringify(extractUnique({F: [11, 13, 14, 17], A: [12, 11, 15, 18], N: [19, 21, 15, 36], G: [37, 36, 35]})) === JSON.stringify([11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]))]",
694, this function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"
function checkGreater(testTup1, testTup2) {
  const res = testTup1.every((x, i) => x < testTup2[i]);
  return res;
}
",695,"
[console.assert(checkGreater([10, 4, 5], [13, 5, 18]) === true),
console.assert(checkGreater([1, 2, 3], [2, 1, 4]) === false),
console.assert(checkGreater([4, 5, 6], [5, 6, 7]) === true)]
",
695, this function to zip two given lists of lists.,"
function zipList(list1, list2) {
    const result = list1.map((item, index) => item.concat(list2[index]));
    return result;
}
",696,"[console.assert(JSON.stringify(zipList([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])) === JSON.stringify([[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]])),
console.assert(JSON.stringify(zipList([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])) === JSON.stringify([[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]])),
console.assert(JSON.stringify(zipList([[""a"", ""b""], [""c"", ""d""]], [[""e"", ""f""], [""g"", ""h""]])) === JSON.stringify([[""a"", ""b"", ""e"", ""f""], [""c"", ""d"", ""g"", ""h""]]))]",
696, this function to find number of even elements in the given list using lambda function.,"
function countEven(array_nums) {
  let count_even = array_nums.filter(x => x % 2 === 0).length;
  return count_even;
}
",697,"
[console.assert(countEven([1, 2, 3, 5, 7, 8, 9, 10]) === 3), console.assert(countEven([10, 15, 14, 13, -18, 12, -20]) === 5), console.assert(countEven([1, 2, 4, 8, 9]) === 3)]
",
697, this function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"
function sortDictItem(testDict) {
    let res = {};
    Object.keys(testDict).sort((a, b) => testDict[a] * a - testDict[b] * b).forEach(key => {
        res[key] = testDict[key];
    });
    return res;
}
",698,"[console.assert(JSON.stringify(sortDictItem({ ""[5, 6]"": 3, ""[2, 3]"": 9, ""[8, 4]"": 10, ""[6, 4]"": 12 })) === JSON.stringify({ ""[5, 6]"": 3, ""[2, 3]"": 9, ""[8, 4]"": 10, ""[6, 4]"": 12 })),
    console.assert(JSON.stringify(sortDictItem({ ""[6, 7]"": 4, ""[3, 4]"": 10, ""[9, 5]"": 11, ""[7, 5]"": 13 })) === JSON.stringify({ ""[6, 7]"": 4, ""[3, 4]"": 10, ""[9, 5]"": 11, ""[7, 5]"": 13 })),
    console.assert(JSON.stringify(sortDictItem({ ""[7, 8]"": 5, ""[4, 5]"": 11, ""[10, 6]"": 12, ""[8, 6]"": 14 })) === JSON.stringify({ ""[7, 8]"": 5, ""[4, 5]"": 11, ""[10, 6]"": 12, ""[8, 6]"": 14 }))
    ]",
698, this   function to find the minimum number of swaps required to convert one binary string to another.,"
function min_Swaps(str1, str2) { 
    let count = 0; 
    for (let i = 0; i < str1.length; i++) { 
        if (str1[i] !== str2[i]) { 
            count++; 
        } 
    } 
    if (count % 2 === 0) { 
        return Math.floor(count / 2); 
    } else { 
        return ""Not Possible""; 
    } 
}
",699,"
[console.assert(min_Swaps(""1101"", ""1110"") === 1), console.assert(min_Swaps(""1111"", ""0100"") === ""Not Possible""), console.assert(min_Swaps(""1110000"", ""0001101"") === 3)]
",
699, this function to count the number of elements in a list which are within a specific range.,"function countRangeInList(li, min, max) {
    let ctr = 0;
    for (let x of li) {
        if (min <= x && x <= max) {
            ctr++;
        }
    }
    return ctr;
}",700,"[console.assert(countRangeInList([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100) === 6),
console.assert(countRangeInList([""a"", ""b"", ""c"", ""d"", ""e"", ""f""], ""a"", ""e"") === 5),
console.assert(countRangeInList([7, 8, 9, 15, 17, 19, 45], 15, 20) === 3)]",
700, this function to find the equilibrium index of the given array.,"
function equilibriumIndex(arr) {
  let totalSum = arr.reduce((a, b) => a + b, 0);
  let leftSum = 0;
  
  for (let i = 0; i < arr.length; i++) {
    totalSum -= arr[i];
    if (leftSum === totalSum) {
      return i;
    }
    leftSum += arr[i];
  }
  return -1;
}
",701,"
[console.assert(equilibriumIndex([1, 2, 3, 4, 1, 2, 3]) === 3),
console.assert(equilibriumIndex([-7, 1, 5, 2, -4, 3, 0]) === 3),
console.assert(equilibriumIndex([1, 2, 3]) === -1)]
",
701, this function to find the minimum number of elements that should be removed such that amax-amin<=k.,"function removals(arr, n, k) {
    let ans = n - 1;
    arr.sort((a, b) => a - b); 

    for (let i = 0; i < n; i++) {
        let start = i + 1;
        let end = n - 1;
        let ind = -1;

        while (start <= end) {
            let mid = Math.floor(start + (end - start) / 2);
            if (arr[mid] - arr[i] <= k) {
                ind = mid;
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        if (ind !== -1) {
            ans = Math.min(ans, n - (ind - i + 1));
        }
    }

    return ans;
}",702,"
[console.assert(removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4) === 5), console.assert(removals([1, 5, 6, 2, 8], 5, 2) === 3), console.assert(removals([1, 2, 3, 4, 5, 6], 6, 3) === 2)]
",
702, this function to check whether the given key is present in the dictionary or not.,"
function isKeyPresent(d, x) {
  if (x in d) {
    return true;
  } else {
    return false;
  }
}
",703,"
[console.assert(isKeyPresent({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5) === true), console.assert(isKeyPresent({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6) === true), console.assert(isKeyPresent({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10) === false)]
",
703, this function to calculate the harmonic sum of n-1.,"
function harmonicSum(n) {
  if (n < 2) {
    return 1;
  } else {
    return 1 / n + harmonicSum(n - 1);
  }
}
",704,"[console.assert(harmonicSum(10) === 2.9289682539682538), console.assert(harmonicSum(4) === 2.083333333333333), console.assert(harmonicSum(7) === 2.5928571428571425) ]",
704, this function to sort a list of lists by length and value.,"function sortSublists(list1) {
    list1.forEach(sublist => sublist.sort());
    list1.sort((a, b) => a.length - b.length);
    return list1;
}",705,"[console.assert(JSON.stringify(sortSublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([ [ 2 ], [ 0 ], [ 1, 3 ], [ 0, 7 ], [ 11, 9 ], [ 13, 15, 17 ] ])),
console.assert(JSON.stringify(sortSublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])) === JSON.stringify([ [ 1 ], [ 7 ], [ 2, 3 ], [ 10, 11 ], [ 4, 5, 6 ] ])),
console.assert(JSON.stringify(sortSublists([["" ""], [""java"", ""C"", ""C++""], [""DBMS""], [""SQL"", ""HTML""]])) === JSON.stringify([ [ ' ' ], [ 'DBMS' ], [ 'HTML', 'SQL' ], [ 'C', 'C++', 'java' ] ]))]",
705, this function to find whether an array is subset of another array.,"function isSubset(arr1, arr2) {
    const hashSet = new Set(arr1);
    for (let i = 0; i < arr2.length; i++) {
        if (!hashSet.has(arr2[i])) {
            return false;
        }
    }
    return true;
}",706,"[console.assert(isSubset([11, 1, 13, 21, 3, 7], [11, 3, 7, 1]) === true),
console.assert(isSubset([1, 2, 3, 4, 5, 6], [1, 2, 4]) === true),
console.assert(isSubset([10, 5, 2, 23, 19], [19, 5, 3]) === false)]",
706, this   function to count the total set bits from 1 to n.,"
function count_Set_Bits(n) {  
    n += 1; 
    let powerOf2 = 2;   
    let cnt = Math.floor(n / 2);  
    while (powerOf2 <= n) { 
        let totalPairs = Math.floor(n / powerOf2);  
        cnt += Math.floor(totalPairs / 2) * powerOf2;  
        if (totalPairs & 1) { 
            cnt += (n % powerOf2); 
        } else { 
            cnt += 0; 
        }
        powerOf2 <<= 1;    
    } 
    return cnt;  
}
",707,"
[console.assert(count_Set_Bits(16) === 33), console.assert(count_Set_Bits(2) === 2), console.assert(count_Set_Bits(14) === 28)]
",
707, this   function to convert a string to a list.,"function Convert(string) {
    let li = string.split("" "");
    return li;
}",708,"[console.assert(Convert(""program"").toString() === [""program""].toString()),
console.assert(Convert(""Data Analysis"").toString() === [""Data"", ""Analysis""].toString()),
console.assert(Convert(""Hadoop Training"").toString() === [""Hadoop"", ""Training""].toString())]",
709, this function to access the initial and last data of the given tuple record.,"
function front_and_rear(test_tup) {
  let res = [test_tup[0], test_tup[test_tup.length - 1]];
  return [res];
}
",710,"
[console.assert(front_and_rear([10, 4, 5, 6, 7]).toString() === [10, 7].toString()), console.assert(front_and_rear([1, 2, 3, 4, 5]).toString() === [1, 5].toString()), console.assert(front_and_rear([6, 7, 8, 9, 10]).toString() === [6, 10].toString())]
",
712, this function to check if the given tuple contains all valid values or not.,"function checkValid(testTup) {
    let res = !testTup.some(ele => !ele);
    return res;
}",713,"[console.assert(checkValid([true, true, true, true]) === true),
console.assert(checkValid([true, false, true, true]) === false),
console.assert(checkValid([true, true, true, true]) === true)]",
713, this   function to count the number of distinct power of prime factor of given number.,"
function count_Fac(n) {  
    let m = n; 
    let count = 0; 
    let i = 2; 
    while ((i * i) <= m) { 
        let total = 0; 
        while (n % i === 0) { 
            n /= i; 
            total += 1; 
        } 
        let temp = 0; 
        let j = 1; 
        while ((temp + j) <= total) { 
            temp += j; 
            count += 1; 
            j += 1; 
        } 
        i += 1; 
    } 
    if (n !== 1) { 
        count += 1; 
    } 
    return count; 
}",714,"
[console.assert(count_Fac(24) === 3), console.assert(count_Fac(12) === 2), console.assert(count_Fac(4) === 1)]
",
714, this function to convert the given string of integers into a tuple.,"function strToTuple(test_str) {
    const res = test_str.split("", "").map(Number);  
    return res;
}",715,"
[console.assert(JSON.stringify(strToTuple(""1, -5, 4, 6, 7"")) === JSON.stringify([1, -5, 4, 6, 7])), console.assert(JSON.stringify(strToTuple(""1, 2, 3, 4, 5"")) === JSON.stringify([1, 2, 3, 4, 5])), console.assert(JSON.stringify(strToTuple(""4, 6, 9, 11, 13, 14"")) === JSON.stringify([4, 6, 9, 11, 13, 14]))]
",
715, this function to find the perimeter of a rombus.,"function rumbus_perimeter(a) {
    const perimeter = 4 * a;
    return perimeter;
  }",716,"
[console.assert(rumbus_perimeter(10) === 40), console.assert(rumbus_perimeter(5) === 20), console.assert(rumbus_perimeter(4) === 16)]
",
716, this function to calculate the standard deviation.,"function sdCalc(data) {
    const n = data.length;
    if (n <= 1) {
        return { mean: parseFloat(data[0]) || 0.0, sd: 0.0 };
    }

    let sum = 0.0;
    for (const el of data) {
        sum += parseFloat(el);
    }
    const mean = sum / n;

    let sd = 0.0;
    for (const el of data) {
        sd += (parseFloat(el) - mean) ** 2;
    }
    sd = Math.sqrt(sd / (n - 1));

    return { mean, sd };
}",717,"[console.assert(sdCalc([4, 2, 5, 8, 6]).sd === 2.23606797749979, ""Test 1 Failed""),
console.assert(sdCalc([1, 2, 3, 4, 5, 6, 7]).sd === 2.160246899469287, ""Test 2 Failed""),
console.assert(sdCalc([5, 9, 10, 15, 6, 4]).sd === 4.070217029430577, ""Test 3 Failed"")]",
717, this function to create a list taking alternate elements from another given list.,"function alternateElements(list1, expected) {
    const result = list1.filter((_, index) => index % 2 === 0);
    const arraysEqual = (arr1, arr2) =>
        Array.isArray(arr1) &&
        Array.isArray(arr2) &&
        arr1.length === arr2.length &&
        arr1.every((val, index) => val === arr2[index]);

    return arraysEqual(result, expected);
}",718,"[console.assert((alternateElements([""red"", ""black"", ""white"", ""green"", ""orange""]), [""red"", ""white"", ""orange""]), ""Test 1 Failed""),
console.assert((alternateElements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2]), [2, 3, 0, 8, 4]), ""Test 2 Failed""),
console.assert((alternateElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), [1, 3, 5, 7, 9]), ""Test 3 Failed"")]",
718, this function that matches a string that has an a followed by zero or more bs.,"function textMatch(text) {
    const patterns = /ab*?/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",719,"
[console.assert(textMatch(""ac"") === ""Found a match!""), console.assert(textMatch(""dc"") === ""Not matched!""), console.assert(textMatch(""abba"") === ""Found a match!"")]
",
719, this function to add a dictionary to the tuple.,"function addDictToTuple(testTup, testDict) {
    return JSON.stringify([...testTup, testDict]);
}",720,"[console.assert(addDictToTuple([4, 5, 6], {""MSAM"": 1, ""is"": 2, ""best"": 3}) === JSON.stringify([4, 5, 6, {""MSAM"": 1, ""is"": 2, ""best"": 3}]), ""Test 1 Failed""),
console.assert(addDictToTuple([1, 2, 3], {""UTS"": 2, ""is"": 3, ""Worst"": 4}) === JSON.stringify([1, 2, 3, {""UTS"": 2, ""is"": 3, ""Worst"": 4}]), ""Test 2 Failed""),
console.assert(addDictToTuple([8, 9, 10], {""POS"": 3, ""is"": 4, ""Okay"": 5}) === JSON.stringify([8, 9, 10, {""POS"": 3, ""is"": 4, ""Okay"": 5}]), ""Test 3 Failed"")]",
720, this function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"
const M = 100;

function maxAverageOfPath(cost, N) { 
    const dp = Array.from({ length: N + 1 }, () => Array(N + 1).fill(0)); 
    dp[0][0] = cost[0][0]; 
    for (let i = 1; i < N; i++) { 
        dp[i][0] = dp[i - 1][0] + cost[i][0]; 
    }
    for (let j = 1; j < N; j++) { 
        dp[0][j] = dp[0][j - 1] + cost[0][j]; 
    }
    for (let i = 1; i < N; i++) { 
        for (let j = 1; j < N; j++) { 
            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]; 
        } 
    }
    return dp[N - 1][N - 1] / (2 * N - 1); 
}
",721,"
[console.assert(maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) === 5.2), console.assert(maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) === 6.2), console.assert(maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) === 7.2)]
",
721, this function to filter the height and width of students which are stored in a dictionary.,"
function filterData(students, h, w) {
    const result = {};
    for (const [k, s] of Object.entries(students)) {
        if (s[0] >= h && s[1] >= w) {
            result[k] = s;
        }
    }
    return result;
}
",722,"[console.assert(JSON.stringify(filterData({ ""Cierra Vega"": [6.2, 70], ""Alden Cantrell"": [5.9, 65], ""Kierra Gentry"": [6.0, 68], ""Pierre Cox"": [5.8, 66] }, 6.0, 70)) === JSON.stringify({ ""Cierra Vega"": [6.2, 70] })),
console.assert(JSON.stringify(filterData({ ""Cierra Vega"": [6.2, 70], ""Alden Cantrell"": [5.9, 65], ""Kierra Gentry"": [6.0, 68], ""Pierre Cox"": [5.8, 66] }, 5.9, 67)) === JSON.stringify({ ""Cierra Vega"": [6.2, 70], ""Kierra Gentry"": [6.0, 68] })),
console.assert(JSON.stringify(filterData({ ""Cierra Vega"": [6.2, 70], ""Alden Cantrell"": [5.9, 65], ""Kierra Gentry"": [6.0, 68], ""Pierre Cox"": [5.8, 66] }, 5.7, 64)) === JSON.stringify({ ""Cierra Vega"": [6.2, 70], ""Alden Cantrell"": [5.9, 65], ""Kierra Gentry"": [6.0, 68], ""Pierre Cox"": [5.8, 66] }))
]",
722, this function to count the same pair in two given lists using map function.,"
function countSamePair(nums1, nums2) {
    let result = nums1.reduce((acc, val, index) => acc + (val === nums2[index] ? 1 : 0), 0);
    return result;
}
",723,"
[console.assert(countSamePair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) === 4), console.assert(countSamePair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 11), console.assert(countSamePair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 1)]
",
723, this function to calculate the sum of all digits of the base to the specified power.,"function powerBaseSum(base, power) {
    return String(BigInt(base) ** BigInt(power))
        .split('')  
        .map(Number)
        .reduce((a, b) => a + b, 0); 
}",724,"
[console.assert(powerBaseSum(2, 100) === 115), console.assert(powerBaseSum(8, 10) === 37), console.assert(powerBaseSum(8, 15) === 62)]
",
724, this function to extract values between quotation marks of the given string by using regex.,"function extractQuotation(text1) {
    return text1.match(/""(.*?)""/g).map(match => match.slice(1, -1));
}",725,"[console.assert(JSON.stringify(extractQuotation(""Cortex \""A53\"" Based \""multi\"" tasking \""Processor\"""")) === JSON.stringify([""A53"", ""multi"", ""Processor""]), ""Test 1 Failed""),
console.assert(JSON.stringify(extractQuotation(""Cast your \""favorite\"" entertainment \""apps\"""")) === JSON.stringify([""favorite"", ""apps""]), ""Test 2 Failed""),
console.assert(JSON.stringify(extractQuotation(""Watch content \""4k Ultra HD\"" resolution with \""HDR 10\"" Support"")) === JSON.stringify([""4k Ultra HD"", ""HDR 10""]), ""Test 3 Failed"")]",
725, this function to multiply the adjacent elements of the given tuple.,"
function multiplyElements(testTup) {
    const res = testTup.slice(0, -1).map((num, index) => num * testTup[index + 1]);
    return res;
}
",726,"
[console.assert(multiplyElements([1, 5, 7, 8, 10]).toString() === [5, 35, 56, 80].toString()), console.assert(multiplyElements([2, 4, 5, 6, 7]).toString() === [8, 20, 30, 42].toString()), console.assert(multiplyElements([12, 13, 14, 9, 15]).toString() === [156, 182, 126, 135].toString())]
",
726, this function to remove all characters except letters and numbers using regex,"function removeChar(S) {
    const result = S.replace(/[\W_]+/g, ''); 
    return result;
}",727,"
[console.assert(removeChar(""123abcjw:, .@! eiw"") === ""123abcjweiw""), console.assert(removeChar(""Hello1234:, ! Howare33u"") === ""Hello1234Howare33u""), console.assert(removeChar(""Cool543Triks@:, Make@987Trips"") === ""Cool543TriksMake987Trips"")]
",
727, this function to sum elements in two lists.,"
function sumList(lst1, lst2) {
    let resList = lst1.map((val, i) => val + lst2[i]);
    return resList;
}
",728,"[console.assert(JSON.stringify(sumList([10,20,30],[15,25,35])) === JSON.stringify([25,45,65])),
console.assert(JSON.stringify(sumList([1,2,3],[5,6,7])) === JSON.stringify([6,8,10])),
console.assert(JSON.stringify(sumList([15,20,30],[15,45,75])) === JSON.stringify([30,65,105]))]",
728, this function to add two lists using map and lambda function.,"
function addList(nums1, nums2) {
  const result = nums1.map((x, index) => x + nums2[index]);
  return result;
}
",729,"[console.assert(JSON.stringify(addList([1, 2, 3],[4,5,6]))) === JSON.stringify([5, 7, 9]), 
console.assert(JSON.stringify(addList([1,2],[3,4]))) === JSON.stringify([4,6]), 
console.assert(JSON.stringify(addList([10,20],[50,70]))) === JSON.stringify([60,90])]",
729, this function to remove consecutive duplicates of a given list.,"
function consecutiveDuplicates(nums) {
    return nums.filter((value, index, self) => value !== self[index - 1]);
}
",730,"[console.assert(JSON.stringify(consecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]))) === JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]), 
console.assert(JSON.stringify(consecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]))) === JSON.stringify([10, 15, 19, 18, 17, 26, 17, 18, 10]), 
console.assert(JSON.stringify(consecutiveDuplicates(['a', 'a', 'b', 'c', 'd', 'd']))) === JSON.stringify(['a', 'b', 'c', 'd'])]",
730, this function to find the lateral surface area of a cone.,"
function lateralsurface_cone(r, h) {
  const l = Math.sqrt(r * r + h * h);
  const LSA = Math.PI * r * l;
  return LSA;
}
",731,"
[console.assert(lateralsurface_cone(5, 12) === 204.20352248333654), console.assert(lateralsurface_cone(10, 15) === 566.3586699569488), console.assert(lateralsurface_cone(19, 17) === 1521.8090132193388)]
",
731," this function to replace all occurrences of spaces, commas, or dots with a colon.","function replace_specialchar(str) {
  return str.replace(/[ ,]+/g, ':');  
}",732,"  [
    console.assert(replace_specialchar(""language, Programming language."") === ""language:Programming:language.""),
    console.assert(replace_specialchar(""a b c,d e f"") === ""a:b:c:d:e:f""),
    console.assert(replace_specialchar(""ram reshma,ram rahim"") === ""ram:reshma:ram:rahim"")
  ]",
732, this function to find the index of the first occurrence of a given number in a sorted array.,"
function findFirstOccurrence(A, x) {
    let left = 0;
    let right = A.length - 1;
    let result = -1;
    
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (x === A[mid]) {
            result = mid;
            right = mid - 1;
        } else if (x < A[mid]) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
    return result;
}
",733,"
[console.assert(findFirstOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 1), console.assert(findFirstOccurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 2), console.assert(findFirstOccurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) === 4)]
",
733, this   function to find sum of products of all possible subarrays.,"
function sumOfSubarrayProd(arr, n) {
    let ans = 0;
    let res = 0;
    let i = n - 1;
    while (i >= 0) {
        let incr = arr[i] * (1 + res);
        ans += incr;
        res = incr;
        i--;
    }
    return ans;
}
",734,"
[console.assert(sumOfSubarrayProd([1,2,3],3) === 20), console.assert(sumOfSubarrayProd([1,2],2) === 5), console.assert(sumOfSubarrayProd([1,2,3,4],4) === 84)]
",
734, this   function to toggle bits of the number except the first and the last bit.,"function toggleMiddleBits(n) {
    if (n === 1) {
        return 1;
    }
    let modifiedN = n;
    modifiedN |= modifiedN >> 1;
    modifiedN |= modifiedN >> 2;
    modifiedN |= modifiedN >> 4;
    modifiedN |= modifiedN >> 8;
    modifiedN |= modifiedN >> 16;

    return n ^ ((modifiedN >> 1) ^ 1);
}",735,"[console.assert(toggleMiddleBits(9) === 15, ""Test 1 Failed""),
console.assert(toggleMiddleBits(10) === 12, ""Test 2 Failed""),
console.assert(toggleMiddleBits(11) === 13, ""Test 3 Failed"")]",
735, this function to locate the left insertion point for a specified value in sorted order.,"function leftInsertion(a, x) {
    let i = bisectLeft(a, x);
    return i; 

    function bisectLeft(arr, val) {
        let low = 0;
        let high = arr.length;

        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (arr[mid] < val) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}",736,"[console.assert(leftInsertion([1, 2, 4, 5], 6) === 4),
console.assert(leftInsertion([1, 2, 4, 5], 3) === 2),
console.assert(leftInsertion([1, 2, 4, 5], 7) === 4)]",
737, this function to calculate the geometric sum of n-1.,"
function geometricSum(n) {
  if (n < 0) {
    return 0;
  } else {
    return 1 / Math.pow(2, n) + geometricSum(n - 1);
  }
}
",738,"
[console.assert(geometricSum(7) === 1.9921875), console.assert(geometricSum(4) === 1.9375), console.assert(geometricSum(8) === 1.99609375)];
",
738, this   function to find the index of smallest triangular number with n digits.,"
function find_Index(n) {
    const x = Math.sqrt(2 * Math.pow(10, (n - 1)));
    return Math.round(x);
}
",739,"
[console.assert(find_Index(2) === 4), console.assert(find_Index(3) === 14), console.assert(find_Index(4) === 45)]
",
739, this function to convert the given tuple to a key-value dictionary using adjacent elements.,"
function tupleToDict(testTup) {
    let res = {};
    for (let idx = 0; idx < testTup.length; idx += 2) {
        res[testTup[idx]] = testTup[idx + 1];
    }
    return res;
}
",740,"
[console.assert(tupleToDict([1, 5, 7, 10, 13, 5]).toString() === {1: 5, 7: 10, 13: 5}.toString()), console.assert(tupleToDict([1, 2, 3, 4, 5, 6]).toString() === {1: 2, 3: 4, 5: 6}.toString()), console.assert(tupleToDict([7, 8, 9, 10, 11, 12]).toString() === {7: 8, 9: 10, 11: 12}.toString())]
",
740, this   function to check whether all the characters are same or not.,"
function all_Characters_Same(s) {
    const n = s.length;
    for (let i = 1; i < n; i++) {
        if (s[i] !== s[0]) {
            return false;
        }
    }
    return true;
}
",741,"[console.assert(all_Characters_Same(""  "") === true),
     console.assert(all_Characters_Same(""aaa"") === true), 
     console.assert(all_Characters_Same(""data"") === false)]",
741, this function to caluclate the area of a tetrahedron.,"
function areaTetrahedron(side) {
  const area = Math.sqrt(3) * (side * side);
  return area;
}
",742,"
[console.assert(areaTetrahedron(3) === 15.588457268119894),
console.assert(areaTetrahedron(20) === 692.8203230275509),
console.assert(areaTetrahedron(10) === 173.20508075688772)]
",
742, this function to rotate a given list by specified number of items to the right direction.,"
function rotateRight(list1, m, n) {
  const result = list1.slice(-m).concat(list1.slice(0, -n));
  return result;
}
",743,"
[console.assert(rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4).toString() === [8, 9, 10, 1, 2, 3, 4, 5, 6].toString()), console.assert(rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2).toString() === [9, 10, 1, 2, 3, 4, 5, 6, 7, 8].toString()), console.assert(rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2).toString() === [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8].toString())]
",
743, this function to check if the given tuple has any none value or not.,"
function check_none(test_tup) {
    const res = test_tup.some(ele => ele === null);
    return res;
}
",744,"[
console.assert(check_none([10, 4, 5, 6, null]) === true),
console.assert(check_none([7, 8, 9, 11, 14]) === false),
console.assert(check_none([1, 2, 3, 4, null]) === true)]
",
744, this function to find numbers within a given range where every number is divisible by every digit it contains.,"function divisibleByDigits(startnum, endnum) {
    let result = [];
    for (let n = startnum; n <= endnum; n++) {
        let digits = String(n).split(''); // Split by empty string to get individual digits
        if (!digits.some(x => parseInt(x) === 0 || n % parseInt(x) !== 0)) {
            result.push(n);
        }
    }
    return result;
}",745,"[console.assert(divisibleByDigits(1, 22).toString() === [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22].toString()),
console.assert(divisibleByDigits(1, 15).toString() === [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15].toString()),
console.assert(divisibleByDigits(20, 25).toString() === [22, 24].toString())]",
745, this function to find area of a sector.,"
function sectorArea(r, a) {
    const pi = 22 / 7;
    if (a >= 360) {
        return null;
    }
    const sectorArea = (pi * r ** 2) * (a / 360);
    return sectorArea;
}
",746,"
[console.assert(sectorArea(4, 45) === 6.285714285714286), console.assert(sectorArea(9, 45) === 31.82142857142857), console.assert(sectorArea(9, 360) === null)]
",
746, this function to find the longest common subsequence for the given three string sequence.,"
function lcs_of_three(X, Y, Z, m, n, o) {
    let L = Array.from({ length: m + 1 }, () => 
        Array.from({ length: n + 1 }, () => 
            Array(o + 1).fill(0)
        )
    );

    for (let i = 0; i <= m; i++) {
        for (let j = 0; j <= n; j++) {
            for (let k = 0; k <= o; k++) {
                if (i === 0 || j === 0 || k === 0) {
                    L[i][j][k] = 0;
                } else if (X[i - 1] === Y[j - 1] && X[i - 1] === Z[k - 1]) {
                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;
                } else {
                    L[i][j][k] = Math.max(Math.max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);
                }
            }
        }
    }
    return L[m][n][o];
}
",747,"[console.assert(lcs_of_three(""AGGT12"", ""12TXAYB"", ""12XBA"", 6, 7, 5) === 2),
console.assert(lcs_of_three(""Reels"", ""Reelsfor"", ""ReelsforReels"", 5, 8, 13) === 5),
console.assert(lcs_of_three(""abcd1e2"", ""bc12ea"", ""bd1ea"", 7, 6, 5) === 3)]",
747, this function to put spaces between words starting with capital letters in a given string by using regex.,"function capitalWordsSpaces(str1) {
    return str1.replace(/([a-z])([A-Z])/g, '$1 $2');
}",748,"[console.assert(capitalWordsSpaces("" "") === "" ""),
console.assert(capitalWordsSpaces(""ProgrammingExamples"") === ""Programming Examples""),
console.assert(capitalWordsSpaces(""GetReadyToBeCodingFreak"") === ""Get Ready To Be Coding Freak"")]",
748, this function to sort a given list of strings of numbers numerically.,"function sort_numeric_strings(nums_str) {
    let result = nums_str.map(x => parseInt(x));
    result.sort((a, b) => a - b);
    return result;
}",749,"[console.assert(JSON.stringify(sort_numeric_strings([4, 12, 45, 7, 0, 100, 200, -12, -500])) === JSON.stringify([-500, -12, 0, 4, 7, 12, 45, 100, 200])),
console.assert(JSON.stringify(sort_numeric_strings([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])) === JSON.stringify([1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])),
console.assert(JSON.stringify(sort_numeric_strings([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])) === JSON.stringify([1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]))]",
749, this function to add the given tuple to the given list.,"
function addTuple(testList, testTup) {
    testList.push(...testTup);
    return testList;
}
",750,"
[console.assert(JSON.stringify(addTuple([5, 6, 7], [9, 10])) === JSON.stringify([5, 6, 7, 9, 10])), 
 console.assert(JSON.stringify(addTuple([6, 7, 8], [10, 11])) === JSON.stringify([6, 7, 8, 10, 11])), 
 console.assert(JSON.stringify(addTuple([7, 8, 9], [11, 12])) === JSON.stringify([7, 8, 9, 11, 12]))]
",
750, this function to check if the given array represents min heap or not.,"
function checkMinHeap(arr, i) {
    if (2 * i + 2 > arr.length) {
        return true;
    }
    const leftChild = (arr[i] <= arr[2 * i + 1]) && checkMinHeap(arr, 2 * i + 1);
    const rightChild = (2 * i + 2 === arr.length) || (arr[i] <= arr[2 * i + 2] && checkMinHeap(arr, 2 * i + 2));
    return leftChild && rightChild;
}
",751,"
[console.assert(checkMinHeap([1, 2, 3, 4, 5, 6], 0) === true), console.assert(checkMinHeap([2, 3, 4, 5, 10, 15], 0) === true), console.assert(checkMinHeap([2, 10, 4, 5, 3, 15], 0) === false)]
",
751, this function to find the nth jacobsthal number.,"
function jacobsthal_num(n) { 
    let dp = new Array(n + 1).fill(0); 
    dp[0] = 0; 
    dp[1] = 1; 
    for (let i = 2; i <= n; i++) { 
        dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
    } 
    return dp[n]; 
}
",752,"
[console.assert(jacobsthal_num(5) === 11), console.assert(jacobsthal_num(2) === 1), console.assert(jacobsthal_num(4) === 5)]
",
753, this function to find common index elements from three lists.,"function extractIndexList(l1, l2, l3) {
    let result = [];
    let length = Math.min(l1.length, l2.length, l3.length);
    
    for (let i = 0; i < length; i++) {
        if (l1[i] === l2[i] && l2[i] === l3[i]) {
            result.push(l1[i]);
        }
    }
    
    return result;
}",754,"[console.assert(JSON.stringify(extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) === JSON.stringify([1, 7])),
console.assert(JSON.stringify(extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])) === JSON.stringify([1, 6])),
console.assert(JSON.stringify(extractIndexList([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])) === JSON.stringify([1, 5]))]",
754, this function to find the second smallest number in a list.,"function secondSmallest(numbers) {
    if (numbers.length < 2) {
        return null;
    }

    const uniqItems = [...new Set(numbers)].sort((a, b) => a - b);

    return uniqItems.length < 2 ? null : uniqItems[1];
}",755,"[console.assert(secondSmallest([1, 2, -8, -2, 0, -2]) === -2),
console.assert(secondSmallest([1, 1, -0.5, 0, 2, -2, -2]) === -0.5),
console.assert(secondSmallest([2, 2]) === null)]",
755, this function that matches a string that has an a followed by zero or one b.,"function textMatchZeroOne(text) {
    const patterns = /ab?/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",756,"
[console.assert(textMatchZeroOne(""ac"") === ""Found a match!""), console.assert(textMatchZeroOne(""dc"") === ""Not matched!""), console.assert(textMatchZeroOne(""abbbba"") === ""Found a match!"")]
",
756, this function to count the pairs of reverse strings in the given string list.,"function countReversePairs(testList) {
    let res = 0;
    for (let i = 0; i < testList.length; i++) {
        for (let j = i + 1; j < testList.length; j++) {
            if (testList[i] === [...testList[j]].reverse().join('')) {
                res++;
            }
        }
    }
    return res;
}",757,"[
  console.assert(countReversePairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""]) === 2),
  console.assert(countReversePairs([""geeks"", ""best"", ""for"", ""skeeg""]) === 1),
  console.assert(countReversePairs([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) === 2)
]",
757, this function to count number of unique lists within a list.,"function uniqueSublists(list1) {
    const result = {};
    for (const l of list1) {
        const key = JSON.stringify(l);  
        if (!result[key]) {
            result[key] = 0;  
        }
        result[key]++;  
    }

    const formattedResult = {};
    for (const key in result) {
        const sublist = JSON.parse(key);  
        formattedResult[JSON.stringify(sublist)] = result[key];  
    }

    return formattedResult;
}",758,"[console.assert(JSON.stringify(uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])) === JSON.stringify({""[1,3]"": 2, ""[5,7]"": 2, ""[13,15,17]"": 1, ""[9,11]"": 1})),
console.assert(JSON.stringify(uniqueSublists([[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]])) === JSON.stringify({""[\""green\"",\""orange\""]"": 2, ""[\""black\""]"": 1, ""[\""white\""]"": 1})),
console.assert(JSON.stringify(uniqueSublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])) === JSON.stringify({""[10,20,30,40]"": 1, ""[60,70,50,50]"": 1, ""[90,100,200]"": 1}))]",
758, this function to check a decimal with a precision of 2.,"function isDecimal(num) {
    const dnumre = /^[0-9]+(\.[0-9]{1,2})?$/;
    const result = dnumre.test(num);
    return result;
}",759,"[
    console.assert(isDecimal(123.11) === true),
    console.assert(isDecimal(3.124587) === false),
    console.assert(isDecimal(3) === true),
    console.assert(isDecimal(0.99) === true),
    console.assert(isDecimal(5.999) === false)
]",
759, this   function to check whether an array contains only one distinct element or not.,"function unique_Element(arr, n) {
    const s = new Set(arr);
    if (s.size === 1) {
        return ""YES"";
    } else {
        return ""NO"";
    }
}",760,"[
    console.assert(unique_Element([1, 1, 1], 3) === ""YES""),
    console.assert(unique_Element([1, 2, 1, 2], 4) === ""NO""),
    console.assert(unique_Element([1, 2, 3, 4, 5], 5) === ""NO"")
]",
760, this function to caluclate arc length of an angle.,"
function arcLength(d, a) {
    const pi = 22 / 7;
    if (a >= 360) {
        return null;
    }
    const arclength = (pi * d) * (a / 360);
    return arclength;
}
",761,"
[console.assert(arcLength(9, 45) === 3.5357142857142856), console.assert(arcLength(9, 480) === null), console.assert(arcLength(5, 270) === 11.785714285714285)];
",
761, this function to check whether the given month number contains 30 days or not.,"
function check_monthnumber_number(monthnum3) {
  if (monthnum3 === 4 || monthnum3 === 6 || monthnum3 === 9 || monthnum3 === 11) {
    return true;
  } else {
    return false;
  }
}
",762,"
[console.assert(check_monthnumber_number(6) === true), console.assert(check_monthnumber_number(2) === false), console.assert(check_monthnumber_number(12) === false)]
",
762, this   function to find the minimum difference between any two elements in a given array.,"
function find_Min_Diff(arr, n) { 
    arr.sort((a, b) => a - b); 
    let diff = 10 ** 20; 
    for (let i = 0; i < n - 1; i++) { 
        if (arr[i + 1] - arr[i] < diff) { 
            diff = arr[i + 1] - arr[i]; 
        } 
    } 
    return diff; 
}
",763,"
[console.assert(find_Min_Diff([1,5,3,19,18,25], 6) === 1), console.assert(find_Min_Diff([4,3,2,6], 4) === 1), console.assert(find_Min_Diff([30,5,20,9], 4) === 4)]
",
763, this   function to count numeric values in a given string.,"function number_ctr(str) {
    let number_ctr = 0;
    for (let i = 0; i < str.length; i++) {
        if (!isNaN(str[i]) && str[i] !== ' ') number_ctr++;
    }
    return number_ctr;
}",764,"[
    console.assert(number_ctr(""program2bedone"") === 1),
    console.assert(number_ctr(""3wonders"") === 1),
    console.assert(number_ctr(""123"") === 3)
]",
764, this function to find nth polite number.,"
function isPolite(n) {
    n = n + 1;
    return Math.floor(n + (Math.log(n + Math.log(n) / Math.log(2)) / Math.log(2)));
}
",765,"
[console.assert(isPolite(7) === 11), console.assert(isPolite(4) === 7), console.assert(isPolite(9) === 13)]
",
765, this function to iterate over all pairs of consecutive items in a given list.,"
function pairWise(l1) {
    let temp = [];
    for (let i = 0; i < l1.length - 1; i++) {
        let currentElement = l1[i];
        let nextElement = l1[i + 1];
        let x = [currentElement, nextElement];
        temp.push(x);
    }
    return temp;
}
",766,"
[console.assert(JSON.stringify(pairWise([1, 1, 2, 3, 3, 4, 4, 5])) === JSON.stringify([[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]])),
console.assert(JSON.stringify(pairWise([1, 5, 7, 9, 10])) === JSON.stringify([[1, 5], [5, 7], [7, 9], [9, 10]])),
console.assert(JSON.stringify(pairWise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]))]
",
766, this   function to count the number of pairs whose sum is equal to â€˜sumâ€™.,"
function getPairsCount(arr, n, sum) {
    let count = 0;  
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] === sum) {
                count++;
            }
        }
    }
    return count;
}
",767,"
[console.assert(getPairsCount([1,1,1,1],4,2) === 6), console.assert(getPairsCount([1,5,7,-1,5],5,6) === 3), console.assert(getPairsCount([1,-2,3],3,1) === 1)]
",
767, this   function to check for odd parity of a given number.,"
function check_Odd_Parity(x) { 
    let parity = 0; 
    while (x !== 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    return parity % 2 === 1; 
}
",768,"
[console.assert(check_Odd_Parity(13) === true), console.assert(check_Odd_Parity(21) === true), console.assert(check_Odd_Parity(18) === false)]
",
768, this   function to get the difference between two lists.,"
function Diff(li1, li2) {
    return Array.from(new Set([...li1].filter(x => !li2.includes(x)).concat([...li2].filter(x => !li1.includes(x)))));
}
",769,"[console.assert(JSON.stringify(Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) === JSON.stringify([10, 15,20, 30])), 
console.assert(JSON.stringify(Diff([1,2,3,4,5], [6,7,1])) === JSON.stringify([2,3,4,5,6,7])),
 console.assert(JSON.stringify(Diff([1,2,3], [6,7,1])) === JSON.stringify([2,3,6,7]))]",
769, this   function to find the sum of fourth power of first n odd natural numbers.,"
function odd_Num_Sum(n) {
    let j = 0;
    let sm = 0;
    for (let i = 1; i <= n; i++) {
        j = (2 * i - 1);
        sm += (j * j * j * j);
    }
    return sm;
}
",770,"
[console.assert(odd_Num_Sum(2) === 82), console.assert(odd_Num_Sum(3) === 707), console.assert(odd_Num_Sum(4) === 3108)]
",
770, this function to check if the given expression is balanced or not.,"function checkExpression(exp) {
    if (exp.length % 2 !== 0) {
        return false;
    }
    let stack = [];
    for (let ch of exp) {
        if (ch === '(' || ch === '{' || ch === '[') {
            stack.push(ch);
        }
        if (ch === ')' || ch === '}' || ch === ']') {
            if (stack.length === 0) {
                return false;
            }
            let top = stack.pop();
            if ((top === '(' && ch !== ')') || (top === '{' && ch !== '}') || (top === '[' && ch !== ']')) {
                return false;
            }
        }
    }
    return stack.length === 0;
}",771,"[
console.assert(checkExpression(""{()}[{}]"") === true),
console.assert(checkExpression(""{()}[{]"") === false),
console.assert(checkExpression(""{()}[{}][]({})"") === true)]
",
771, this function to remove all the words with k length in the given string.,"function removeLength(testStr, K) {
    const temp = testStr.split("" ""); 
    const res = temp.filter(ele => ele.length !== K); 
    return res.join("" ""); 
}",772,"
[console.assert(removeLength(""The person is most value tet"", 3) === ""person is most value"", ""Test Case 1 Failed""),
console.assert(removeLength(""If you told me about this ok"", 4) === ""If you me about ok"", ""Test Case 2 Failed""),
console.assert(removeLength(""Forces of darkeness is come into the play"", 4) === ""Forces of darkeness is the"", ""Test Case 3 Failed"")]",
773, this function to check if the string is a valid email address or not using regex.,"
const regex = /^[a-z0-9]+[._]?[a-z0-9]+[@]\w+[.]\w{2,3}$/;
function checkEmail(email) {
    if (regex.test(email)) {
        return ""Valid Email"";
    } else {
        return ""Invalid Email"";
    }
}
",774,"
[console.assert(checkEmail(""ankitrai326@gmail.com"") === ""Valid Email""), console.assert(checkEmail(""my.ownsite@ourearth.org"") === ""Valid Email""), console.assert(checkEmail(""ankitaoie326.com"") === ""Invalid Email"")]
",
774, this   function to check whether every odd index contains odd numbers of a given list.,"
function oddPosition(nums) {
    return nums.every((num, i) => num % 2 === i % 2);
}
",775,"
[console.assert(oddPosition([2,1,4,3,6,7,6,3]) === true), console.assert(oddPosition([4,1,2]) === true), console.assert(oddPosition([1,2,3]) === false)]
",
775, this function to count those characters which have vowels as their neighbors in the given string.,"function countVowels(testStr) {
    let res = 0;
    const vowList = ['a', 'e', 'i', 'o', 'u'];
    for (let idx = 1; idx < testStr.length - 1; idx++) {
      if (!vowList.includes(testStr[idx]) && (vowList.includes(testStr[idx - 1]) || vowList.includes(testStr[idx + 1]))) {
        res++;
      }
    }
    if (!vowList.includes(testStr[0]) && vowList.includes(testStr[1])) {
      res++;
    }
    if (!vowList.includes(testStr[testStr.length - 1]) && vowList.includes(testStr[testStr.length - 2])) {
      res++;
    }
    return res;
  }",776,"  [
    console.assert(countVowels(""bestinstareels"") === 7),
    console.assert(countVowels(""partofthejourneyistheend"") === 12),
    console.assert(countVowels(""amazonprime"") === 5)
  ]
    ",
776, this   function to find the sum of non-repeated elements in a given array.,"
function findSum(arr, n) {
    arr.sort((a, b) => a - b);
    let sum = arr[0];
    for (let i = 0; i < n - 1; i++) {
        if (arr[i] !== arr[i + 1]) {
            sum += arr[i + 1];
        }
    }
    return sum;
}
",777,"
[console.assert(findSum([1,2,3,1,1,4,5,6],8) === 21), console.assert(findSum([1,10,9,4,2,10,10,45,4],9) === 71), console.assert(findSum([12,10,9,45,2,10,10,45,10],9) === 78)]
",
777, this function to pack consecutive duplicates of a given list elements into sublists.,"
function packConsecutiveDuplicates(list1) {
    return list1.reduce((acc, curr) => {
        if (acc.length === 0 || acc[acc.length - 1][0] !== curr) {
            acc.push([curr]);
        } else {
            acc[acc.length - 1].push(curr);
        }
        return acc;
    }, []);
}
",778,"[console.assert(JSON.stringify(packConsecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])) === JSON.stringify([[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])),
console.assert(JSON.stringify(packConsecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])) === JSON.stringify([[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])),
console.assert(JSON.stringify(packConsecutiveDuplicates(['a', 'a', 'b', 'c', 'd', 'd'])) === JSON.stringify([['a', 'a'], ['b'], ['c'], ['d', 'd']]))]",
778, this function to count the number of unique lists within a list.,"
function uniqueSublists(list1) {
    let result = {};
    for (let l of list1) {
        let key = JSON.stringify(l);
        if (!result[key]) {
            result[key] = [];
        }
        result[key].push(1);
    }
    for (let a in result) {
        result[a] = result[a].reduce((acc, val) => acc + val, 0);
    }
    return result;
}
",779,"[console.assert(
    JSON.stringify(uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])) === 
    JSON.stringify({ ""[1,3]"": 2, ""[5,7]"": 2, ""[13,15,17]"": 1, ""[9,11]"": 1 }),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(uniqueSublists([[""green"", ""orange""], [""black""], [""green"", ""orange""], [""white""]])) === 
    JSON.stringify({ '[""green"",""orange""]': 2, '[""black""]': 1, '[""white""]': 1 }),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(uniqueSublists([[1, 2], [3, 4], [4, 5], [6, 7]])) === 
    JSON.stringify({ ""[1,2]"": 1, ""[3,4]"": 1, ""[4,5]"": 1, ""[6,7]"": 1 }),
    ""Test Case 3 Failed""
)]",
779, this function to find the combinations of sums with tuples in the given tuple list.,"function findCombinations(testList) {
    let res = [];
    for (let i = 0; i < testList.length; i++) {
        for (let j = i + 1; j < testList.length; j++) {
            let [a1, a2] = testList[i];
            let [b1, b2] = testList[j];
            res.push([a1 + b1, a2 + b2]);
        }
    }
    return res;
}",780,"[console.assert(
    JSON.stringify(findCombinations([[2, 4], [6, 7], [5, 1], [6, 10]])) === 
    JSON.stringify([[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(findCombinations([[3, 5], [7, 8], [6, 2], [7, 11]])) === 
    JSON.stringify([[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(findCombinations([[4, 6], [8, 9], [7, 3], [8, 12]])) === 
    JSON.stringify([[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]),
    ""Test Case 3 Failed""
)]",
780, this   function to check whether the count of divisors is even or odd.,"
function countDivisors(n) { 
    let count = 0; 
    for (let i = 1; i <= Math.floor(Math.sqrt(n)) + 1; i++) { 
        if (n % i === 0) { 
            if (Math.floor(n / i) === i) { 
                count += 1; 
            } else { 
                count += 2; 
            } 
        } 
    } 
    return (count % 2 === 0) ? ""Even"" : ""Odd""; 
}
",781,"
[console.assert(countDivisors(10) === ""Even""), console.assert(countDivisors(100) === ""Odd""), console.assert(countDivisors(125) === ""Even"")]
",
781, this   function to find the sum of all odd length subarrays.,"function Odd_Length_Sum(arr) {
    let Sum = 0;
    const l = arr.length;
    for (let i = 0; i < l; i++) {
        let contribution = Math.ceil(((i + 1) * (l - i)) / 2);
        Sum += contribution * arr[i];
    }
    return Sum;
}",782,"[console.assert(Odd_Length_Sum([1, 2, 4]) === 14, ""Test Case 1 Failed""),
console.assert(Odd_Length_Sum([1, 2, 1, 2]) === 15, ""Test Case 2 Failed""),
console.assert(Odd_Length_Sum([1, 7]) === 8, ""Test Case 3 Failed"")]",
783, this function to find the product of first even and odd number of a given list.,"
function mul_even_odd(list1) {
    const first_even = list1.find(el => el % 2 === 0) || -1;
    const first_odd = list1.find(el => el % 2 !== 0) || -1;
    return first_even * first_odd;
}
",784,"[
console.assert(mul_even_odd([1,3,5,7,4,1,6,8]) === 4),
console.assert(mul_even_odd([1,2,3,4,5,6,7,8,9,10]) === 2),
console.assert(mul_even_odd([1,5,7,9,10]) === 10)]
",
784, this function to convert tuple string to integer tuple.,"function tupleStrInt(testStr) {
    const res = testStr.replace(/\(|\)/g, """").split("", "").map(num => parseInt(num, 10));
    return res;
}",785,"[console.assert(JSON.stringify(tupleStrInt(""(7, 8, 9)"")) === JSON.stringify([7, 8, 9]), ""Test Case 1 Failed""),
console.assert(JSON.stringify(tupleStrInt(""(1, 2, 3)"")) === JSON.stringify([1, 2, 3]), ""Test Case 2 Failed""),
console.assert(JSON.stringify(tupleStrInt(""(4, 5, 6)"")) === JSON.stringify([4, 5, 6]), ""Test Case 3 Failed"")]",
785, this function to locate the right insertion point for a specified value in sorted order.,"function rightInsertion(a, x) {
    let i = bisectRight(a, x);
    return i;  

    function bisectRight(arr, val) {
        let low = 0, high = arr.length;
        while (low < high) {
            const mid = Math.floor((low + high) / 2);
            if (arr[mid] <= val) low = mid + 1;
            else high = mid;
        }
        return low;
    }
}",786,"[console.assert(rightInsertion([1,2,4,5],6) === 4), 
console.assert(rightInsertion([1,2,4,5], 3) === 2), 
console.assert(rightInsertion([1,2,4,5], 7) === 4)]",
786, this function that matches a string that has an a followed by three b.,"function textMatchThree(text) {
    const patterns = /ab{3}/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",787,"
[console.assert(textMatchThree(""ac"") === ""Not matched!""), console.assert(textMatchThree(""dc"") === ""Not matched!""), console.assert(textMatchThree(""abbbba"") === ""Found a match!"")]
",
787, this function to create a new tuple from the given string and list.,"function new_tuple(test_list, test_str) {
    let res = [...test_list, test_str];
    return res;
}",788,"[
  console.assert(JSON.stringify(new_tuple([""WEB"", ""is""], ""best"")) === JSON.stringify([""WEB"", ""is"", ""best""])),
  console.assert(JSON.stringify(new_tuple([""We"", ""are""], ""Developers"")) === JSON.stringify([""We"", ""are"", ""Developers""])),
  console.assert(JSON.stringify(new_tuple([""Part"", ""is""], ""Wrong"")) === JSON.stringify([""Part"", ""is"", ""Wrong""]))
]",
788, this function to calculate the perimeter of a regular polygon.,"
function perimeterPolygon(s, l) {
  var perimeter = s * l;
  return perimeter;
}
",789,"[
    console.assert(perimeterPolygon(4, 20) === 80),
    console.assert(perimeterPolygon(10, 15) === 150),
    console.assert(perimeterPolygon(9, 7) === 63)
]",
789, this   function to check whether every even index contains even numbers of a given list.,"
function evenPosition(nums) {
    return nums.every((num, i) => num % 2 === i % 2);
}
",790,"
[console.assert(evenPosition([3,2,1]) === false), console.assert(evenPosition([1,2,3]) === false), console.assert(evenPosition([2,1,4]) === true)]
",
790, this function to remove the nested record from the given tuple.,"
function removeNested(testTup) {
  let res = [];
  for (let count = 0; count < testTup.length; count++) {
    let ele = testTup[count];
    if (!(ele instanceof Array)) {
      res.push(ele);
    }
  }
  return [res];
}
",791,"
[console.assert(removeNested([1, 5, 7, [4, 6], 10]).toString() === [1, 5, 7, 10].toString()), console.assert(removeNested([2, 6, 8, [5, 7], 11]).toString() === [2, 6, 8, 11].toString()), console.assert(removeNested([3, 7, 9, [6, 8], 12]).toString() === [3, 7, 9, 12].toString())]
",
791, this   function to count the number of lists in a given number of lists.,"
function countList(inputList) {
    return inputList.length;
}
",792,"[
    console.assert(countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 4),
    console.assert(countList([[1,2], [2,3], [4,5]]) === 3),
    console.assert(countList([[1,0], [2,0]]) === 2)
]",
792, this   function to find the last position of an element in a sorted array.,"
function last(arr, x, n) {
    let low = 0;
    let high = n - 1;
    let res = -1;  
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        if (arr[mid] > x) {
            high = mid - 1;
        } else if (arr[mid] < x) {
            low = mid + 1;
        } else {
            res = mid;
            low = mid + 1;
        }
    }
    return res;
}
",793,"
[console.assert(last([1,2,3],1,3) === 0), console.assert(last([1,1,1,2,3,4],1,6) === 2), console.assert(last([2,3,2,3,6,8,9],3,8) === 3)]
",
793," this function that matches a string that has an a followed by anything, ending in b.","function textStartaEndb(text) {
    const patterns = /a.*?b$/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",794,"[
    console.assert(textStartaEndb(""aabbbb"") === ""Found a match!""),
    console.assert(textStartaEndb(""aabAbbbc"") === ""Not matched!""),
    console.assert(textStartaEndb(""accddbbjjj"") === ""Not matched!"")
]",
794, this function to find the n - cheap price items from a given dataset using heap queue algorithm.,"
function cheapItems(items, n) {
  return items
    .sort((a, b) => a.price - b.price)
    .slice(0, n);
}
",795,"[
    console.assert(JSON.stringify(cheapItems([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}], 1)) === JSON.stringify([{name: 'Item-1', price: 101.1}])),
    console.assert(JSON.stringify(cheapItems([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}], 2)) === JSON.stringify([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}])),
    console.assert(JSON.stringify(cheapItems([{name: 'Item-1', price: 101.1}, {name: 'Item-2', price: 555.22}, {name: 'Item-3', price: 45.09}, {name: 'Item-4', price: 22.75}], 1)) === JSON.stringify([{name: 'Item-4', price: 22.75}])),
]",
795,Write function to find the sum of all items in the given dictionary.,"
function returnSum(dict) {
  let sum = 0;
  for (let i of Object.values(dict)) {
    sum += i;
  }
  return sum;
}
",796,"[
    console.assert(returnSum({a: 100, b: 200, c: 300}) === 600),
    console.assert(returnSum({a: 25, b: 18, c: 45}) === 88),
    console.assert(returnSum({a: 36, b: 39, c: 49}) === 124)
]",
796, this   function to find the sum of all odd natural numbers within the range l and r.,"function sum_in_Range(l, r) {
    let sumOdd = (n) => {
        let terms = Math.floor((n + 1) / 2);
        return terms * terms;
    };

    return sumOdd(r) - sumOdd(l - 1);
}",797,"
[console.assert(sum_in_Range(2,5) === 8), console.assert(sum_in_Range(5,7) === 12), console.assert(sum_in_Range(7,13) === 40)]
",
797, this   function to find the sum of an array.,"
function _sum(arr) {
    let sum = 0;
    for (let i of arr) {
        sum += i;
    }
    return sum;
}
",798,"
[console.assert(_sum([1, 2, 3]) === 6), console.assert(_sum([15, 12, 13, 10]) === 50), console.assert(_sum([0, 1, 2]) === 3)]
",
798, this   function to left rotate the bits of a given number.,"
const INT_BITS = 32;
function left_Rotate(n, d) {   
    return (n << d) | (n >> (INT_BITS - d));
}
",799,"
[console.assert(left_Rotate(16, 2) === 64), console.assert(left_Rotate(10, 2) === 40), console.assert(left_Rotate(99, 3) === 792)]
",
799, this function to remove all whitespaces from a string.,"function removeAllSpaces(text) {
    return text.replace(/\s+/g,'' );
}",800,"[
    console.assert(removeAllSpaces('program') === 'program'),
    console.assert(removeAllSpaces('programming language') === 'programminglanguage'),
    console.assert(removeAllSpaces('program') === 'program')
]",
800, this   function to count the number of equal numbers from three given integers.,"
function testThreeEqual(x, y, z) {
  const result = new Set([x, y, z]);
  if (result.size === 3) {
    return 0;
  } else {
    return 4 - result.size;
  }
}
",801,"
[console.assert(testThreeEqual(1, 1, 1) === 3), console.assert(testThreeEqual(-1, -2, -3) === 0), console.assert(testThreeEqual(1, 2, 2) === 2)]
",
801, this   function to count the number of rotations required to generate a sorted array.,"
function count_Rotation(arr, n) {
    for (let i = 1; i < n; i++) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return 0;
}
",802,"
[console.assert(count_Rotation([3,2,1], 3) === 1), console.assert(count_Rotation([4,5,1,2,3], 5) === 2), console.assert(count_Rotation([7,8,9,1,2,3], 6) === 3)]
",
802, this   function to check whether the given number is a perfect square or not.,"
function is_Perfect_Square(n) {
    let i = 1;
    while (i * i <= n) {
        if ((n % i === 0) && (n / i === i)) {
            return true;
        }
        i = i + 1;
    }
    return false;
}
",803,"[
console.assert(is_Perfect_Square(10) === false),
console.assert(is_Perfect_Square(36) === true),
console.assert(is_Perfect_Square(14) === false)]
",
803, this   function to check whether the product of numbers is even or not.,"
function is_Product_Even(arr, n) { 
    for (let i = 0; i < n; i++) { 
        if ((arr[i] & 1) === 0) { 
            return true; 
        } 
    } 
    return false; 
}
",804,"
[console.assert(is_Product_Even([1,2,3],3) === true), console.assert(is_Product_Even([1,2,1,4],4) === true), console.assert(is_Product_Even([1,1],2) === false)]
",
804, this function to find the list in a list of lists whose sum of elements is the highest.,"function maxSumList(lists) {
    return lists.reduce((a, b) => {
        const sumA = a.reduce((acc, val) => acc + val, 0);
        const sumB = b.reduce((acc, val) => acc + val, 0);
        return sumA > sumB ? a : b;
    });
}",805,"
[console.assert(JSON.stringify(maxSumList([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) === JSON.stringify([10, 11, 12])), 
 console.assert(JSON.stringify(maxSumList([[3,2,1], [6,5,4], [12,11,10]])) === JSON.stringify([12,11,10])), 
 console.assert(JSON.stringify(maxSumList([[2,3,1]])) === JSON.stringify([2,3,1]))]
",
806, this   function to find the first odd number in a given list of numbers.,"
function firstOdd(nums) {
  const firstOdd = nums.find(el => el % 2 !== 0) || -1;
  return firstOdd;
}
",807,"
[console.assert(firstOdd([1,3,5]) === 1), console.assert(firstOdd([2,4,1,3]) === 1), console.assert(firstOdd([8,9,1]) === 9)]
",
807, this function to check if the given tuples contain the k or not.,"
function check_K(test_tup, K) {
    let res = false;
    for (let ele of test_tup) {
        if (ele === K) {
            res = true;
            break;
        }
    }
    return res;
}
",808,"[
console.assert(check_K([10, 4, 5, 6, 8], 6) === true),
console.assert(check_K([1, 2, 3, 4, 5, 6], 7) === false),
console.assert(check_K([7, 8, 9, 44, 11, 12], 11) === true)]
",
808, this function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"
function checkSmaller(testTup1, testTup2) {
    const res = testTup1.every((x, i) => x > testTup2[i]);
    return res;
}
",809,"[
console.assert(checkSmaller([1, 2, 3], [2, 3, 4]) === false),
console.assert(checkSmaller([4, 5, 6], [3, 4, 5]) === true),
console.assert(checkSmaller([11, 12, 13], [10, 11, 12]) === true)]
",
809, this function to iterate over elements repeating each as many times as its count.,"function countVariable(a, b, c, d) {
    const counter = {};
    const map = { 0: 'p', 1: 'q', 2: 'r', 3: 's' };

    [a, b, c, d].forEach(item => {
        const key = map[item] || item; 
        counter[key] = (counter[key] || 0) + 1;
    });

    return Object.entries(counter).flatMap(([key, count]) => Array(count).fill(key));
}",810,"[console.assert(countVariable(0, 0, 1, 2).toString() === ['p', 'p', 'q', 'r'].toString(), 'Test 1 failed'),
console.assert(countVariable(1, 1, 2, 3).toString() === ['q', 'q', 'r', 's'].toString(), 'Test 2 failed'),
console.assert(countVariable(3, 3, 3, 3).toString() === ['s', 's', 's', 's'].toString(), 'Test 3 failed'),
console.assert(countVariable(0, 1, 2, 3).toString() === ['p', 'q', 'r', 's'].toString(), 'Test 4 failed')]",
810, this function to check if two lists of tuples are identical or not.,"
function check_identical(test_list1, test_list2) {
    if (test_list1.length !== test_list2.length) {
        return false;
    }

    for (let i = 0; i < test_list1.length; i++) {
        if (Array.isArray(test_list1[i]) && Array.isArray(test_list2[i])) {
            if (!check_identical(test_list1[i], test_list2[i])) {
                return false;
            }
        }
        else if (test_list1[i] !== test_list2[i]) {
            return false;
        }
    }

    return true;
}",811,"[console.assert(check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) === true),
console.assert(check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) === false),
console.assert(check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) === true)]",
811, this function to abbreviate road as rd. in a given string.,"function roadRd(street) {
    return street.replace(/Road$/i, 'Rd.');
}",812,"
[console.assert(roadRd(""ravipadu Road"") === ""ravipadu Rd.""), console.assert(roadRd(""palnadu Road"") === ""palnadu Rd.""), console.assert(roadRd(""eshwar enclave Road"") === ""eshwar enclave Rd."")]
",
814," this function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","
function sort_by_dnf(arr, n) {
  let low = 0;
  let mid = 0;
  let high = n - 1;
  while (mid <= high) {
    if (arr[mid] === 0) {
      [arr[low], arr[mid]] = [arr[mid], arr[low]];
      low += 1;
      mid += 1;
    } else if (arr[mid] === 1) {
      mid += 1;
    } else {
      [arr[mid], arr[high]] = [arr[high], arr[mid]];
      high -= 1;
    }
  }
  return arr;
}
",815,"
[console.assert(JSON.stringify(sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)) === JSON.stringify([0, 0, 1, 1, 1, 1, 1, 2, 2])), console.assert(JSON.stringify(sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)) === JSON.stringify([0, 0, 0, 1, 1, 1, 1, 2, 2, 2])), console.assert(JSON.stringify(sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)) === JSON.stringify([0, 0, 0, 1, 1, 1, 1, 2, 2, 2]))]
",
815, this function to clear the values of the given tuples.,"function clearTuple(testTup) {
    let temp = Array.from(testTup);
    temp.length = 0;
    testTup = temp;
    return testTup;
}",816,"
[console.assert(clearTuple([1, 5, 3, 6, 8]).length === 0), console.assert(clearTuple([2, 1, 4, 5, 6]).length === 0), console.assert(clearTuple([3, 2, 5, 6, 8]).length === 0)]
",
816, this function to find numbers divisible by m or n from a list of numbers using lambda function.,"
function divOfNums(nums, m, n) {
    let result = nums.filter(x => (x % m === 0 || x % n === 0));
    return result;
}
",817,"
[console.assert(divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13).toString() === [19, 65, 57, 39, 152, 190].toString()), console.assert(divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5).toString() === [2, 5, 8, 10].toString()), console.assert(divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5).toString() === [10, 15, 20].toString())]
",
817, this   function to count lower case letters in a given string.,"function lower_ctr(str) {
    let lower_ctr = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= 'a' && str[i] <= 'z') lower_ctr += 1;
    }
    return lower_ctr;
}",818,"[
    console.assert(lower_ctr('abc') === 3),
    console.assert(lower_ctr('string') === 6),
    console.assert(lower_ctr(' ') === 0)
]",
818, this function to count the frequency of consecutive duplicate elements in a given list of numbers.,"
function countDuplic(lists) {
    let element = [];
    let frequency = [];
    if (!lists.length) {
        return element;
    }
    let runningCount = 1;
    for (let i = 0; i < lists.length - 1; i++) {
        if (lists[i] === lists[i + 1]) {
            runningCount++;
        } else {
            frequency.push(runningCount);
            element.push(lists[i]);
            runningCount = 1;
        }
    }
    frequency.push(runningCount);
    element.push(lists[lists.length - 1]);
    return [element, frequency];
}
",819,"
[console.assert(JSON.stringify(countDuplic([1,2,2,2,4,4,4,5,5,5,5])) === JSON.stringify([[1, 2, 4, 5], [1, 3, 3, 4]])), console.assert(JSON.stringify(countDuplic([2,2,3,1,2,6,7,9])) === JSON.stringify([[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]])), console.assert(JSON.stringify(countDuplic([2,1,5,6,8,3,4,9,10,11,8,12])) === JSON.stringify([[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]))]
",
819, this function to check whether the given month number contains 28 days or not.,"
function check_monthnum_number(monthnum1) {
  if (monthnum1 === 2) {
    return true;
  } else {
    return false;
  }
}
",820,"[
console.assert(check_monthnum_number(2) === true),
console.assert(check_monthnum_number(1) === false),
console.assert(check_monthnum_number(3) === false)]
",
821, this function to return true if the password is valid.,"
function pass_validity(p) {
    let x = true;
    while (x) {
        if (p.length < 6 || p.length > 12) {
            break;
        } else if (!/[a-z]/.test(p)) {
            break;
        } else if (!/[0-9]/.test(p)) {
            break;
        } else if (!/[A-Z]/.test(p)) {
            break;
        } else if (!/[$#@]/.test(p)) {
            break;
        } else if (/\s/.test(p)) {
            break;
        } else {
            return true;
            x = false;
            break;
        }
    }

    if (x) {
        return false;
    }
}
",822,"
[console.assert(pass_validity(""password"") === false), console.assert(pass_validity(""Password@10"") === true), console.assert(pass_validity(""password@10"") === false)];
",
822, this function to check if the given string starts with a substring using regex.,"function checkSubstring(string, sample) {
    if (string.includes(sample)) {
        const regex = new RegExp(""^"" + sample);
        if (regex.test(string)) {
            return ""string starts with the given substring"";
        } else {
            return ""string doesn't start with the given substring"";
        }
    } else {
        return ""entered string isn't a substring"";
    }
}",823,"[
    console.assert(checkSubstring(""dreams for dreams makes life fun"", ""makes"") === ""string doesn't start with the given substring""),
    console.assert(checkSubstring(""Hi there how are you Hi alex"", ""Hi"") === ""string starts with the given substring""),
    console.assert(checkSubstring(""Its been a long day"", ""been"") === ""string doesn't start with the given substring"")
]",
823, this   function to remove even numbers from a given list.,"
function removeEven(l) {
    for (let i of l) {
        if (i % 2 === 0) {
            l.splice(l.indexOf(i), 1);
        }
    }
    return l;
}
",824,"[
console.assert(removeEven([1, 3, 5, 2]).toString() === [1, 3, 5].toString()),
console.assert(removeEven([5, 6, 7]).toString() === [5, 7].toString()),
console.assert(removeEven([1, 2, 3, 4]).toString() === [1, 3].toString())]
",
824, this   function to access multiple elements of specified index from a given list.,"
function accessElements(nums, listIndex) {
    const result = listIndex.map(i => nums[i]);
    return result;
}
",825,"
[console.assert(accessElements([2,3,8,4,7,9],[0,3,5]).toString() === [2, 4, 9].toString()), console.assert(accessElements([1, 2, 3, 4, 5],[1,2]).toString() === [2,3].toString()), console.assert(accessElements([1,0,2,3],[0,1]).toString() === [1,0].toString())]
",
825, this   function to find the type of triangle from the given sides.,"
function check_Type_Of_Triangle(a, b, c) {
    const sqa = Math.pow(a, 2);
    const sqb = Math.pow(b, 2);
    const sqc = Math.pow(c, 2);
    
    if (sqa === sqb + sqc || sqb === sqa + sqc || sqc === sqa + sqb) {
        return ""Right-angled Triangle"";
    } else if (sqa > sqb + sqc || sqb > sqa + sqc || sqc > sqa + sqb) {
        return ""Obtuse-angled Triangle"";
    } else {
        return ""Acute-angled Triangle"";
    }
}
",826,"
[console.assert(check_Type_Of_Triangle(1,2,3) === ""Obtuse-angled Triangle""), console.assert(check_Type_Of_Triangle(2,2,2) === ""Acute-angled Triangle""), console.assert(check_Type_Of_Triangle(1,0,1) === ""Right-angled Triangle"")]
",
826, this function to sum a specific column of a list in a given list of lists.,"
function sumColumn(list1, C) {
    let result = list1.reduce((sum, row) => sum + row[C], 0);
    return result;
}
",827,"
[console.assert(sumColumn([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 0) === 12), console.assert(sumColumn([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 1) === 15), console.assert(sumColumn([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 3) === 9)]
",
827," this function to count alphabets,digits and special charactes in a given string.","function countAlphaDigSpl(string) {
    let alphabets = 0, digits = 0, special = 0;
    for (let i = 0; i < string.length; i++) {
        if (/[a-zA-Z]/.test(string[i])) {
            alphabets++;
        } else if (/\d/.test(string[i])) {
            digits++;
        } else {
            special++;
        }
    }
    return [alphabets, digits, special];
}",828,"[
  console.assert(countAlphaDigSpl(""abc!@#123"")[0] === 3 && countAlphaDigSpl(""abc!@#123"")[1] === 3 && countAlphaDigSpl(""abc!@#123"")[2] === 3),
  console.assert(countAlphaDigSpl(""dgsuy@#$%&1255"")[0] === 5 && countAlphaDigSpl(""dgsuy@#$%&1255"")[1] === 4 && countAlphaDigSpl(""dgsuy@#$%&1255"")[2] === 5),
  console.assert(countAlphaDigSpl(""fjdsif627348#%$^&"")[0] === 6 && countAlphaDigSpl(""fjdsif627348#%$^&"")[1] === 6 && countAlphaDigSpl(""fjdsif627348#%$^&"")[2] === 5)
]",
828, this function to find out the second most repeated (or frequent) string in the given sequence.,"
function secondFrequent(input) {
    const dict = {};
    input.forEach(item => {
        dict[item] = (dict[item] || 0) + 1;
    });
    
    const values = Object.values(dict).sort((a, b) => b - a);
    const secondLarge = values[1];
    
    for (const [key, val] of Object.entries(dict)) {
        if (val === secondLarge) {
            return key;
        }
    }
}
",829,"[
  console.assert(secondFrequent([""aaa"", ""bbb"", ""ccc"", ""bbb"", ""aaa"", ""aaa""]) === ""bbb""),
  console.assert(secondFrequent([""abc"", ""bcd"", ""abc"", ""bcd"", ""bcd"", ""bcd""]) === ""abc""),
  console.assert(secondFrequent([""cdma"", ""gsm"", ""hspa"", ""gsm"", ""cdma"", ""cdma""]) === ""gsm"")
]",
829, this function to round up a number to specific digits.,"
function roundUp(a, digits) {
    const n = Math.pow(10, -digits);
    return Math.round(Math.ceil(a / n) * n * Math.pow(10, digits)) / Math.pow(10, digits);
}
",830,"
[console.assert(roundUp(123.01247, 0) === 124), console.assert(roundUp(123.01247, 1) === 123.1), console.assert(roundUp(123.01247, 2) === 123.02)]
",
830, this   function to count equal element pairs from the given array.,"
function count_Pairs(arr, n) { 
    let cnt = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] === arr[j]) { 
                cnt += 1; 
            } 
        } 
    } 
    return cnt; 
}
",831,"
[console.assert(count_Pairs([1,1,1,1],4) === 6), console.assert(count_Pairs([1,5,1],3) === 1), console.assert(count_Pairs([3,2,1,7,8,9],6) === 0)]
",
831, this function to extract the maximum numeric value from a string by using regex.,"
function extractMax(input) {
    const numbers = input.match(/\d+/g).map(Number);
    return Math.max(...numbers);
}
",832,"[
  console.assert(extractMax(""100klh564abc365bg"") === 564),
  console.assert(extractMax(""hello300how546mer231"") === 546),
  console.assert(extractMax(""its233beenalong343journey234"") === 343)
]",
832, this function to get dictionary keys as a list.,"function getKey(dict) {
    let list = [];
    for (let key in dict) {
        list.push(Number(key)); 
    }
    return list;
}",833,"[console.assert(
    JSON.stringify(getKey({1: ""java"", 2: ""java""})) === JSON.stringify([1, 2]),
    'Test 1 failed'
),
console.assert(
    JSON.stringify(getKey({10: ""red"", 20: ""blue"", 30: ""black""})) === JSON.stringify([10, 20, 30]),
    'Test 2 failed'
),
console.assert(
    JSON.stringify(getKey({27: ""language"", 39: ""java"", 44: ""little""})) === JSON.stringify([27, 39, 44]),
    'Test 3 failed'
)]",
833, this function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"
function generateMatrix(n) {
    if (n <= 0) {
        return [];
    }
    let matrix = Array.from({ length: n }, () => Array(n).fill(0));
    let row_st = 0;
    let row_ed = n - 1;
    let col_st = 0;
    let col_ed = n - 1;
    let current = 1;
    
    while (true) {
        if (current > n * n) {
            break;
        }
        for (let c = col_st; c <= col_ed; c++) {
            matrix[row_st][c] = current;
            current++;
        }
        row_st++;
        for (let r = row_st; r <= row_ed; r++) {
            matrix[r][col_ed] = current;
            current++;
        }
        col_ed--;
        for (let c = col_ed; c >= col_st; c--) {
            matrix[row_ed][c] = current;
            current++;
        }
        row_ed--;
        for (let r = row_ed; r >= row_st; r--) {
            matrix[r][col_st] = current;
            current++;
        }
        col_st++;
    }
    return matrix;
}
",834,"[
  console.assert(generateMatrix(3).toString() === [[1, 2, 3], [8, 9, 4], [7, 6, 5]].toString()),
  console.assert(generateMatrix(2).toString() === [[1, 2], [4, 3]].toString()),
  console.assert(generateMatrix(7).toString() === [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]].toString())
]",
834, this   function to find the slope of a line.,"
function slope(x1, y1, x2, y2) {
    return (y2 - y1) / (x2 - x1);
}
",835,"
[console.assert(slope(4,2,2,5) === -1.5), console.assert(slope(2,4,4,6) === 1), console.assert(slope(1,2,4,2) === 0)]
",
835, this function to find length of the subarray having maximum sum.,"
function maxSubArraySum(a, size) {
    let maxSoFar = -Infinity;
    let maxEndingHere = 0;
    let start = 0;
    let end = 0;
    let s = 0;

    for (let i = 0; i < size; i++) {
        maxEndingHere += a[i];

        if (maxSoFar < maxEndingHere) {
            maxSoFar = maxEndingHere;
            start = s;
            end = i;
        }

        if (maxEndingHere < 0) {
            maxEndingHere = 0;
            s = i + 1;
        }
    }

    return (end - start + 1);
}
",836,"[
  console.assert(maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8) === 5),
  console.assert(maxSubArraySum([1, -2, 1, 1, -2, 1], 6) === 2),
  console.assert(maxSubArraySum([-1, -2, 3, 4, 5], 5) === 3)
]",
836, this   function to find the cube sum of first n odd natural numbers.,"
function cubeSum(n) {
    let sum = 0;
    for (let i = 0; i < n; i++) {
        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1);
    }
    return sum;
}
",837,"
[console.assert(cubeSum(2) === 28), console.assert(cubeSum(3) === 153), console.assert(cubeSum(4) === 496)]
",
837, this   function to find minimum number swaps required to make two binary strings equal.,"function min_Swaps(s1, s2) {
    if (s1.length !== s2.length) {
        return -1;
    }

    let c0 = 0; 
    let c1 = 0; 

    for (let i = 0; i < s1.length; i++) {
        if (s1[i] === '0' && s2[i] === '1') {
            c0++;
        } else if (s1[i] === '1' && s2[i] === '0') {
            c1++;
        }
    }

   if ((c0 + c1) % 2 !== 0) {
        return -1;
    }

    return Math.floor(c0 / 2) + Math.floor(c1 / 2) + (c0 % 2) * 2;
}",838,"[console.assert(min_Swaps(""0011"", ""1100"") === 2, 'Test 1 failed'),
console.assert(min_Swaps(""00011"", ""11000"") === 2, 'Test 2 failed'),
console.assert(min_Swaps(""111"", ""111"") === 0, 'Test 3 failed')]",
838, this function to sort the tuples alphabetically by the first item of each tuple.,"function sortTuple(tup) {
    const n = tup.length;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n - i - 1; j++) {
            
            if (typeof tup[j][0] === ""number"" && typeof tup[j + 1][0] === ""number"") {
                if (tup[j][0] > tup[j + 1][0]) {
                    [tup[j], tup[j + 1]] = [tup[j + 1], tup[j]];
                }
            } else if (typeof tup[j][0] === ""string"" && typeof tup[j + 1][0] === ""string"") {
                if (tup[j][0] > tup[j + 1][0]) {
                    [tup[j], tup[j + 1]] = [tup[j + 1], tup[j]];
                }
            }
        }
    }
    return tup;
}",839,"[console.assert(sortTuple([[""Amana"", 28], [""Zenat"", 30], [""Abhishek"", 29], [""Nikhil"", 21], [""B"", ""C""]]).toString() === [[""Abhishek"", 29], [""Amana"", 28], [""B"", ""C""], [""Nikhil"", 21], [""Zenat"", 30]].toString(), ""Test case 1 failed""),
console.assert(sortTuple([[""aaaa"", 28], [""aa"", 30], [""bab"", 29], [""bb"", 21], [""csa"", ""C""]]).toString() === [[""aa"", 30], [""aaaa"", 28], [""bab"", 29], [""bb"", 21], [""csa"", ""C""]].toString(), ""Test case 2 failed""),
console.assert(sortTuple([[""Sarala"", 28], [""Ayesha"", 30], [""Suman"", 29], [""Sai"", 21], [""G"", ""H""]]).toString() === [[""Ayesha"", 30], [""G"", ""H""], [""Sai"", 21], [""Sarala"", 28], [""Suman"", 29]].toString(), ""Test case 3 failed"")]",
839, this   function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"
function Check_Solution(a, b, c) {  
    if (b == 0) {  
        return ""Yes"";  
    } else { 
        return ""No"";  
    }  
}
",840,"
[console.assert(Check_Solution(2,0,-1) === ""Yes""), console.assert(Check_Solution(1,-5,6) === ""No""), console.assert(Check_Solution(2,0,2) === ""Yes"")]
",
840, this function to count the number of inversions in the given array.,"
function getInvCount(arr, n) { 
    let invCount = 0; 
    for (let i = 0; i < n; i++) { 
        for (let j = i + 1; j < n; j++) { 
            if (arr[i] > arr[j]) { 
                invCount++; 
            } 
        } 
    } 
    return invCount; 
}
",841,"
[console.assert(getInvCount([1, 20, 6, 4, 5], 5) === 5), console.assert(getInvCount([8, 4, 2, 1], 4) === 6), console.assert(getInvCount([3, 1, 2], 3) === 2)]
",
841, this function to find the number which occurs for odd number of times in the given array.,"
function get_odd_occurence(arr, arrSize) {
  for (let i = 0; i < arrSize; i++) {
    let count = 0;
    for (let j = 0; j < arrSize; j++) {
      if (arr[i] === arr[j]) {
        count++;
      }
    }
    if (count % 2 !== 0) {
      return arr[i];
    }
  }
  return -1;
}
",842,"
[console.assert(get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) === 5), 
 console.assert(get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) === 3), 
 console.assert(get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) === 5)]
",
842, this function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"
function nthSuperUglyNumber(n, primes) {
    const uglies = [1];
    function* gen(prime) {
        for (const ugly of uglies) {
            yield ugly * prime;
        }
    }
    
    const merged = [];
    for (const prime of primes) {
        merged.push(gen(prime));
    }
    
    function* mergeIterators(iterators) {
        const heap = [];
        for (const iter of iterators) {
            const first = iter.next();
            if (!first.done) {
                heap.push({ value: first.value, iterator: iter });
            }
        }
        
        while (heap.length) {
            heap.sort((a, b) => a.value - b.value);
            const { value, iterator } = heap.shift();
            yield value;
            const next = iterator.next();
            if (!next.done) {
                heap.push({ value: next.value, iterator });
            }
        }
    }
    
    const mergedIterator = mergeIterators(merged);
    
    while (uglies.length < n) {
        const ugly = mergedIterator.next().value;
        if (ugly !== uglies[uglies.length - 1]) {
            uglies.push(ugly);
        }
    }
    
    return uglies[uglies.length - 1];
}
",843,"[
console.assert(nthSuperUglyNumber(12, [2, 7, 13, 19]) === 32),
console.assert(nthSuperUglyNumber(10, [2, 7, 13, 19]) === 26),
console.assert(nthSuperUglyNumber(100, [2, 7, 13, 19]) === 5408)]
",
843, this   function to find the kth element in an array containing odd elements first and then even elements.,"
function get_Number(n, k) {
    const arr = new Array(n).fill(0);
    let i = 0;
    let odd = 1;
    while (odd <= n) {
        arr[i] = odd;
        i += 1;
        odd += 2;
    }
    let even = 2;
    while (even <= n) {
        arr[i] = even;
        i += 1;
        even += 2;
    }
    return arr[k - 1];
}
",844,"
[console.assert(get_Number(8,5) === 2), console.assert(get_Number(7,2) === 3), console.assert(get_Number(5,2) === 3)]
",
844, this   function to count the number of digits in factorial of a given number.,"
function findDigits(n) {
    if (n < 0) {
        return 0;
    }
    if (n <= 1) {
        return 1;
    }
    const x = (n * Math.log10(n / Math.E) + Math.log10(2 * Math.PI * n) / 2.0);
    return Math.floor(x) + 1;
}
",845,"
[console.assert(findDigits(7) === 4), console.assert(findDigits(5) === 3), console.assert(findDigits(4) === 2)];
",
845, this function to find the minimum number of platforms required for a railway/bus station.,"
function findPlatform(arr, dep, n) { 
    arr.sort((a, b) => a - b); 
    dep.sort((a, b) => a - b); 
    let platNeeded = 1; 
    let result = 1; 
    let i = 1; 
    let j = 0; 
    while (i < n && j < n) { 
        if (arr[i] <= dep[j]) {           
            platNeeded += 1; 
            i += 1; 
        } else if (arr[i] > dep[j]) {           
            platNeeded -= 1; 
            j += 1; 
        } 
        if (platNeeded > result) {  
            result = platNeeded;           
        } 
    } 
    return result; 
}
",846,"
[console.assert(findPlatform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6) === 3), console.assert(findPlatform([100,200,300,400],[700,800,900,1000],4) === 4), console.assert(findPlatform([5,6,7,8],[4,3,2,1],4) === 1)];
",
846, this   function to copy a list from a singleton tuple.,"
function lcopy(xs) {
    return xs.slice();
}
",847,"[console.assert(JSON.stringify(lcopy([1, 2, 3]))) === JSON.stringify([1, 2, 3]), console.assert(JSON.stringify(lcopy([4, 8, 2, 10, 15, 18]))) === JSON.stringify([4, 8, 2, 10, 15, 18]), console.assert(JSON.stringify(lcopy([4, 5, 6])) === JSON.stringify([4, 5, 6]))]",
847, this function to find the area of a trapezium.,"
function areaTrapezium(base1, base2, height) {
    const area = 0.5 * (base1 + base2) * height;
    return area;
}
",848,"
[console.assert(areaTrapezium(6,9,4) === 30), console.assert(areaTrapezium(10,20,30) === 450), console.assert(areaTrapezium(15,25,35) === 700)]
",
848, this   function to find sum of all prime divisors of a given number.,"
function Sum(N) { 
    let SumOfPrimeDivisors = new Array(N + 1).fill(0);   
    for (let i = 2; i <= N; i++) { 
        if (SumOfPrimeDivisors[i] === 0) { 
            for (let j = i; j <= N; j += i) { 
                SumOfPrimeDivisors[j] += i;           
            }
        }
    }
    return SumOfPrimeDivisors[N];
}
",849,"
[console.assert(Sum(60) === 10), console.assert(Sum(39) === 16), console.assert(Sum(40) === 7)]
",
849, this function to check if a triangle of positive area is possible with the given angles.,"
function is_triangleexists(a, b, c) { 
    if (a !== 0 && b !== 0 && c !== 0 && (a + b + c) === 180) { 
        if ((a + b) >= c || (b + c) >= a || (a + c) >= b) { 
            return true; 
        } else { 
            return false; 
        } 
    } else { 
        return false; 
    } 
}
",850,"
[console.assert(is_triangleexists(50, 60, 70) === true), console.assert(is_triangleexists(90, 45, 45) === true), console.assert(is_triangleexists(150, 30, 70) === false)]
",
850, this   function to find sum of inverse of divisors.,"
function Sum_of_Inverse_Divisors(N, Sum) {
    let ans = parseFloat(Sum) / parseFloat(N);
    return Math.round(ans * 100) / 100;
}
",851,"
[console.assert(Sum_of_Inverse_Divisors(6,12) === 2), console.assert(Sum_of_Inverse_Divisors(9,13) === 1.44), console.assert(Sum_of_Inverse_Divisors(1,4) === 4)]
",
851, this   function to remove negative numbers from a list.,"
function remove_negs(numList) {
  for (let item of numList) {
    if (item < 0) {
      numList.splice(numList.indexOf(item), 1);
    }
  }
  return numList;
}
",852,"[console.assert(JSON.stringify(remove_negs([1,-2,3,-4]))) === JSON.stringify([1,3]), console.assert(JSON.stringify(remove_negs([1,2,3,-4]))) === JSON.stringify([1,2,3]), console.assert(JSON.stringify(remove_negs([4,5,-6,7,-8])) === JSON.stringify([4,5,7]))]",
852, this   function to find sum of odd factors of a number.,"
function sumOfOddFactors(n) {
    let res = 1;
    while (n % 2 === 0) {
        n = Math.floor(n / 2);
    }
    for (let i = 3; i <= Math.sqrt(n); i++) {
        let count = 0;
        let currSum = 1;
        let currTerm = 1;
        while (n % i === 0) {
            count++;
            n = Math.floor(n / i);
            currTerm *= i;
            currSum += currTerm;
        }
        res *= currSum;
    }
    if (n >= 2) {
        res *= (1 + n);
    }
    return res;
}
",853,"
[console.assert(sumOfOddFactors(30) === 24), console.assert(sumOfOddFactors(18) === 13), console.assert(sumOfOddFactors(2) === 1)]
",
853, this function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"
function rawHeap(rawHeap) {
  const heapify = (arr) => {
    for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {
      heapifyDown(arr, i, arr.length);
    }
  };

  const heapifyDown = (arr, i, length) => {
    const left = 2 * i + 1;
    const right = 2 * i + 2;
    let largest = i;

    if (left < length && arr[left] < arr[largest]) {
      largest = left;
    }
    if (right < length && arr[right] < arr[largest]) {
      largest = right;
    }
    if (largest !== i) {
      [arr[i], arr[largest]] = [arr[largest], arr[i]];
      heapifyDown(arr, largest, length);
    }
  };

  heapify(rawHeap);
  return [rawHeap];
}
",854,"
[console.assert(JSON.stringify(rawHeap([25, 44, 68, 21, 39, 23, 89])) === JSON.stringify([21, 25, 23, 44, 39, 68, 89])), console.assert(JSON.stringify(rawHeap([25, 35, 22, 85, 14, 65, 75, 25, 58])) === JSON.stringify([14, 25, 22, 25, 35, 65, 75, 85, 58])), console.assert(JSON.stringify(rawHeap([4, 5, 6, 2])) === JSON.stringify([2, 4, 6, 5]))]
",
854, this   function to check for even parity of a given number.,"
function checkEvenParity(x) { 
    let parity = 0; 
    while (x !== 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    return parity % 2 === 0; 
}
",855,"[
console.assert(checkEvenParity(10) === true),
console.assert(checkEvenParity(11) === false),
console.assert(checkEvenParity(18) === true)]
",
855, this   function to find minimum adjacent swaps required to sort binary array.,"
function find_Min_Swaps(arr, n) {
    let noOfZeroes = new Array(n).fill(0);
    let count = 0;
    noOfZeroes[n - 1] = 1 - arr[n - 1];
    for (let i = n - 2; i >= 0; i--) {
        noOfZeroes[i] = noOfZeroes[i + 1];
        if (arr[i] === 0) {
            noOfZeroes[i] += 1;
        }
    }
    for (let i = 0; i < n; i++) {
        if (arr[i] === 1) {
            count += noOfZeroes[i];
        }
    }
    return count;
}",856,"
[console.assert(find_Min_Swaps([1,0,1,0], 4) === 3), console.assert(find_Min_Swaps([0,1,0], 3) === 1), console.assert(find_Min_Swaps([0,0,1,1,0], 5) === 2)]
",
857, this function to count number of lists in a given list of lists and square the count.,"
function countList(inputList) { 
    return Math.pow(inputList.length, 2);
}
",858,"
[console.assert(countList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 25), console.assert(countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) === 16), console.assert(countList([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]]) === 9)]
",
858, this function to generate all sublists of a given list.,"function subLists(myList) {
    const subs = [];
    const combinations = (arr, n) => {
        const result = [];
        const f = (start, curr) => {
            if (curr.length === n) {
                result.push(curr);
                return;
            }
            for (let i = start; i < arr.length; i++) {
                f(i + 1, curr.concat(arr[i]));
            }
        };
        f(0, []);
        return result;
    };

    for (let i = 1; i <= myList.length; i++) {
        subs.push(...combinations(myList, i));
    }
    
    return subs;
}",859,"[console.assert(
    subLists([10, 20, 30, 40]).toString() === 
    [[10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]].toString()
),
console.assert(
    subLists([""X"", ""Y"", ""Z""]).toString() === 
    [[""X""], [""Y""], [""Z""], [""X"", ""Y""], [""X"", ""Z""], [""Y"", ""Z""], [""X"", ""Y"", ""Z""]].toString()
),
console.assert(
    subLists([1, 2, 3]).toString() === 
    [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].toString()
)]",
859, this function to check whether the given string is ending with only alphanumeric characters or not using regex.,"
const regex = /[a-zA-Z0-9]$/;

function checkAlphanumeric(string) {
    if (regex.test(string)) {
        return ""Accept"";
    } else {
        return ""Discard"";
    }
}",860,"[
  console.assert(checkAlphanumeric(""dawood@"") === ""Discard""),
  console.assert(checkAlphanumeric(""skdmsam326"") === ""Accept""),
  console.assert(checkAlphanumeric(""cooltricks@"") === ""Discard"")
]",
860, this function to find all anagrams of a string in a given list of strings using lambda function.,"function anagramLambda(texts, str) {
    const counter = (s) => {
      return s.trim().split('').reduce((acc, char) => {
        acc[char] = (acc[char] || 0) + 1;
        return acc;
      }, {});
    };
  
    const strCounter = counter(str);
  
    return texts.filter(x => {
      const xCounter = counter(x.trim()); 
      return Object.keys(strCounter).length === Object.keys(xCounter).length &&
             Object.keys(strCounter).every(key => strCounter[key] === xCounter[key]);
    });
  }",861,"  [console.assert(
    JSON.stringify(anagramLambda([""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb""], ""abcd"")) === JSON.stringify([""bcda"", ""cbda"", ""adcb""])
  ),
  console.assert(
    JSON.stringify(anagramLambda([""recitals"", ""  ""], ""articles"")) === JSON.stringify([""recitals""])
  ),
  console.assert(
    JSON.stringify(anagramLambda(["" keep"", "" abcdef"", "" xyz""], "" peek"")) === JSON.stringify(["" keep""])
  )]",
861, this function to find the occurrences of n most common words in a given text.,"function nCommonWords(text, n) {
    const words = text.trim().match(/\w+/g) || []; 
    const wordCount = {};

    for (const word of words) {
        wordCount[word] = (wordCount[word] || 0) + 1;
    }

    const sortedWords = Object.entries(wordCount).sort((a, b) => b[1] - a[1]);
    return sortedWords.slice(0, n);
}",862,"[console.assert(
    JSON.stringify(nCommonWords(""  is a programming language"", 1)) === JSON.stringify([[""is"", 1]]), 
    'Test Case 1 Failed'
),
console.assert(
    JSON.stringify(nCommonWords(""  is a programming language"", 5)) === JSON.stringify([[""is"", 1], [""a"", 1], [""programming"", 1], [""language"", 1]]), 
    'Test Case 2 Failed'
),
console.assert(
    JSON.stringify(nCommonWords(""hello hello world"", 2)) === JSON.stringify([[""hello"", 2], [""world"", 1]]), 
    'Test Case 3 Failed')]",
862, this function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"
function findLongestConseqSubseq(arr, n) {
    let ans = 0;
    let count = 0;
    arr.sort((a, b) => a - b);
    let v = [];
    v.push(arr[0]);
    for (let i = 1; i < n; i++) {
        if (arr[i] !== arr[i - 1]) {
            v.push(arr[i]);
        }
    }
    for (let i = 0; i < v.length; i++) {
        if (i > 0 && v[i] === v[i - 1] + 1) {
            count += 1;
        } else {
            count = 1;
        }
        ans = Math.max(ans, count);
    }
    return ans;
}
",863,"[
console.assert(findLongestConseqSubseq([1, 2, 2, 3], 4) === 3),
console.assert(findLongestConseqSubseq([1, 9, 3, 10, 4, 20, 2], 7) === 4),
console.assert(findLongestConseqSubseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) === 5)]
",
863, this function to find palindromes in a given list of strings using lambda function.,"function palindromeLambda(texts) {
    const result = texts.filter(x => x.trim() && x.trim() === x.trim().split('').reverse().join(''));
    return result;
}",864,"[console.assert(
    JSON.stringify(palindromeLambda([""php"", ""res"", "" "", ""abcd"", ""Java"", ""aaa""])) === JSON.stringify([""php"", ""aaa""]),
    'Test Case 1 Failed'
),
console.assert(
    JSON.stringify(palindromeLambda([""abcd"", "" "", ""abba"", ""aba""])) === JSON.stringify([""abba"", ""aba""]),
    'Test Case 2 Failed'
),
console.assert(
    JSON.stringify(palindromeLambda([""abcd"", ""abbccbba"", ""abba"", ""aba""])) === JSON.stringify([""abbccbba"", ""abba"", ""aba""]),
    'Test Case 3 Failed'
)]",
864, this function to print n-times a list using map function.,"
function ntimes_list(nums, n) {
    const result = nums.map(x => n * x);
    return result;
}
",865,"
[console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 3).toString() === [3, 6, 9, 12, 15, 18, 21].toString()), console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 4).toString() === [4, 8, 12, 16, 20, 24, 28].toString()), console.assert(ntimes_list([1, 2, 3, 4, 5, 6, 7], 10).toString() === [10, 20, 30, 40, 50, 60, 70].toString())]
",
865, this function to check whether the given month name contains 31 days or not.,"
function checkMonthNumb(monthName2) {
  if (monthName2 === ""January"" || monthName2 === ""March"" || monthName2 === ""May"" || monthName2 === ""July"" || monthName2 === ""August"" || monthName2 === ""October"" || monthName2 === ""December"") {
    return true;
  } else {
    return false;
  }
}
",866,"
[console.assert(checkMonthNumb(""February"") === false), console.assert(checkMonthNumb(""January"") === true), console.assert(checkMonthNumb(""March"") === true)]
",
866, this   function to add a minimum number such that the sum of array becomes even.,"function min_NumToMakeEven(arr) {
    const sum = arr.reduce((acc, num) => acc + num, 0); 

    if (sum % 2 === 0) {
        return 0;
    }

    return 1;
}",867,"[console.assert(min_NumToMakeEven([1, 2, 3, 4, 5, 6, 7, 8, 9]) === 1, 'Test Case 1 Failed'),
console.assert(min_NumToMakeEven([1, 2, 3, 4, 5, 6, 7, 8]) === 0, 'Test Case 2 Failed'),
console.assert(min_NumToMakeEven([2, 4, 6, 8]) === 0, 'Test Case 4 Failed')]",
867, this   function to find the length of the last word in a given string.,"
function length_Of_Last_Word(a) { 
    let l = 0; 
    const x = a.trim(); 
    for (let i = 0; i < x.length; i++) { 
        if (x[i] === "" "") { 
            l = 0; 
        } else { 
            l++; 
        } 
    } 
    return l; 
}
",868,"
[console.assert(length_Of_Last_Word(""  language"") === 8), console.assert(length_Of_Last_Word(""PHP"") === 3), console.assert(length_Of_Last_Word("""") === 0)]
",
868," this function to remove sublists from a given list of lists, which are outside a given range.","
function removeListRange(list1, leftrange, rigthrange) {
    const result = list1.filter(i => Math.min(...i) >= leftrange && Math.max(...i) <= rigthrange);
    return result;
}
",869,"[console.assert(removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17).toString() === [[13, 14, 15, 17]].toString()), console.assert(removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3).toString() === [[2], [1, 2, 3]].toString()), console.assert(removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7).toString() === [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]].toString())]",
869, this function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"
function sum_positivenum(nums) {
    const sum_positivenum = nums.filter(num => num > 0);
    return sum_positivenum.reduce((acc, curr) => acc + curr, 0);
}
",870,"[
console.assert(sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 48),
console.assert(sum_positivenum([10, 15, -14, 13, -18, 12, -20]) === 50),
console.assert(sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) === 522)]
",
870, this   function to check whether the given strings are rotations of each other or not.,"function are_Rotations(string1, string2) {
    let size1 = string1.length;
    let size2 = string2.length;
    
    if (size1 !== size2) {
        return false; 
    }

    let temp = string1 + string1; 

    if (temp.includes(string2)) {
        return true; 
    } else {
        return false;
    }
}",871,"[console.assert(are_Rotations(""abc"", ""cba"") === false, 'Test Case 1 Failed'),
console.assert(are_Rotations(""abcd"", ""cdba"") === false, 'Test Case 2 Failed'),
console.assert(are_Rotations(""abacd"", ""cdaba"") === true, 'Test Case 3 Failed')]",
871, this function to check if a nested list is a subset of another nested list.,"function checkSubset(list1, list2) {
    return list2.every(item2 => list1.some(item1 => JSON.stringify(item1) === JSON.stringify(item2)));
}",872,"[console.assert(checkSubset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]]) === true, 'Test Case 1 Failed'),
console.assert(checkSubset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]]) === true, 'Test Case 2 Failed'),
console.assert(checkSubset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]]) === false, 'Test Case 3 Failed')]",
872, this function to solve the fibonacci sequence using recursion.,"
function fibonacci(n) {
  if (n === 1 || n === 2) {
    return 1;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}
",873,"
[console.assert(fibonacci(7) === 13), console.assert(fibonacci(8) === 21), console.assert(fibonacci(9) === 34)]
",
873, this   function to check if the string is a concatenation of another string.,"
function check_Concat(str1, str2) {
    let N = str1.length;
    let M = str2.length;
    if (N % M !== 0) {
        return false;
    }
    for (let i = 0; i < N; i++) {
        if (str1[i] !== str2[i % M]) {
            return false;
        }
    }
    return true;
}
",874,"
[console.assert(check_Concat(""abcabcabc"", ""abc"") === true), console.assert(check_Concat(""abcab"", ""abc"") === false), console.assert(check_Concat(""aba"", ""ab"") === false)]
",
874, this function to find the minimum difference in the tuple pairs of given tuples.,"function minDifference(testList) {
    let temp = testList.map(([a, b]) => Math.abs(b - a));
    let res = Math.min(...temp);
    return res;
}",875,"[console.assert(minDifference([[3, 5], [1, 7], [10, 3], [1, 2]]) === 1),
console.assert(minDifference([[4, 6], [12, 8], [11, 4], [2, 13]]) === 2),
console.assert(minDifference([[5, 17], [3, 9], [12, 5], [3, 24]]) === 6)]",
875, this   function to find lcm of two positive integers.,"
function lcm(x, y) {
    let z;
    if (x > y) {
        z = x;
    } else {
        z = y;
    }
    while (true) {
        if ((z % x === 0) && (z % y === 0)) {
            return z;
        }
        z += 1;
    }
}
",876,"
[console.assert(lcm(4, 6) === 12), console.assert(lcm(15, 17) === 255), console.assert(lcm(2, 6) === 6)]
",
876, this   function to sort the given string.,"function sort_String(str) {
    str = str.split("""").sort().join("""");
    return str;
}",877,"
[console.assert(sort_String(""cba"") === ""abc""), console.assert(sort_String(""data"") === ""aadt""), console.assert(sort_String(""zxy"") === ""xyz"")]
",
877, this function to check if the given tuple contains only k elements.,"
function checkTuples(testTuple, K) {
    const res = testTuple.every(ele => K.includes(ele));
    return res;
}
",878,"[
console.assert(checkTuples([3, 5, 6, 5, 3, 6], [3, 6, 5]) === true),
console.assert(checkTuples([4, 5, 6, 4, 6, 5], [4, 5, 6]) === true),
console.assert(checkTuples([9, 8, 7, 6, 8, 9], [9, 8, 1]) === false)]
",
878," this function that matches a string that has an a followed by anything, ending in b by using regex.","function textMatch(text) {
    const patterns = /a.*?b$/;
    if (patterns.test(text)) {
      return ""Found a match!"";
    } else {
      return ""Not matched!"";
    }
  }",879,"
[console.assert(textMatch(""aabbbbd"") === ""Not matched!""), console.assert(textMatch(""aabAbbbc"") === ""Not matched!""), console.assert(textMatch(""accddbbjjjb"") === ""Found a match!"")]
",
879, this   function to find number of solutions in quadratic equation.,"
function Check_Solution(a, b, c) {
    if ((b * b) - (4 * a * c) > 0) {
        return (""2 solutions"");
    } else if ((b * b) - (4 * a * c) === 0) {
        return (""1 solution"");
    } else {
        return (""No solutions"");
    }
}
",880,"
[console.assert(Check_Solution(2,5,2) === ""2 solutions""), console.assert(Check_Solution(1,1,1) === ""No solutions""), console.assert(Check_Solution(1,2,1) === ""1 solution"")]
",
880, this function to find the sum of first even and odd number of a given list.,"
function sumEvenOdd(list1) {
    const firstEven = list1.find(el => el % 2 === 0) !== undefined ? list1.find(el => el % 2 === 0) : -1;
    const firstOdd = list1.find(el => el % 2 !== 0) !== undefined ? list1.find(el => el % 2 !== 0) : -1;
    return firstEven + firstOdd;
}
",881,"
[console.assert(sumEvenOdd([1,3,5,7,4,1,6,8])===5), console.assert(sumEvenOdd([1,2,3,4,5,6,7,8,9,10])===3), console.assert(sumEvenOdd([1,5,7,9,10])===11)]
",
881, this function to caluclate perimeter of a parallelogram.,"function parallelogram_perimeter(b, s) {
    return 2 * (b + s);
}",882,"[console.assert(parallelogram_perimeter(10, 20) === 60, ""Test Case 1 Failed""),
console.assert(parallelogram_perimeter(15, 20) === 70, ""Test Case 2 Failed""),
console.assert(parallelogram_perimeter(8, 9) === 34, ""Test Case 3 Failed"")]",
882, this function to find numbers divisible by m and n from a list of numbers using lambda function.,"
function divOfNums(nums, m, n) {
    const result = nums.filter(x => (x % m === 0 && x % n === 0));
    return result;
}
",883,"[console.assert(JSON.stringify(divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4))) === JSON.stringify([152, 44]), 
console.assert(JSON.stringify(divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5))) === JSON.stringify([10]), 
console.assert(JSON.stringify(divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5))) === JSON.stringify([10, 20])]",
883, this   function to check whether all the bits are within a given range or not.,"
function all_Bits_Set_In_The_Given_Range(n, l, r) {
    let num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);
    let newNum = n & num;
    if (num === newNum) {
        return true;
    }
    return false;
}
",884,"
[console.assert(all_Bits_Set_In_The_Given_Range(10,2,1) === true), console.assert(all_Bits_Set_In_The_Given_Range(5,2,4) === false), console.assert(all_Bits_Set_In_The_Given_Range(22,2,3) === true)]
",
884, this   function to check whether the two given strings are isomorphic to each other or not.,"
function isIsomorphic(str1, str2) {          
    let dictStr1 = {};
    let dictStr2 = {};
    for (let i = 0; i < str1.length; i++) {
        let value = str1[i];
        dictStr1[value] = (dictStr1[value] || []).concat(i);        
    }
    for (let j = 0; j < str2.length; j++) {
        let value = str2[j];
        dictStr2[value] = (dictStr2[value] || []).concat(j);
    }
    return JSON.stringify(Object.values(dictStr1).sort()) === JSON.stringify(Object.values(dictStr2).sort());
}
",885,"[
console.assert(isIsomorphic(""paper"", ""title"") === true),
console.assert(isIsomorphic(""ab"", ""ba"") === true),
console.assert(isIsomorphic(""ab"", ""aa"") === false)]
",
885, this function to add all the numbers in a list and divide it with the length of the list.,"function sumNum(numbers) {
    if (numbers.length === 0) return 0;  
    let total = 0;
    for (let x of numbers) {
        total += x;
    }
    return total / numbers.length;
}",886,"[console.assert(sumNum([8, 2, 3, 0, 7]) === 4.0, ""Test Case 1 Failed""),
console.assert(sumNum([-10, -20, -30]) === -20.0, ""Test Case 2 Failed""),
console.assert(sumNum([19, 15, 18]) === 17.333333333333332, ""Test Case 3 Failed"")]",
886, this   function to check whether the given number is odd or not using bitwise operator.,"
function isOdd(n) {
    if ((n ^ 1) === (n - 1)) {
        return true;
    } else {
        return false;
    }
}
",887,"
[console.assert(isOdd(5) === true), console.assert(isOdd(6) === false), console.assert(isOdd(7) === true)]
",
887, this function to substract the elements of the given nested tuples.,"function subtract_elements(testTup1, testTup2) {
    return testTup1.map((tup1, index) =>
        tup1.map((a, j) => a - testTup2[index][j])
    );
}",888,"[console.assert(
    JSON.stringify(subtract_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]))
    === JSON.stringify([[-5, -4], [1, -4], [1, 8], [-6, 7]]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(subtract_elements([[13, 4], [14, 6], [13, 10], [12, 11]], [[19, 8], [14, 10], [12, 2], [18, 4]]))
    === JSON.stringify([[-6, -4], [0, -4], [1, 8], [-6, 7]]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(subtract_elements([[19, 5], [18, 7], [19, 11], [17, 12]], [[12, 9], [17, 11], [13, 3], [19, 5]]))
    === JSON.stringify([[7, -4], [1, -4], [6, 8], [-2, 7]]),
    ""Test Case 3 Failed""
)]",
889, this   function to find the index of an extra element present in one sorted array.,"
function find_Extra(arr1, arr2, n) {
    for (let i = 0; i < n; i++) {
        if (arr1[i] !== arr2[i]) {
            return i;
        }
    }
    return n;
}
",890,"
[console.assert(find_Extra([1,2,3,4],[1,2,3],3) === 3), console.assert(find_Extra([2,4,6,8,10],[2,4,6,8],4) === 4), console.assert(find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) === 5)]
",
890, this   function to check whether the given two numbers have same number of digits or not.,"
function same_Length(A, B) {
    while (A > 0 && B > 0) {
        A = A / 10;
        B = B / 10;
    }
    if (A === 0 && B === 0) {
        return true;
    }
    return false;
}
",891,"
[console.assert(same_Length(12, 1) === false), console.assert(same_Length(2, 2) === true), console.assert(same_Length(10, 20) === true)]
",
891, this function to remove multiple spaces in a string.,"function removeSpaces(text) {
    return text.replace(/ +/g, '' );
}",892,"[
    console.assert(removeSpaces(""   program"") === ""program""),
    console.assert(removeSpaces(""    programming    language"") === ""programminglanguage""),
    console.assert(removeSpaces(""                      program"") === ""program"")
  ]",
893, this function to convert the given string of float type into tuple.,"function floatToTuple(testStr) {
    const res = testStr.split("", "").map(parseFloat);
    return res;
}",894,"
[console.assert(floatToTuple(""1.2, 1.3, 2.3, 2.4, 6.5"").toString() === (1.2, 1.3, 2.3, 2.4, 6.5).toString()), console.assert(floatToTuple(""2.3, 2.4, 5.6, 5.4, 8.9"").toString() === (2.3, 2.4, 5.6, 5.4, 8.9).toString()), console.assert(floatToTuple(""0.3, 0.5, 7.8, 9.4"").toString() === (0.3, 0.5, 7.8, 9.4).toString())]
",
894, this function to find the maximum sum of subsequences of given array with no adjacent elements.,"
function max_sum_subseq(A) {
    let n = A.length;
    if (n === 1) {
        return A[0];
    }
    let look_up = new Array(n);
    look_up[0] = A[0];
    look_up[1] = Math.max(A[0], A[1]);
    for (let i = 2; i < n; i++) {
        look_up[i] = Math.max(look_up[i - 1], look_up[i - 2] + A[i]);
        look_up[i] = Math.max(look_up[i], A[i]);
    }
    return look_up[n - 1];
}
",895,"
[console.assert(max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) === 26), console.assert(max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) === 28), console.assert(max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) === 44)]
",
895, this function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"function sortListLast(tuples) {
    return tuples.sort((a, b) => a[a.length - 1] - b[b.length - 1]);
}",896,"[console.assert(
    JSON.stringify(sortListLast([[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]])) === JSON.stringify([[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]),
    ""Test Case 1 Failed""
),
console.assert(
    JSON.stringify(sortListLast([[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]])) === JSON.stringify([[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]]),
    ""Test Case 2 Failed""
),
console.assert(
    JSON.stringify(sortListLast([[20, 50], [10, 20], [40, 40]])) === JSON.stringify([[10, 20], [40, 40], [20, 50]]),
    ""Test Case 3 Failed""
)]",
896, this   function to check whether the word is present in a given sentence or not.,"
function isWordPresent(sentence, word) {
    let s = sentence.split("" "");
    for (let i of s) {
        if (i === word) {
            return true;
        }
    }
    return false;
}
",897,"
[console.assert(isWordPresent(""machine learning"", ""machine"") === true), console.assert(isWordPresent(""easy"", ""fun"") === false), console.assert(isWordPresent(""  language"", ""code"") === false)]
",
897," this function to extract specified number of elements from a given list, which follow each other continuously.","
function extractElements(numbers, n) {
    const grouped = {};
    for (const num of numbers) {
        if (!grouped[num]) {
            grouped[num] = 0;
        }
        grouped[num]++;
    }
    const result = Object.keys(grouped).filter(key => grouped[key] === n);
    return result;
}
",898,"
[console.assert(extractElements([1, 1, 3, 4, 4, 5, 6, 7], 2).toString() === [1, 4].toString()), console.assert(extractElements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4).toString() === [4].toString()), console.assert(extractElements([0, 0, 0, 0, 0], 5).toString() === [0].toString())]
",
898, this   function to check whether an array can be sorted or not by picking only the corner elements.,"
function check(arr, n) { 
    let g = 0; 
    for (let i = 1; i < n; i++) { 
        if (arr[i] - arr[i - 1] > 0 && g === 1) { 
            return false; 
        } 
        if (arr[i] - arr[i] < 0) { 
            g = 1; 
        } 
    } 
    return true; 
}
",899,"
[console.assert(check([3,2,1,2,3,4],6) === true), console.assert(check([2,1,4,5,1],5) === true), console.assert(check([1,2,2,1,2,3],6) === true)]
",
899, this function where a string will start with a specific number.,"
function match_num(string) {
    const text = /^5/;
    if (text.test(string)) {
        return true;
    } else {
        return false;
    }
}
",900,"[
  console.assert(match_num(""5-2345861"") === true),
  console.assert(match_num(""6-2345861"") === false),
  console.assert(match_num(""78910"") === false)
]",
901, this function to combine two dictionaries by adding values for common keys.,"function addDict(d1, d2) {
    const addDict = { ...d1 };

    for (const key in d2) {
        if (addDict.hasOwnProperty(key)) {
            addDict[key] += d2[key];
        } else {
            addDict[key] = d2[key];
        }
    }
    
    return addDict;
}",902,"[
    console.assert(JSON.stringify(addDict({a: 100, b: 200, c:300},{a: 300, b: 200, d:400})) === JSON.stringify({a: 400, b: 400, c: 300, d: 400}), ""Test 1 failed""),
    console.assert(JSON.stringify(addDict({a: 500, b: 700, c:900},{a: 500, b: 600, d:900})) === JSON.stringify({a: 1000, b: 1300, c: 900, d: 900}), ""Test 2 failed""),
    console.assert(JSON.stringify(addDict({a:900,b:900,d:900},{a:900,b:900,d:900})) === JSON.stringify({a: 1800, b: 1800, d: 1800}), ""Test 3 failed"")
]",
903, this function to return true if the given number is even else return false.,"
function evenNum(x) {
  if (x % 2 === 0) {
    return true;
  } else {
    return false;
  }
}
",904,"
[console.assert(evenNum(13.5) === false), console.assert(evenNum(0) === true), console.assert(evenNum(-9) === false)]
",
904, this   function to find the sum of squares of binomial co-efficients.,"function sumOfSquare(n) { 
    let num = 1, den = 1;
    
    for (let i = n + 1; i <= 2 * n; i++) {
        num *= i;
    }
    
    for (let i = 1; i <= n; i++) {
        den *= i; 
    }
    
    return Math.floor(num / den);
}",905,"
[console.assert(sumOfSquare(4) === 70), console.assert(sumOfSquare(5) === 252), console.assert(sumOfSquare(2) === 6)]
",
905," this function to extract year, month and date from a url by using regex.","function extractDate(url) {
    const match = url.match(/\/(\d{4})\/(\d{1,2})\/(\d{1,2})\//);
    if (match) {
        return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];
    }
    return null;
}",906,"[
    console.assert(JSON.stringify(extractDate(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"")) === JSON.stringify([2016, 9, 2])),
    console.assert(JSON.stringify(extractDate(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"")) === JSON.stringify([2020, 11, 3])),
    console.assert(JSON.stringify(extractDate(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"")) === JSON.stringify([2020, 12, 29]))
]",
906, this function to print the first n lucky numbers.,"function luckyNum(n) {
    let List = Array.from({ length: n * n }, (_, i) => i * 2 + 1); 
    let i = 1;

    while (i < List.length && List[i] <= List.length) {
        List = List.filter((_, index) => (index + 1) % List[i] !== 0);
        i++;
    }

    return List.slice(0, n); 
}",907,"
[console.assert(luckyNum(10).toString() === [1, 3, 7, 9, 13, 15, 21, 25, 31, 33].toString()), console.assert(luckyNum(5).toString() === [1, 3, 7, 9, 13].toString()), console.assert(luckyNum(8).toString() === [1, 3, 7, 9, 13, 15, 21, 25].toString())]
",
907, this function to find the fixed point in the given array.,"
function findFixedPoint(arr, n) {
    for (let i = 0; i < n; i++) {
        if (arr[i] === i) {
            return i;
        }
    }
    return -1;
}
",908,"[
console.assert(findFixedPoint([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9) === 3),
console.assert(findFixedPoint([1, 2, 3, 4, 5, 6, 7, 8], 8) === -1),
console.assert(findFixedPoint([0, 2, 5, 8, 17], 5) === 0)]
",
908, this function to find the previous palindrome of a specified number.,"function previousPalindrome(num) {
    for (let x = num - 1; x > 0; x--) {
        if (String(x) === String(x).split('').reverse().join('')) {
            return x;
        }
    }
}",909,"
[console.assert(previousPalindrome(99) === 88), console.assert(previousPalindrome(1221) === 1111), console.assert(previousPalindrome(120) === 111)]
",
909, this function to validate a gregorian date.,"function checkDate(m, d, y) {
    m = parseInt(m);
    d = parseInt(d);
    y = parseInt(y);

    const date = new Date(y, m - 1, d);
    return date.getDate() === d && date.getMonth() === m - 1 && date.getFullYear() === y;
}",910,"[console.assert(checkDate(11, 11, 2002) === true, ""Test Case 1 Failed""),
console.assert(checkDate(14, 11, 2002) === false, ""Test Case 2 Failed""),
console.assert(checkDate(10, 50, 2010) === false, ""Test Case 3 Failed"")]",
910, this function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"
function maximumProduct(nums) {
    const a = nums.slice().sort((x, y) => y - x).slice(0, 3);
    const b = nums.slice().sort((x, y) => x - y).slice(0, 2);
    return Math.max(a[0] * a[1] * a[2], a[0] * b[0] * b[1]);
}
",911,"
[console.assert(maximumProduct([12, 74, 9, 50, 61, 41]) === 225700), console.assert(maximumProduct([25, 35, 22, 85, 14, 65, 75, 25, 58]) === 414375), console.assert(maximumProduct([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) === 2520)]
",
911," this function to find ln, m lobb number.","function lobbNum(n, m) {
    let C = Array.from({ length: 2 * n + 1 }, () => Array(m + n + 1).fill(0));
    
    for (let i = 0; i <= 2 * n; i++) {
        for (let j = 0; j <= Math.min(i, m + n); j++) {
            if (j === 0 || j === i) {
                C[i][j] = 1;
            } else {
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
            }
        }
    }
    
    return ((2 * m + 1) * C[2 * n][m + n]) / (m + n + 1);
}",912,"[console.assert((lobbNum(5, 3)) === 35), console.assert((lobbNum(3, 2)) === 5), console.assert((lobbNum(4, 2)) === 20)]",
912, this function to check for a number at the end of a string.,"
function endNum(string) {
    var text = /.*[0-9]$/;
    if (text.test(string)) {
        return true;
    } else {
        return false;
    }
}
",913,"[
  console.assert(endNum(""abcdef"") === false),
  console.assert(endNum(""abcdef7"") === true),
  console.assert(endNum(""abc"") === false)
]",
913, this   function to check whether the given string is made up of two alternating characters or not.,"
function is_Two_Alter(s) {  
    for (let i = 0; i < s.length - 2; i++) { 
        if (s[i] !== s[i + 2]) { 
            return false;
        }
    }
    if (s[0] === s[1]) { 
        return false;
    }
    return true;
}
",914,"
[console.assert(is_Two_Alter(""abab"") === true), console.assert(is_Two_Alter(""aaaa"") === false), console.assert(is_Two_Alter(""xyz"") === false)]
",
915, this function to find if there is a triplet in the array whose sum is equal to a given value.,"function findTripletArray(A, arrSize, sum) {
    for (let i = 0; i < arrSize - 2; i++) {
        for (let j = i + 1; j < arrSize - 1; j++) {
            for (let k = j + 1; k < arrSize; k++) {
                if (A[i] + A[j] + A[k] === sum) {
                    return [A[i], A[j], A[k]];  
                }
            }
        }
    }
    return false;
}",916,"[console.assert(JSON.stringify(findTripletArray([1, 4, 45, 6, 10, 8], 6, 22)) === JSON.stringify([4, 10, 8])),
console.assert(JSON.stringify(findTripletArray([12, 3, 5, 2, 6, 9], 6, 24)) === JSON.stringify([12, 3, 9])),
console.assert(JSON.stringify(findTripletArray([1, 2, 3, 4, 5], 5, 9)) === JSON.stringify([1, 3, 5]))]",
916, this function to find the sequences of one upper case letter followed by lower case letters.,"function textUppercaseLowercase(text) {
    const patterns = /[A-Z]+[a-z]+$/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",917,"
[console.assert(textUppercaseLowercase(""AaBbGg"") === ""Found a match!""), console.assert(textUppercaseLowercase(""aA"") === ""Not matched!""), console.assert(textUppercaseLowercase("" "") === ""Not matched!"")]
",
918, this   function to multiply all items in the list.,"
function multiplyList(items) {
    let tot = 1;
    for (let x of items) {
        tot *= x;
    }
    return tot;
}
",919,"
[console.assert(multiplyList([1, -2, 3]) === -6), console.assert(multiplyList([1, 2, 3, 4]) === 24), console.assert(multiplyList([3, 1, 2, 3]) === 18)]
",
919, this function to remove all tuples with all none values in the given tuple list.,"function removeTuple(testList) {
    const res = testList.filter(sub => !sub.every(ele => ele === null));
    return res;  
}",920,"[console.assert(JSON.stringify(removeTuple([[null, 2], [null, null], [3, 4], [12, 3], [null]])) === JSON.stringify([[null, 2], [3, 4], [12, 3]])),
console.assert(JSON.stringify(removeTuple([[null, null], [null, null], [3, 6], [17, 3], [null, 1]])) === JSON.stringify([[3, 6], [17, 3], [null, 1]])),
console.assert(JSON.stringify(removeTuple([[1, 2], [2, null], [3, null], [24, 3], [null, null]])) === JSON.stringify([[1, 2], [2, null], [3, null], [24, 3]]))]",
920, this function to perform chunking of tuples each of size n.,"
function chunkTuples(testTup, N) {
  let res = [];
  for (let i = 0; i < testTup.length; i += N) {
    res.push(testTup.slice(i, i + N));
  }
  return res;
}
",921,"
[console.assert(JSON.stringify(chunkTuples([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)) === JSON.stringify([[10, 4, 5], [6, 7, 6], [8, 3, 4]])), 
 console.assert(JSON.stringify(chunkTuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)) === JSON.stringify([[1, 2], [3, 4], [5, 6], [7, 8], [9]])), 
 console.assert(JSON.stringify(chunkTuples([11, 14, 16, 17, 19, 21, 22, 25], 4)) === JSON.stringify([[11, 14, 16, 17], [19, 21, 22, 25]]))]
",
921, this function to find a pair with the highest product from a given array of integers.,"
function maxProduct(arr) { 
    var arrLen = arr.length; 
    if (arrLen < 2) { 
        return null;     
    }     
    var x = arr[0]; 
    var y = arr[1];    
    for (var i = 0; i < arrLen; i++) { 
        for (var j = i + 1; j < arrLen; j++) { 
            if (arr[i] * arr[j] > x * y) { 
                x = arr[i]; 
                y = arr[j]; 
            } 
        } 
    } 
    return x, y; 
}",922,"
[console.assert(maxProduct([1, 2, 3, 4, 7, 0, 8, 4]) === (7, 8)), console.assert(maxProduct([0, -1, -2, -4, 5, 0, -6]) === (-4, -6)), console.assert(maxProduct([1, 3, 5, 6, 8, 9]) === (8, 9))]
",
922, this function to find the length of the shortest string that has both str1 and str2 as subsequences.,"
function super_seq(X, Y, m, n) {
    if (m === 0) {
        return n;
    }
    if (n === 0) {
        return m;
    }
    if (X[m - 1] === Y[n - 1]) {
        return 1 + super_seq(X, Y, m - 1, n - 1);
    }
    return 1 + Math.min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1));
}
",923,"
[console.assert(super_seq(""AGGTAB"", ""GXTXAYB"", 6, 7) === 9), console.assert(super_seq(""feek"", ""eke"", 4, 3) === 5), console.assert(super_seq(""PARRT"", ""RTA"", 5, 3) === 6)]
",
923, this function to find maximum of two numbers.,"
function maxOfTwo(x, y) {
    if (x > y) {
        return x;
    }
    return y;
}
",924,"
[console.assert(maxOfTwo(10,20)===20), console.assert(maxOfTwo(19,15)===19), console.assert(maxOfTwo(-10,-20)===-10)]
",
924, this   function to calculate the product of all the numbers of a given tuple.,"function multipleTuple(nums) {
    let temp = Array.from(nums);
    let product = 1;
    for (let x of temp) {
        product *= x;
    }
    return product;
}",925,"
[console.assert(multipleTuple([4, 3, 2, 2, -1, 18]) === -864), console.assert(multipleTuple([1, 2, 3]) === 6), console.assert(multipleTuple([-2, -4, -6]) === -48)]
",
925, this function to find n-th rencontres number.,"
function binomial_coeffi(n, k) { 
    if (k === 0 || k === n) { 
        return 1; 
    } 
    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k); 
}

function rencontres_number(n, m) { 
    if (n === 0 && m === 0) { 
        return 1; 
    }
    if (n === 1 && m === 0) { 
        return 0; 
    } 
    if (m === 0) { 
        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0)); 
    } 
    return binomial_coeffi(n, m) * rencontres_number(n - m, 0); 
}
",926,"
[console.assert(rencontres_number(7, 2) === 924), console.assert(rencontres_number(3, 0) === 2), console.assert(rencontres_number(3, 1) === 3)]
",
926, this function to calculate the height of the given binary tree.,"class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function maxHeight(node) {
    if (node === null) {
        return 0;
    }
    const leftHeight = maxHeight(node.left);
    const rightHeight = maxHeight(node.right);
    return Math.max(leftHeight, rightHeight) + 1;
}",927,"let root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);

let root1 = new Node(10);
root1.left = new Node(20);
root1.right = new Node(30);
root1.left.left = new Node(40);
root1.left.right = new Node(50);
root1.left.left.left = new Node(60);

let root2 = new Node(100);
root2.left = new Node(200);
root2.right = new Node(300);
root2.left.left = new Node(400);
root2.right.left = new Node(500);

[console.assert(maxHeight(root) === 3, `Test failed for root`),
console.assert(maxHeight(root1) === 4, `Test failed for root1`),
console.assert(maxHeight(root2) === 3, `Test failed for root2`)]",
928, this function to count repeated items of a tuple.,"
function countTuplex(tuplex, value) {
    const count = tuplex.filter(item => item === value).length;
    return count;
}",929,"
[console.assert(countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 4) === 3), console.assert(countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 2) === 2), console.assert(countTuplex([2, 4, 7, 7, 7, 3, 4, 4, 7], 7) === 4)]
",
929, this function that matches a string that has an a followed by zero or more bs by using regex.,"function textMatch(text) {
    const patterns = /ab*?/;
    if (patterns.test(text)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}",930,"
[console.assert(textMatch(""msb"") === ""Not matched!""), console.assert(textMatch(""a0c"") === ""Found a match!""), console.assert(textMatch(""abbc"") === ""Found a match!"")]
",
930, this function to calculates the square of the sum of the first n integers,"
function sumSeries(number) {
    let total = 0;
    total = Math.pow((number * (number + 1)) / 2, 2);
    return total;
}
",931,"
[console.assert(sumSeries(7) === 784), console.assert(sumSeries(5) === 225), console.assert(sumSeries(15) === 14400)]
",
931, this function to remove duplicate words from a given list of strings.,"function removeDuplicList(l) {
    let temp = [];
    for (let x of l) {
        if (!temp.includes(x)) {
            temp.push(x);
        }
    }
    return temp;
}",932,"[console.assert(JSON.stringify(removeDuplicList(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises""])) === JSON.stringify(["" "", ""Exercises"", ""Practice"", ""Solution""])),
console.assert(JSON.stringify(removeDuplicList(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"", ""Java""])) === JSON.stringify(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Java""])),
console.assert(JSON.stringify(removeDuplicList(["" "", ""Exercises"", ""Practice"", ""Solution"", ""Exercises"", ""C++"", ""C"", ""C++""])) === JSON.stringify(["" "", ""Exercises"", ""Practice"", ""Solution"", ""C++"", ""C""]))]",
932, this function to convert camel case string to snake case string by using regex.,"function camelToSnake(text) {
    return text
      .replace(/([a-z])([A-Z])/g, function (match, p1, p2) {
        return p1 + ""_"" + p2;
      })
      .toLowerCase();
  }",933,"  [
    console.assert(
      camelToSnake(""GoogleAssistant"") === ""google_assistant"",
      ""Test case 1 failed""
    ),
    console.assert(
      camelToSnake(""ChromeCast"") === ""chrome_cast"",
      ""Test case 2 failed""
    ),
    console.assert(camelToSnake(""QuadCore"") === ""quad_core"", ""Test case 3 failed""),
  ]",
933, this function to find the nth delannoy number.,"
function dealnnoy_num(n, m) {
    if (m === 0 || n === 0) {
        return 1;
    }
    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1);
}
",934,"
[console.assert(dealnnoy_num(3, 4) === 129), console.assert(dealnnoy_num(3, 3) === 63), console.assert(dealnnoy_num(4, 5) === 681)]
",
934, this function to calculates the sum of the squares of the first n integers,"
function seriesSum(number) {
    let total = 0;
    total = (number * (number + 1) * (2 * number + 1)) / 6;
    return total;
}
",935,"
[console.assert(seriesSum(6) === 91), console.assert(seriesSum(7) === 140), console.assert(seriesSum(12) === 650)]
",
935, this function to re-arrange the given tuples based on the given ordered list.,"
function re_arrange_tuples(test_list, ord_list) {
    let temp = Object.fromEntries(test_list);
    let res = ord_list.map(key => [key, temp[key]]);
    return res;
}
",936,"[
  console.assert(JSON.stringify(re_arrange_tuples([[4, 3], [1, 9], [2, 10], [3, 2]], [1, 4, 2, 3])) === JSON.stringify([[1, 9], [4, 3], [2, 10], [3, 2]])),
  console.assert(JSON.stringify(re_arrange_tuples([[5, 4], [2, 10], [3, 11], [4, 3]], [3, 4, 2, 3])) === JSON.stringify([[3, 11], [4, 3], [2, 10], [3, 11]])),
  console.assert(JSON.stringify(re_arrange_tuples([[6, 3], [3, 8], [5, 7], [2, 4]], [2, 5, 3, 6])) === JSON.stringify([[2, 4], [5, 7], [3, 8], [6, 3]]))
]",
936, this function to count the most common character in a given string.,"
function maxChar(str1) {
    const temp = {};
    for (let char of str1) {
        temp[char] = (temp[char] || 0) + 1;
    }
    return Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);
}
",937,"[console.assert(maxChar(""hello world"") === (""l"")),
     console.assert(maxChar(""hello "") === (""l"")),
      console.assert(maxChar(""  pppr"") === (""p""))]",
937, this function to find three closest elements from three sorted arrays.,"function find_closet(A, B, C, p, q, r) {
    let diff = Number.MAX_SAFE_INTEGER;
    let res_i = 0, res_j = 0, res_k = 0;
    let i = 0, j = 0, k = 0;

    while (i < p && j < q && k < r) {
        let minimum = Math.min(A[i], Math.min(B[j], C[k]));
        let maximum = Math.max(A[i], Math.max(B[j], C[k]));
        
        if (maximum - minimum < diff) {
            res_i = i;
            res_j = j;
            res_k = k;
            diff = maximum - minimum;
        }
        
        if (diff === 0) {
            break;
        }
        
        if (A[i] === minimum) {
            i++;
        } else if (B[j] === minimum) {
            j++;
        } else {
            k++;
        }
    }

    return [A[res_i], B[res_j], C[res_k]];
}",938,"[console.assert(JSON.stringify(find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)) === JSON.stringify([10, 15, 10])),
console.assert(JSON.stringify(find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)) === JSON.stringify([24, 22, 23])),
console.assert(JSON.stringify(find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)) === JSON.stringify([11, 16, 11]))]",
938, this function to sort a list of dictionaries using lambda function.,"function sortedModels(models) {
    const sortedModels = models.sort((a, b) => a.color.localeCompare(b.color));
    return sortedModels;
}",939,"[
  console.assert(JSON.stringify(sortedModels([{make: ""Nokia"", model: 216, color: ""Black""}, {make: ""Mi Max"", model: 2, color: ""Gold""}, {make: ""Samsung"", model: 7, color: ""Blue""}])) === JSON.stringify([{make: ""Nokia"", model: 216, color: ""Black""}, {make: ""Samsung"", model: 7, color: ""Blue""}, {make: ""Mi Max"", model: 2, color: ""Gold""}])),

  console.assert(JSON.stringify(sortedModels([{make: ""Vivo"", model: 20, color: ""Blue""}, {make: ""oppo"", model: 17, color: ""Gold""}, {make: ""Apple"", model: 11, color: ""red""}])) === JSON.stringify([{make: ""Vivo"", model: 20, color: ""Blue""}, {make: ""oppo"", model: 17, color: ""Gold""}, {make: ""Apple"", model: 11, color: ""red""}])),

  console.assert(JSON.stringify(sortedModels([{make: ""micromax"", model: 40, color: ""grey""}, {make: ""poco"", model: 60, color: ""blue""}])) === JSON.stringify([{make: ""poco"", model: 60, color: ""blue""}, {make: ""micromax"", model: 40, color: ""grey""}]))
]",
939, this function to sort the given array by using heap sort.,"
function heapSort(arr) {
    heapify(arr);
    let end = arr.length - 1;
    while (end > 0) {
        [arr[end], arr[0]] = [arr[0], arr[end]];
        shiftDown(arr, 0, end - 1);
        end--;
    }
    return arr;
}

function heapify(arr) {
    let start = Math.floor(arr.length / 2);
    while (start >= 0) {
        shiftDown(arr, start, arr.length - 1);
        start--;
    }
}

function shiftDown(arr, start, end) {
    let root = start;
    while (root * 2 + 1 <= end) {
        let child = root * 2 + 1;
        if (child + 1 <= end && arr[child] < arr[child + 1]) {
            child++;
        }
        if (child <= end && arr[root] < arr[child]) {
            [arr[root], arr[child]] = [arr[child], arr[root]];
            root = child;
        } else {
            return;
        }
    }
}
",940,"[console.assert(JSON.stringify(heapSort([12, 2, 4, 5, 2, 3]))) === JSON.stringify([2, 2, 3, 4, 5, 12]), console.assert(JSON.stringify(heapSort([32, 14, 5, 6, 7, 19]))) === JSON.stringify([5, 6, 7, 14, 19, 32]), console.assert(JSON.stringify(heapSort([21, 15, 29, 78, 65]))) === JSON.stringify([15, 21, 29, 65, 78])]",
941, this function to check if any list element is present in the given list.,"
function checkElement(testTup, checkList) {
  let res = false;
  for (let ele of checkList) {
    if (testTup.includes(ele)) {
      res = true;
      break;
    }
  }
  return res;
}
",942,"[
console.assert(checkElement([4, 5, 7, 9, 3], [6, 7, 10, 11]) === true),
console.assert(checkElement([1, 2, 3, 4], [4, 6, 7, 8, 9]) === true),
console.assert(checkElement([3, 2, 1, 4, 5], [9, 8, 7, 6]) === false)]
",
942, this function to combine two given sorted lists using heapq module.,"function combineLists(num1, num2) {
    return Array.from(new Set([...num1, ...num2])).sort((a, b) => a - b);
}",943,"[console.assert(combineLists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10]).toString() === [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].toString()),
console.assert(combineLists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11]).toString() === [1, 2, 3, 5, 6, 7, 8, 9, 11].toString()),
console.assert(combineLists([1, 3, 7], [2, 4, 6]).toString() === [1, 2, 3, 4, 6, 7].toString())]",
943, this function to separate and print the numbers and their position of a given string.,"
function numPosition(text) {
    const regex = /\d+/g;
    const match = regex.exec(text);
    if (match) {
        return match.index;
    }
}
",944,"
[console.assert(numPosition(""there are 70 flats in this apartment"") === 10), console.assert(numPosition(""every adult have 32 teeth"") === 17), console.assert(numPosition(""isha has 79 chocolates in her bag"") === 9)]
",
944, this function to convert the given tuples into set.,"
function tupleToSet(t) {
  const s = new Set(t);
  return s;
}
",945,"[
  console.assert(tupleToSet([""x"", ""y"", ""z""]).has(""y"") && tupleToSet([""x"", ""y"", ""z""]).has(""x"") && tupleToSet([""x"", ""y"", ""z""]).has(""z"")),
  
  console.assert(tupleToSet([""a"", ""b"", ""c""]).has(""c"") && tupleToSet([""a"", ""b"", ""c""]).has(""a"") && tupleToSet([""a"", ""b"", ""c""]).has(""b"")),
  
  console.assert(tupleToSet([""z"", ""d"", ""e""]).has(""d"") && tupleToSet([""z"", ""d"", ""e""]).has(""e"") && tupleToSet([""z"", ""d"", ""e""]).has(""z""))
]",
945, this function to find the most common elements and their counts of a specified text.,"function mostCommonElem(s, a) {
    const count = {};
    s.split('').forEach(elem => { 
      count[elem] = (count[elem] || 0) + 1;
    });
    
    const sorted = Object.entries(count).sort((a, b) => b[1] - a[1]);
    return sorted.slice(0, a);
}",946,"
[console.assert(JSON.stringify(mostCommonElem('lkseropewdssafsdfafkpwe', 3)) === JSON.stringify([['s', 4], ['e', 3], ['f', 3]])),
console.assert(JSON.stringify(mostCommonElem('lkseropewdssafsdfafkpwe', 2)) === JSON.stringify([['s', 4], ['e', 3]])),
console.assert(JSON.stringify(mostCommonElem('lkseropewdssafsdfafkpwe', 7)) === JSON.stringify([['s', 4], ['e', 3], ['f', 3], ['k', 2], ['p', 2], ['w', 2], ['d', 2]]))]",
946, this   function to find the length of the shortest word.,"
function len_log(list1) {
    let min = list1[0].length;
    for (let i of list1) {
        if (i.length < min) {
            min = i.length;
        }
    }
    return min;
}
",947,"
[console.assert(len_log([""win"",""lose"",""great""]) === 3), console.assert(len_log([""a"",""ab"",""abc""]) === 1), console.assert(len_log([""12"",""12"",""1234""]) === 2)]
",
947, this function to get an item of a tuple.,"function getItem(tup1, index) {
    if (index < 0) {
        index = tup1.length + index; 
    }
    return tup1[index];
}",948,"[console.assert(getItem([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], 3) === ""e""),
console.assert(getItem([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], -4) === ""u""), 
console.assert(getItem([""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""], -3) === ""r"")]",
948, this function to sort the given tuple list basis the total digits in tuple.,"function sortList(testList) {
    testList.sort((a, b) => {
        return a.toString().length - b.toString().length;
    });
    return testList;
}",949,"  [ 
console.assert(JSON.stringify(sortList([[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]])) === JSON.stringify([[1, 2], [12345], [3, 4, 6, 723], [134, 234, 34]])),
console.assert(JSON.stringify(sortList([[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]])) === JSON.stringify([[1, 2], [3, 4, 8], [1234335], [1345, 234, 334]])),
console.assert(JSON.stringify(sortList([[34, 4, 61, 723], [1, 2], [145], [134, 23]])) === JSON.stringify([[1, 2], [145], [134, 23], [34, 4, 61, 723]]))
  ]",
949, this function to display sign of the chinese zodiac for given year.,"function chineseZodiac(year) {
    let sign;
    if ((year - 2000) % 12 === 0) {
        sign = ""Dragon"";
    } else if ((year - 2000) % 12 === 1) {
        sign = ""Snake"";
    } else if ((year - 2000) % 12 === 2) {
        sign = ""Horse"";
    } else if ((year - 2000) % 12 === 3) {
        sign = ""Goat"";
    } else if ((year - 2000) % 12 === 4) {
        sign = ""Monkey"";
    } else if ((year - 2000) % 12 === 5) {
        sign = ""Rooster"";
    } else if ((year - 2000) % 12 === 6) {
        sign = ""Dog"";
    } else if ((year - 2000) % 12 === 7) {
        sign = ""Pig"";
    } else if ((year - 2000) % 12 === 8) {
        sign = ""Rat"";
    } else if ((year - 2000) % 12 === 9) {
        sign = ""Ox"";
    } else if ((year - 2000) % 12 === 10) {
        sign = ""Tiger"";
    } else {
        sign = ""Rabbit""; 
    }
    return sign;
}",950,"[
    console.assert(chineseZodiac(2009) === ""Ox""),
    console.assert(chineseZodiac(1688) === ""Dragon""),
    console.assert(chineseZodiac(2004) === ""Monkey"")
]",
950, this function to find the maximum of similar indices in two lists of tuples.,"function max_similar_indices(test_list1, test_list2) {
    const res = test_list1.map((x, index) => {
        const y = test_list2[index];
        return [Math.max(x[0], y[0]), Math.max(x[1], y[1])];
    });
    return res;
}",951,"[console.assert(JSON.stringify(max_similar_indices([[2, 4], [6, 7], [5, 1]], [[5, 4], [8, 10], [8, 14]])) === JSON.stringify([[5, 4], [8, 10], [8, 14]])),
console.assert(JSON.stringify(max_similar_indices([[3, 5], [7, 8], [6, 2]], [[6, 5], [9, 11], [9, 15]])) === JSON.stringify([[6, 5], [9, 11], [9, 15]])),
console.assert(JSON.stringify(max_similar_indices([[4, 6], [8, 9], [7, 3]], [[7, 6], [10, 12], [10, 16]])) === JSON.stringify([[7, 6], [10, 12], [10, 16]]))]",
951, this function to compute the value of ncr mod p.,"
function nCr_mod_p(n, r, p) {
    if (r > n - r) {
        r = n - r;
    }
    let C = new Array(r + 1).fill(0);
    C[0] = 1;
    for (let i = 1; i <= n; i++) {
        for (let j = Math.min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}
",952,"
[console.assert(nCr_mod_p(10, 2, 13) === 6), console.assert(nCr_mod_p(11, 3, 14) === 11), console.assert(nCr_mod_p(18, 14, 19) === 1)]
",
952, this   function to find the minimun number of subsets with distinct elements.,"
function subset(ar, n) {
    let res = 0;
    ar.sort((a, b) => a - b);
    for (let i = 0; i < n; i++) {
        let count = 1;
        for (let j = i + 1; j < n; j++) {
            if (ar[i] === ar[j]) {
                count++;
            } else {
                break;
            }
        }
        res = Math.max(res, count);
    }
    return res;
}
",953,"
[console.assert(subset([1, 2, 3, 4], 4) === 1), console.assert(subset([5, 6, 9, 3, 4, 3, 4], 7) === 2), console.assert(subset([1, 2, 3], 3) === 1)]
",
953, this function that gives profit amount if the given amount has profit else return none.,"
function profitAmount(actualCost, saleAmount) {
    if (actualCost > saleAmount) {
        let amount = actualCost - saleAmount;
        return amount;
    } else {
        return null;
    }
}
",954,"
[console.assert(profitAmount(1500,1200) === 300), console.assert(profitAmount(100,200) === null), console.assert(profitAmount(2000,5000) === null)]
",
954," this function to find out, if the given number is abundant.","
function isAbundant(n) {
    let fctrsum = 0;
    for (let fctr = 1; fctr < n; fctr++) {
        if (n % fctr === 0) {
            fctrsum += fctr;
        }
    }
    return fctrsum > n;
}
",955,"[
console.assert(isAbundant(12) === true),
console.assert(isAbundant(13) === false),
console.assert(isAbundant(9) === false)]
",
955, this function to split the given string at uppercase letters by using regex.,"
function splitList(text) {
  return text.match(/[A-Z][^A-Z]*/g);
}
",956,"[
    console.assert(splitList(""LearnToBuildAnythingWithGoogle"").toString() === [""Learn"", ""To"", ""Build"", ""Anything"", ""With"", ""Google""].toString()),
    console.assert(splitList(""ApmlifyingTheBlack+DeveloperCommunity"").toString() === [""Apmlifying"", ""The"", ""Black+"", ""Developer"", ""Community""].toString()),
    console.assert(splitList(""UpdateInTheGoEcoSystem"").toString() === [""Update"", ""In"", ""The"", ""Go"", ""Eco"", ""System""].toString())
]",
957, this function to convert an integer into a roman numeral.,"function intToRoman(num) {
    const val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
    const syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""];
    let romanNum ="""" ;
    let i = 0;
    while (num > 0) {
        for (let _ = 0; _ < Math.floor(num / val[i]); _++) {
            romanNum += syb[i];
            num -= val[i];
        }
        i++;
    }
    return romanNum;
}",958,"[
console.assert(intToRoman(1) === ""I""),
console.assert(intToRoman(50) === ""L""),
console.assert(intToRoman(4) === ""IV"")]
",
958, this   function to find the average of a list.,"function Average(lst) {
    return lst.reduce((acc, val) => acc + val, 0) / lst.length;
}",959,"
[console.assert(Average([15, 9, 55, 41, 35, 20, 62, 49]) === 35.75), console.assert(Average([4, 5, 1, 2, 9, 7, 10, 8]) === 5.75), console.assert(Average([1,2,3]) === 2)]
",
959, this function to solve tiling problem.,"
function get_noOfways(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 1; 
    }
    return get_noOfways(n - 1) + get_noOfways(n - 2);
}
",960,"
[console.assert(get_noOfways(4) === 3), console.assert(get_noOfways(3) === 2), console.assert(get_noOfways(5) === 5)]
",
960, this function to convert a roman numeral to an integer.,"
function romanToInt(s) {
    const romVal = {I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000};
    let intVal = 0;
    for (let i = 0; i < s.length; i++) {
        if (i > 0 && romVal[s[i]] > romVal[s[i - 1]]) {
            intVal += romVal[s[i]] - 2 * romVal[s[i - 1]];
        } else {
            intVal += romVal[s[i]];
        }
    }
    return intVal;
}
",961,"[
    console.assert(romanToInt('MMMCMLXXXVI') === 3986),
    console.assert(romanToInt('MMMM') === 4000),
    console.assert(romanToInt('C') === 100)]",
961, this   function to find the sum of all even natural numbers within the range l and r.,"function sum_Even(l, r) {
    const sum_Natural = (n) => (n * (n + 1)) / 2;
    const evenSum = (n) => (n * (n + 1));

    return evenSum(Math.floor(r / 2)) - evenSum(Math.floor((l - 1) / 2));
}",962,"[console.assert(sum_Even(2, 5) === 6), 
console.assert(sum_Even(3, 8) === 18),
console.assert(sum_Even(4, 6) === 10)]",
962, this function to calculate the discriminant value.,"
function discriminantValue(x, y, z) {
    let discriminant = (y ** 2) - (4 * x * z);
    if (discriminant > 0) {
        return [""Two solutions"", discriminant];
    } else if (discriminant === 0) {
        return [""one solution"", discriminant];
    } else if (discriminant < 0) {
        return [""no real solution"", discriminant];
    }
}
",963,"[console.assert(discriminantValue(4,8,2))===(""Two solutions"",32),
     console.assert(discriminantValue(5,7,9))===(""no real solution"",-131),
      console.assert(discriminantValue(0,0,9))===(""one solution"",0)]",
963, this   function to check whether the length of the word is even or not.,"
function wordLen(s) {
    s = s.split( );
    for (let word of s) {
        if (word.length % 2 == 0) {
            return true;
        } else {
            return false;
        }
    }
}
",964,"
[console.assert(wordLen(""program"") === false), console.assert(wordLen(""solution"") === true), console.assert(wordLen(""data"") === true)]
",
964, this function to convert camel case string to snake case string.,"function camelToSnake(text) {
    return text
        .replace(/([a-z0-9])([A-Z])/g, '$1_$2')  
        .toLowerCase();  
}",965,"[
    console.assert(camelToSnake('Program') === 'program'),
    console.assert(camelToSnake('Language') === 'language'),
    console.assert(camelToSnake('ProgrammingLanguage') === 'programming_language')
  ]
  ",
965, this function to remove an empty tuple from a list of tuples.,"function remove_empty(tuple1) {
    return tuple1.filter(t => {
        if (Array.isArray(t)) {
            return t.length > 0;
        }
        if (typeof t === 'string') {
            return t.trim() !== '';
        }
        return t;
    });
}",966,"[
  console.assert(
    JSON.stringify(remove_empty([[], [], [], ['a', 'b'], ['a', 'b', 'c'], 'd'])) === JSON.stringify([['a', 'b'], ['a', 'b', 'c'], 'd']),
    ""Test Case 1 Failed""
  ),
  console.assert(
    JSON.stringify(remove_empty([[], [], [], [' '], ['program']])) === JSON.stringify([[' '], ['program']]),
    ""Test Case 2 Failed""
  ),
  console.assert(
    JSON.stringify(remove_empty([[], [], [], ['java']])) === JSON.stringify([['java']]),
    ""Test Case 3 Failed""
  )
]",
966, this   function to accept the strings which contains all vowels.,"function check(string) {
    
    if (/[aeiouAEIOU]/.test(string)) {
        return ""accepted"";
    } else {
        return ""not accepted"";
    }
}",967,"[
console.assert(check(""SEEquoiaL"") === ""accepted"", ""Test Case 1 Failed""),
console.assert(check(""prgrm"") === ""not accepted"", ""Test Case 2 Failed""),
console.assert(check(""fine"") === ""accepted"", ""Test Case 3 Failed"")]",
968, this function to join the tuples if they have similar initial elements.,"function joinTuples(testList) {
    let res = [];
    for (let sub of testList) {
        if (res.length > 0 && res[res.length - 1][0] === sub[0]) {
            res[res.length - 1] = res[res.length - 1].concat(sub.slice(1));
        } else {
            res.push([...sub]); 
        }
    }
    return res;
}",969,"[console.assert(JSON.stringify(joinTuples([[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]])) === JSON.stringify([[5, 6, 7], [6, 8, 10], [7, 13]]), ""Test Case 1 Failed""),
console.assert(JSON.stringify(joinTuples([[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]])) === JSON.stringify([[6, 7, 8], [7, 9, 11], [8, 14]]), ""Test Case 2 Failed""),
console.assert(JSON.stringify(joinTuples([[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]])) === JSON.stringify([[7, 8, 9], [8, 10, 12], [9, 15]]), ""Test Case 3 Failed"")]",
969, this function to find minimum of two numbers.,"
function minOfTwo(x, y) {
    if (x < y) {
        return x;
    }
    return y;
}
",970,"
[console.assert(minOfTwo(10,20) === 10), console.assert(minOfTwo(19,15) === 15), console.assert(minOfTwo(-10,-20) === -20)]
",
970," this function to find the maximum number of segments of lengths a, b and c that can be formed from n.","
function maximum_segments(n, a, b, c) {
    let dp = Array(n + 10).fill(-1);
    dp[0] = 0;
    for (let i = 0; i < n; i++) {
        if (dp[i] !== -1) {
            if (i + a <= n) {
                dp[i + a] = Math.max(dp[i] + 1, dp[i + a]);
            }
            if (i + b <= n) {
                dp[i + b] = Math.max(dp[i] + 1, dp[i + b]);
            }
            if (i + c <= n) {
                dp[i + c] = Math.max(dp[i] + 1, dp[i + c]);
            }
        }
    }
    return dp[n];
}
",971,"
[console.assert(maximum_segments(7, 5, 2, 5) === 2), console.assert(maximum_segments(17, 2, 1, 3) === 17), console.assert(maximum_segments(18, 16, 3, 6) === 6)]
",
971, this function to concatenate the given two tuples to a nested tuple.,"function concatenateNested(testTup1, testTup2) {
    let res = testTup1.concat(testTup2); 
    return res;
}",972,"[console.assert(JSON.stringify(concatenateNested([3, 4], [5, 6])) === JSON.stringify([3, 4, 5, 6]), ""Test Case 1 Failed""),
console.assert(JSON.stringify(concatenateNested([1, 2], [3, 4])) === JSON.stringify([1, 2, 3, 4]), ""Test Case 2 Failed""),
console.assert(JSON.stringify(concatenateNested([4, 5], [6, 8])) === JSON.stringify([4, 5, 6, 8]), ""Test Case 3 Failed"")]",
972, this   function to left rotate the string.,"
function leftRotate(s, d) {
    let tmp = s.slice(d) + s.slice(0, d);
    return tmp;
}
",973,"[console.assert(leftRotate("" "", 2) === "" ""), console.assert(leftRotate(""bigdata"", 3) === ""databig""), console.assert(leftRotate(""hadoop"", 1) === ""adooph"")]",
973, this function to find the minimum total path sum in the given triangle.,"
function minSumPath(A) {
    let memo = new Array(A.length).fill(null);
    let n = A.length - 1;
    for (let i = 0; i < A[n].length; i++) {
        memo[i] = A[n][i];
    }
    for (let i = A.length - 2; i >= 0; i--) {
        for (let j = 0; j < A[i].length; j++) {
            memo[j] = A[i][j] + Math.min(memo[j], memo[j + 1]);
        }
    }
    return memo[0];
}
",974,"
[console.assert(minSumPath([[ 2 ], [3, 9 ], [1, 6, 7 ]]) === 6), console.assert(minSumPath([[ 2 ], [3, 7 ], [8, 5, 6 ]]) === 10), console.assert(minSumPath([[ 3 ], [6, 4 ], [5, 2, 7 ]]) === 9)]
",
974," this function to check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
  ","
function hasCloseElements(numbers, threshold) {
    for (let idx = 0; idx < numbers.length; idx++) {
        for (let idx2 = 0; idx2 < numbers.length; idx2++) {
            if (idx !== idx2) {
                const distance = Math.abs(numbers[idx] - numbers[idx2]);
                if (distance < threshold) {
                    return true;
                }
            }
        }
    }
    return false;
}
",975,"
[console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true), 
 console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false), 
 console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true), 
 console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false), 
 console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true), 
 console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true), 
 console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)]
",
975,"This function separates a string of balanced parentheses into individual groups, returning them as an array. It tracks the depth of nested parentheses and collects groups when depth reaches zero.","function separateParenGroups(parenString) {
    const result = [];
    let currentGroup = '';
    let currentDepth = 0;

    for (let c of parenString) {
        if (c === '(') {
            currentDepth++;
            currentGroup += c;
        } else if (c === ')') {
            currentDepth--;
            currentGroup += c;

            if (currentDepth === 0) {
                result.push(currentGroup);
                currentGroup = ''; 
            }
        }
    }

    return result.filter(group => group.length > 0);
}",976,"[console.assert(JSON.stringify(separateParenGroups(""(()()) ((())) () ((())()())"")) === JSON.stringify([ '(()())', '((()))', '()', '((())()())' ]), ""Test Case 1 Failed""),
console.assert(JSON.stringify(separateParenGroups(""(()(())((())))"")) === JSON.stringify([ '(()(())((())))' ]), ""Test Case 3 Failed""),
console.assert(JSON.stringify(separateParenGroups(""() (( )) (( )( ))"")) === JSON.stringify([ '()', '(())', '(()())' ]), ""Test Case 4 Failed"")]",
977,This function checks if a bank account balance falls below zero at any point after a series of deposit and withdrawal operations.,"
function belowZero(operations) {
    let balance = 0;

    for (let op of operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }

    return false;
}
",978,"[console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false),
console.assert(belowZero([1, 2, -4, 5, 6]) === true),
console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false),
console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true),
console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)]",
978,"This function calculates the Mean Absolute Deviation (MAD) of a dataset, which is the average of the absolute differences between each element and the mean.","
function mean_absolute_deviation(numbers) {
    const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;
    return numbers.reduce((acc, x) => acc + Math.abs(x - mean), 0) / numbers.length;
}
",979,"
[console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6), console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6), console.assert(Math.abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6)]
",
979,This function inserts a specified delimiter between every two consecutive elements of an input list.,"
function intersperse(numbers, delimeter) {
    if (numbers.length === 0) {
        return [];
    }

    const result = [];

    for (let i = 0; i < numbers.length - 1; i++) {
        result.push(numbers[i]);
        result.push(delimeter);
    }

    result.push(numbers[numbers.length - 1]);

    return result;
}
",980,"
[console.assert(intersperse([], 7).length === 0), console.assert(JSON.stringify(intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])), console.assert(JSON.stringify(intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2]))]
",
980,"This function returns the deepest level of nested parentheses for each group in a string, where groups are separated by spaces.","function parseNestedParens(parenString) {
    return parenString.split(' ').map(group => {
        let depth = 0;
        let maxDepth = 0;

        for (let c of group) {
            if (c === '(') {
                depth++;
                maxDepth = Math.max(depth, maxDepth);
            } else if (c === ')') {
                depth--;
            }
        }

        return depth === 0 ? maxDepth : 0;
    }).filter(maxDepth => maxDepth > 0);
}",981,"[console.assert(parseNestedParens(""(()()) ((())) () ((())()())"").toString() === [2, 3, 1, 3].toString()),
console.assert(parseNestedParens(""(() (()) ((())) (((()))))"").toString() === [ 2, 3].toString()),
console.assert(parseNestedParens(""(()(())((())))"").toString() === [4].toString())]",
981,This function filters an input list of strings to include only those that contain a given substring.,"
function filterBySubstring(strings, substring) {
    return strings.filter(x => x.includes(substring));
}
",982,"[
  console.assert(filterBySubstring([], 'john').length === 0),
  console.assert(JSON.stringify(filterBySubstring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])),
  console.assert(JSON.stringify(filterBySubstring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])),
  console.assert(JSON.stringify(filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')) === JSON.stringify(['grunt', 'prune']))
]",
982,"This function takes a list of integers and returns a tuple containing the sum and the product of all the integers, where the sum of an empty list is 0, and the product of an empty list is 1.","
function sumProduct(numbers) {
    let sumValue = 0;
    let prodValue = 1;

    for (let n of numbers) {
        sumValue += n;
        prodValue *= n;
    }
    return [sumValue, prodValue];
}
",983,"    console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1])),
    console.assert(JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])),
    console.assert(JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])),
    console.assert(JSON.stringify(sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])),
    console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))
]",
983,This function generates a list of rolling maximum elements found up to each point in the given sequence of integers.,"
function rollingMax(numbers) {
    let runningMax = null;
    const result = [];

    for (let n of numbers) {
        if (runningMax === null) {
            runningMax = n;
        } else {
            runningMax = Math.max(runningMax, n);
        }

        result.push(runningMax);
    }

    return result;
}
",984,"
[console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([])), console.assert(JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])), console.assert(JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])), console.assert(JSON.stringify(rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100]))]
",
984,"This function finds the shortest palindrome that begins with the supplied string by appending the reverse of the necessary prefix to its end, making the string a palindrome.","function make_palindrome(string) {
    if (!string) {
        return string; 
    }

    let beginningOfSuffix = 0;

    while (string.slice(beginningOfSuffix) !== string.slice(beginningOfSuffix).split("""").reverse().join("""")) {
        beginningOfSuffix++;
    }

    return string + string.slice(0, beginningOfSuffix).split("""").reverse().join("""");
}",985,"
[
    console.assert(make_palindrome("""") === """"),
    console.assert(make_palindrome(""x"") === ""x""),
    console.assert(make_palindrome(""xyz"") === ""xyzyx""),
    console.assert(make_palindrome(""xyx"") === ""xyx""),
    console.assert(make_palindrome(""jerry"") === ""jerryrrej"")
]",
985,"This function performs a binary XOR operation on two input strings consisting of 1s and 0s, returning the result as a string.","function stringXor(a, b) {
    function xor(i, j) {
        return i === j ? 0 : 1;
    }

    return [...a].map((x, index) => xor(x, b[index])).join('');
}",986,"[
    console.assert(stringXor(""111000"", ""101010"") === ""010010""),
    console.assert(stringXor(""1"", ""1"") === ""0""),
    console.assert(stringXor(""0101"", ""0000"") === ""0101"")
]",
986,"This function returns the longest string from a list of strings, or the first one if there are multiple strings of the same length, and returns `None` if the list is empty.","
function longest(strings) {
    if (!strings || strings.length === 0) {
        return null;
    }

    const maxlen = Math.max(...strings.map(x => x.length));
    for (let s of strings) {
        if (s.length === maxlen) {
            return s;
        }
    }
}
",987,"[
    console.assert(longest([]) === null),
    console.assert(longest([""x"", ""y"", ""z""]) === ""x""),
    console.assert(longest([""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc""]) === ""zzzz"")
]",
987,"This function returns the greatest common divisor (GCD) of two integers, `a` and `b`.","
function greatestCommonDivisor(a, b) {
    while (b) {
        [a, b] = [b, a % b];
    }
    return a;
}
",988,"
[console.assert(greatestCommonDivisor(3, 7) === 1), console.assert(greatestCommonDivisor(10, 15) === 5), console.assert(greatestCommonDivisor(49, 14) === 7), console.assert(greatestCommonDivisor(144, 60) === 12)]
",
988,"This function returns a list of all prefixes of the input string, from the shortest to the longest.","
function allPrefixes(string) {
    let result = [];

    for (let i = 0; i < string.length; i++) {
        result.push(string.slice(0, i + 1));
    }
    return result;
}
",989,"[
    console.assert(JSON.stringify(allPrefixes("""")) === JSON.stringify([])),
    console.assert(JSON.stringify(allPrefixes(""asdfgh"")) === JSON.stringify([""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""])),
    console.assert(JSON.stringify(allPrefixes(""WWW"")) === JSON.stringify([""W"", ""WW"", ""WWW""]))
]",
989,"This function returns a string of space-separated numbers starting from 0 up to the specified number `n`, inclusive.","function stringSequence(n) {
    return Array.from({ length: n + 1 }, (_, x) => x).join(' ' );
}",990,"[
    console.assert(stringSequence(0) === ""0""),
    console.assert(stringSequence(3) === ""0 1 2 3""),
    console.assert(stringSequence(10) === ""0 1 2 3 4 5 6 7 8 9 10"")
]",
990,"This function returns the number of distinct characters in a string, ignoring case sensitivity.","function countDistinctCharacters(string = '') {
    return new Set(string.toLowerCase()).size;
}",991,"[
  console.assert(countDistinctCharacters() === 0),
  console.assert(countDistinctCharacters('abcde') === 5),
  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5),
  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1),
  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)
]",
991,This function parses a string of musical notes and returns a list of corresponding beat durations based on predefined note symbols.,"function parseMusic(musicString) {
    const noteMap = {'o': 4, 'o|': 2, '.|': 1}; 
    return musicString.split(' ').filter(x => x).map(x => noteMap[x] || 0); 
}",992,"[
    console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([])), // Check for empty input
    console.assert(JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])),
    console.assert(JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])),
    console.assert(JSON.stringify(parseMusic('o| o| .| .| o o o o')) === JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])),
    console.assert(JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) === JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2]))
]",
992,"This function counts how many times a given substring appears in the original string, including overlapping occurrences.","
function howManyTimes(string, substring) {
    let times = 0;

    for (let i = 0; i <= string.length - substring.length; i++) {
        if (string.slice(i, i + substring.length) === substring) {
            times++;
        }
    }

    return times;
}
",993,"[
  console.assert(howManyTimes('', 'x') === 0),
  console.assert(howManyTimes('xyxyxyx', 'x') === 4),
  console.assert(howManyTimes('cacacacac', 'cac') === 4),
  console.assert(howManyTimes('john doe', 'john') === 1)
]",
994,"This function takes a list of numbers and returns a tuple of the two closest numbers in the list, in ascending order.","function findClosestElements(numbers) {
    let closestPair = null;
    let distance = null;

    for (let idx = 0; idx < numbers.length; idx++) {
        for (let idx2 = 0; idx2 < numbers.length; idx2++) {
            if (idx !== idx2) {
                if (distance === null) {
                    distance = Math.abs(numbers[idx] - numbers[idx2]);
                    closestPair = [Math.min(numbers[idx], numbers[idx2]), Math.max(numbers[idx], numbers[idx2])];
                } else {
                    const newDistance = Math.abs(numbers[idx] - numbers[idx2]);
                    if (newDistance < distance) {
                        distance = newDistance;
                        closestPair = [Math.min(numbers[idx], numbers[idx2]), Math.max(numbers[idx], numbers[idx2])];
                    }
                }
            }
        }
    }

    return closestPair;
}",995,"[
    console.assert(JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) === JSON.stringify([3.9, 4.0])),
    console.assert(JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) === JSON.stringify([5.0, 5.9])),
    console.assert(JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) === JSON.stringify([2.0, 2.2])),
    console.assert(JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) === JSON.stringify([2.0, 2.0])),
    console.assert(JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) === JSON.stringify([2.2, 3.1]))
]",
996,"This function filters a given list, returning only the integer values.","function filterIntegers(values) {
    return values.filter(x => typeof x === 'number' && Number.isInteger(x));
}",997,"[
console.assert(filterIntegers([]).length === 0);
console.assert(JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, adasd])) === JSON.stringify([4, 9])),
console.assert(JSON.stringify(filterIntegers([3, c, 3, 3, a, b])) === JSON.stringify([3, 3, 3]))]
",
998,"this function to find the largest divisor of a number n that is smaller than n.
","
function largestDivisor(n) {
    for (let i = n - 1; i > 0; i--) {
        if (n % i === 0) {
            return i;
        }
    }
}
",999,"
[console.assert(largestDivisor(3) === 1), console.assert(largestDivisor(7) === 1), console.assert(largestDivisor(10) === 5), console.assert(largestDivisor(100) === 50), console.assert(largestDivisor(49) === 7)]
",
999,"This function returns the prime factorization of a given integer as a list of factors in ascending order, with each factor repeated according to its multiplicity.","
function factorize(n) {
    let fact = [];
    let i = 2;
    while (i <= Math.sqrt(n) + 1) {
        if (n % i === 0) {
            fact.push(i);
            n /= i;
        } else {
            i += 1;
        }
    }

    if (n > 1) {
        fact.push(n);
    }
    return fact;
}
",1000,"
[console.assert(factorize(2).toString() === [2].toString()), console.assert(factorize(4).toString() === [2, 2].toString()), console.assert(factorize(8).toString() === [2, 2, 2].toString()), console.assert(factorize(3 * 19).toString() === [3, 19].toString()), console.assert(factorize(3 * 19 * 3 * 19).toString() === [3, 3, 19, 19].toString()), console.assert(factorize(3 * 19 * 3 * 19 * 3 * 19).toString() === [3, 3, 3, 19, 19, 19].toString()), console.assert(factorize(3 * 19 * 19 * 19).toString() === [3, 19, 19, 19].toString()), console.assert(factorize(3 * 2 * 3).toString() === [2, 3, 3].toString())]
",
1000,"This function removes all elements from a list of integers that occur more than once, preserving the order of the remaining elements.","
function removeDuplicates(numbers) {
    const c = {};
    numbers.forEach(n => c[n] = (c[n] || 0) + 1);
    return numbers.filter(n => c[n] <= 1);
}
",1001,"[
    console.assert(removeDuplicates([]).toString() === [].toString()),
    console.assert(removeDuplicates([1, 2, 3, 4]).toString() === [1, 2, 3, 4].toString()),
    console.assert(removeDuplicates([1, 2, 3, 2, 4, 3, 5]).toString() === [1, 4, 5].toString())]
    ",
1001,"This function flips the case of each character in a string, converting lowercase letters to uppercase and vice versa.","function flipCase(string) {
    return string.split('').map(char => {
        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();
    }).join('');
}",1002,"[
    console.assert(flipCase("""") === """"),
    console.assert(flipCase(""Hello!"") === ""hELLO!""),
    console.assert(flipCase(""These violent delights have violent ends"") === ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"")
]",
1002,This function concatenates a list of strings into a single string.,"function concatenate(arr) {
    return arr.join('');
}",1003,"[
    console.assert(concatenate([]) === """"),
    console.assert(concatenate(['x', 'y', 'z']) === ""xyz""),
    console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === ""xyzwk"")
]",
1003,"This function filters an input list of strings, returning only those that start with a given prefix.","
function filterByPrefix(strings, prefix) {
    return strings.filter(x => x.startsWith(prefix));
}
",1004,"[console.assert(filterByPrefix([], 'john').length === 0),
console.assert(JSON.stringify(filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')) === JSON.stringify(['xxx', 'xxxAAA', 'xxx']))]",
1004,"this function filters a list of numbers and returns only the positive values, excluding zero and negative numbers.
","
function getPositive(l) {
    return l.filter(e => e > 0);
}
",1005,"
[console.assert(getPositive([-1, -2, 4, 5, 6]).toString() === [4, 5, 6].toString()), console.assert(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]).toString() === [5, 3, 2, 3, 3, 9, 123, 1].toString()), console.assert(getPositive([-1, -2]).toString() === [].toString()), console.assert(getPositive([]).toString() === [].toString())]
",
1005,"this function checks if a number is prime, returning True if it is, and False otherwise.
","
function isPrime(n) {
    if (n < 2) {
        return false;
    }
    for (let k = 2; k < n - 1; k++) {
        if (n % k === 0) {
            return false;
        }
    }
    return true;
}
",1006,"
[console.assert(isPrime(6) === false), console.assert(isPrime(101) === true), console.assert(isPrime(11) === true), console.assert(isPrime(13441) === true), console.assert(isPrime(61) === true), console.assert(isPrime(4) === false), console.assert(isPrime(1) === false), console.assert(isPrime(5) === true), console.assert(isPrime(11) === true), console.assert(isPrime(17) === true), console.assert(isPrime(5 * 17) === false), console.assert(isPrime(11 * 7) === false), console.assert(isPrime(13441 * 19) === false)]
",
1007,"The function modifies a list by sorting the elements at indices that are divisible by three, while leaving the elements at other indices unchanged.","function sortThird(arr) {
    let result = arr.slice();
    let thirdElements = result.filter((_, index) => index % 3 === 0); 
    thirdElements.sort((a, b) => a - b);
    let thirdIndex = 0;

    for (let i = 0; i < result.length; i++) {
        if (i % 3 === 0) {
            result[i] = thirdElements[thirdIndex++];
        }
    }

    return result;
}",1008,"[
console.assert(JSON.stringify(sortThird([1, 2, 3])) === JSON.stringify([1, 2, 3])),
console.assert(JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) === JSON.stringify([2, 6, 3, 4, 8, 9, 5])),
console.assert(JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) === JSON.stringify([2, 8, 3, 4, 6, 9, 5])),
console.assert(JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) === JSON.stringify([2, 6, 9, 4, 8, 3, 5])),
console.assert(JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) === JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])) 
]",
1008,"The function returns the sorted list of unique elements from the input list, removing duplicates and ordering the elements in ascending order.","function unique(l) {
    return Array.from(new Set(l)).sort((a, b) => a - b); 
}",1009,"  [
    console.assert(JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) === JSON.stringify([0, 2, 3, 5, 9, 123])),
    console.assert(JSON.stringify(unique([1, 1, 1, 1, 1])) === JSON.stringify([1])),
    console.assert(JSON.stringify(unique([9, 7, 5, 3, 1])) === JSON.stringify([1, 3, 5, 7, 9])),
    console.assert(JSON.stringify(unique([100, 200, 300, 100, 200, 400, 300])) === JSON.stringify([100, 200, 300, 400])),
    console.assert(JSON.stringify(unique([0, 0, 0, -1, -1, 1, 1])) === JSON.stringify([-1, 0, 1])),
    console.assert(JSON.stringify(unique([5, -2, 0, 9, 7, -2, -5])) === JSON.stringify([-5, -2, 0, 5, 7, 9])),
    console.assert(JSON.stringify(unique([])) === JSON.stringify([])),
    console.assert(JSON.stringify(unique([10, 20, 30, 40, 50])) === JSON.stringify([10, 20, 30, 40, 50])),
    console.assert(JSON.stringify(unique([1.5, 2.5, 1.5, 3.5, 2.5])) === JSON.stringify([1.5, 2.5, 3.5])),
    console.assert(JSON.stringify(unique([1000, 500, 1000, 1000, 500, 2000])) === JSON.stringify([500, 1000, 2000]))
  ]",
1009,This function returns the maximum element in a given list.,"
function maxElement(l) {
    let m = l[0];
    for (let e of l) {
        if (e > m) {
            m = e;
        }
    }
    return m;
}
",1010,"
[console.assert(maxElement([1, 2, 3]) === 3), console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)]
",
1010,This function returns the number of times the digit 7 appears in integers less than a given number `n` that are divisible by 11 or 13.,"function fizzBuzz(n) {
    let ns = [];
    for (let i = 1; i < n; i++) {  
        if (i % 11 === 0 || i % 13 === 0) {
            ns.push(i);
        }
    }
    
    let s = ns.join('');  
    let ans = 0;
    
    for (let c of s) {
        ans += (c === '7') ? 1 : 0; 
    }
    
    return ans;
}",1011,"[console.assert(fizzBuzz(50) === 0),
    console.assert(fizzBuzz(78) === 2),
    console.assert(fizzBuzz(79) === 3),
    console.assert(fizzBuzz(100) === 3),
    console.assert(fizzBuzz(200) === 6),
    console.assert(fizzBuzz(4000) === 192),
    console.assert(fizzBuzz(10000) === 639),
    console.assert(fizzBuzz(100000) === 8026)]",
1011,"This function takes a list and returns a new list where elements at odd indices remain the same, while elements at even indices are sorted in ascending order.","
function sortEven(l) {
    const evens = l.filter((_, index) => index % 2 === 0);
    const odds = l.filter((_, index) => index % 2 !== 0);
    evens.sort((a, b) => a - b);
    const ans = [];
    const minLength = Math.min(evens.length, odds.length);
    
    for (let i = 0; i < minLength; i++) {
        ans.push(evens[i], odds[i]);
    }
    
    if (evens.length > odds.length) {
        ans.push(evens[evens.length - 1]);
    }
    
    return ans;
}
",1012,"
[console.assert(JSON.stringify(sortEven([1, 2, 3])) === JSON.stringify([1, 2, 3])),
console.assert(JSON.stringify(sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) === JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])),
console.assert(JSON.stringify(sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) === JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))]
",
1012,"This function encodes a string by cyclically shifting characters within groups of three. It splits the string into groups of three characters, shifts the characters in each group, and returns the modified string.","function cyclicTransform(s, mode) {
    return s.split('').map(c => 
        String.fromCharCode(c.charCodeAt(0) + (mode === ""encode"" ? 2 : -2))
    ).join('');
}",1013,"[
    console.assert(cyclicTransform(cyclicTransform('zvbxqgqwybhmzltozlbd', ""encode""), ""decode"") === 'zvbxqgqwybhmzltozlbd'),
    console.assert(cyclicTransform(cyclicTransform('kmgofsldyspeg', ""encode""), ""decode"") === 'kmgofsldyspeg'),
    console.assert(cyclicTransform(cyclicTransform('zrzzaqgvfbb', ""encode""), ""decode"") === 'zrzzaqgvfbb'),
    console.assert(cyclicTransform(cyclicTransform('gjhfrjgunrnyibzsw', ""encode""), ""decode"") === 'gjhfrjgunrnyibzsw'),
    console.assert(cyclicTransform(cyclicTransform('enbuyhivsimbbn', ""encode""), ""decode"") === 'enbuyhivsimbbn'),
    console.assert(cyclicTransform(cyclicTransform('opvjifegwqu', ""encode""), ""decode"") === 'opvjifegwqu'),
    console.assert(cyclicTransform(cyclicTransform('mwspijprapdwlsi', ""encode""), ""decode"") === 'mwspijprapdwlsi'),
    console.assert(cyclicTransform(cyclicTransform('nvvynyfizv', ""encode""), ""decode"") === 'nvvynyfizv'),
    console.assert(cyclicTransform(cyclicTransform('tfztrufpxkzu', ""encode""), ""decode"") === 'tfztrufpxkzu'),
    console.assert(cyclicTransform(cyclicTransform('jmsnjngtgnzmgnbjsxa', ""encode""), ""decode"") === 'jmsnjngtgnzmgnbjsxa')
]",
1013,This function returns the n-th Fibonacci number that is also a prime number. It generates Fibonacci numbers and checks for primality until it reaches the n-th prime Fibonacci number.,"
function primeFib(n) {
    function isPrime(p) {
        if (p < 2) {
            return false;
        }
        for (let k = 2; k <= Math.min(Math.sqrt(p), p - 1); k++) {
            if (p % k === 0) {
                return false;
            }
        }
        return true;
    }
    
    let f = [0, 1];
    while (true) {
        f.push(f[f.length - 1] + f[f.length - 2]);
        if (isPrime(f[f.length - 1])) {
            n -= 1;
        }
        if (n === 0) {
            return f[f.length - 1];
        }
    }
}
",1014," [
  console.assert(primeFib(1) === 2),
  console.assert(primeFib(2) === 3),
  console.assert(primeFib(3) === 5),
  console.assert(primeFib(4) === 13),
  console.assert(primeFib(5) === 89),
  console.assert(primeFib(6) === 233),
  console.assert(primeFib(7) === 1597),
  console.assert(primeFib(8) === 28657),
  console.assert(primeFib(9) === 514229),
  console.assert(primeFib(10) === 433494437)
]",
1014,This function checks if there are three distinct elements in a list of integers that sum to zero. It returns `True` if such a triplet exists and `False` otherwise.,"
function triplesSumToZero(l) {
    for (let i = 0; i < l.length; i++) {
        for (let j = i + 1; j < l.length; j++) {
            for (let k = j + 1; k < l.length; k++) {
                if (l[i] + l[j] + l[k] === 0) {
                    return true;
                }
            }
        }
    }
    return false;
}
",1015,"
[console.assert(triplesSumToZero([1, 3, 5, 0]) === false), console.assert(triplesSumToZero([1, 3, 5, -1]) === false), console.assert(triplesSumToZero([1, 3, -2, 1]) === true), console.assert(triplesSumToZero([1, 2, 3, 7]) === false), console.assert(triplesSumToZero([1, 2, 5, 7]) === false), console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true), console.assert(triplesSumToZero([1]) === false), console.assert(triplesSumToZero([1, 3, 5, -100]) === false), console.assert(triplesSumToZero([100, 3, 5, -100]) === false)]
",
1015,"this function  calculates the number of collisions between two sets of `n` cars moving in opposite directions, returning `n^2` collisions.","
function carRaceCollision(n) {
    return n ** 2;
}
",1016,"[
  console.assert(carRaceCollision(2) === 4),
  console.assert(carRaceCollision(3) === 9),
  console.assert(carRaceCollision(4) === 16),
  console.assert(carRaceCollision(8) === 64),
  console.assert(carRaceCollision(10) === 100)
]",
1017,"    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","
function pairsSumToZero(arr) {
    for (let i = 0; i < arr.length; i++) {
        for (let j = i + 1; j < arr.length; j++) {
            if (arr[i] + arr[j] === 0) {
                return true;
            }
        }
    }
    return false;
}
",1018,"
[console.assert(pairsSumToZero([1, 3, 5, 0]) === false), console.assert(pairsSumToZero([1, 3, -2, 1]) === false), console.assert(pairsSumToZero([1, 2, 3, 7]) === false), console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true), console.assert(pairsSumToZero([1]) === false), console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true), console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true), console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false), console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)]
",
1018,"this function converts a given number x to the specified base and returns its string representation.
","function changeBase(x, base) {
    if (x === 0) return ""0""; 
    let ret = """";
    while (x > 0) {
        ret = (x % base).toString() + ret;
        x = Math.floor(x / base);
    }
    return ret;
}",1019,"[
    console.assert(changeBase(8, 3) === ""22""),
    console.assert(changeBase(9, 3) === ""100""),
    console.assert(changeBase(234, 2) === ""11101010""),
    console.assert(changeBase(16, 2) === ""10000""),
    console.assert(changeBase(8, 2) === ""1000""),
    console.assert(changeBase(7, 2) === ""111"")
]",
1019,"this  function calculates the area of a triangle given the length of its base and height.
","
function triangleArea(a, h) {
    return a * h / 2.0;
}
",1020,"
[console.assert(triangleArea(5, 3) === 7.5), console.assert(triangleArea(2, 2) === 2.0), console.assert(triangleArea(10, 8) === 40.0)]
",
1020,"this function calculates the n-th element of the modified Fibonacci sequence, where each term is the sum of the previous four terms, starting with specific initial values.
","
function fib4(n) {
    const results = [0, 0, 2, 0];
    if (n < 4) {
        return results[n];
    }

    for (let i = 4; i <= n; i++) {
        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);
        results.shift();
    }

    return results[results.length - 1];
}
",1021,"
[console.assert(fib4(5) === 4), console.assert(fib4(8) === 28), console.assert(fib4(10) === 104), console.assert(fib4(12) === 386)];
",
1022,"this function checks if a given string is a palindrome, meaning it reads the same forwards and backwards.
","
function isPalindrome(text) {
    for (let i = 0; i < text.length; i++) {
        if (text[i] !== text[text.length - 1 - i]) {
            return false;
        }
    }
    return true;
}
",1023,"[
  console.assert(isPalindrome('') === true),
  console.assert(isPalindrome('aba') === true),
  console.assert(isPalindrome('aaaaa') === true),
  console.assert(isPalindrome('zbcd') === false),
  console.assert(isPalindrome('xywyx') === true),
  console.assert(isPalindrome('xywyz') === false),
  console.assert(isPalindrome('xywzx') === false)
]",
1023,"This function returns 2^n mod p, handling large numbers correctly.","
function modp(n, p) {
    let ret = 1;
    for (let i = 0; i < n; i++) {
        ret = (2 * ret) % p;
    }
    return ret;
}
",1024,"
[console.assert(modp(3, 5) === 3), console.assert(modp(1101, 101) === 2), console.assert(modp(0, 101) === 1), console.assert(modp(3, 11) === 8), console.assert(modp(100, 101) === 1), console.assert(modp(30, 5) === 4), console.assert(modp(31, 5) === 3)]
",
1024,This function encodes a string by shifting each character by 5 positions in the alphabet.,"function shiftCipher(s, shift = 5, direction = 1) {
    const a = 'a';
    return s.split('').map(ch => 
        String.fromCharCode(((ch.charCodeAt(0) - a.charCodeAt(0) + shift * direction + 26) % 26) + a.charCodeAt(0))
    ).join('');
}",1025,"[console.assert(shiftCipher('abc', 5, 1) === 'fgh'),
    console.assert(shiftCipher('fgh', 5, -1) === 'abc')]",
1025,"This function removes all vowels (a, e, i, o, u) from a given string and returns the modified string.","function removeVowels(text = """") {
    return text.split('').filter(s => ![""a"", ""e"", ""i"", ""o"", ""u""].includes(s.toLowerCase())).join('');
}",1026,"[console.assert(removeVowels("""") === """", ""Test 1 Failed""),
console.assert(removeVowels(""abcdef\nghijklm"") === ""bcdf\nghjklm"", ""Test 2 Failed""),
console.assert(removeVowels(""fedcba"") === ""fdcb"", ""Test 3 Failed""),
console.assert(removeVowels(""eeeee"") === """", ""Test 4 Failed""),
console.assert(removeVowels(""acBAA"") === ""cB"", ""Test 5 Failed""),
console.assert(removeVowels(""EcBOO"") === ""cB"", ""Test 6 Failed""),
console.assert(removeVowels(""ybcd"") === ""ybcd"", ""Test 7 Failed"")]",
1026,"this function returns True if all numbers in the list l are below the threshold t.
","
function belowThreshold(l, t) {
    for (let e of l) {
        if (e >= t) {
            return false;
        }
    }
    return true;
}
",1027,"[console.assert(belowThreshold([1, 2, 4, 10], 100)), 
console.assert(!belowThreshold([1, 20, 4, 10], 5)), 
console.assert(belowThreshold([1, 20, 4, 10], 21)),
 console.assert(belowThreshold([1, 20, 4, 10], 22)),
  console.assert(belowThreshold([1, 8, 4, 10], 11)),
   console.assert(!belowThreshold([1, 8, 4, 10], 10))]",
1027,"This function adds two numbers, `x` and `y`.","
function add(x, y) {
    return x + y;
}
",1028,"[console.assert(add(0, 1) === 1), 
    console.assert(add(1, 0) === 1),
     console.assert(add(2, 3) === 5),
      console.assert(add(5, 7) === 12),
       console.assert(add(7, 5) === 12)]",
1028,"This function checks if two words contain the same characters, regardless of order or frequency.","
function sameChars(s0, s1) {
    return new Set(s0).size === new Set(s1).size && [...new Set(s0)].every(char => new Set(s1).has(char));
}
",1029,"
[console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true), 
    console.assert(sameChars('abcd', 'dddddddabc') === true), 
    console.assert(sameChars('dddddddabc', 'abcd') === true), 
    console.assert(sameChars('eabcd', 'dddddddabc') === false), 
    console.assert(sameChars('abcd', 'dddddddabcf') === false), 
    console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false), 
    console.assert(sameChars('aabb', 'aaccc') === false)]
",
1029,"this function Returns the n-th Fibonacci number.
","
function fib(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
}
",1030,"
[console.assert(fib(10) === 55), console.assert(fib(1) === 1), console.assert(fib(8) === 21), console.assert(fib(11) === 89), console.assert(fib(12) === 144)]
",
1030,"this function Returns True if every opening bracket has a corresponding closing bracket in the string
","
function correctBracketing(brackets) {
    let depth = 0;
    for (let b of brackets) {
        if (b === ""<"") {
            depth++;
        } else {
            depth--;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth === 0;
}
",1031,"
[console.assert(correctBracketing(""<>"") === true), 
 console.assert(correctBracketing(""<<><>>"") === true), 
 console.assert(correctBracketing(""<><><<><>><>"") === true), 
 console.assert(correctBracketing(""<><><<<><><>><>><<><><<>>>"") === true), 
 console.assert(correctBracketing(""<<<><>>>>"") === false), 
 console.assert(correctBracketing(""><<>"") === false), 
 console.assert(correctBracketing(""<"") === false), 
 console.assert(correctBracketing(""<<<<"") === false), 
 console.assert(correctBracketing("">"") === false), 
 console.assert(correctBracketing(""<<>"") === false), 
 console.assert(correctBracketing(""<><><<><>><>><<>"") === false), 
 console.assert(correctBracketing(""<><><<><>><>>><>"") === false)];
",
1031,"this function Returns True if the list elements are monotonically increasing or decreasing.
","
function monotonic(l) {
    if (JSON.stringify(l) === JSON.stringify(l.slice().sort()) || JSON.stringify(l) === JSON.stringify(l.slice().sort((a, b) => b - a))) {
        return true;
    }
    return false;
}
",1032,"[
    console.assert(monotonic([1, 20, 4, 10]) === false),
    console.assert(monotonic([4, 1, 0, -10]) === true),
    console.assert(monotonic([4, 1, 1, 0]) === true),
    console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false),
    console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true),
    console.assert(monotonic([9, 9, 9, 9]) === true)
  ]",
1032,"this function returns the sorted unique common elements between two lists
","
function common(l1, l2) {
    let ret = new Set();
    for (let e1 of l1) {
        for (let e2 of l2) {
            if (e1 === e2) {
                ret.add(e1);
            }
        }
    }
    return Array.from(ret).sort();
}
",1033,"
[console.assert(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]).toString() === [1, 5, 653].toString()), console.assert(common([5, 3, 2, 8], [3, 2]).toString() === [2, 3].toString()), console.assert(common([4, 3, 2, 8], [3, 2, 4]).toString() === [2, 3, 4].toString()), console.assert(common([4, 3, 2, 8], []).toString() === [].toString())]
",
1033,"this function returns the largest prime factor of a given number n, where n > 1 and is not prime.
","function largestPrimeFactor(n) {
    let largest = 1;
    while (n % 2 === 0) {
        largest = 2;
        n /= 2;
    }

    for (let i = 3; i * i <= n; i += 2) {
        while (n % i === 0) {
            largest = i;
            n /= i;
        }
    }

    if (n > 2) {
        largest = n;
    }

    return largest;
}",1034," [
  console.assert(largestPrimeFactor(15) === 5),
  console.assert(largestPrimeFactor(27) === 3),
  console.assert(largestPrimeFactor(63) === 7),
  console.assert(largestPrimeFactor(330) === 11),
  console.assert(largestPrimeFactor(13195) === 29)
]",
1034,"this function returns the sum of all numbers from 1 to n.
","
function sumToN(n) {
    return (n * (n + 1)) / 2;
}
",1035,"
[console.assert(sumToN(1) === 1), console.assert(sumToN(6) === 21), console.assert(sumToN(11) === 66), console.assert(sumToN(30) === 465), console.assert(sumToN(100) === 5050)]
",
1035,"this function returns True if every opening bracket has a corresponding closing bracket in the string
","function correctBracketing(brackets) {
    let depth = 0;
    for (let b of brackets) {
        if (b === ""("") {
            depth += 1;
        } else {
            depth -= 1;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth === 0;
}",1036,"[console.assert(correctBracketing(""()"")), 
    console.assert(correctBracketing(""(()())"")), 
    console.assert(correctBracketing(""()()(()())()"")),
     console.assert(correctBracketing(""()()((()()())())(()()(()))"")), 
     console.assert(!correctBracketing(""((()())))"")), 
     console.assert(!correctBracketing("")(()"")), 
     console.assert(!correctBracketing(""("")),
      console.assert(!correctBracketing(""(((("")), 
      console.assert(!correctBracketing("")"")), 
      console.assert(!correctBracketing(""(()"")), 
      console.assert(!correctBracketing(""()()(()())())(()"")),
       console.assert(!correctBracketing(""()()(()())()))()""))]",
1036,"this funcion returns the derivative of the polynomial represented by the coefficients in the list xs
","
function derivative(xs) {
    return xs.map((x, i) => i * x).slice(1);
}
",1037,"
[console.assert(derivative([3, 1, 2, 4, 5]).toString() === [1, 4, 12, 20].toString()), 
 console.assert(derivative([1, 2, 3]).toString() === [2, 6].toString()), 
 console.assert(derivative([3, 2, 1]).toString() === [2, 2].toString()), 
 console.assert(derivative([3, 2, 1, 0, 4]).toString() === [2, 2, 0, 16].toString()), 
 console.assert(derivative([1]).toString() === [].toString())]
",
1037,"this function computes the n-th element of the FibFib number sequence, defined as fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
function fibfib(n) {
    if (n === 0) {
        return 0;
    }
    if (n === 1) {
        return 0;
    }
    if (n === 2) {
        return 1;
    }
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
}
",1038," [
  console.assert(fibfib(2) === 1),
  console.assert(fibfib(1) === 0),
  console.assert(fibfib(5) === 4),
  console.assert(fibfib(8) === 24),
  console.assert(fibfib(10) === 81),
  console.assert(fibfib(12) === 274),
  console.assert(fibfib(14) === 927)
]",
1038,"this function counts the number of vowels in a word, considering 'y' as a vowel only when it's at the end of the word
","function vowelsCount(s) {
    const vowels = ""aeiouAEIOU"";
    let nVowels = [...s].filter(c => vowels.includes(c)).length;

    if (s.length > 0 && (s[s.length - 1] === ""y"" || s[s.length - 1] === ""Y"")) {
        nVowels += 1;
    }

    return nVowels;
}",1039,"
[console.assert(vowelsCount(""abcde"") === 2, ""Test 1""), console.assert(vowelsCount(""Alone"") === 3, ""Test 2""), console.assert(vowelsCount(""key"") === 2, ""Test 3""), console.assert(vowelsCount(""bye"") === 1, ""Test 4""), console.assert(vowelsCount(""keY"") === 2, ""Test 5""), console.assert(vowelsCount(""bYe"") === 1, ""Test 6""), console.assert(vowelsCount(""ACEDY"") === 3, ""Test 7""), console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")]
",
1039,"this function Shifts the digits of an integer x by a specified number of places to the right, returning the result as a string, with reversal if shift exceeds the number of digits
","
function circularShift(x, shift) {
    let s = String(x);
    if (shift > s.length) {
        return s.split().reverse().join();
    } else {
        return s.slice(s.length - shift) + s.slice(0, s.length - shift);
    }
}
",1040,"[
    console.assert(circularShift(100, 2) === ""001""),
    console.assert(circularShift(12, 2) === ""12""),
    console.assert(circularShift(12, 1) === ""21"", ""This prints if this assert fails 1 (good for debugging!)""),
    console.assert(circularShift(11, 101) === ""11"", ""This prints if this assert fails 2 (also good for debugging!)"")
  ]",
1040,This function takes a string as input and returns the sum of the ASCII codes of uppercase characters only,"
function digitSum(s) {
    if (s === """") return 0;
    return Array.from(s).reduce((sum, char) => sum + (char === char.toUpperCase() ? char.charCodeAt(0) : 0), 0);
}
",1041,"[
    console.assert(digitSum("""") === 0, ""Error""),
    console.assert(digitSum(""abAB"") === 131, ""Error""),
    console.assert(digitSum(""abcCd"") === 67, ""Error""),
    console.assert(digitSum(""helloE"") === 69, ""Error""),
    console.assert(digitSum(""woArBld"") === 131, ""Error""),
    console.assert(digitSum(""aAaaaXa"") === 153, ""Error"")
  ]",
1041,This function calculates the number of mangoes in a basket by subtracting the number of apples and oranges (given in a string) from the total number of fruits (given as an integer),"function fruitDistribution(s, n) {
    let lis = [];
    s.split("" "").forEach(i => {
        if (!isNaN(i)) {
            lis.push(parseInt(i));
        }
    });
    return n - lis.reduce((acc, val) => acc + val, 0);
}",1042,"[console.assert(fruitDistribution(""5 apples and 6 oranges"", 19) === 8, ""Test 1 failed""),
console.assert(fruitDistribution(""5 apples and 6 oranges"", 21) === 10, ""Test 2 failed""),
console.assert(fruitDistribution(""0 apples and 1 oranges"", 3) === 2, ""Test 3 failed""),
console.assert(fruitDistribution(""1 apples and 0 oranges"", 3) === 2, ""Test 4 failed""),
console.assert(fruitDistribution(""2 apples and 3 oranges"", 100) === 95, ""Test 5 failed""),
console.assert(fruitDistribution(""2 apples and 3 oranges"", 5) === 0, ""Test 6 failed""),
console.assert(fruitDistribution(""1 apples and 100 oranges"", 120) === 19, ""Test 7 failed"")]",
1042,"This function finds and returns the smallest even-valued node and its index from an array of non-negative integers, prioritizing the node with the smallest index in case of ties","
function pluck(arr) {
    if (arr.length === 0) return [];
    const evens = arr.filter(x => x % 2 === 0);
    if (evens.length === 0) return [];
    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];
}
",1043,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), console.assert(pluck([4, 2, 3]).toString() === [2, 1].toString(), ""Error""), console.assert(pluck([1, 2, 3]).toString() === [2, 1].toString(), ""Error""), console.assert(pluck([]).toString() === [].toString(), ""Error""), console.assert(pluck([5, 0, 3, 0, 4, 2]).toString() === [0, 1].toString(), ""Error""), console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""), console.assert(pluck([1, 2, 3, 0, 5, 3]).toString() === [0, 3].toString(), ""Error""), console.assert(pluck([5, 4, 8, 4, 8]).toString() === [4, 1].toString(), ""Error""), console.assert(pluck([7, 6, 7, 1]).toString() === [6, 1].toString(), ""Error""), console.assert(pluck([7, 9, 7, 1]).toString() === [].toString(), ""Error"")]
",
1045,"This function calculates the area of a triangle given its side lengths, rounded to 2 decimal places. If the given side lengths do not form a valid triangle, it returns -1.","
function triangleArea(a, b, c) {
    if (a + b <= c || a + c <= b || b + c <= a) {
        return -1; 
    }
    let s = (a + b + c) / 2;    
    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
    area = Math.round(area * 100) / 100;
    return area;
}
",1046,"
[console.assert(triangleArea(3, 4, 5) === 6.00, ""This prints if this assert fails 1 (good for debugging!)""), console.assert(triangleArea(1, 2, 10) === -1), console.assert(triangleArea(4, 8, 5) === 8.18), console.assert(triangleArea(2, 2, 2) === 1.73), console.assert(triangleArea(1, 2, 3) === -1), console.assert(triangleArea(10, 5, 7) === 16.25), console.assert(triangleArea(2, 6, 3) === -1), console.assert(triangleArea(1, 1, 1) === 0.43, ""This prints if this assert fails 2 (also good for debugging!)""), console.assert(triangleArea(2, 2, 10) === -1)]
",
1046,This function determines if an object can fly by checking if it's balanced (palindromic) and its total weight doesn't exceed the maximum allowed weight.,"
function willItFly(q, w) {
    if (q.reduce((a, b) => a + b, 0) > w) {
        return false;
    }

    let i = 0, j = q.length - 1;
    while (i < j) {
        if (q[i] !== q[j]) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}
",1047,"
[console.assert(willItFly([3, 2, 3], 9) === true), console.assert(willItFly([1, 2], 5) === false), console.assert(willItFly([3], 5) === true), console.assert(willItFly([3, 2, 3], 1) === false), console.assert(willItFly([1, 2, 3], 6) === false), console.assert(willItFly([5], 5) === true)]
",
1047,This function finds the minimum number of element changes required to make an array of integers palindromic. ,"
function smallestChange(arr) {
    let ans = 0;
    for (let i = 0; i < Math.floor(arr.length / 2); i++) {
        if (arr[i] !== arr[arr.length - i - 1]) {
            ans += 1;
        }
    }
    return ans;
}
",1048,"[console.assert(smallestChange([1,2,3,5,4,7,9,6]) === 4), 
console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1),
 console.assert(smallestChange([1, 4, 2]) === 1), 
 console.assert(smallestChange([1, 4, 4, 2]) === 1), 
 console.assert(smallestChange([1, 2, 3, 2, 1]) === 0), 
 console.assert(smallestChange([3, 1, 1, 3]) === 0), 
 console.assert(smallestChange([1]) === 0), 
 console.assert(smallestChange([0, 1]) === 1)]",
1048,"This function compares two lists of strings and returns the list with the lower total character count. If the character counts are equal, it returns the first list.","function total_match(arr1, arr2) {
    return arr1.filter(element => arr2.map(e => e.toLowerCase()).includes(element.toLowerCase()));
}",1049,"[console.assert(JSON.stringify(total_match([""hi"", ""admin""], [""hi"", ""hi"", ""admin"", ""project""])) === JSON.stringify([""hi"", ""admin""]), ""Test 1 failed""),
console.assert(JSON.stringify(total_match([""4""], [""1"", ""2"", ""3"", ""4"", ""5""])) === JSON.stringify([""4""]), ""Test 4 failed"")]",
1049,This function determines if a given number (less than 100) is the product of exactly three prime numbers.,"
function is_multiply_prime(a) {
    function is_prime(n) {
        for (let j = 2; j < n; j++) {
            if (n % j === 0) {
                return false;
            }
        }
        return true;
    }

    for (let i = 2; i < 101; i++) {
        if (!is_prime(i)) continue;
        for (let j = 2; j < 101; j++) {
            if (!is_prime(j)) continue;
            for (let k = 2; k < 101; k++) {
                if (!is_prime(k)) continue;
                if (i * j * k === a) return true;
            }
        }
    }
    return false;
}",1050,"[console.assert(is_multiply_prime(5) === false), 
    console.assert(is_multiply_prime(30) === true), 
    console.assert(is_multiply_prime(8) === true),
     console.assert(is_multiply_prime(10) === false),
      console.assert(is_multiply_prime(125) === true),
       console.assert(is_multiply_prime(3 * 5 * 7) === true), console.assert(is_multiply_prime(3 * 6 * 7) === false), console.assert(is_multiply_prime(9 * 9 * 9) === false), console.assert(is_multiply_prime(11 * 9 * 9) === false), console.assert(is_multiply_prime(11 * 13 * 7) === true)]",
1050,"This function checks if a number 'x' is a simple power of another number 'n', meaning 'x' can be expressed as 'n' raised to an integer power.","
function isSimplePower(x, n) {
    if (n == 1) {
        return (x === 1);
    }
    let power = 1;
    while (power < x) {
        power *= n;
    }
    return (power === x);
}
",1051,"[
  console.assert(isSimplePower(16, 2) === true, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(143214, 16) === false, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(4, 2) === true, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(9, 3) === true, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(16, 4) === true, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(24, 2) === false, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(128, 4) === false, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(12, 6) === false, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSimplePower(1, 1) === true, ""This prints if this assert fails 2 (also good for debugging!)""),
  console.assert(isSimplePower(1, 12) === true, ""This prints if this assert fails 2 (also good for debugging!)"")
]",
1051,This function determines if a given integer is the cube of another integer.,"
function iscube(a) {
    a = Math.abs(a);
    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) === a;
}
",1052,"[
  console.assert(iscube(1) === true, ""First test error: "" + iscube(1)),
  console.assert(iscube(2) === false, ""Second test error: "" + iscube(2)),
  console.assert(iscube(-1) === true, ""Third test error: "" + iscube(-1)),
  console.assert(iscube(64) === true, ""Fourth test error: "" + iscube(64)),
  console.assert(iscube(180) === false, ""Fifth test error: "" + iscube(180)),
  console.assert(iscube(1000) === true, ""Sixth test error: "" + iscube(1000)),
  console.assert(iscube(0) === true, ""1st edge test error: "" + iscube(0)),
  console.assert(iscube(1729) === false, ""2nd edge test error: "" + iscube(1729))
]",
1052,"This function counts the number of hexadecimal digits (2, 3, 5, 7, B, D) that are prime numbers within a given hexadecimal string.","function hex_key(num) {
    const primes = ['2', '3', '5', '7', 'B', 'D'];  
    let total = 0;
    for (let i = 0; i < num.length; i++) {
        if (primes.includes(num[i])) {
            total += 1;
        }
    }
    return total;
}",1053,"
[console.assert(hex_key(""AB"") === 1, ""First test error: "" + hex_key(""AB"")),
console.assert(hex_key(""1077E"") === 2, ""Second test error: "" + hex_key(""1077E"")),
console.assert(hex_key(""ABED1A33"") === 4, ""Third test error: "" + hex_key(""ABED1A33"")),
console.assert(hex_key(""2020"") === 2, ""Fourth test error: "" + hex_key(""2020"")),
console.assert(hex_key(""123456789ABCDEF0"") === 6, ""Fifth test error: "" + hex_key(""123456789ABCDEF0"")),
console.assert(hex_key(""112233445566778899AABBCCDDEEFF00"") === 12, ""Sixth test error: "" + hex_key(""112233445566778899AABBCCDDEEFF00""))]",
1053,"This function converts a given decimal number into its binary representation. The resulting binary string is then enclosed within ""db"" characters at both the beginning and the end.","
function decimal_to_binary(decimal) {
  return ""db"" + decimal.toString(2) + ""db"";
}
",1054,"[
  console.assert(decimal_to_binary(0) === ""db0db""),
  console.assert(decimal_to_binary(32) === ""db100000db""),
  console.assert(decimal_to_binary(103) === ""db1100111db""),
  console.assert(decimal_to_binary(15) === ""db1111db"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")
]",
1054,"This function determines if a given string is ""happy,"" meaning it has a length of at least 3 and no three consecutive letters are the same.","
function isHappy(s) {
  if (s.length < 3) {
    return false;
  }

  for (let i = 0; i < s.length - 2; i++) {
    if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {
      return false;
    }
  }
  return true;
}
",1055," [
  console.assert(isHappy(""a"") === false, ""a""),
  console.assert(isHappy(""aa"") === false, ""aa""),
  console.assert(isHappy(""abcd"") === true, ""abcd""),
  console.assert(isHappy(""aabb"") === false, ""aabb""),
  console.assert(isHappy(""adb"") === true, ""adb""),
  console.assert(isHappy(""xyy"") === false, ""xyy""),
  console.assert(isHappy(""iopaxpoi"") === true, ""iopaxpoi""),
  console.assert(isHappy(""iopaxioi"") === false, ""iopaxioi"")
]",
1055,This function translates a list of GPAs into a corresponding list of letter grades based on a provided grading scale.,"
function numericalLetterGrade(grades) {
    let letterGrade = [];
    for (let gpa of grades) {
        if (gpa === 4.0) {
            letterGrade.push(""A+"");
        } else if (gpa > 3.7) {
            letterGrade.push(""A"");
        } else if (gpa > 3.3) {
            letterGrade.push(""A-"");
        } else if (gpa > 3.0) {
            letterGrade.push(""B+"");
        } else if (gpa > 2.7) {
            letterGrade.push(""B"");
        } else if (gpa > 2.3) {
            letterGrade.push(""B-"");
        } else if (gpa > 2.0) {
            letterGrade.push(""C+"");
        } else if (gpa > 1.7) {
            letterGrade.push(""C"");
        } else if (gpa > 1.3) {
            letterGrade.push(""C-"");
        } else if (gpa > 1.0) {
            letterGrade.push(""D+"");
        } else if (gpa > 0.7) {
            letterGrade.push(""D"");
        } else if (gpa > 0.0) {
            letterGrade.push(""D-"");
        } else {
            letterGrade.push(""E"");
        }
    }
    return letterGrade;
}
",1056,"[
  console.assert(JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) === JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])),
  console.assert(JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])),
  console.assert(JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])),
  console.assert(JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])),
  console.assert(JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) === JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])),
  console.assert(JSON.stringify(numericalLetterGrade([0, 0.7])) === JSON.stringify(['E', 'D-']))
]",
1056,This function determines if the length of a given string is a prime number.,"
function primeLength(string) {
    let l = string.length;
    if (l === 0 || l === 1) {
        return false;
    }
    for (let i = 2; i < l; i++) {
        if (l % i === 0) {
            return false;
        }
    }
    return true;
}
",1057," [
    console.assert(primeLength('Hello') === true),
    console.assert(primeLength('abcdcba') === true),
    console.assert(primeLength('kittens') === true),
    console.assert(primeLength('orange') === false),
    console.assert(primeLength('wow') === true),
    console.assert(primeLength('world') === true),
    console.assert(primeLength('Madam') === true),
    console.assert(primeLength('Wow') === true),
    console.assert(primeLength('') === false),
    console.assert(primeLength('HI') === true),
    console.assert(primeLength('go') === true),
    console.assert(primeLength('gogo') === false),
    console.assert(primeLength('aaaaaaaaaaaaaaa') === false),
    console.assert(primeLength('Madam') === true),
    console.assert(primeLength('M') === false),
    console.assert(primeLength('0') === false)
]",
1057,This function calculates the count of n-digit positive integers that start or end with 1.,"
function starts_one_ends(n) {
    if (n === 1) return 1;
    return 18 * (10 ** (n - 2));
}
",1058,"[
    console.assert(starts_one_ends(1) === 1), 
    console.assert(starts_one_ends(2) === 18), 
    console.assert(starts_one_ends(3) === 180),
    console.assert(starts_one_ends(4) === 1800), 
    console.assert(starts_one_ends(5) === 18000)]",
1058,"This function calculates the sum of the digits of a given positive integer N (within the range 0 to 10000), then converts this sum into its binary representation, and returns the binary string as the output.","function prime_length(N) {
    return N.length > 1 && ![...Array(Math.floor(Math.sqrt(N.length)) + 1).keys()].slice(2).some(i => N.length % i === 0);
}",1059,"
[
    console.assert(prime_length(""Hello"") === true),
    console.assert(prime_length(""abcdcba"") === true),
    console.assert(prime_length(""kittens"") === true),
    console.assert(prime_length(""orange"") === false),
    console.assert(prime_length(""wow"") === true),
    console.assert(prime_length(""world"") === true),
    console.assert(prime_length(""Madam"") === true),
    console.assert(prime_length(""Wow"") === true),
    console.assert(prime_length("""") === false),
    console.assert(prime_length(""HI"") === true),
    console.assert(prime_length(""go"") === true),
    console.assert(prime_length(""gogo"") === false),
    console.assert(prime_length(""aaaaaaaaaaaaaaa"") === false),
    console.assert(prime_length(""Madam"") === true),
    console.assert(prime_length(""M"") === false),
    console.assert(prime_length(""0"") === false)
]",
1059,This function adds the even elements that are at odd indices in a given list.,"
function add(lst) {
    return lst.filter((value, index) => index % 2 === 1 && value % 2 === 0).reduce((a, b) => a + b, 0);
}
",1060,"
[console.assert(add([4, 88]) === 88), console.assert(add([4, 5, 6, 7, 2, 122]) === 122), console.assert(add([4, 0, 6, 7]) === 0), console.assert(add([4, 4, 6, 8]) === 12)]
",
1060,This function rearranges each word in a given string into alphabetical order while preserving the original word order and spacing in the sentence.,"function anti_shuffle(s) {
    return s.split(' ').map(i => i.split('').sort().join('')).join(' ');
  }
",1061,"  [
    console.assert(anti_shuffle('Hi') === 'Hi'),
    console.assert(anti_shuffle('hello') === 'ehllo'),
    console.assert(anti_shuffle('number') === 'bemnru'),
    console.assert(anti_shuffle('abcd') === 'abcd'),
    console.assert(anti_shuffle('Hello World!!!') === 'Hello !!!Wdlor'),
    console.assert(anti_shuffle('') === ''),
    console.assert(anti_shuffle('Hi. My name is Mister Robot. How are you?') === '.Hi My aemn is Meirst .Rboot How aer ?ouy'),
    console.assert(true) 
]",
1061,"This function finds all occurrences of an integer `x` within a nested list representing a 2D array with variable row lengths, returns their coordinates as a list of tuples sorted by row in ascending order and by column within each row in descending order.","function getRow(lst, x) {
    const coords = [];
    for (let i = 0; i < lst.length; i++) {
        for (let j = 0; j < lst[i].length; j++) {
            if (lst[i][j] === x) {
                coords.push([i, j]);
            }
        }
    }
    return coords.sort((a, b) => a[0] - b[0]).sort((a, b) => a[1] - b[1]);
}",1062,"[console.assert(JSON.stringify(getRow([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]], 2)) === JSON.stringify([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]), ""Test 2 Failed""),
console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]), ""Test 4 Failed""),
console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]), ""Test 5 Failed""),
console.assert(JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([[2, 2]]), ""Test 6 Failed"")]",
1062,"This function creates a sorted copy of an array of non-negative integers, sorting in ascending order if the sum of the first and last elements is odd, and in descending order otherwise.","
function sortArray(array) {
    return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);
}
",1063,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), console.assert(sortArray([]).toString() === [].toString(), ""Error""), console.assert(sortArray([5]).toString() === [5].toString(), ""Error""), console.assert(sortArray([2, 4, 3, 0, 1, 5]).toString() === [0, 1, 2, 3, 4, 5].toString(), ""Error""), console.assert(sortArray([2, 4, 3, 0, 1, 5, 6]).toString() === [6, 5, 4, 3, 2, 1, 0].toString(), ""Error""), console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""), console.assert(sortArray([2, 1]).toString() === [1, 2].toString(), ""Error""), console.assert(sortArray([15, 42, 87, 32 ,11, 0]).toString() === [0, 11, 15, 32, 42, 87].toString(), ""Error""), console.assert(sortArray([21, 14, 23, 11]).toString() === [23, 21, 14, 11].toString(), ""Error"")]
",
1063,This function encrypts a string by shifting each letter down by four places in the alphabet.,"function encrypt(s) {
    const alphabet = ""abcdefghijklmnopqrstuvwxyz"";
    let encrypted = """"; 
  
    for (let char of s) {
      if (alphabet.includes(char)) {
        const index = alphabet.indexOf(char);
        const shiftedIndex = (index + 4) % 26; 
        encrypted += alphabet[shiftedIndex];
      } else {
        encrypted += char; 
      }
    }
  
    return encrypted;
  }",1064,"[
  console.assert(encrypt(""hi"") === ""lm"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(encrypt(""asdfghjkl"") === ""ewhjklnop"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(encrypt(""gf"") === ""kj"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(encrypt(""et"") === ""ix"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(encrypt(""faewfawefaewg"") === ""jeiajeaijeiak"", ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(encrypt(""hellomyfriend"") === ""lippsqcjvmirh"", ""This prints if this assert fails 2 (good for debugging!)""),
  console.assert(encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"") === ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"", ""This prints if this assert fails 3 (good for debugging!)""),
  console.assert(encrypt(""a"") === ""e"", ""This prints if this assert fails 2 (also good for debugging!)"")
]",
1064,"This function is designed to return the second smallest element in a list of integers, or `None` if no such element exists.","function nextSmallest(lst) {
    lst = Array.from(new Set(lst)).sort((a, b) => a - b);
    return lst.length < 2 ? null : lst[1];
}",1065,"[console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2), 
console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2), 
console.assert(nextSmallest([]) === null), 
console.assert(nextSmallest([1, 1]) === null),
 console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1), 
 console.assert(nextSmallest([1, Math.pow(0, 0)]) === null), 
 console.assert(nextSmallest([-35, 34, 12, -45]) === -35)]",
1065,"This function is designed to count the number of sentences in a string that start with the word ""I,"" where sentences are delimited by `.`, `?`, or `!`.","function isBored(S) {
    const sentences = S.split(/[.?!]\s*/);
    return sentences.reduce((count, sentence) => count + (sentence.startsWith(""I"") ? 1 : 0), 0);
}",1066,"[console.assert(isBored(""Hello world"") === 0, ""Test 1""),
console.assert(isBored(""I love It !"") === 1, ""Test 3""),
console.assert(isBored(""bIt"") === 0, ""Test 4""),
console.assert(isBored(""I feel good today. I will be productive. will kill It"") === 2, ""Test 5""),
console.assert(isBored(""You and I are going for a walk"") === 0, ""Test 6""),
console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")]",
1066,"This function checks if one of the three input numbers is equal to the sum of the other two and if all numbers are integers, returning `True` if both conditions are met, otherwise `False`.","
function anyInt(x, y, z) {
    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {
        if ((x + y === z) || (x + z === y) || (y + z === x)) {
            return true;
        }
        return false;
    }
    return false;
}
",1067,"[
    console.assert(anyInt(2, 3, 1) === true, ""This prints if this assert fails 1 (good for debugging!)""),
    console.assert(anyInt(2.5, 2, 3) === false, ""This prints if this assert fails 2 (good for debugging!)""),
    console.assert(anyInt(1.5, 5, 3.5) === false, ""This prints if this assert fails 3 (good for debugging!)""),
    console.assert(anyInt(2, 6, 2) === false, ""This prints if this assert fails 4 (good for debugging!)""),
    console.assert(anyInt(4, 2, 2) === true, ""This prints if this assert fails 5 (good for debugging!)""),
    console.assert(anyInt(2.2, 2.2, 2.2) === false, ""This prints if this assert fails 6 (good for debugging!)""),
    console.assert(anyInt(-4, 6, 2) === true, ""This prints if this assert fails 7 (good for debugging!)""),
    console.assert(anyInt(2, 1, 1) === true, ""This prints if this assert fails 8 (also good for debugging!)""),
    console.assert(anyInt(3, 4, 7) === true, ""This prints if this assert fails 9 (also good for debugging!)"")
]",
1067,This function encodes a given message by swapping the case of all letters and replacing each vowel with the letter two places ahead in the alphabet.,"function encode(message) {
    const vowels = ""aeiouAEIOU"";
    const vowelsReplace = {};
    
    for (let i of vowels) {
        vowelsReplace[i] = String.fromCharCode(i.charCodeAt(0) + 2);
    }

    return message
        .split('')
        .map(char => {
            let newChar = char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();
            return vowelsReplace[newChar] || newChar;
        })
        .join('');
}",1068,"[console.assert(encode(""TEST"") === ""tgst"", ""Test 1 failed""),
console.assert(encode(""Mudasir"") === ""mWDCSKR"", ""Test 2 failed""),
console.assert(encode(""YES"") === ""ygs"", ""Test 3 failed""),
console.assert(encode(""This is a message"") === ""tHKS KS C MGSSCGG"", ""Test 4 failed""),
console.assert(encode(""I DoNt KnOw WhAt tO WrItE"") === ""k dQnT kNqW wHcT Tq wRkTg"", ""Test 5 failed"")]",
1068,This function identifies the largest prime number in a list of integers and returns the sum of its digits.,"function skjkasdkd(lst) {
    let maxx = 0;

    for (let i = 0; i < lst.length; i++) {
        if (lst[i] > 1 && lst[i] === Math.floor(lst[i]) && Array.from({ length: lst[i] - 2 }).every((_, j) => lst[i] % (j + 2) !== 0)) {
            maxx = Math.max(maxx, lst[i]);
        }
    }

    if (maxx === 0) return 0;

    return String(maxx)
        .split('')
        .reduce((sum, digit) => sum + parseInt(digit, 10), 0);
}",1069,"// Test cases
[
    console.assert(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) === 10, ""Test 1 failed!""),
    console.assert(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) === 25, ""Test 2 failed!""),
    console.assert(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) === 13, ""Test 3 failed!""),
    console.assert(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) === 11, ""Test 4 failed!""),
    console.assert(skjkasdkd([0,81,12,3,1,21]) === 3, ""Test 5 failed!""),
    console.assert(skjkasdkd([0,8,1,2,1,7]) === 7, ""Test 6 failed!""),
    console.assert(skjkasdkd([8191]) === 19, ""Test 7 failed!""),
    console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19, ""Test 8 failed!""),
    console.assert(skjkasdkd([127, 97, 8192]) === 10, ""Test 9 failed!"")
]",
1069,"This function checks if all keys in a dictionary are non-empty strings in either all lowercase or all uppercase, returning `True` if so, and `False` otherwise.","
function checkDictCase(dict) {
    if (Object.keys(dict).length === 0) {
        return false;
    } else {
        let state = ""start"";
        for (let key of Object.keys(dict)) {
            if (typeof key !== ""string"") {
                state = ""mixed"";
                break;
            }
            if (state === ""start"") {
                if (key === key.toUpperCase()) {
                    state = ""upper"";
                } else if (key === key.toLowerCase()) {
                    state = ""lower"";
                } else {
                    break;
                }
            } else if ((state === ""upper"" && key !== key.toUpperCase()) || 
                       (state === ""lower"" && key !== key.toLowerCase())) {
                state = ""mixed"";
                break;
            } else {
                break;
            }
        }
        return state === ""upper"" || state === ""lower"";
    }
}
",1070,"[
    console.assert(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) === 10, ""Test 1 failed!""),
    console.assert(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) === 25, ""Test 2 failed!""),
    console.assert(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) === 13, ""Test 3 failed!""),
    console.assert(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) === 11, ""Test 4 failed!""),
    console.assert(skjkasdkd([0,81,12,3,1,21]) === 3, ""Test 5 failed!""),
    console.assert(skjkasdkd([0,8,1,2,1,7]) === 7, ""Test 6 failed!""),
    console.assert(skjkasdkd([8191]) === 19, ""Test 7 failed!""),
    console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19, ""Test 8 failed!""),
    console.assert(skjkasdkd([127, 97, 8192]) === 10, ""Test 9 failed!"")
]",
1071,This function calculates the product of the unit digits of two integers and returns the result.,"
function multiply(a, b) {
    return Math.abs(a % 10) * Math.abs(b % 10);
}
",1072,"[
  console.assert(multiply(148, 412) === 16, ""First test error: "" + String(multiply(148, 412))),
  console.assert(multiply(19, 28) === 72, ""Second test error: "" + String(multiply(19, 28))),
  console.assert(multiply(2020, 1851) === 0, ""Third test error: "" + String(multiply(2020, 1851))),
  console.assert(multiply(14, -15) === 20, ""Fourth test error: "" + String(multiply(14, -15))),
  console.assert(multiply(76, 67) === 42, ""Fifth test error: "" + String(multiply(76, 67))),
  console.assert(multiply(17, 27) === 49, ""Sixth test error: "" + String(multiply(17, 27))),
  console.assert(multiply(0, 1) === 0, ""1st edge test error: "" + String(multiply(0, 1))),
  console.assert(multiply(0, 0) === 0, ""2nd edge test error: "" + String(multiply(0, 0)))
]",
1072,This function counts the number of uppercase vowels found at even indices in a given string.,"
function countUpper(s) {
    let count = 0;
    for (let i = 0; i < s.length; i += 2) {
        if (""AEIOU"".includes(s[i])) {
            count += 1;
        }
    }
    return count;
}
",1073,"[
    console.assert(countUpper(""aBCdEf"") == 1),
    console.assert(countUpper(""abcdefg"") == 0),
    console.assert(countUpper(""dBBE"") == 0),
    console.assert(countUpper(""B"") == 0),
    console.assert(countUpper(""U"") == 1),
    console.assert(countUpper("""") == 0),
    console.assert(countUpper(""EEEE"") == 2),
    console.assert(countUpper(""AEIOU"") == 3)
]",
1073,"This function takes a string representing a number and returns the closest integer, rounding away from zero if the number is equidistant from two integers.","
function closestInteger(value) {
    if ((value.match(/\./g) || []).length === 1) {
        // remove trailing zeros
        while (value[value.length - 1] === 0) {
            value = value.slice(0, -1);
        }
    }

    let num = parseFloat(value);
    let res;

    if (value.slice(-2) === .5) {
        if (num > 0) {
            res = Math.ceil(num);
        } else {
            res = Math.floor(num);
        }
    } else if (value.length > 0) {
        res = Math.round(num);
    } else {
        res = 0;
    }

    return res;
}
",1074,"[console.assert(closestInteger(""10"") === 10, ""Test 1""),
     console.assert(closestInteger(""14.5"") === 15, ""Test 2""),
      console.assert(closestInteger(""15.3"") === 15, ""Test 4""), console.assert(closestInteger(""0"") === 0, ""Test 0"")]",
1074,"This function generates a list representing the number of stones in each level of a pile, where the number of stones increases based on whether the current level number is odd or even.","
function make_a_pile(n) {
    return Array.from({ length: n }, (_, i) => n + 2 * i);
}",1075,"[console.assert(JSON.stringify(make_a_pile(3)) === JSON.stringify([3, 5, 7]), ""Test 3""),
console.assert(JSON.stringify(make_a_pile(4)) === JSON.stringify([4, 6, 8, 10]), ""Test 4""),
console.assert(JSON.stringify(make_a_pile(5)) === JSON.stringify([5, 7, 9, 11, 13])),
console.assert(JSON.stringify(make_a_pile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])),
  console.assert(JSON.stringify(make_a_pile(3)) === JSON.stringify([3, 5, 7]), ""Test 3""),
  console.assert(JSON.stringify(make_a_pile(4)) === JSON.stringify([4, 6, 8, 10]), ""Test 4""),
  console.assert(JSON.stringify(make_a_pile(5)) === JSON.stringify([5, 7, 9, 11, 13])),
  console.assert(JSON.stringify(make_a_pile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])),
  console.assert(JSON.stringify(make_a_pile(8)) === JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22]))]",
1075,This function splits a string of words separated by commas or spaces into a list of individual words.,"function wordsString(s) {
    if (!s) {
        return [];
    }

    let sList = [];
    let word = '';

    for (let letter of s) {
        if (letter === ',' || letter === ' ') {
            if (word) {
                sList.push(word);
                word = '';
            }
        } else {
            word += letter;
        }
    }
    
    if (word) {
        sList.push(word);
    }

    return sList;
}",1076,"[
    console.assert(JSON.stringify(wordsString(""Hi, my name is John"")) === JSON.stringify([""Hi"", ""my"", ""name"", ""is"", ""John""])),
    console.assert(JSON.stringify(wordsString(""One, two, three, four, five, six"")) === JSON.stringify([""One"", ""two"", ""three"", ""four"", ""five"", ""six""])),
    console.assert(JSON.stringify(wordsString(""Hi, my name"")) === JSON.stringify([""Hi"", ""my"", ""name""])),
    console.assert(JSON.stringify(wordsString(""One,, two, three, four, five, six,"")) === JSON.stringify([""One"", ""two"", ""three"", ""four"", ""five"", ""six""])),
    console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""),
    console.assert(JSON.stringify(wordsString("""")) === JSON.stringify([])),
    console.assert(JSON.stringify(wordsString(""ahmed     , gamal"")) === JSON.stringify([""ahmed"", ""gamal""]))
]",
1076,"This function returns the largest even integer within the range [x, y], inclusive. If no even number exists in the range, it returns -1.","
function chooseNum(x, y) {
    if (x > y) {
        return -1;
    }
    if (y % 2 === 0) {
        return y;
    }
    if (x === y) {
        return -1;
    }
    return y - 1;
}
",1077,"
[console.assert(chooseNum(12, 15) === 14), console.assert(chooseNum(13, 12) === -1), console.assert(chooseNum(33, 12354) === 12354), console.assert(chooseNum(5234, 5233) === -1), console.assert(chooseNum(6, 29) === 28), console.assert(chooseNum(27, 10) === -1), console.assert(chooseNum(7, 7) === -1), console.assert(chooseNum(546, 546) === 546)]
",
1077,"This function calculates the average of integers from `n` to `m`, rounds it to the nearest integer, and then returns the result as a binary string. If `n` is greater than `m`, it returns -1.","function roundedAvg(n, m) {
    if (m < n) {
        return -1;
    }
    let summation = 0;
    for (let i = n; i <= m; i++) {
        summation += i;
    }
    let avg = summation / (m - n + 1);
    return '0b' + Math.round(avg).toString(2);
}",1078,"[
    console.assert(roundedAvg(1, 5) === ""0b11""),
    console.assert(roundedAvg(7, 13) === ""0b1010""),
    console.assert(roundedAvg(560, 851) === ""0b1011000010""),
    console.assert(roundedAvg(185, 546) === ""0b101101110""),
    console.assert(roundedAvg(362, 496) === ""0b110101101""),
    console.assert(roundedAvg(350, 902) === ""0b1001110010""),
    console.assert(roundedAvg(197, 233) === ""0b11010111""),
    console.assert(roundedAvg(7, 5) === -1),
    console.assert(roundedAvg(5, 1) === -1),
    console.assert(roundedAvg(5, 5) === ""0b101"")
]",
1078,This function returns a sorted list of elements from the input list that do not contain any even digits.,"function uniqueDigits(x) {
    let oddDigitElements = [];
    for (let i of x) {
        if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {
            oddDigitElements.push(i);
        }
    }
    return oddDigitElements.sort((a, b) => a - b);
}",1079,"[
    console.assert(uniqueDigits([15, 33, 1422, 1]).toString() === [1, 15, 33].toString()),
    console.assert(uniqueDigits([152, 323, 1422, 10]).toString() === [].toString()),
    console.assert(uniqueDigits([12345, 2033, 111, 151]).toString() === [111, 151].toString()),
    console.assert(uniqueDigits([135, 103, 31]).toString() === [31, 135].toString()),
    console.assert(true)
  ]",
1079,"This function sorts the integers between 1 and 9 in the array, reverses the resulting list, and then converts each number into its corresponding word name (""One"", ""Two"", etc.). Any non-relevant integers are ignored, and the function returns an empty list if the array is empty.","function byLength(arr) {
    const dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    };

    const sortedArr = arr.filter(num => dic[num]).sort((a, b) => b - a);
    const newArr = sortedArr.map(num => dic[num]);

    return newArr;
}",1080,"[
    console.assert(byLength([]).toString() === [].toString(), ""Error""),
    console.assert(byLength([1, -1, 55]).toString() === [""One""].toString(), ""Error""),
    console.assert(byLength([1, -1, 3, 2]).toString() === [""Three"", ""Two"", ""One""].toString(), ""Error""),
    console.assert(byLength([9, 4, 8]).toString() === [""Nine"", ""Eight"", ""Four""].toString(), ""Error"")
]",
1080,"This function generates a list of size `n`, where the element at index `i` is the factorial of `i` if `i` is even, or the sum of numbers from 1 to `i` if `i` is odd. The list starts from index 1.","
function f(n) {
    let ret = [];
    for (let i = 1; i <= n; i++) {
        let x;
        if (i % 2 === 0) {
            x = 1;
            for (let j = 1; j <= i; j++) x *= j;
            ret.push(x);
        } else {
            x = 0;
            for (let j = 1; j <= i; j++) x += j;
            ret.push(x);
        }
    }
    return ret;
}
",1081,"
[console.assert(f(5).toString() === [1, 2, 6, 24, 15].toString()), console.assert(f(7).toString() === [1, 2, 6, 24, 15, 720, 28].toString()), console.assert(f(1).toString() === [1].toString()), console.assert(f(3).toString() === [1, 2, 6].toString())]
",
1081,"This function takes a positive integer `n` and returns a tuple containing the count of even and odd integer palindromes within the range 1 to `n`, inclusive. A palindrome is a number that reads the same backward as forward.","function evenOddPalindrome(n) {
    let evenPalindromeCount = 0;
    let oddPalindromeCount = 0;

    for (let i = 1; i <= n; i++) {
        if (i.toString() === i.toString().split('').reverse().join('')) {
            if (i % 2 === 0) {
                evenPalindromeCount++;
            } else {
                oddPalindromeCount++;
            }
        }
    }

    return [evenPalindromeCount, oddPalindromeCount];
}",1082,"[
    console.assert(JSON.stringify(evenOddPalindrome(123)) === JSON.stringify([8, 13])),
    console.assert(JSON.stringify(evenOddPalindrome(12)) === JSON.stringify([4, 6])),
    console.assert(JSON.stringify(evenOddPalindrome(3)) === JSON.stringify([1, 2])),
    console.assert(JSON.stringify(evenOddPalindrome(63)) === JSON.stringify([6, 8])),
    console.assert(JSON.stringify(evenOddPalindrome(25)) === JSON.stringify([5, 6])),
    console.assert(JSON.stringify(evenOddPalindrome(19)) === JSON.stringify([4, 6])),
    console.assert(JSON.stringify(evenOddPalindrome(9)) === JSON.stringify([4, 5])),
    console.assert(JSON.stringify(evenOddPalindrome(1)) === JSON.stringify([0, 1]))
]",
1082,"This function counts the number of integers in an array whose sum of digits is greater than 0. For negative numbers, the first signed digit is considered negative, and the sum of digits is calculated accordingly.","function countNums(arr) {
    return arr
        .map(n => {
            let neg = 1;
            if (n < 0) {
                n = -1 * n;
                neg = -1;
            }
            let digits = Array.from(String(n), Number);
            digits[0] *= neg;
            return digits.reduce((acc, curr) => acc + curr, 0);
        })
        .filter(sum => sum > 0).length;
}",1083,"[console.assert(countNums([]) === 0, ""Test case 1 failed!""),
console.assert(countNums([-1, -2, 0]) === 0, ""Test case 2 failed!""),
console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6, ""Test case 3 failed!""),
console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5, ""Test case 4 failed!""),
console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4, ""Test case 5 failed!""),
console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5, ""Test case 6 failed!""),
console.assert(countNums([-0, Math.pow(1, 0)]) === 1, ""Test case 7 failed!""),
console.assert(countNums([1]) === 1, ""Test case 8 failed!"")]",
1083,"this function to determine if a given array can be sorted in non-decreasing order by performing any number of right shift operations.
","
function moveOneBall(arr) {
    if (arr.length === 0) {
        return true;
    }
    let sortedArray = arr.slice().sort((a, b) => a - b);
    let myArr = [];
    
    let minValue = Math.min(...arr);
    let minIndex = arr.indexOf(minValue);
    myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));
    
    for (let i = 0; i < arr.length; i++) {
        if (myArr[i] !== sortedArray[i]) {
            return false;
        }
    }
    return true;
}
",1084,"
[console.assert(moveOneBall([3, 4, 5, 1, 2]) === true, ""This prints if this assert fails 1 (good for debugging!)""), 
 console.assert(moveOneBall([3, 5, 10, 1, 2]) === true), 
 console.assert(moveOneBall([4, 3, 1, 2]) === false), 
 console.assert(moveOneBall([3, 5, 4, 1, 2]) === false, ""This prints if this assert fails 2 (also good for debugging!)""), 
 console.assert(moveOneBall([]) === true)]
",
1084,This function determines if it's possible to exchange elements between two lists to make all elements of the first list even.,"
function exchange(lst1, lst2) {
    let odd = 0;
    let even = 0;
    for (let i of lst1) {
        if (i % 2 === 1) {
            odd++;
        }
    }
    for (let i of lst2) {
        if (i % 2 === 0) {
            even++;
        }
    }
    if (even >= odd) {
        return ""YES"";
    }
    return ""NO"";
}
",1085,"
[console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === ""YES""), console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === ""NO""), console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === ""YES""), console.assert(exchange([5, 7, 3], [2, 6, 4]) === ""YES""), console.assert(exchange([5, 7, 3], [2, 6, 3]) === ""NO""), console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === ""NO""), console.assert(exchange([100, 200], [200, 200]) === ""YES"")]
",
1085,"This function returns a dictionary of the most frequent letters in a string, with their corresponding counts.","function histogram(test) {
    
    if (!Array.isArray(test)) {
        throw new TypeError(""Input must be an array"");
    }

    let dict1 = {};
    let freqMap = {};
    let maxFreq = 0;

    for (let word of test) {
        freqMap[word] = (freqMap[word] || 0) + 1;
        maxFreq = Math.max(maxFreq, freqMap[word]);
    }

    for (let [word, count] of Object.entries(freqMap)) {
        dict1[word] = count;
    }

    return dict1;

}",1086," [
  console.assert(JSON.stringify(histogram(['a', 'b', 'b', 'a'])) === JSON.stringify({a: 2, b: 2}), ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(JSON.stringify(histogram(['a', 'b', 'c', 'a', 'b'])) === JSON.stringify({a: 2, b: 2, c: 1}), ""This prints if this assert fails 2 (good for debugging!)""),
  console.assert(JSON.stringify(histogram(['a', 'b', 'c', 'd', 'g'])) === JSON.stringify({a: 1, b: 1, c: 1, d: 1, g: 1}), ""This prints if this assert fails 3 (good for debugging!)""),
  console.assert(JSON.stringify(histogram(['r', 't', 'g'])) === JSON.stringify({r: 1, t: 1, g: 1}), ""This prints if this assert fails 4 (good for debugging!)""),
  console.assert(JSON.stringify(histogram(['b', 'b', 'b', 'b', 'a'])) === JSON.stringify({b: 4, a: 1}), ""This prints if this assert fails 5 (good for debugging!)""),
  console.assert(JSON.stringify(histogram(['r', 't', 'g'])) === JSON.stringify({r: 1, t: 1, g: 1}), ""This prints if this assert fails 6 (good for debugging!)""),
  console.assert(JSON.stringify(histogram([])) === JSON.stringify({}), ""This prints if this assert fails 7 (also good for debugging!)""),
  console.assert(JSON.stringify(histogram(['a'])) === JSON.stringify({a: 1}), ""This prints if this assert fails 8 (also good for debugging!)"")
]",
1086,"This function removes characters from string `s` that are present in string `c`, then checks if the resulting string is a palindrome, returning the modified string and the palindrome check result as a tuple.","function reverseDelete(s, c) {
    
    s = [...s].filter(char => !c.includes(char)).join('');
    
    return [s, s === [...s].reverse().join('')];
}",1087,"[
    console.assert(JSON.stringify(reverseDelete(""abcde"", ""ae"")) === JSON.stringify([""bcd"", false]), ""Test 1 failed""),
    console.assert(JSON.stringify(reverseDelete(""abcdef"", ""b"")) === JSON.stringify([""acdef"", false]), ""Test 2 failed""),
    console.assert(JSON.stringify(reverseDelete(""abcdedcba"", ""ab"")) === JSON.stringify([""cdedc"", true]), ""Test 3 failed""),
    console.assert(JSON.stringify(reverseDelete(""dwik"", ""w"")) === JSON.stringify([""dik"", false]), ""Test 4 failed""),
    console.assert(JSON.stringify(reverseDelete(""a"", ""a"")) === JSON.stringify(["""", true]), ""Test 5 failed""),
    console.assert(JSON.stringify(reverseDelete(""abcdedcba"", """")) === JSON.stringify([""abcdedcba"", true]), ""Test 6 failed""),
    console.assert(JSON.stringify(reverseDelete(""abcdedcba"", ""v"")) === JSON.stringify([""abcdedcba"", true]), ""Test 7 failed""),
    console.assert(JSON.stringify(reverseDelete(""vabba"", ""v"")) === JSON.stringify([""abba"", true]), ""Test 8 failed""),
    console.assert(JSON.stringify(reverseDelete(""mamma"", ""mia"")) === JSON.stringify(["""", true]), ""Test 9 failed"")
]",
1087,This function takes a list of strings containing only digits and returns a list where each string is replaced by a sentence stating the number of odd digits in the corresponding input string.,"function oddCount(lst) {
    const res = [];
    for (const arr of lst) {
        const str = arr.toString(); 
        const n = [...str].reduce((acc, d) => acc + (parseInt(d) % 2 === 1 ? 1 : 0), 0); 
        res.push(`The number of odd elements ${n} in the string ""${str}"".`); 
    }
    return res;
}",1088,"[
    console.assert(
        JSON.stringify(oddCount([1234567])) === JSON.stringify([""The number of odd elements 4 in the string \""1234567\"".""]),
        ""Test 1""
    ),
    console.assert(
        JSON.stringify(oddCount([3, ""11111111""])) === JSON.stringify([
            ""The number of odd elements 1 in the string \""3\""."",
            ""The number of odd elements 8 in the string \""11111111\"".""
        ]),
        ""Test 2""
    ),
    console.assert(
        JSON.stringify(oddCount([271, 137, 314])) === JSON.stringify([
            ""The number of odd elements 2 in the string \""271\""."",
            ""The number of odd elements 3 in the string \""137\""."",
            ""The number of odd elements 2 in the string \""314\"".""
        ]),
        ""Test 3""
    ),
    console.assert(true, ""This prints if this assert fails (also good for debugging!)"")
]",
1088,This function finds the minimum sum of any non-empty sub-array from a given array of integers.,"
function minSubArraySum(nums) {
    let max_sum = 0;
    let s = 0;
    for (let num of nums) {
        s += -num;
        if (s < 0) {
            s = 0;
        }
        max_sum = Math.max(s, max_sum);
    }
    if (max_sum === 0) {
        max_sum = Math.max(...nums.map(i => -i));
    }
    let min_sum = -max_sum;
    return min_sum;
}
",1089,"
[
  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(minSubArraySum([-1, -2, -3]) === -6),
  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14),
  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999),
  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0),
  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6),
  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6),
  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3),
  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33),
  console.assert(minSubArraySum([-10]) === -10, ""This prints if this assert fails 2 (also good for debugging!)""),
  console.assert(minSubArraySum([7]) === 7),
  console.assert(minSubArraySum([1, -1]) === -1)
]
",
1089,"This function calculates the minimum number of bucket pulls required to empty all wells in a grid, given the bucket capacity.","
function max_fill(grid, capacity) {
    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((sum, val) => sum + val, 0) / capacity), 0);
}
",1090,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), console.assert(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) === 6, ""Error""), console.assert(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) === 5, ""Error""), console.assert(max_fill([[0,0,0], [0,0,0]], 5) === 0, ""Error""), console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""), console.assert(max_fill([[1,1,1,1], [1,1,1,1]], 2) === 4, ""Error""), console.assert(max_fill([[1,1,1,1], [1,1,1,1]], 9) === 2, ""Error"")]
",
1090,"This function sorts an array of non-negative integers first by the number of ones in their binary representation in ascending order, and then by their decimal values for numbers with the same number of ones.","function sortArray(arr) {
    return arr.slice().sort((a, b) => {
        const countOnesA = a.toString(2).split(""1"").length - 1;
        const countOnesB = b.toString(2).split(""1"").length - 1;

       return countOnesA === countOnesB ? a - b : countOnesA - countOnesB;
    });
}",1091,"[
    console.assert(JSON.stringify(sortArray([1, 5, 2, 3, 4])) === JSON.stringify([1, 2, 4, 3, 5]), ""Test Case 1 Failed""),
    console.assert(JSON.stringify(sortArray([-2, -3, -4, -5, -6])) === JSON.stringify([-4, -2, -6, -5, -3]), ""Test Case 2 Failed""),
    console.assert(JSON.stringify(sortArray([1, 0, 2, 3, 4])) === JSON.stringify([0, 1, 2, 4, 3]), ""Test Case 3 Failed""),
    console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]), ""Test Case 4 Failed""),
    console.assert(JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) === JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]), ""Test Case 5 Failed""),
    console.assert(JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) === JSON.stringify([32, 3, 5, 6, 12, 44]), ""Test Case 6 Failed""),
    console.assert(JSON.stringify(sortArray([2, 4, 8, 16, 32])) === JSON.stringify([2, 4, 8, 16, 32]), ""Test Case 7 Failed"")
]",
1091,"This function takes a string `s` and a number `n`, returning a list of words from `s` that contain exactly `n` consonants, in the order they appear in the string. If the string is empty, it returns an empty list.","function selectWords(s, n) {
    let result = [];
    const vowels = [""a"", ""e"", ""i"", ""o"", ""u""];
    
    s.split("" "").forEach(word => {
        let nConsonants = 0;
        for (let i = 0; i < word.length; i++) {
            const char = word[i].toLowerCase();
            if (char >= 'a' && char <= 'z' && !vowels.includes(char)) {
                nConsonants++;
            }
        }
        if (nConsonants === n) {
            result.push(word);
        }
    });
    return result;
}",1092,"[
    console.assert(selectWords(""Mary had a little lamb"", 4).toString() === [""little""].toString(), ""First test error: "" + selectWords(""Mary had a little lamb"", 4).toString()),
    console.assert(selectWords(""Mary had a little lamb"", 3).toString() === [""Mary"", ""lamb""].toString(), ""Second test error: "" + selectWords(""Mary had a little lamb"", 3).toString()),
    console.assert(selectWords(""simple white space"", 2).toString() === [].toString(), ""Third test error: "" + selectWords(""simple white space"", 2).toString()),
    console.assert(selectWords(""Hello world"", 4).toString() === [""world""].toString(), ""Fourth test error: "" + selectWords(""Hello world"", 4).toString()),
    console.assert(selectWords(""Uncle sam"", 3).toString() === [""Uncle""].toString(), ""Fifth test error: "" + selectWords(""Uncle sam"", 3).toString()),
    console.assert(selectWords("""", 4).toString() === [].toString(), ""1st edge test error: "" + selectWords("""", 4).toString()),
    console.assert(selectWords(""a b c d e f"", 1).toString() === [""b"", ""c"", ""d"", ""f""].toString(), ""2nd edge test error: "" + selectWords(""a b c d e f"", 1).toString())
]",
1092,"This function takes a word and finds the closest vowel that stands between two consonants from the right side of the word (case sensitive). It returns the vowel if found, or an empty string if no such vowel exists.","
function getClosestVowel(word) {
    if (word.length < 3) {
        return """";
    }

    const vowels = new Set([""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""O"", ""U"", ""I""]);
    for (let i = word.length - 2; i > 0; i--) {
        if (vowels.has(word[i])) {
            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {
                return word[i];
            }
        }
    }
    return """";
}
",1093,"
[console.assert(getClosestVowel(""yogurt"") === ""u""), console.assert(getClosestVowel(""full"") === ""u""), console.assert(getClosestVowel(""easy"") === """"), console.assert(getClosestVowel(""eAsy"") === """"), console.assert(getClosestVowel(""ali"") === """"), console.assert(getClosestVowel(""bad"") === ""a""), console.assert(getClosestVowel(""most"") === ""o""), console.assert(getClosestVowel(""ab"") === """"), console.assert(getClosestVowel(""ba"") === """"), console.assert(getClosestVowel(""quick"") === """"), console.assert(getClosestVowel(""anime"") === ""i""), console.assert(getClosestVowel(""Asia"") === """"), console.assert(getClosestVowel(""Above"") === ""o""), console.assert(true)]
",
1093,this function checks if two strings of parentheses can be concatenated in any order to form a balanced string.,"function matchParens(lst) {
    let val = 0;
    for (let i of lst[0] + lst[1]) {
        if (i === '(') {
            val += 1;
        } else if (i === ')') {
            val -= 1;
        }
        if (val < 0) {
            return ""No"";
        }
    }
    return val === 0 ? ""Yes"" : ""No"";
}",1094,"[
    console.assert(matchParens([""()"", ""()""]) === ""Yes""),
    console.assert(matchParens(["")"", "")""]) === ""No""),
    console.assert(matchParens([""(())(())"", ""()()""]) === ""Yes""),
    console.assert(matchParens(["")()"", ""()()""]) === ""No""),
    console.assert(matchParens(["")()"", ""()()(""]) === ""No""),
    console.assert(matchParens([""()"", ""()""]) === ""Yes""),
    console.assert(matchParens([""(())"", ""(())()""]) === ""Yes""),
    console.assert(matchParens([""(("", ""(())""]) === ""No""),
    console.assert(matchParens(["")("", ""(()""]) === ""No""),
    console.assert(matchParens(["")"", "")""]) === ""No""),
    console.assert(matchParens(["")"", ""(""]) === ""No"")
    
  ]",
1094,"this function returns a sorted list of the k largest numbers from the given array arr.
","
function maximum(arr, k) {
    if (k === 0) {
        return [];
    }
    arr.sort((a, b) => a - b);
    const ans = arr.slice(-k);
    return ans;
}
",1095,"[
    console.assert(JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])),
    console.assert(JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])),
    console.assert(JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])),
    console.assert(JSON.stringify(maximum([123, -123, 20, 0 , 1, 2, -3], 3)) === JSON.stringify([2, 20, 123])),
    console.assert(JSON.stringify(maximum([-123, 20, 0 , 1, 2, -3], 4)) === JSON.stringify([0, 1, 2, 20])),
    console.assert(JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) === JSON.stringify([-13, -8, 0, 0, 3, 5, 15])),
    console.assert(JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])),
    console.assert(JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])),
    console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4])),
    console.assert(JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])),
    console.assert(JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) === JSON.stringify([]))
]",
1095,"this function returns the sum of all odd elements located at even positions in a non-empty list of integers.
","
function solution(lst) {
    return lst.reduce((acc, x, idx) => (idx % 2 === 0 && x % 2 === 1 ? acc + x : acc), 0);
}
",1096,"
[console.assert(solution([5, 8, 7, 1]) === 12), console.assert(solution([3, 3, 3, 3, 3]) === 9), console.assert(solution([30, 13, 24, 321]) === 0), console.assert(solution([5, 9]) === 5), console.assert(solution([2, 4, 8]) === 0), console.assert(solution([30, 13, 23, 32]) === 23), console.assert(solution([3, 13, 2, 9]) === 3)]
",
1096,This function returns the sum of elements with at most two digits from the first `k` elements of a non-empty array of integers.,"
function addElements(arr, k) {
    return arr.slice(0, k).reduce((sum, elem) => {
        return (String(elem).length <= 2) ? sum + elem : sum;
    }, 0);
}
",1097,"
[console.assert(addElements([1,-2,-3,41,57,76,87,88,99], 3) === -4), 
 console.assert(addElements([111,121,3,4000,5,6], 2) === 0), 
 console.assert(addElements([11,21,3,90,5,6,7,8,9], 4) === 125), 
 console.assert(addElements([111,21,3,4000,5,6,7,8,9], 4) === 24, ""This prints if this assert fails 1 (good for debugging!)""), 
 console.assert(addElements([1], 1) === 1, ""This prints if this assert fails 2 (also good for debugging!)"")]
",
1097,This function returns a sorted list of odd numbers from the Collatz sequence starting with a given positive integer `n`.,"
function getOddCollatz(n) {
    let oddCollatz = (n % 2 === 0) ? [] : [n];
    while (n > 1) {
        if (n % 2 === 0) {
            n = n / 2;
        } else {
            n = n * 3 + 1;
        }
        
        if (n % 2 === 1) {
            oddCollatz.push(Math.floor(n));
        }
    }
    return oddCollatz.sort((a, b) => a - b);
}
",1098,"[
  console.assert(JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])),
  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5])),
  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]), ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]), ""This prints if this assert fails 2 (also good for debugging!)"")
]",
1098,"This function validates a given date string by ensuring it follows the format mm-dd-yyyy and checks if the day, month, and year values are within valid ranges.","function validDate(date) {
    try {
        date = date.trim();
        const [month, day, year] = date.split(""-"").map(Number); 
        if (month < 1 || month > 12) {
            return false;
        }
        if ((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) && (day < 1 || day > 31)) {
            return false;
        }
        if ((month === 4 || month === 6 || month === 9 || month === 11) && (day < 1 || day > 30)) {
            return false;
        }
        if (month === 2 && (day < 1 || day > 29)) {
            return false;
        }
    } catch {
        return false;
    }

    return true;
}",1099,"[
    console.assert(validDate(""03-11-2000"") === true),
    console.assert(validDate(""15-01-2012"") === false),
    console.assert(validDate(""04-0-2040"") === false),
    console.assert(validDate(""06-04-2020"") === true),
    console.assert(validDate(""01-01-2007"") === true),
    console.assert(validDate(""03-32-2011"") === false),
    console.assert(validDate() === false),
    console.assert(validDate(""04-31-3000"") === false),
    console.assert(validDate(""06-06-2005"") === true),
    console.assert(validDate(""21-31-2000"") === false),
    console.assert(validDate(""04-12-2003"") === true),
    console.assert(validDate(""04122003"") === false),
    console.assert(validDate(""20030412"") === false),
    console.assert(validDate(""2003-04"") === false),
    console.assert(validDate(""2003-04-12"") === false),
    console.assert(validDate(""04-2003"") === false)
]",
1099,"This function splits a given string into words based on whitespace or commas and, if neither exists, counts the number of lowercase letters with odd order in the alphabet.","function splitWords(txt) {
    if (txt.includes("" "")) {
        return txt.split("" "");
    } else if (txt.includes("","")) {
        return txt.replace(/,/g, """").split("" "");  
    } else {
        return Array.from(txt).filter(i => i === i.toLowerCase() && i.charCodeAt(0) % 2 === 0).length;  // Correct logic
    }
}",1100,"[
    console.assert(splitWords(""abcdef"") === 3),
    console.assert(splitWords(""aaabb"") === 2),
    console.assert(splitWords(""aaaBb"") === 1),
    console.assert(splitWords("""") === 0)
]",
1100,"This function checks if a list of numbers is sorted in ascending order and contains no duplicates. If there are duplicates of the same number more than once, it returns `False`.","
function isSorted(lst) {
    let countDigit = {};
    for (let i of lst) {
        countDigit[i] = (countDigit[i] || 0) + 1;
    }
    if (Object.values(countDigit).some(count => count > 2)) {
        return false;
    }
    for (let i = 1; i < lst.length; i++) {
        if (lst[i - 1] > lst[i]) {
            return false;
        }
    }
    return true;
}
",1101,"[
  console.assert(isSorted([5]) === true),
  console.assert(isSorted([1, 2, 3, 4, 5]) === true),
  console.assert(isSorted([1, 3, 2, 4, 5]) === false),
  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true),
  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true),
  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(isSorted([]) === true, ""This prints if this assert fails 2 (good for debugging!)""),
  console.assert(isSorted([1]) === true, ""This prints if this assert fails 3 (good for debugging!)""),
  console.assert(isSorted([3, 2, 1]) === false, ""This prints if this assert fails 4 (good for debugging!)""),
  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false, ""This prints if this assert fails 5 (good for debugging!)""),
  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false, ""This prints if this assert fails 6 (good for debugging!)""),
  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true, ""This prints if this assert fails 7 (good for debugging!)""),
  console.assert(isSorted([1, 2, 3, 4]) === true, ""This prints if this assert fails 8 (good for debugging!)"")
]",
1101,"This function checks if the intersection of two given intervals has a prime length. It returns ""YES"" if the length of the intersection is a prime number, and ""NO"" if the length is not prime or the intervals do not intersect.","
function intersection(interval1, interval2) {
    function isPrime(num) {
        if (num === 1 || num === 0) {
            return false;
        }
        if (num === 2) {
            return true;
        }
        for (let i = 2; i < num; i++) {
            if (num % i === 0) {
                return false;
            }
        }
        return true;
    }

    const l = Math.max(interval1[0], interval2[0]);
    const r = Math.min(interval1[1], interval2[1]);
    const length = r - l;
    if (length > 0 && isPrime(length)) {
        return ""YES"";
    }
    return ""NO"";
}
",1102,"
[console.assert(intersection([1, 2], [2, 3]) === ""NO""), console.assert(intersection([-1, 1], [0, 4]) === ""NO""), console.assert(intersection([-3, -1], [-5, 5]) === ""YES""), console.assert(intersection([-2, 2], [-4, 0]) === ""YES""), console.assert(intersection([-11, 2], [-1, -1]) === ""NO""), console.assert(intersection([1, 2], [3, 5]) === ""NO""), console.assert(intersection([1, 2], [1, 2]) === ""NO""), console.assert(intersection([-2, -2], [-3, -2]) === ""NO"")]
",
1102,"This function calculates the sum of the magnitudes of integers in an array, each multiplied by the product of the signs (1, -1, or 0) of each number. If the array is empty, it returns `None`.","
function prod_signs(arr) {
    if (arr.length === 0) return null;
    let prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);
    return prod * arr.reduce((sum, i) => sum + Math.abs(i), 0);
}
",1103,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), 
 console.assert(prod_signs([1, 2, 2, -4]) === -9), 
 console.assert(prod_signs([0, 1]) === 0), 
 console.assert(prod_signs([1, 1, 1, 2, 3, -1, 1]) === -10), 
 console.assert(prod_signs([]) === null), 
 console.assert(prod_signs([2, 4, 1, 2, -1, -1, 9]) === 20), 
 console.assert(prod_signs([-1, 1, -1, 1]) === 4), 
 console.assert(prod_signs([-1, 1, 1, 1]) === -4), 
 console.assert(prod_signs([-1, 1, 1, 0]) === 0), 
 console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)"")
]
",
1103,"Find the lexicographically smallest path of length `k` in a grid, where each cell contains a unique integer, and you can move to neighboring cells.","
function minPath(grid, k) {
    const n = grid.length;
    let val = n * n + 1;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n; j++) {
            if (grid[i][j] === 1) {
                const temp = [];
                if (i !== 0) {
                    temp.push(grid[i - 1][j]);
                }

                if (j !== 0) {
                    temp.push(grid[i][j - 1]);
                }

                if (i !== n - 1) {
                    temp.push(grid[i + 1][j]);
                }

                if (j !== n - 1) {
                    temp.push(grid[i][j + 1]);
                }

                val = Math.min(...temp);
            }
        }
    }

    const ans = [];
    for (let i = 0; i < k; i++) {
        if (i % 2 === 0) {
            ans.push(1);
        } else {
            ans.push(val);
        }
    }
    return ans;
}
",1104,"
[console.assert(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3).toString() == [1, 2, 1].toString()), 
 console.assert(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1).toString() == [1].toString()), 
 console.assert(minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4).toString() == [1, 2, 1, 2].toString()), 
 console.assert(minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7).toString() == [1, 10, 1, 10, 1, 10, 1].toString()), 
 console.assert(minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5).toString() == [1, 7, 1, 7, 1].toString()), 
 console.assert(minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9).toString() == [1, 6, 1, 6, 1, 6, 1, 6, 1].toString()), 
 console.assert(minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12).toString() == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6].toString()), 
 console.assert(minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8).toString() == [1, 3, 1, 3, 1, 3, 1, 3].toString()), 
 console.assert(minPath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8).toString() == [1, 5, 1, 5, 1, 5, 1, 5].toString()), 
 console.assert(minPath([[1, 2], [3, 4]], 10).toString() == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2].toString()), 
 console.assert(minPath([[1, 3], [3, 2]], 10).toString() == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3].toString())]
",
1104,"This function generates the first `n + 1` numbers of the Tribonacci sequence, where the sequence is defined by specific recurrence relations for even and odd values of `n`.","
function tri(n) {
    if (n === 0) {
        return [1];
    }
    let my_tri = [1, 3];
    for (let i = 2; i <= n; i++) {
        if (i % 2 === 0) {
            my_tri.push(i / 2 + 1);
        } else {
            my_tri.push(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2);
        }
    }
    return my_tri;
}
",1105,"[
  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0])),
  console.assert(JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])),
  console.assert(JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])),
  console.assert(JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])),
  console.assert(JSON.stringify(tri(7)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])),
  console.assert(JSON.stringify(tri(8)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])),
  console.assert(JSON.stringify(tri(9)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])),
  console.assert(JSON.stringify(tri(20)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0])),
  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1])),
  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))
]",
1105,"This function returns the product of the odd digits of a positive integer `n`, or 0 if all digits are even.","
function digits(n) {
    let product = 1;
    let odd_count = 0;
    for (let digit of String(n)) {
        let int_digit = parseInt(digit);
        if (int_digit % 2 === 1) {
            product *= int_digit;
            odd_count++;
        }
    }
    return odd_count === 0 ? 0 : product;
}
",1106,"
[console.assert(digits(5) === 5), console.assert(digits(54) === 5), console.assert(digits(120) === 1), console.assert(digits(5014) === 5), console.assert(digits(98765) === 315), console.assert(digits(5576543) === 2625), console.assert(digits(2468) === 0)]
",
1106,"This function checks if a string containing only square brackets has a valid subsequence where at least one bracket is nested, returning True if it does, and False otherwise.","function isNested(string) {
    let openingBracketIndex = [];
    let closingBracketIndex = [];
    
    for (let i = 0; i < string.length; i++) {
        if (string[i] === '[') {
            openingBracketIndex.push(i);
        } else if (string[i] === ']') {
            closingBracketIndex.push(i);
        }
    }
    
    closingBracketIndex.reverse();
    let cnt = 0;
    let i = 0;
    let l = closingBracketIndex.length;
    
    for (let idx of openingBracketIndex) {
        if (i < l && idx < closingBracketIndex[i]) {
            cnt++;
            i++;
        }
    }
    
    return cnt >= 2;
}",1107,"[
    console.assert(isNested(""[[]]"") === true, 'This prints if this assert fails 1 (good for debugging!)'),
     console.assert(isNested(""[]]]]]]][[[[[]"") === false),
    console.assert(isNested(""([])"") === false),
    console.assert(isNested(""[[[[]]]]"") === true),
    console.assert(isNested(""[]]]]]]]]]"") === false),
    console.assert(isNested(""[[][[]]]"") === true),
    console.assert(isNested(""[[]"") === false),
    console.assert(isNested(""[]]"") === false),
    console.assert(isNested(""[[]][["") === true),
    console.assert(isNested(""[[][]]"") === true),
    console.assert(isNested("""") === false, 'This prints if this assert fails 2 (also good for debugging!)'),
    console.assert(isNested(""[[[[[[[["") === false),
    console.assert(isNested(""]]]]]]]]"") === false)
]",
1107,"This function takes a list of numbers, rounds each element up to the nearest integer (ceiling), squares each rounded value, and then returns the sum of these squared numbers.","
function sum_squares(lst) {
    let squared = 0;
    for (let i of lst) {
        squared += Math.ceil(i) ** 2;
    }
    return squared;
}
",1108,"[
  console.assert(sum_squares([1,2,3]) === 14, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([1.0,2,3]) === 14, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([1,3,5,7]) === 84, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([1.4,4.2,0]) === 29, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([-2.4,1,1]) === 6, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([100,1,15,2]) === 10230, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([10000,10000]) === 200000000, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([-1.4,4.6,6.3]) === 75, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([-1.4,17.9,18.9,19.9]) === 1086, ""This prints if this assert fails 1 (good for debugging!)""),
  console.assert(sum_squares([0]) === 0, ""This prints if this assert fails 2 (also good for debugging!)""),
  console.assert(sum_squares([-1]) === 1, ""This prints if this assert fails 2 (also good for debugging!)""),
  console.assert(sum_squares([-1,1,0]) === 2, ""This prints if this assert fails 2 (also good for debugging!)"")
]",
1108,"This function checks whether the last character of a given string is an alphabetical character and not part of a word, returning True if it meets the condition and False otherwise.","
function checkIfLastCharIsALetter(txt) {
    const check = txt.split( ).pop();
    return check.length === 1 && check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122;
}
",1109,"
[
     console.assert(checkIfLastCharIsALetter(""eeeee"") === false), 
     console.assert(checkIfLastCharIsALetter(""A"") === true), 
     console.assert(checkIfLastCharIsALetter(""Pumpkin pie "") === false), 
     console.assert(checkIfLastCharIsALetter(""Pumpkin pie 1"") === false),
      console.assert(checkIfLastCharIsALetter("""") === false), 
      console.assert(checkIfLastCharIsALetter(""eeeee e "") === false), console.assert(checkIfLastCharIsALetter(""apple pie"") === false), console.assert(checkIfLastCharIsALetter(""apple pi e "") === false), console.assert(true)]",
1109,"This function returns the largest index of an element in the array that is not greater than or equal to the element immediately preceding it, or -1 if no such element exists.","
function canArrange(arr) {
    let ind = -1;
    let i = 1;
    while (i < arr.length) {
        if (arr[i] < arr[i - 1]) {
            ind = i;
        }
        i++;
    }
    return ind;
}
",1110,"
[console.assert(canArrange([1,2,4,3,5]) === 3), console.assert(canArrange([1,2,4,5]) === -1), console.assert(canArrange([1,4,2,5,6,7,8,9,10]) === 2), console.assert(canArrange([4,8,5,7,3]) === 4), console.assert(canArrange([]) === -1)]
",
1110,"This function returns a tuple `(a, b)`, where `a` is the largest negative integer in the list, and `b` is the smallest positive integer. If no negative or positive integers are found, it returns `None` for the respective value.","function largest_smallest_integers(lst) {
    const smallest = lst.filter(x => x < 0);
    const largest = lst.filter(x => x > 0);
    return [
        smallest.length > 0 ? Math.min(...smallest) : null,  
        largest.length > 0 ? Math.max(...largest) : null   
    ];
}",1111,"[
    console.assert(JSON.stringify(largest_smallest_integers([2, 4, 1, 3, 5, 7])) === JSON.stringify([null, 7])),
    console.assert(JSON.stringify(largest_smallest_integers([2, 4, 1, 3, 5, 7, 0])) === JSON.stringify([null, 7])),
    console.assert(JSON.stringify(largest_smallest_integers([1, 3, 2, 4, 5, 6, -2])) === JSON.stringify([-2, 6])),
    console.assert(JSON.stringify(largest_smallest_integers([4, 5, 3, 6, 2, 7, -7])) === JSON.stringify([-7, 7])),
    console.assert(JSON.stringify(largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9])) === JSON.stringify([-9, 9])),
    console.assert(JSON.stringify(largest_smallest_integers([])) === JSON.stringify([null, null])),
    console.assert(JSON.stringify(largest_smallest_integers([0])) === JSON.stringify([null, null])),
    console.assert(JSON.stringify(largest_smallest_integers([-1, -3, -5, -6])) === JSON.stringify([-6, null])),
    console.assert(JSON.stringify(largest_smallest_integers([-1, -3, -5, -6, 0])) === JSON.stringify([-6, null]))
]",
1111,"This function compares two values, which can be integers, floats, or strings representing real numbers, and returns the larger value in its original type. If the values are equal, it returns `None`, and handles both period (`.`) and comma (`,`) as decimal separators in strings.","function compareOne(a, b) {
    let tempA = a, tempB = b;
    if (typeof tempA === ""string"") tempA = tempA.replace(/,/g, ""."");
    if (typeof tempB === ""string"") tempB = tempB.replace(/,/g, ""."");
    if (parseFloat(tempA) === parseFloat(tempB)) return null;
    return parseFloat(tempA) > parseFloat(tempB) ? a : b;
}",1112,"[console.assert(compareOne(1, 2) === 2), 
console.assert(compareOne(1, 2.5) === 2.5), 
console.assert(compareOne(2, 3) === 3), 
console.assert(compareOne(5, 6) === 6), 
console.assert(compareOne(1, ""2,3"") === ""2,3""), 
console.assert(compareOne(""5,1"", ""6"") === ""6""), 
console.assert(compareOne(""1"", ""2"") === ""2""), 
console.assert(compareOne(""1"", 1) === null)]",
1113,"This function calculates the Brazilian factorial, which is the product of the factorials of all integers from 1 to `n`, where `n` is the input integer. For example, for `n = 4`, it computes `4! * 3! * 2! * 1!`.","
function specialFactorial(n) {
    let fact_i = 1;
    let special_fact = 1;
    for (let i = 1; i <= n; i++) {
        fact_i *= i;
        special_fact *= fact_i;
    }
    return special_fact;
}
",1114,"[
  console.assert(specialFactorial(4) === 288, ""Test 4""),
  console.assert(specialFactorial(5) === 34560, ""Test 5""),
  console.assert(specialFactorial(7) === 125411328000, ""Test 7""),
  console.assert(specialFactorial(1) === 1, ""Test 1"")
]",
1115,"This function checks if a given file name is valid based on specific criteria, including the number of digits, the structure of the name (substring before and after the dot), and allowed file extensions.","function file_name_check(file_name) {
    const suf = [""txt"", ""exe"", ""dll""];
    const lst = file_name.split(""."");
    if (lst.length !== 2) {
        return ""No"";
    }
    if (!suf.includes(lst[1])) {
        return ""No"";
    }
    if (lst[0].length === 0) {
        return ""No"";
    }
    if (!/^[a-zA-Z]/.test(lst[0])) {
        return ""No"";
    }
    const t = lst[0].split("""").filter(x => /\d/.test(x)).length;
    if (t > 3) {
        return ""No"";
    }
    return ""Yes"";
}",1116,"
[console.assert(file_name_check(""example.txt"") === ""Yes""), console.assert(file_name_check(""1example.dll"") === ""No""), console.assert(file_name_check(""s1sdf3.asd"") === ""No""), console.assert(file_name_check(""K.dll"") === ""Yes""), console.assert(file_name_check(""MY16FILE3.exe"") === ""Yes""), console.assert(file_name_check(""His12FILE94.exe"") === ""No""), console.assert(file_name_check(""_Y.txt"") === ""No""), console.assert(file_name_check(""?aREYA.exe"") === ""No""), console.assert(file_name_check(""/this_is_valid.dll"") === ""No""), console.assert(file_name_check(""this_is_valid.wow"") === ""No""), console.assert(file_name_check(""this_is_valid.txt"") === ""Yes""), console.assert(file_name_check(""this_is_valid.txtexe"") === ""No""), console.assert(file_name_check(""#this2_i4s_5valid.ten"") === ""No""), console.assert(file_name_check(""@this1_is6_valid.exe"") === ""No""), console.assert(file_name_check(""this_is_12valid.6exe4.txt"") === ""No""), console.assert(file_name_check(""all.exe.txt"") === ""No""), console.assert(file_name_check(""I563_No.exe"") === ""Yes""), console.assert(file_name_check(""Is3youfault.txt"") === ""Yes""), console.assert(file_name_check(""no_one#knows.dll"") === ""Yes""), console.assert(file_name_check(""1I563_Yes3.exe"") === ""No""), console.assert(file_name_check(""I563_Yes3.txtt"") === ""No""), console.assert(file_name_check(""final..txt"") === ""No""), console.assert(file_name_check(""final132"") === ""No""), console.assert(file_name_check(""_f4indsartal132."") === ""No""), console.assert(file_name_check("".txt"") === ""No""), console.assert(file_name_check(""s."") === ""No"")];
",
1116,"This function modifies a list of integers by squaring the elements at indices that are multiples of 3, cubing the elements at indices that are multiples of 4 but not multiples of 3, and leaving other elements unchanged, then returns the sum of the modified list.","
function sumSquares(lst) {
    let result = [];
    for (let i = 0; i < lst.length; i++) {
        if (i % 3 === 0) {
            result.push(lst[i] ** 2);
        } else if (i % 4 === 0 && i % 3 !== 0) {
            result.push(lst[i] ** 3);
        } else {
            result.push(lst[i]);
        }
    }
    return result.reduce((a, b) => a + b, 0);
}
",1117,"
[console.assert(sumSquares([1, 2, 3]) === 6), 
 console.assert(sumSquares([1, 4, 9]) === 14), 
 console.assert(sumSquares([]) === 0), 
 console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9), 
 console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3), 
 console.assert(sumSquares([0]) === 0), 
 console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126), 
 console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030), 
 console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0), 
 console.assert(sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) === -14196), 
 console.assert(sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) === -1448)]
",
1117,"This function takes a sentence and returns a string containing only the words whose lengths are prime numbers, keeping the order of the original sentence.","function wordsInSentence(sentence) {
    const isPrime = (n) => {
        if (n < 2) return false;
        for (let i = 2; i <= Math.sqrt(n); i++) {
            if (n % i === 0) return false;
        }
        return true;
    };

    let newLst = [];
    for (let word of sentence.split("" "")) {
        if (isPrime(word.length) || word.length === 2) {
            newLst.push(word);
        }
    }
    return newLst.join("" "");
}",1118,"[
    console.assert(wordsInSentence(""This is a test"") === ""is"", ""Test 1 failed""),
    console.assert(wordsInSentence(""lets go for swimming"") === ""go for"", ""Test 2 failed""),
    console.assert(wordsInSentence(""there is no place available here"") === ""there is no place"", ""Test 3 failed""),
    console.assert(wordsInSentence(""Hi I am Hussein"") === ""Hi am Hussein"", ""Test 4 failed""),
    console.assert(wordsInSentence(""go for it"") === ""go for it"", ""Test 5 failed""),
    console.assert(wordsInSentence(""here"") === """", ""Test 6 failed""),
    console.assert(wordsInSentence(""here is"") === ""is"", ""Test 7 failed"")
]",
1118,"This function takes two string representations of fractions, multiplies them, and returns True if the result is a whole number, or False otherwise.","
function simplify(x, n) {
    let [a, b] = x.split(""/"");
    let [c, d] = n.split(""/"");
    let numerator = parseInt(a) * parseInt(c);
    let denom = parseInt(b) * parseInt(d);
    return (numerator / denom === Math.floor(numerator / denom));
}
",1119,"
[console.assert(simplify(""1/5"", ""5/1"") === true, ""test1""), 
 console.assert(simplify(""1/6"", ""2/1"") === false, ""test2""), 
 console.assert(simplify(""5/1"", ""3/1"") === true, ""test3""), 
 console.assert(simplify(""7/10"", ""10/2"") === false, ""test4""), 
 console.assert(simplify(""2/10"", ""50/10"") === true, ""test5""), 
 console.assert(simplify(""7/2"", ""4/2"") === true, ""test6""), 
 console.assert(simplify(""11/6"", ""6/1"") === true, ""test7""), 
 console.assert(simplify(""2/3"", ""5/2"") === false, ""test8""), 
 console.assert(simplify(""5/2"", ""3/5"") === false, ""test9""), 
 console.assert(simplify(""2/4"", ""8/4"") === true, ""test10""), 
 console.assert(simplify(""2/4"", ""4/2"") === true, ""test11""), 
 console.assert(simplify(""1/5"", ""5/1"") === true, ""test12""), 
 console.assert(simplify(""1/5"", ""1/5"") === false, ""test13"")]
",
1119,"This function sorts a list of integers in ascending order based on the sum of their digits, and in case of a tie, it maintains the original order based on the index.","
function orderByPoints(nums) {
    function digitsSum(n) {
        let neg = 1;
        if (n < 0) {
            n = -n;
            neg = -1;
        }
        n = Array.from(String(n), Number);
        n[0] *= neg;
        return n.reduce((a, b) => a + b, 0);
    }
    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));
}",1120,"[
console.assert(orderByPoints([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]).toString() === [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457].toString()),
 console.assert(orderByPoints([]).toString() === [].toString()), console.assert(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3]).toString() === [-3, -32, -98, -11, 1, 2, 43, 54].toString()), 
 console.assert(orderByPoints([1,2,3,4,5,6,7,8,9,10,11]).toString() === [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9].toString()),
  console.assert(orderByPoints([0,6,6,-76,-21,23,4]).toString() === [-76, -21, 0, 4, 23, 6, 6].toString())]",
1120,"This function counts the numbers in the array that are greater than 10 and have both the first and last digits as odd (1, 3, 5, 7, 9).","
function specialFilter(nums) {
    let count = 0;
    for (let num of nums) {
        if (num > 10) {
            const odd_digits = [1, 3, 5, 7, 9];
            const number_as_string = num.toString();
            if (odd_digits.includes(parseInt(number_as_string[0])) && odd_digits.includes(parseInt(number_as_string[number_as_string.length - 1]))) {
                count++;
            }
        }
    }
    return count;
}
",1121,"
[console.assert(specialFilter([5, -2, 1, -5]) === 0), console.assert(specialFilter([15, -73, 14, -15]) === 1), console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2), console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4), console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3), console.assert(specialFilter([1]) === 0), console.assert(specialFilter([]) === 0)];
",
1121,"This function calculates an array where each element \( a[i] = i^2 - i + 1 \), then returns the number of valid triples \( (a[i], a[j], a[k]) \) such that the sum of these triples is divisible by 3 and \( i < j < k \).","
function getMaxTriples(n) {
    const A = Array.from({length: n}, (_, i) => (i + 1) * (i + 1) - (i + 1) + 1);
    const ans = [];
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            for (let k = j + 1; k < n; k++) {
                if ((A[i] + A[j] + A[k]) % 3 === 0) {
                    ans.push([A[i], A[j], A[k]]);
                }
            }
        }
    }
    return ans.length;
}
",1122,"[
  console.assert(getMaxTriples(5) === 1),
  console.assert(getMaxTriples(6) === 4),
  console.assert(getMaxTriples(10) === 36),
  console.assert(getMaxTriples(100) === 53361)
]",
1123,"This function removes strings with odd lengths from the list, sorts the remaining strings by length and alphabetically, and returns the sorted list.","
function sortedListSum(lst) {
    lst.sort();
    let newLst = [];
    for (let i of lst) {
        if (i.length % 2 === 0) {
            newLst.push(i);
        }
    }
    return newLst.sort((a, b) => a.length - b.length);
}
",1124,"
[console.assert(sortedListSum([""aa"", ""a"", ""aaa""]).toString() === [""aa""].toString()), 
 console.assert(sortedListSum([""school"", ""AI"", ""asdf"", ""b""]).toString() === [""AI"", ""asdf"", ""school""].toString()), 
 console.assert(sortedListSum([""d"", ""b"", ""c"", ""a""]).toString() === [].toString()), 
 console.assert(sortedListSum([""d"", ""dcba"", ""abcd"", ""a""]).toString() === [""abcd"", ""dcba""].toString()), 
 console.assert(sortedListSum([""AI"", ""ai"", ""au""]).toString() === [""AI"", ""ai"", ""au""].toString()), 
 console.assert(sortedListSum([""a"", ""b"", ""b"", ""c"", ""c"", ""a""]).toString() === [].toString()), 
 console.assert(sortedListSum([""aaaa"", ""bbbb"", ""dd"", ""cc""]).toString() === [""cc"", ""dd"", ""aaaa"", ""bbbb""].toString())]
",
1125,"This function returns the sum of squares of odd, non-negative integers in the list, ignoring other numbers.","
function doubleTheDifference(lst) {
  return lst.reduce((acc, i) => {
    if (i > 0 && i % 2 !== 0 && !String(i).includes(""."")) {
      return acc + i ** 2;
    }
    return acc;
  }, 0);
}
",1126,"  [
    console.assert(doubleTheDifference([]) === 0),
    console.assert(doubleTheDifference([5, 4]) === 25),
    console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0),
    console.assert(doubleTheDifference([-10, -20, -30]) === 0),
    console.assert(doubleTheDifference([-1, -2, 8]) === 0),
    console.assert(doubleTheDifference([0.2, 3, 5]) === 34)
  ]",
1126,"This function compares two arrays of scores and guesses for a series of matches, calculating and returning an array of absolute differences between the actual scores and the corresponding guesses, with 0 indicating correct guesses.","
function compare(game, guess) {
    return game.map((x, i) => Math.abs(x - guess[i]));
}
",1127,"[
  console.assert(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]).toString() === [0,0,0,0,3,3].toString()),
  console.assert(compare([0,0,0,0,0,0],[0,0,0,0,0,0]).toString() === [0,0,0,0,0,0].toString()),
  console.assert(compare([1,2,3],[-1,-2,-3]).toString() === [2,4,6].toString()),
  console.assert(compare([1,2,3,5],[-1,2,3,4]).toString() === [2,0,0,1].toString()),
  console.assert(true)
]",
1127,"This function finds the strongest extension from a given list of extensions for a specified class, based on the calculated strength of each extension (number of uppercase letters minus number of lowercase letters). ","function Strongest_Extension(class_name, extensions) {
    let strong = extensions[0];
    let my_val = [...extensions[0]].filter(x => /[A-Z]/.test(x) && /^[A-Za-z]+$/.test(x)).length - 
                  [...extensions[0]].filter(x => /[a-z]/.test(x) && /^[A-Za-z]+$/.test(x)).length;

    for (let s of extensions) {
        let val = [...s].filter(x => /[A-Z]/.test(x) && /^[A-Za-z]+$/.test(x)).length - 
                  [...s].filter(x => /[a-z]/.test(x) && /^[A-Za-z]+$/.test(x)).length;
        if (val > my_val) {
            strong = s;
            my_val = val;
        }
    }

    return class_name + ""."" + strong;
}",1128,"[
    console.assert(Strongest_Extension(""Watashi"", [""tEN"", ""niNE"", ""eIGHt8OKe""]) === ""Watashi.eIGHt8OKe""),
    console.assert(Strongest_Extension(""Boku123"", [""nani"", ""NazeDa"", ""YEs.WeCaNe"", ""32145tggg""]) === ""Boku123.YEs.WeCaNe""),
    console.assert(Strongest_Extension(""__YESIMHERE"", [""t"", ""eMptY"", ""nothing"", ""zeR00"", ""NuLl__"", ""123NoooneB321""]) === ""__YESIMHERE.NuLl__""),
    console.assert(Strongest_Extension(""K"", [""Ta"", ""TAR"", ""t234An"", ""cosSo""]) === ""K.TAR""),
    console.assert(Strongest_Extension(""__HAHA"", [""Tab"", ""123"", ""781345"", ""-_-""]) === ""__HAHA.123""),
    console.assert(Strongest_Extension(""YameRore"", [""HhAas"", ""okIWILL123"", ""WorkOut"", ""Fails"", ""-_-""]) === ""YameRore.okIWILL123""),
    console.assert(Strongest_Extension(""finNNalLLly"", [""Die"", ""NowW"", ""Wow"", ""WoW""]) === ""finNNalLLly.WoW""),
    console.assert(Strongest_Extension(""_"", [""Bb"", ""91245""]) === ""_.Bb""),
    console.assert(Strongest_Extension(""Sp"", [""671235"", ""Bb""]) === ""Sp.671235"")
]",
1128,This function checks if the second word or any of its rotations is a substring of the first word.,"
function cycpattern_check(a, b) {
    const l = b.length;
    const pat = b + b;
    for (let i = 0; i <= a.length - l; i++) {
        for (let j = 0; j <= l; j++) {
            if (a.slice(i, i + l) === pat.slice(j, j + l)) {
                return true;
            }
        }
    }
    return false;
}
",1129,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), 
 console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""), 
 console.assert(cycpattern_check(""xyzw"", ""xyw"") === false, ""test #0""), 
 console.assert(cycpattern_check(""yello"", ""ell"") === true, ""test #1""), 
 console.assert(cycpattern_check(""whattup"", ""ptut"") === false, ""test #2""), 
 console.assert(cycpattern_check(""efef"", ""fee"") === true, ""test #3""), 
 console.assert(cycpattern_check(""abab"", ""aabb"") === false, ""test #4""), 
 console.assert(cycpattern_check(""winemtt"", ""tinem"") === true, ""test #5"")]
",
1129,This function counts the number of even and odd digits within a given integer and returns the result as a tuple.,"function evenOddCount(num) {
    let evenCount = 0;
    let oddCount = 0;
    for (let i of Math.abs(num).toString()) {
        if (parseInt(i) % 2 === 0) {
            evenCount += 1;
        } else {
            oddCount += 1;
        }
    }
    return [evenCount, oddCount];
}",1130,"[
    console.assert(
        JSON.stringify(evenOddCount(7)) === JSON.stringify([0, 1]),
        ""Test 1 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(-78)) === JSON.stringify([1, 1]),
        ""Test 2 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(3452)) === JSON.stringify([2, 2]),
        ""Test 3 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(346211)) === JSON.stringify([3, 3]),
        ""Test 4 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(-345821)) === JSON.stringify([3, 3]),
        ""Test 5 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(-2)) === JSON.stringify([1, 0]),
        ""Test 6 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(-45347)) === JSON.stringify([2, 3]),
        ""Test 7 failed""
    ),
    console.assert(
        JSON.stringify(evenOddCount(0)) === JSON.stringify([1, 0]),
        ""Test 8 failed""
    )
]",
1130,This function converts a given positive integer (between 1 and 1000) into its lowercase Roman numeral representation.,"function intToMiniRoman(number) {
    const num = [1, 4, 5, 9, 10, 40, 50, 90,  
                 100, 400, 500, 900, 1000]; 
    const sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
                 ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""]; 
    let i = 12;
    let res = ''; 
    while (number) { 
        const div = Math.floor(number / num[i]); 
        number %= num[i]; 
        let tempDiv = div; 
        while (tempDiv) { 
            res += sym[i]; 
            tempDiv -= 1; 
        }
        i -= 1;
    }
    return res.toLowerCase();
} ",1131,"[
  console.assert(intToMiniRoman(19) === ""xix""),
  console.assert(intToMiniRoman(152) === ""clii""),
  console.assert(intToMiniRoman(251) === ""ccli""),
  console.assert(intToMiniRoman(426) === ""cdxxvi""),
  console.assert(intToMiniRoman(500) === ""d""),
  console.assert(intToMiniRoman(1) === ""i""),
  console.assert(intToMiniRoman(4) === ""iv""),
  console.assert(intToMiniRoman(43) === ""xliii""),
  console.assert(intToMiniRoman(90) === ""xc""),
  console.assert(intToMiniRoman(94) === ""xciv""),
  console.assert(intToMiniRoman(532) === ""dxxxii""),
  console.assert(intToMiniRoman(900) === ""cm""),
  console.assert(intToMiniRoman(994) === ""cmxciv""),
  console.assert(intToMiniRoman(1000) === ""m""),
  console.assert(true)
]",
1131,This function determines if three given side lengths can form a right-angled triangle.,"
function rightAngleTriangle(a, b, c) {
    return a * a === b * b + c * c || b * b === a * a + c * c || c * c === a * a + b * b;
}
",1132,"[
    console.assert(rightAngleTriangle(3, 4, 5) === true),
    console.assert(rightAngleTriangle(1, 2, 3) === false),
    console.assert(rightAngleTriangle(10, 6, 8) === true),
    console.assert(rightAngleTriangle(2, 2, 2) === false),
    console.assert(rightAngleTriangle(7, 24, 25) === true),
    console.assert(rightAngleTriangle(10, 5, 7) === false),
    console.assert(rightAngleTriangle(5, 12, 13) === true),
    console.assert(rightAngleTriangle(15, 8, 17) === true),
    console.assert(rightAngleTriangle(48, 55, 73) === true),
    console.assert(rightAngleTriangle(1, 1, 1) === false),
    console.assert(rightAngleTriangle(2, 2, 10) === false)
]",
1132,"This function finds the word in a given list of strings that has the maximum number of unique characters. If multiple words have the same maximum number of unique characters, it returns the word that appears first lexicographically.","
function findMax(words) {
    return words.sort((a, b) => {
        const setA = new Set(a);
        const setB = new Set(b);
        return setB.size - setA.size || (a > b ? 1 : -1);
    })[0];
}
",1133,"[
    console.assert(findMax([""name"", ""of"", ""string""]) == ""string"", ""t1""),
    console.assert(findMax([""name"", ""enam"", ""game""]) == ""enam"", ""t2""),
    console.assert(findMax([""aaaaaaa"", ""bb"", ""cc""]) == ""aaaaaaa"", ""t3""),
    console.assert(findMax([""abc"", ""cba""]) == ""abc"", ""t4""),
    console.assert(findMax([""play"", ""this"", ""game"", ""of"", ""footbott""]) == ""footbott"", ""t5""),
    console.assert(findMax([""we"", ""are"", ""gonna"", ""rock""]) == ""gonna"", ""t6""),
    console.assert(findMax([""we"", ""are"", ""a"", ""mad"", ""nation""]) == ""nation"", ""t7""),
    console.assert(findMax([""this"", ""is"", ""a"", ""prrk""]) == ""this"", ""t8""),
    console.assert(findMax([""b""]) == ""b"", ""t9""),
    console.assert(findMax([""play"", ""play"", ""play""]) == ""play"", ""t10"")
]",
1133,"This function calculates the total number of carrots eaten and the number of carrots remaining after a hungry rabbit eats a specified number of carrots, given its current consumption, daily need, and available carrot supply.","
function eat(number, need, remaining) {
    if (need <= remaining) {
        return [number + need, remaining - need];
    } else {
        return [number + remaining, 0];
    }
}
",1134,"
[console.assert(true, ""This prints if this assert fails 1 (good for debugging!)""), console.assert(eat(5, 6, 10).toString() === [11, 4].toString(), ""Error""), console.assert(eat(4, 8, 9).toString() === [12, 1].toString(), ""Error""), console.assert(eat(1, 10, 10).toString() === [11, 0].toString(), ""Error""), console.assert(eat(2, 11, 5).toString() === [7, 0].toString(), ""Error""), console.assert(true, ""This prints if this assert fails 2 (also good for debugging!)""), console.assert(eat(4, 5, 7).toString() === [9, 2].toString(), ""Error""), console.assert(eat(4, 5, 1).toString() === [5, 0].toString(), ""Error"")]
",
1134,"This function evaluates an algebraic expression built from two given lists: a list of operators (+, -, *, //, **) and a list of non-negative integers. It constructs the expression by interleaving operators and operands and then calculates the result of the expression.","function doAlgebra(operator, operand) {
    let expression = String(operand[0]);
    for (let i = 0; i < operator.length; i++) {
        expression += operator[i] + String(operand[i + 1]);
    }
    return eval(expression);
}",1135,"[
    console.assert(doAlgebra([""**"", ""*"", ""+""], [2, 3, 4, 5]) === 37, ""Test 1 failed""),
    console.assert(doAlgebra([""+"", ""*"", ""-""], [2, 3, 4, 5]) === 9, ""Test 2 failed""),
    console.assert(doAlgebra([""//"", ""*""], [7, 3, 4]) === 7, ""Test 3 failed""),
]",
1135,This function processes a string by reversing the case of letters (upper to lower and vice versa) and reversing the entire string if it contains no letters.,"function solve(s) {
    let flg = 0;
    for (let idx = 0; idx < new_str.length; idx++) {
        let i = new_str[idx];
        if (/[a-zA-Z]/.test(i)) {

            new_str[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();
            flg = 1; 
        }
    }
    if (flg === 0) {
        return s.split("""").reverse().join("""");
    }
    return new_str.join(""""); 
}",1136," [
    console.assert(solve(""AsDf"") === ""aSdF"", ""Test 1 failed""),
    console.assert(solve(""1234"") === ""4321"", ""Test 2 failed""),
    console.assert(solve(""ab"") === ""AB"", ""Test 3 failed""),
    console.assert(solve(""#a@C"") === ""#A@c"", ""Test 4 failed""),
    console.assert(solve(""#AsdfW^45"") === ""#aSDFw^45"", ""Test 5 failed""),
    console.assert(solve(""#6@2"") === ""2@6#"", ""Test 6 failed""),
    console.assert(solve(""#$a^D"") === ""#$A^d"", ""Test 7 failed""),
    console.assert(solve(""#ccc"") === ""#CCC"", ""Test 8 failed"")
]",
1136,"This function generates the MD5 hash of a given string. If the input string is empty, it returns None.","function stringToMd5(text) {
    const crypto = require(""crypto"");
    return text ? crypto.createHash(""md5"").update(text, ""ascii"").digest(""hex"") : null;
}",1137,"[console.assert(stringToMd5(""Hello world"") === ""3e25960a79dbc69b674cd4ec67a72c62"", ""Test 1 failed""),
console.assert(stringToMd5() === null, ""Test 2 failed""),
console.assert(stringToMd5(""A B C"") === ""0ef78513b0cb8cef12743f5aeb35f888"", ""Test 3 failed""),
console.assert(stringToMd5(""password"") === ""5f4dcc3b5aa765d61d8327deb882cf99"", ""Test 4 failed"")]",
