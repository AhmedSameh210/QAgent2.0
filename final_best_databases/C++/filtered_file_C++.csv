Unnamed: 0,text,code,task_id,modified
0,"This is  a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].","
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int R = 3;
const int C = 3;

pair<int, int> min_cost(vector<vector<int>>cost, int m, int n) {
    vector<vector<int>> tc(R, vector<int>(C, 0));
    tc[0][0] = cost[0][0];

    for (int i = 1; i <= m; i++)
        tc[i][0] = tc[i - 1][0] + cost[i][0];

    for (int j = 1; j <= n; j++)
        tc[0][j] = tc[0][j - 1] + cost[0][j];

    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            tc[i][j] = min({ tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1] }) + cost[i][j];
        }
    }

    return { tc[m][n], 0 }; // Replace 0 with an appropriate second value if needed
}
",1,"[assert(min_cost(vector<vector<int>>{ {1, 2, 3}, { 4, 8, 2 }, { 1, 5, 3 }}, 2, 2).first == 8);, assert(min_cost(vector<vector<int>>{ {2, 3, 4}, { 5, 9, 3 }, { 2, 6, 4 }}, 2, 2).first == 12);, assert(min_cost(vector<vector<int>>{ {3, 4, 5}, { 6, 10, 4 }, { 3, 7, 5 }}, 2, 2).first == 16);]"
1,This is  a function to find the similar elements from the given two tuple lists.,"```
#include <iostream>
#include <tuple>
#include <algorithm>
#include <set>
#include <vector>

std::tuple<std::set<int>> similar_elements(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    std::set<int> set1(test_tup1.begin(), test_tup1.end());
    std::set<int> set2(test_tup2.begin(), test_tup2.end());

    std::set<int> res;
    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(res, res.begin()));

    return std::make_tuple(res);
}

```",2,"[assert(similar_elements({ 3, 4, 5, 6 }, { 5, 7, 4, 10 }) == std::make_tuple(std::set<int>{4, 5}));, assert(similar_elements({ 1, 2, 3, 4 }, { 5, 4, 3, 7 }) == std::make_tuple(std::set<int>{3, 4}));, assert(similar_elements({ 11, 12, 14, 13 }, { 17, 15, 14, 13 }) == std::make_tuple(std::set<int>{13, 14}));]"
2,This is  a C++ function to identify non-prime numbers.,"```
#include <cmath>

bool is_not_prime(int n) {
    bool result = false;
    for (int i = 2; i <= sqrt(n); ++i) {
        if (n % i == 0) {
            result = true;
        }
    }
    return result;
}
```",3,"[assert(is_not_prime(2) == false);, assert(is_not_prime(10) == true);, assert(is_not_prime(35) == true);]"
3,This is  a function to find the largest integers from a given list of numbers using heap queue algorithm.,"```

#include <vector>
#include <queue>

std::vector<int> heap_queue_largest(const std::vector<int>& nums, int n) {
    std::priority_queue<int> pq(nums.begin(), nums.end());
    std::vector<int> largest_nums;
    for (int i = 0; i < n && !pq.empty(); ++i) {
        largest_nums.push_back(pq.top());
        pq.pop();
    }
    return largest_nums;
}
```",4,"[assert((heap_queue_largest({ 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 3) == std::vector<int>{85, 75, 65}));, assert((heap_queue_largest({ 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 2) == std::vector<int>{85, 75}));, assert((heap_queue_largest({ 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 5) == std::vector<int>{85, 75, 65, 58, 35}));]"
4,This is  a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.,"```
#include <vector>

std::pair<int, int> count_ways(int n) {
    std::vector<int> A(n + 1, 0);
    std::vector<int> B(n + 1, 0);
    A[0] = 1;
    A[1] = 0;
    B[0] = 0;
    B[1] = 1;
    for (int i = 2; i <= n; ++i) {
        A[i] = A[i - 2] + 2 * B[i - 1];
        B[i] = A[i - 1] + B[i - 2];
    }
    return {A[n], B[n]};
}
```",5,"[assert(count_ways(2) == std::make_pair(3, 0));, assert(count_ways(8) == std::make_pair(153, 0));, assert(count_ways(12) == std::make_pair(2131, 0));]"
5,This is  a C++ function to check whether the two numbers differ at one bit position only or not.,"```
bool is_Power_Of_Two(int x) { 
    return x && !(x & (x - 1)); 
}

bool differ_At_One_Bit_Pos(int a, int b) { 
    return is_Power_Of_Two(a ^ b); 
}
```",6,"[assert(differ_At_One_Bit_Pos(13, 9) == true);, assert(differ_At_One_Bit_Pos(15, 8) == false);, assert(differ_At_One_Bit_Pos(2, 4) == false);]"
7,This is  a function to find squares of individual elements in a list using lambda function.,"```
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> square_nums(const std::vector<int>& nums) {
    std::vector<int> squared_nums(nums.size());
    std::transform(nums.begin(), nums.end(), squared_nums.begin(), [](int x) { return x * x; });
    return squared_nums;
}
```",8,"[assert(square_nums({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == std::vector<int>({ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 }));, assert(square_nums({ 10, 20, 30 }) == std::vector<int>({ 100, 400, 900 }));, assert(square_nums({ 12, 15 }) == std::vector<int>({ 144, 225 }));]"
8,This is  a C++ function to find the minimum number of rotations required to get the same string.,"```
#include <iostream>
#include <string>

int find_Rotations(const std::string& str) {
    std::string tmp = str + str;
    int n = str.length();
    for (int i = 1; i <= n; ++i) {
        std::string substring = tmp.substr(i, n);
        if (str == substring) {
            return i;
        }
    }
    return n;
}
```",9,"[assert(find_Rotations(""aaaa"") == 1);, assert(find_Rotations(""ab"") == 2);, assert(find_Rotations(""abc"") == 3);]"
10,This is  a C++ function to remove first and last occurrence of a given character from the string.,"```
#include <string>

std::pair<std::string, std::string> remove_Occ(std::string s, char ch) {
    for (size_t i = 0; i < s.length(); i++) {
        if (s[i] == ch) {
            s = s.substr(0, i) + s.substr(i + 1);
            break;
        }
    }
    for (int i = s.length() - 1; i >= 0; i--) {
        if (s[i] == ch) {
            s = s.substr(0, i) + s.substr(i + 1);
            break;
        }
    }
    return {s, """"};
}
```",11,"[assert(remove_Occ(""hello"", \l\).first == ""heo"");, assert(remove_Occ(""abcda"", \a\).first == ""bcd"");, assert(remove_Occ(""PHP"", \P\).first == ""H"");]"
11,This is  a function to sort a given matrix in ascending order according to the sum of its rows.,"
```
#include <vector>
#include <algorithm>
#include <numeric>

std::pair<std::vector<std::vector<int>>, std::vector<int>> sort_matrix(const std::vector<std::vector<int>>& M) {
    std::vector<std::vector<int>> result = M;
    std::sort(result.begin(), result.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
        return std::accumulate(a.begin(), a.end(), 0) < std::accumulate(b.begin(), b.end(), 0);
        });
    return { result, {} };
}
```",12,"[assert((sort_matrix({ {1, 2, 3}, {2, 4, 5}, {1, 1, 1} }).first == std::vector<std::vector<int>>{ {1, 1, 1}, { 1, 2, 3 }, { 2, 4, 5 } }));, assert((sort_matrix({ {1, 2, 3}, {-2, 4, -5}, {1, -1, 1} }).first == std::vector<std::vector<int>>{ {-2, 4, -5}, { 1, -1, 1 }, { 1, 2, 3 } }));, assert((sort_matrix({ {5, 8, 9}, {6, 4, 3}, {2, 1, 4} }).first == std::vector<std::vector<int>>{ {2, 1, 4}, { 6, 4, 3 }, { 5, 8, 9 } }));]"
12,This is  a function to count the most common words in a dictionary.,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <cassert>

using namespace std;

vector<pair<string, int>> countCommon(const vector<string>& words) {
    map<string, int> wordCounts;

    for (const string& word : words) {
        wordCounts[word]++;
    }

    vector<pair<string, int>> result(wordCounts.begin(), wordCounts.end());

    // Sort by frequency descending, then lexicographically by key if counts are equal
    sort(result.begin(), result.end(), [](const pair<string, int>& a, const pair<string, int>& b) {
        if (a.second == b.second) return a.first < b.first;
        return a.second > b.second;
        });

    if (result.size() > 4) {
        result.resize(4);
    }

    return result;
}

// Helper function to assert vector of pairs equality
void assertEqual(const vector<pair<string, int>>& actual, const vector<pair<string, int>>& expected, const string& message) {
    if (actual != expected) {
        cerr << message << endl;
        exit(1);
  ",13,"[ assertEqual(countCommon({ ""one"", ""two"", ""three"", ""four"", ""five"",
                              ""one"", ""two"", ""one"", ""three"", ""one"" }),
        { {""one"", 4}, {""two"", 2}, {""three"", 2}, {""four"", 1} },
        ""Test 2 failed"");,

    assertEqual(countCommon({ ""Facebook"", ""Apple"", ""Amazon"", ""Netflix"",
                              ""Google"", ""Apple"", ""Netflix"", ""Amazon"" }),
        { {""Apple"", 2}, {""Amazon"", 2}, {""Netflix"", 2}, {""Facebook"", 1} },
        ""Test 3 failed"");]"
13,This is  a C++ function to find the volume of a triangular prism.,"```
#include <iostream>
using namespace std;

pair<double, double> find_Volume(double l, double b, double h) {
    return make_pair((l * b * h) / 2, 0);
}
```",14,"[assert(find_Volume(10, 8, 6) == 240);, assert(find_Volume(3, 2, 2) == 6);, assert(find_Volume(1, 2, 1) == 1);]"
14,This is  a function to split a string at lowercase letters.,"```
#include <iostream>
#include <vector>
#include <regex>
#include <string>

std::vector<std::string> splitLowerString(const std::string& text) {
    std::vector<std::string> result;
    std::regex pattern(""([a-z][^a-z]*)"");
    auto wordsBegin = std::sregex_iterator(text.begin(), text.end(), pattern);
    auto wordsEnd = std::sregex_iterator();

    for (std::sregex_iterator it = wordsBegin; it != wordsEnd; ++it) {
        result.push_back(it->str());
    }

    return result;
}```",15,"[assert((splitLowerString(""AbCd"") == std::vector<std::string>{""bC"", ""d""}));, assert((splitLowerString(""C++"") == std::vector<std::string>{""y"", ""t"", ""h"", ""o"", ""n""}));, assert((splitLowerString(""Programming"") == std::vector<std::string>{""r"", ""o"", ""g"", ""r"", ""a"", ""m"", ""m"", ""i"", ""n"", ""g""}));]"
15,This is  a function to find sequences of lowercase letters joined with an underscore.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_lowercase_underscore(const std::string& text) {
    std::regex patterns(""^[a-z]+_[a-z]+$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",16,"[assert(text_lowercase_underscore(""aab_cbbbc"") == ""Found a match!"");, assert(text_lowercase_underscore(""aab_Abbbc"") == ""Not matched!"");, assert(text_lowercase_underscore(""Aaab_abbbc"") == ""Not matched!"");]"
16,This is  a function to find the perimeter of a square.,"```
#include <iostream>
using namespace std;

pair<int, int> square_perimeter(int a) {
    int perimeter = 4 * a;
    return make_pair(perimeter, perimeter);
}
```",17,"[assert(square_perimeter(10).first == 40);, assert(square_perimeter(5).first == 20);, assert(square_perimeter(4).first == 16);]"
17,This is  a function to remove characters from the first string which are present in the second string.,"```
#include <iostream>
#include <string>
#include <vector>

const int NO_OF_CHARS = 256;

std::vector<char> str_to_list(const std::string& str) {
    std::vector<char> temp;
    for (char x : str) {
        temp.push_back(x);
    }
    return temp;
}

std::string lst_to_string(const std::vector<char>& list) {
    return std::string(list.begin(), list.end());
}

int* get_char_count_array(const std::string& str) {
    int* count = new int[NO_OF_CHARS] {0}; 
    for (char i : str) {
        count[static_cast<int>(i)]++;
    }
    return count;
}

std::string remove_dirty_chars(const std::string& string, const std::string& second_string) {
    int* count = get_char_count_array(second_string);
    int ip_ind = 0;
    int res_ind = 0;
    std::string temp;
    std::vector<char> str_list = str_to_list(string);
    
    while (ip_ind != str_list.size()) {
        temp = str_list[ip_ind];
        if (count[static_cast<int>(temp[0])] == 0) {
            str_list[res_ind] = str_list[ip_ind];
            res_ind++;
        }
        ip_ind++;
    }
    delete[] count;
    return lst_to_string(std::vector<char>(str_list.begin(), str_list.begin() + res_ind));
}
```",18,"[assert(remove_dirty_chars(""probasscurve"", ""pros"") == ""bacuve"");, assert(remove_dirty_chars(""digitalindia"", ""talent"") == ""digiidi"");, assert(remove_dirty_chars(""exoticmiles"", ""toxic"") == ""emles"");]"
18,This is  a function to find whether a given array of integers contains any duplicate element.,"```
#include <vector>
#include <unordered_set>

std::pair<bool, bool> test_duplicate(const std::vector<int>& arraynums) {
    std::unordered_set<int> nums_set(arraynums.begin(), arraynums.end());
    return std::make_pair(arraynums.size() != nums_set.size(), false);
}
```",19,"[assert(test_duplicate({ 1, 2, 3, 4, 5 }).first == false);, assert(test_duplicate({ 1, 2, 3, 4, 4 }).first == true);, assert(test_duplicate({ 1, 1, 2, 2, 3, 3, 4, 4, 5 }).first == true);]"
19,This is  a function to check if the given number is woodball or not.,"```
#include <iostream>

bool is_woodall(int x) {
    if (x % 2 == 0) {
        return false;
    }
    if (x == 1) {
        return true;
    }
    x = x + 1;
    int p = 0;
    while (x % 2 == 0) {
        x = x / 2;
        p = p + 1;
        if (p == x) {
            return true;
        }
    }
    return false;
}
```",20,"[assert(is_woodall(383) == true);, assert(is_woodall(254) == false);, assert(is_woodall(200) == false);]"
20,This is  a function to find m number of multiples of n.,"```
#include <vector>

std::vector<int> multiples_of_num(int m, int n) {
    std::vector<int> multiples;
    for (int i = 1; i <= m; ++i) {
        multiples.push_back(i * n);
    }
    return multiples;
}
```",21,"[assert((multiples_of_num(4, 3) == std::vector<int>{3, 6, 9, 12})); // 4 multiples of 3, assert((multiples_of_num(2, 5) == std::vector<int>{5, 10}));       // 2 multiples of 5, assert((multiples_of_num(9, 2) == std::vector<int>{2, 4, 6, 8, 10, 12, 14, 16, 18})); // 9 multiples of 2]"
21,This is  a function to find the first duplicate element in a given array of integers.,"```
#include <vector>
#include <unordered_set>

int find_first_duplicate(const std::vector<int>& nums) {
    std::unordered_set<int> num_set;
    int no_duplicate = -1;

    for (size_t i = 0; i < nums.size(); ++i) {
        if (num_set.find(nums[i]) != num_set.end()) {
            return nums[i];
        } else {
            num_set.insert(nums[i]);
        }
    }

    return no_duplicate;
}
```",22,"[assert(find_first_duplicate({1, 2, 3, 4, 4, 5}) == 4);, assert(find_first_duplicate({1, 2, 3, 4}) == -1);, assert(find_first_duplicate({1, 1, 2, 3, 3, 2, 2}) == 1);]"
22,This is  a C++ function to find the maximum sum of elements of list in a list of lists.,"```
#include <vector>
#include <algorithm>
#include <limits>

// Function to compute the maximum row sum
int maximum_Sum(const std::vector<std::vector<int>>& list1) {
    int maxi = std::numeric_limits<int>::min(); // Set to the smallest possible value
    for (const auto& x : list1) {
        int sum = 0;
        for (int y : x) {
            sum += y; // Sum each row
        }
        maxi = std::max(sum, maxi); // Update the maximum sum
    }
    return maxi;
}```",23,"[assert(maximum_Sum({ {1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9} }) == 33); // Row with 10, 11, 12, assert(maximum_Sum({ {0, 1, 1}, {1, 1, 2}, {3, 2, 1} }) == 6);               // Row with 3, 2, 1, assert(maximum_Sum({ {0, 1, 3}, {1, 2, 1}, {9, 8, 2}, {0, 1, 0}, {6, 4, 8} }) == 19); // Row with 6, 4, 8]"
23,This is  a function to convert the given binary number to its decimal equivalent.,"```
#include <iostream>
#include <cmath>

int binary_to_decimal(int binary) {
    int decimal = 0, i = 0;
    while (binary != 0) {
        int dec = binary % 10;
        decimal = decimal + dec * pow(2, i);
        binary = binary / 10;
        i++;
    }
    return decimal;
}
```",24,"[assert(binary_to_decimal(100) == 4);, assert(binary_to_decimal(1011) == 11);, assert(binary_to_decimal(1101101) == 109);]"
24,This is  a C++ function to find the product of non-repeated elements in a given array.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int find_Product(std::vector<int> arr) {
    std::sort(arr.begin(), arr.end());
    int prod = 1;
    for (size_t i = 0; i < arr.size(); i++) {
        if (i == 0 || arr[i - 1] != arr[i]) { // Avoid out-of-bounds and handle duplicates
            prod *= arr[i];
        }
    }
    return prod;
}```",25,"[assert(find_Product(std::vector<int>{1, 1, 2, 3}) == 6);, assert(find_Product(std::vector<int>{1, 2, 3, 1, 1}) == 6);, assert(find_Product(std::vector<int>{1, 1, 4, 5, 6}) == 120);]"
25,This is  a function to check if the given tuple list has all k elements.,"```
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

// Tuple class definition
template <typename T>
class Tuple {
private:
    T value;
public:
    Tuple(T value) : value(value) {}

    T getValue() const {
        return value;
    }

    void setValue(T value) {
        this->value = value;
    }

    friend ostream& operator<<(ostream& os, const Tuple<T>& tuple) {
        os << tuple.value;
        return os;
    }
};

// Check if each element in the list of tuples equals K
Tuple<bool> checkKElements(const vector<Tuple<int>>& testList, int K) {
    for (const Tuple<int>& tup : testList) {
        if (tup.getValue() != K) {
            return Tuple<bool>(false);
        }
    }
    return Tuple<bool>(true);
}

// Convert 2D array to list of Tuples
vector<Tuple<int>> arrayToTupleList(const vector<vector<int>>& inputArray) {
    vector<Tuple<int>> tupleList;
    for (const auto& row : inputArray) {
        for (int val : row) {
            tupleList.emplace_back(val);
        }
    }
    return tupleList;
}```",26,"[assert(checkKElements(arrayToTupleList({ {4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4} }), 4).getValue() == true);, assert(checkKElements(arrayToTupleList({ {7, 7, 7}, {7, 7} }), 7).getValue() == true);, assert(checkKElements(arrayToTupleList({ {9, 9}, {9, 9, 9, 9} }), 7).getValue() == false);]"
26,This is  a C++ function to remove all digits from a list of strings.,"```
#include <vector>
#include <string>
#include <regex>

std::vector<std::string> remove(const std::vector<std::string>& list) {
    std::regex pattern(""[0-9]"");
    std::vector<std::string> result;
    
    for (const auto& i : list) {
        result.push_back(std::regex_replace(i, pattern, """"));
    }
    
    return result;
}
```",27,"[assert((remove({ ""4words"", ""3letters"", ""4digits"" }) == std::vector<std::string>{""words"", ""letters"", ""digits""}));, assert((remove({ ""28Jan"", ""12Jan"", ""11Jan"" }) == std::vector<std::string>{""Jan"", ""Jan"", ""Jan""}));, assert((remove({ ""wonder1"", ""wonder2"", ""wonder3"" }) == std::vector<std::string>{""wonder"", ""wonder"", ""wonder""}));]"
27,This is  a C++ function to find binomial co-efficient.,"```
#include <iostream>
using namespace std;

int binomial_Coeff(int n, int k) {
    if (k > n) {
        return 0;
    }
    if (k == 0 || k == n) {
        return 1;
    }
    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k);
}
```",28,"[assert(binomial_Coeff(5, 2) == 10);, assert(binomial_Coeff(4, 3) == 4);, assert(binomial_Coeff(3, 2) == 3);]"
28,This is  a C++ function to find the element occurring odd number of times.,"```
#include <cassert>
#include <vector>
#include <iostream>
using namespace std;

int get_Odd_Occurrence(const vector<int>& arr) {
    int arr_size = arr.size();
    for (int i = 0; i < arr_size; i++) {
        int count = 0;
        for (int j = 0; j < arr_size; j++) {
            if (arr[i] == arr[j]) {
                count++;
            }
        }
        if (count % 2 != 0) {
            return arr[i];
        }
    }
    return -1; // Return -1 if no odd occurrence is found
}
```",29,"[assert(get_Odd_Occurrence({ 1, 2, 3, 1, 2, 3, 1 }) == 1); // 1 occurs 3 times (odd), assert(get_Odd_Occurrence({ 1, 2, 3, 2, 3, 1, 3 }) == 3); // 3 occurs 3 times (odd), assert(get_Odd_Occurrence({ 2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2 }) == 5); // 5 occurs 3 times (odd)]"
29,This is  a C++ function to count all the substrings starting and ending with same characters.,"```
#include <iostream>
#include <string>

bool check_Equality(const std::string& s) {
    return (s[0] == s[s.length() - 1]);
}

int count_Substring_With_Equal_Ends(const std::string& s) {
    int result = 0;
    int n = s.length();
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j <= n - i; ++j) {
            if (check_Equality(s.substr(i, j))) {
                result++;
            }
        }
    }
    return result;
}
```",30,"[assert(count_Substring_With_Equal_Ends(""abc"") == 3);, assert(count_Substring_With_Equal_Ends(""abcda"") == 6);, assert(count_Substring_With_Equal_Ends(""ab"") == 2);]"
30,This is  a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"```
#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <algorithm>
#include <cassert>

using namespace std;

vector<int> func(const vector<vector<int>>& nums, int k) {
    map<int, int> freqMap;

    // Count frequency of each element
    for (const auto& row : nums) {
        for (int num : row) {
            freqMap[num]++;
        }
    }

    // Min-heap to store the top k elements (frequency, element)
    using Pair = pair<int, int>;
    auto comp = [](const Pair& a, const Pair& b) { return a.first > b.first; }; // Min-heap based on frequency
    priority_queue<Pair, vector<Pair>, decltype(comp)> minHeap(comp);

    for (const auto& entry : freqMap) {
        int value = entry.first;
        int frequency = entry.second;

        if (minHeap.size() < k) {
            minHeap.emplace(frequency, value);
        }
        else if (frequency > minHeap.top().first) {
            minHeap.pop();
            minHeap.emplace(frequency, value);
        }
    }

    // Extract elements from the heap and prepare the result in descending order
    vector<int> result;
    while (!minHeap.empty()) {
        result.push_back(minHeap.top().second);
        minHeap.pop();
    }
    reverse(result.begin(), result.end());

    return result;
}```",31,"[assert((func({ {1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12} }, 3) == vector<int>{1, 7, 5}));, assert(func({ {1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12} }, 1) == vector<int>{1});]"
31,This is  a C++ function to find the largest prime factor of a given number.,"```
#include <cmath>
#include <utility>

int max_Prime_Factors(int n) {
    int maxPrime = -1;

    // Divide by 2 as long as possible
    while (n % 2 == 0) {
        maxPrime = 2;
        n /= 2;
    }

    // Check for odd factors
    for (int i = 3; i <= std::sqrt(n); i += 2) {
        while (n % i == 0) {
            maxPrime = i;
            n /= i;
        }
    }

    // If n is a prime number greater than 2
    if (n > 2) {
        maxPrime = n;
    }

    return maxPrime;
}```",32,"[assert(max_Prime_Factors(15) == 5); // Prime factors: 3, 5 -> Max: 5, assert(max_Prime_Factors(6) == 3);  // Prime factors: 2, 3 -> Max: 3, assert(max_Prime_Factors(2) == 2);  // Prime factor: 2 -> Max: 2]"
32,This is  a C++ function to convert a decimal number to binary number.,"```
#include <iostream>
#include <cmath>

std::pair<int, int> decimal_To_Binary(int N) {
    int B_Number = 0;
    int cnt = 0;
    while (N != 0) {
        int rem = N % 2;
        int c = pow(10, cnt);
        B_Number += rem * c;
        N /= 2;
        cnt += 1;
    }
    return {B_Number, 0}; // Return a pair for compatibility with function signature
}
```",33,"[assert(decimal_To_Binary(10).first == 1010);, assert(decimal_To_Binary(1).first == 1);, assert(decimal_To_Binary(20).first == 10100);]"
33,This is  a C++ function to find the missing number in a sorted array.,"```
#include <vector>

int find_missing(std::vector<int> ar, int N) {
    int l = 0;
    int r = N - 1;
    while (l <= r) {
        int mid = (l + r) / 2;
        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {
            return mid + 1;
        }
        else if (ar[mid] != mid + 1) {
            r = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    return -1;
}```",34,"[assert(find_missing({ 1, 2, 3, 5 }, 4) == 4);, assert(find_missing({ 1, 3, 4, 5 }, 4) == 2);, assert(find_missing({ 1, 2, 3, 5, 6, 7 }, 5) == 4);]"
34,This is  a function to find the n-th rectangular number.,"```
int find_rect_num(int n) {
    return n * (n + 1);
}
```",35,"[assert(find_rect_num(4) == 20);, assert(find_rect_num(5) == 30);, assert(find_rect_num(6) == 42);]"
35,This is  a C++ function to find the nth digit in the proper fraction of two given numbers.,"```
int find_Nth_Digit(int p, int q, int N) {
    int res = 0;
    while (N > 0) {
        N -= 1;
        p *= 10;
        res = p / q;
        p %= q;
    }
    return res;
}```",36,"[assert(find_Nth_Digit(1, 2, 1) == 5);, assert(find_Nth_Digit(3, 5, 1) == 6);, assert(find_Nth_Digit(5, 6, 5) == 3);]"
36,This is  a function to sort a given mixed list of integers and strings.,"```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>

using namespace std;

// Function to sort mixed list of integers and strings
vector<string> sortMixedList(const vector<string>& mixedList) {
    vector<int> intPart;
    vector<string> strPart;

    // Split integers and strings
    for (const auto& item : mixedList) {
        try {
            int number = stoi(item);  // Convert to integer if possible
            intPart.push_back(number);
        }
        catch (invalid_argument&) {
            strPart.push_back(item);  // Treat as a string
        }
    }

    // Sort the integer and string parts
    sort(intPart.begin(), intPart.end());
    sort(strPart.begin(), strPart.end());

    // Merge results back into one list
    vector<string> result;
    for (const int num : intPart) {
        result.push_back(to_string(num));
    }
    result.insert(result.end(), strPart.begin(), strPart.end());

    return result;
}```",37,"[assert((sortMixedList({ ""19"", ""red"", ""12"", ""green"", ""blue"", ""10"", ""white"", ""green"", ""1"" }) == vector<string>{""1"", ""10"", ""12"", ""19"", ""blue"", ""green"", ""green"", ""red"", ""white""}));]"
37,This is  a function to find the division of first even and odd number of a given list.,"```
#include <vector>
#include <iostream>

std::pair<double, double> div_even_odd(const std::vector<int>& list1) {
    int first_even = -1;
    int first_odd = -1;

    for (const auto& el : list1) {
        if (el % 2 == 0 && first_even == -1) {
            first_even = el;
        }
        if (el % 2 != 0 && first_odd == -1) {
            first_odd = el;
        }
        if (first_even != -1 && first_odd != -1) {
            break;
        }
    }

    return {static_cast<double>(first_even) / first_odd, 0}; // The second value is a placeholder, not used.
}
```",38,"[assert(div_even_odd({ 1, 3, 5, 7, 4, 1, 6, 8 }).first == 4);, assert(div_even_odd({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }).first == 2);, assert(div_even_odd({ 1, 5, 7, 9, 10 }).first == 10);]"
38,This is  a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"```
#include <iostream>
#include <string>
#include <unordered_map>
#include <queue>
#include <cassert>

using namespace std;

// Define a Pair structure equivalent to the Java Pair class
struct Pair {
    int count;
    char character;

    Pair(int c, char ch) : count(c), character(ch) {}

    // Define comparison for priority queue (max-heap based on frequency)
    bool operator<(const Pair& other) const {
        return count < other.count;
    }
};

string rearrangeString(const string& S) {
    unordered_map<char, int> counter;

    // Count character frequencies
    for (char c : S) {
        counter[c]++;
    }

    // Max-heap based on frequencies
    priority_queue<Pair> heap;
    for (const auto& entry : counter) {
        heap.emplace(entry.second, entry.first);
    }

    if (heap.top().count * 2 > S.length() + 1) {
        return """";  // Not possible to rearrange
    }

    string result;
    while (heap.size() >= 2) {
        Pair p1 = heap.top(); heap.pop();
        Pair p2 = heap.top(); heap.pop();

        result += p1.character;
        result += p2.character;

        if (--p1.count > 0) heap.push(p1);
        if (--p2.count > 0) heap.push(p2);
    }

    if (!heap.empty()) {
        result += heap.top().character;
    }

    return result;
}```",39,"[assert(rearrangeString(""aab"") == ""aba"");, assert(rearrangeString(""aabb"") == ""abab"");]"
39,This is  a function to find frequency of the elements in a given list of lists using collections module.,"```
#include <vector>
#include <unordered_map>
#include <algorithm>

std::unordered_map<int, int> freq_element(const std::vector<std::vector<int>>& nums) {
    std::unordered_map<int, int> result;
    for (const auto& vec : nums) {
        for (const auto& num : vec) {
            result[num]++;
        }
    }
    return result;
}```",40,"[assert(freq_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }) == (std::unordered_map<int, int>{ {2, 3}, { 1, 2 }, { 5, 2 }, { 3, 1 }, { 4, 1 }, { 6, 1 }, { 7, 1 }, { 9, 1 } }));, assert(freq_element({ {1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12} }) == (std::unordered_map<int, int>{ {1, 1}, { 2, 1 }, { 3, 1 }, { 4, 1 }, { 5, 1 }, { 6, 1 }, { 7, 1 }, { 8, 1 }, { 9, 1 }, { 10, 1 }, { 11, 1 }, { 12, 1 } }));, assert(freq_element({ {15, 20, 30, 40}, {80, 90, 100, 110}, {30, 30, 80, 90} }) == (std::unordered_map<int, int>{ {30, 3}, { 80, 2 }, { 90, 2 }, { 15, 1 }, { 20, 1 }, { 40, 1 }, { 100, 1 }, { 110, 1 } }));]"
40,This is  a function to filter even numbers using lambda function.,"```
#include <vector>
#include <algorithm>
#include <iterator> // Required for std::back_inserter

std::vector<int> filter_evennumbers(const std::vector<int>& nums) {
    std::vector<int> even_nums;
    std::copy_if(nums.begin(), nums.end(), std::back_inserter(even_nums), [](int x) { return x % 2 == 0; });
    return even_nums;
}
```",41,"[assert(filter_evennumbers({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == std::vector<int>({ 2, 4, 6, 8, 10 }));, assert(filter_evennumbers({ 10, 20, 45, 67, 84, 93 }) == std::vector<int>({ 10, 20, 84 }));, assert(filter_evennumbers({ 5, 7, 9, 8, 6, 4, 3 }) == std::vector<int>({ 8, 6, 4 }));]"
41,This is  a C++ function to find the sum of repeated elements in a given array.,"```
#include <cassert>
#include <vector>
#include <unordered_map>

int find_Sum(const std::vector<int>& arr, int n) {
    std::unordered_map<int, int> count_map;
    for (int x : arr) {
        count_map[x]++;
    }

    int sum = 0;
    for (const auto& pair : count_map) {
        if (pair.second > 1) {
            sum += pair.first;
        }
    }

    return sum; // Return just the sum of elements that occur more than once
}```",42,"[assert(find_Sum({ 1, 2, 3, 1, 1, 4, 5, 6 }, 8) == 1);, assert(find_Sum({ 1, 2, 3, 1, 1 }, 5) == 1);, assert(find_Sum({ 1, 1, 2 }, 3) == 1);]"
42,This is  a function to find sequences of lowercase letters joined with an underscore using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match(const std::string& text) {
    std::regex patterns(""^[a-z]+_[a-z]+$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",43,"[assert(text_match(""aab_cbbbc"") == ""Found a match!"");, assert(text_match(""aab_Abbbc"") == ""Not matched!"");, assert(text_match(""Aaab_abbbc"") == ""Not matched!"");]"
43,This is  a function that matches a word at the beginning of a string.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_string(const std::string& text) {
    std::regex patterns(""^\\w+"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",44,"[assert(text_match_string("" C++"") == ""Not matched!"");, assert(text_match_string(""C++"") == ""Found a match!"");, assert(text_match_string(""  lang"") == ""Not matched!"");]"
44,This is  a function to find the gcd of the given array elements.,"```
#include <vector>

int find_gcd(int x, int y) {
    while (y) {
        int temp = y;
        y = x % y;
        x = temp;
    }
    return x;
}

std::pair<int, int> get_gcd(const std::vector<int>& l) {
    int num1 = l[0];
    int num2 = l[1];
    int gcd = find_gcd(num1, num2);
    for (size_t i = 2; i < l.size(); i++) {
        gcd = find_gcd(gcd, l[i]);
    }
    return {gcd, gcd};
}
```",45,"[assert(get_gcd({ 2, 4, 6, 8, 16 }).first == 2);, assert(get_gcd({ 1, 2, 3 }).first == 1);, assert(get_gcd({ 2, 4, 6, 8 }).first == 2);]"
45,This is  a C++ function to determine whether all the numbers are different from each other are not.,"```
#include <vector>
#include <set>

bool test_distinct(const std::vector<int>& data) {
    return data.size() == std::set<int>(data.begin(), data.end()).size();
}
```",46,"[assert(test_distinct({1, 5, 7, 9}) == true);, assert(test_distinct({2, 4, 5, 5, 7, 9}) == false);, assert(test_distinct({1, 2, 3}) == true);]"
46,This is  a C++ function to find the last digit when factorial of a divides factorial of b.,"```
int compute_Last_Digit(int A, int B) {
    int variable = 1;
    if (A == B) {
        return 1;
    } else if ((B - A) >= 5) {
        return 0;
    } else {
        for (int i = A + 1; i <= B; i++) {
            variable = (variable * (i % 10)) % 10;
        }
        return variable % 10;
    }
}
```",47,"[assert(compute_Last_Digit(2, 4) == 2);, assert(compute_Last_Digit(6, 8) == 6);, assert(compute_Last_Digit(1, 2) == 2);]"
47,This is  a C++ function to set all odd bits of a given number.,"```
#include <iostream>

std::pair<int, int> odd_bit_set_number(int n) {
    int count = 0, res = 0, temp = n;
    while (temp > 0) {
        if (count % 2 == 0) {
            res |= (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return {n | res, 0}; // Adjust as necessary if you want to return something else
}
```",48,"[assert(odd_bit_set_number(10).first == 15);, assert(odd_bit_set_number(20).first == 21);, assert(odd_bit_set_number(30).first == 31);]"
48,This is  a function to extract every first or specified element from a given two-dimensional list.,"```
#include <vector>

std::vector<int> specified_element(const std::vector<std::vector<int>>& nums, int N) {
    std::vector<int> result;
    for (const auto& i : nums) {
        result.push_back(i[N]);
    }
    return result;
}
```",49,"[assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 0) == std::vector<int> {1, 4, 7}));, assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 2) == std::vector<int> {3, 6, 9}));, assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 1) == std::vector<int> {2, 5, 1}));]"
49,This is  a function to find the list with minimum length using lambda function.,"```
#include <vector>
#include <algorithm>
#include <tuple>

std::tuple<int, std::vector<int>> min_length_list(const std::vector<std::vector<int>>& input_list) {
    // Find the list with the minimum length
    auto min_list_iter = std::min_element(input_list.begin(), input_list.end(),
        [](const std::vector<int>& a, const std::vector<int>& b) {
            return a.size() < b.size();
        });

    int min_length = min_list_iter->size();
    std::vector<int> min_list = *min_list_iter;

    return std::make_tuple(min_length, min_list);
}```",50,"[assert(min_length_list({ {0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17} }) == std::make_tuple(1, std::vector<int>{0}));, assert(min_length_list({ {1,2,3,4,5}, {1,2,3,4}, {1,2,3}, {1,2}, {1} }) == std::make_tuple(1, std::vector<int>{1}));, assert(min_length_list({ {3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}, {1, 2} }) == std::make_tuple(2, std::vector<int>{1, 2}));]"
51,This is  a function to caluclate area of a parallelogram.,"```
double parallelogram_area(double b, double h) {
    double area = b * h;
    return area;
}
```",52,"[assert(parallelogram_area(10, 20) == 200);, assert(parallelogram_area(15, 20) == 300);, assert(parallelogram_area(8, 9) == 72);]"
53,This is  a function to sort the given array by using counting sort.,"```
#include <vector>
#include <algorithm>

std::vector<int> counting_sort(std::vector<int> my_list) {
    int max_value = 0;
    for (int i = 0; i < my_list.size(); i++) {
        if (my_list[i] > max_value) {
            max_value = my_list[i];
        }
    }
    std::vector<int> buckets(max_value + 1, 0);
    for (int i : my_list) {
        buckets[i]++;
    }
    int i = 0;
    for (int j = 0; j <= max_value; j++) {
        for (int a = 0; a < buckets[j]; a++) {
            my_list[i] = j;
            i++;
        }
    }
    return my_list;
}```",54,"[assert((counting_sort({ 1, 23, 4, 5, 6, 7, 8 }) == std::vector<int> {1, 4, 5, 6, 7, 8, 23}));, assert((counting_sort({ 12, 9, 28, 33, 69, 45 }) == std::vector<int> {9, 12, 28, 33, 45, 69}));, assert((counting_sort({ 8, 4, 14, 3, 2, 1 }) == std::vector<int> {1, 2, 3, 4, 8, 14}));]"
54,This is  a function to find t-nth term of geometric series.,"```
#include <cmath>
#include<iostream>

std::pair<double, double> tn_gp(double a, int n, double r) {
    double tn = a * pow(r, n - 1);
    return std::make_pair(tn, tn);
}```",55,"[assert(tn_gp(1, 5, 2).first == 16);, assert(tn_gp(1, 5, 4).first == 256);, assert(tn_gp(2, 6, 3).first == 486);]"
55,This is  a C++ function to check if a given number is one less than twice its reverse.,"```
#include <iostream>
using namespace std;

int rev(int num) {
    int rev_num = 0;
    while (num > 0) {
        rev_num = (rev_num * 10 + num % 10);
        num = num / 10;
    }
    return rev_num;
}

bool check(int n) {
    return (2 * rev(n) == n + 1);
}
```",56,"[assert(check(70) == false);, assert(check(23) == false);, assert(check(73) == true);]"
56,This is  a C++ function to find the largest number that can be formed with the given digits.,"```

#include <algorithm>
#include <vector>

long long find_Max_Num(std::vector<int> arr, int n) {
    std::sort(arr.rbegin(), arr.rend());
    long long num = arr[0];
    for (int i = 1; i < n; i++) {
        num = num * 10 + arr[i];
    }
    return num;
}```",57,"[assert(find_Max_Num({ 1, 2, 3 }, 3) == 321);, assert(find_Max_Num({ 4, 5, 6, 1 }, 4) == 6541);, assert(find_Max_Num({ 1, 2, 3, 9 }, 4) == 9321);]"
57,This is  a C++ function to check whether the given two integers have opposite sign or not.,"```
bool opposite_Signs(int x, int y) { 
    return ((x ^ y) < 0); 
}
```",58,"[assert(opposite_Signs(1, -2) == true);, assert(opposite_Signs(3, 2) == false);, assert(opposite_Signs(-10, -10) == false);]"
59,This is  a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"```
#include <vector>
#include <algorithm>
#include <cmath>

std::pair<int, int> max_len_sub(const std::vector<int>& arr, int n) {
    std::vector<int> mls(n, 1);
    int max = 0;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (std::abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {
                mls[i] = mls[j] + 1;
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        if (max < mls[i]) {
            max = mls[i];
        }
    }

    return {max, 0}; // Returning 0 as a placeholder for the second value
}
```",60,"[assert(max_len_sub({ 2, 5, 6, 3, 7, 6, 5, 8 }, 8).first == 5);, assert(max_len_sub({ -2, -1, 5, -1, 4, 0, 3 }, 7).first== 4);, assert(max_len_sub({ 9, 11, 13, 15, 18 }, 5).first== 1);]"
60,This is  a C++ function to count number of substrings with the sum of digits equal to their length.,"```
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

pair<int, int> count_Substrings(const string& s, int n) {
    int count = 0, sum = 0;
    unordered_map<int, int> mp;
    mp[0] += 1;
    
    for (int i = 0; i < n; i++) {
        sum += s[i] - 0;
        count += mp[sum - (i + 1)];
        mp[sum - (i + 1)] += 1;
    }
    
    return make_pair(count, 0); // Return 0 for the second value as in the original code
}
```",61,"[assert(count_Substrings(""112112"", 6).first == 6);, assert(count_Substrings(""111"", 3).first == 6);, assert(count_Substrings(""1101112"", 7).first == 12);]"
61,This is  a C++ function to find smallest number in a list.,"```
#include <vector>
#include <algorithm>

int smallest_num(const std::vector<int>& xs) {
    return *std::min_element(xs.begin(), xs.end());
}
```",62,"[assert(smallest_num({ 10, 20, 1, 45, 99 }) == 1);, assert(smallest_num({ 1, 2, 3 }) == 1);, assert(smallest_num({ 45, 46, 50, 60 }) == 45);]"
62,This is  a function to find the maximum difference between available pairs in the given tuple list.,"```
#include <vector>
#include <algorithm>
#include <cmath>

std::pair<int, int> max_difference(const std::vector<std::pair<int, int>>& test_list) {
    std::vector<int> temp;
    for (const auto& p : test_list) {
        temp.push_back(abs(p.second - p.first));
    }
    int res = *std::max_element(temp.begin(), temp.end());
    return std::make_pair(res, res);
}
```",63,"[assert(max_difference({ {3, 5}, {1, 7}, {10, 3}, {1, 2} }).first == 7);, assert(max_difference({ {4, 6}, {2, 17}, {9, 13}, {11, 12} }).first == 15);, assert(max_difference({ {12, 35}, {21, 27}, {13, 23}, {41, 22} }).first == 23);]"
63,This is  a function to sort a list of tuples using lambda.,"```
#include <string>
#include <vector>
#include <algorithm>
#include <utility>

std::vector<std::pair<std::string, int>> subject_marks(std::vector<std::pair<std::string, int>> subjectmarks) {
    std::sort(subjectmarks.begin(), subjectmarks.end(), [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {
        return a.second < b.second;
        });
    return subjectmarks;
}```",64,"[assert((subject_marks({ {""English"", 88}, {""Science"", 90}, {""Maths"", 97}, {""Social sciences"", 82} }) == std::vector<std::pair<std::string, int>>{ {""Social sciences"", 82}, { ""English"", 88 }, { ""Science"", 90 }, { ""Maths"", 97 } }));, assert((subject_marks({ {""Telugu"", 49}, {""Hindhi"", 54}, {""Social"", 33} }) == std::vector<std::pair<std::string, int>>{ {""Social"", 33}, { ""Telugu"", 49 }, { ""Hindhi"", 54 } }));, assert((subject_marks({ {""Physics"", 96}, {""Chemistry"", 97}, {""Biology"", 45} }) == std::vector<std::pair<std::string, int>>{ {""Biology"", 45}, { ""Physics"", 96 }, { ""Chemistry"", 97 } }));]"
64,This is  a function of recursion list sum.,"```
#include <vector>
#include <variant>

using namespace std;

int recursive_list_sum(const vector<variant<int, vector<variant<int, vector<int>>>>& data_list) {
    int total = 0;
    for (const auto& element : data_list) {
        if (holds_alternative<vector<variant<int, vector<int>>>>(element)) {
            total += recursive_list_sum(get<vector<variant<int, vector<int>>>>(element));
        } else {
            total += get<int>(element);
        }
    }
    return total;
}
```",65,"[assert(recursive_list_sum({1, 2, {3, 4}, {5, 6}}) == 21);, assert(recursive_list_sum({7, 10, {15, 14}, {19, 41}}) == 106);, assert(recursive_list_sum({10, 20, {30, 40}, {50, 60}}) == 210);]"
65,This is  a C++ function to count positive numbers in a list.,"```
#include <vector>

std::pair<int, int> pos_count(const std::vector<int>& list) {
    int pos_count = 0;
    for (int num : list) {
        if (num >= 0) {
            pos_count += 1;
        }
    }
    return {pos_count, 0}; // Returning a pair with second value as 0 to match the return type
}
```",66,"[assert(pos_count({ 1, -2, 3, -4 }).first == 2);, assert(pos_count({ 3, 4, 5, -1 }).first == 3);, assert(pos_count({ 1, 2, 3, 4 }).first == 4);]"
66,This is  a function to find the number of ways to partition a set of bell numbers.,"```
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

long bellNumber(int n) {
    vector<vector<long>> bell(n + 1, vector<long>(n + 1, 0));
    bell[0][0] = 1;

    for (int i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        for (int j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    return bell[n][0];
}```",67,"[assert(bellNumber(2) == 2);, assert(bellNumber(10) == 115975);, assert(bellNumber(19) == 176617089);]"
67,This is  a C++ function to check whether the given array is monotonic or not.,"```
#include <vector>

bool is_Monotonic(const std::vector<int>& A) {
    bool increasing = true, decreasing = true;
    for (size_t i = 1; i < A.size(); i++) {
        if (A[i] > A[i - 1]) {
            decreasing = false;
        }
        else if (A[i] < A[i - 1]) {
            increasing = false;
        }
    }
    return increasing || decreasing;
}```",68,"[assert(is_Monotonic({6, 5, 4, 4}) == true);, assert(is_Monotonic({1, 2, 2, 3}) == true);, assert(is_Monotonic({1, 3, 2}) == false);]"
68,This is  a function to check whether a list contains the given sublist or not.,"```
#include <vector>

std::pair<bool, bool> is_sublist(const std::vector<int>& l, const std::vector<int>& s) {
    bool sub_set = false;
    if (s.empty()) {
        sub_set = true;
    } else if (s == l) {
        sub_set = true;
    } else if (s.size() > l.size()) {
        sub_set = false;
    } else {
        for (size_t i = 0; i < l.size(); ++i) {
            if (l[i] == s[0]) {
                size_t n = 1;
                while (n < s.size() && l[i + n] == s[n]) {
                    n++;
                }
                if (n == s.size()) {
                    sub_set = true;
                    break; // Exit loop early if we found a match
                }
            }
        }
    }
    return {sub_set, false}; // Returning false as a placeholder for the second value
}
```",69,"[assert(is_sublist({ 2, 4, 3, 5, 7 }, { 3, 7 }).first == false);, assert(is_sublist({ 2, 4, 3, 5, 7 }, { 4, 3 }).first == true);, assert(is_sublist({ 2, 4, 3, 5, 7 }, { 1, 6 }).first == false);]"
69,This is  a function to find whether all the given tuples have equal length or not.,"```
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

int findEqualTuple(const vector<vector<int>>& input, int k) {
    int flag = 1;
    for (const auto& tuple : input) {
        if (tuple.size() != k) {
            flag = 0;
            break;
        }
    }
    return flag;
}

string getEqual(const vector<vector<int>>& input, int k) {
    if (findEqualTuple(input, k) == 1) {
        return ""All tuples have same length"";
    }
    else {
        return ""All tuples do not have same length"";
    }
}```",70,"[assert(getEqual({ {11, 22, 33}, {44, 55, 66} }, 3) == ""All tuples have same length"");, assert(getEqual({ {1, 2, 3}, {4, 5, 6, 7} }, 3) == ""All tuples do not have same length"");, assert(getEqual({ {1, 2}, {3, 4} }, 2) == ""All tuples have same length"");]"
71,This is  a C++ function to check whether the given number can be represented as difference of two squares or not.,"```
bool dif_Square(int n) {
    if (n % 4 != 2) {
        return true;
    }
    return false;
}
```",72,"[assert(dif_Square(5) == true);, assert(dif_Square(10) == false);, assert(dif_Square(15) == true);]"
73,This is  a function to check whether it follows the sequence given in the patterns array.,"```
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <string>

std::pair<bool, bool> is_samepatterns(const std::vector<std::string>& colors, const std::vector<std::string>& patterns) {
    if (colors.size() != patterns.size()) {
        return {false, false};    
    }

    std::unordered_map<std::string, std::vector<std::string>> sdict;
    std::unordered_set<std::string> pset;
    std::unordered_set<std::string> sset;    

    for (size_t i = 0; i < patterns.size(); ++i) {
        pset.insert(patterns[i]);
        sset.insert(colors[i]);
        sdict[patterns[i]].push_back(colors[i]);
    }

    if (pset.size() != sset.size()) {
        return {false, false};   
    } 

    for (const auto& values : sdict) {
        const std::vector<std::string>& colorValues = values.second;
        for (size_t i = 0; i < colorValues.size() - 1; ++i) {
            if (colorValues[i] != colorValues[i + 1]) {
                return {false, false};
            }
        }
    }
    
    return {true, true};
}
```",74,"[assert(is_samepatterns({ ""red"", ""green"", ""green"" }, { ""a"", ""b"", ""b"" }).first == true);, assert(is_samepatterns({ ""red"", ""green"", ""greenn"" }, { ""a"", ""b"", ""b"" }).first == false);, assert(is_samepatterns({ ""red"", ""green"", ""greenn"" }, { ""a"", ""b"" }).first == false);]"
74,This is  a function to find tuples which have all elements divisible by k from the given list of tuples.,"```
#include <vector>
#include <string>
#include <sstream>
#include <utility>

std::pair<std::string, std::vector<std::vector<int>>> find_tuples(const std::vector<std::vector<int>>& test_list, int K) {
    std::vector<std::vector<int>> res;

    // Filter sublists divisible by K
    for (const auto& sub : test_list) {
        bool all_divisible = true;
        for (const auto& ele : sub) {
            if (ele % K != 0) {
                all_divisible = false;
                break;
            }
        }
        if (all_divisible) {
            res.push_back(sub);
        }
    }

    // Create formatted string
    std::ostringstream oss;
    oss << ""["";
    for (size_t i = 0; i < res.size(); ++i) {
        oss << ""("";
        for (size_t j = 0; j < res[i].size(); ++j) {
            oss << res[i][j];
            if (j < res[i].size() - 1) oss << "", "";
        }
        oss << "")"";
        if (i < res.size() - 1) oss << "", "";
    }
    oss << ""]"";

    return { oss.str(), res };
}```",75,"[assert(find_tuples({ {6, 24, 12}, {7, 9, 6}, {12, 18, 21} }, 6).first == ""[(6, 24, 12)]"");, assert(find_tuples({ {5, 25, 30}, {4, 2, 3}, {7, 8, 9} }, 5).first == ""[(5, 25, 30)]"");, assert(find_tuples({ {7, 9, 16}, {8, 16, 4}, {19, 17, 18} }, 4).first == ""[(8, 16, 4)]"");]"
75,This is  a C++ function to count the number of squares in a rectangle.,"```
#include <tuple>
#include <algorithm>

int count_Squares(int m, int n) {
    if (n < m) {
        std::swap(m, n);
    }
    int total_squares = (m * (m + 1) * (2 * m + 1)) / 6 + (n - m) * m * (m + 1) / 2;
    return total_squares;
}```",76,"[assert(count_Squares(4, 3) == 20);, assert(count_Squares(2, 2) == 5);, assert(count_Squares(1, 1) == 1);]"
76,This is  a C++ function to find the difference between sum of even and odd digits.,"```
bool is_Diff(int n) {
    return (n % 11 == 0);
}
```",77,"[assert(is_Diff(12345) == false);, assert(is_Diff(1212112) == true);, assert(is_Diff(1212) == false);]"
77,This is  a C++ function to find number of integers with odd number of set bits.,"```
#include <iostream>
#include <bitset>

std::pair<double, double> count_With_Odd_SetBits(int n) {
    if (n % 2 != 0) {
        return { (n + 1) / 2.0, 0 }; // Returning a pair, second value is a placeholder
    }
    int count = std::bitset<32>(n).count();
    double ans = n / 2.0;
    if (count % 2 != 0) {
        ans += 1;
    }
    return { ans, 0 }; // Returning a pair, second value is a placeholder
}
```",78,"[assert(count_With_Odd_SetBits(5).first == 3);, assert(count_With_Odd_SetBits(10).first == 5);, assert(count_With_Odd_SetBits(15).first == 8);]"
78,This is  a C++ function to check whether the length of the word is odd or not.,"```
#include <iostream>
#include <sstream>
#include <vector>

bool word_len(const std::string& s) {
    std::istringstream iss(s);
    std::string word;
    while (iss >> word) {
        if (word.length() % 2 != 0) {
            return true;
        } else {
            return false;
        }
    }
    return false; // to handle empty input case
}
```",79,"[assert(word_len(""Hadoop"") == false);, assert(word_len(""great"") == true);, assert(word_len(""structure"") == true);]"
79,This is  a function to find the nth tetrahedral number.,"```
double tetrahedral_number(int n) {
    return static_cast<double>(n * (n + 1) * (n + 2)) / 6;
}```",80,"[assert(tetrahedral_number(5) == 35.0);, assert(tetrahedral_number(6) == 56.0);, assert(tetrahedral_number(7) == 84.0);]"
82,This is  a C++ function to find the character made by adding all the characters of the given string.,"```
#include <string>

char get_Char(const std::string& strr) {
    int summ = 0;

    // Calculate the sum of the positions of the characters
    for (size_t i = 0; i < strr.length(); ++i) {
        summ += (strr[i] - a + 1);
    }

    // Determine the resulting character
    if (summ % 26 == 0) {
        return z;
    }
    else {
        summ = summ % 26;
        return a + summ - 1;
    }
}```",83,"[assert(get_Char(""abc"") == \f\);, assert(get_Char(""gfg"") == \t\);, assert(get_Char(""ab"") == \c\);]"
83,This is  a function to find the n-th number in newman conway sequence.,"```
#include <iostream>

int sequence(int n) {
    if (n == 1 || n == 2) {
        return 1;
    } else {
        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));
    }
}
```",84,"[assert(sequence(10) == 6);, assert(sequence(2) == 1);, assert(sequence(3) == 2);]"
84,This is  a function to find the surface area of a sphere.,"```
#include <cmath>

std::pair<double, double> surfacearea_sphere(double r) {
    double surfacearea = 4 * M_PI * r * r;
    return {surfacearea, surfacearea};
}
```",85,"[assert(surfacearea_sphere(10) == 1256.6370614359173);, assert(surfacearea_sphere(15) == 2827.4333882308138);, assert(surfacearea_sphere(20) == 5026.548245743669);]"
85,This is  a function to find nth centered hexagonal number.,"```
#include <utility>

std::pair<int, int> centered_hexagonal_number(int n) {
    return std::make_pair(3 * n * (n - 1) + 1, 0);
}
```",86,"[assert(centered_hexagonal_number(10).first == 271);, assert(centered_hexagonal_number(2).first == 7);, assert(centered_hexagonal_number(9).first == 217);]"
86,This is  a function to merge three dictionaries into a single expression.,"```
#include <iostream>
#include <map>
#include <cassert>

std::map<std::string, std::string> mergeDictionariesThree(
    const std::map<std::string, std::string>& dict1,
    const std::map<std::string, std::string>& dict2,
    const std::map<std::string, std::string>& dict3) {

    std::map<std::string, std::string> mergedDict = dict1;
    mergedDict.insert(dict2.begin(), dict2.end());
    mergedDict.insert(dict3.begin(), dict3.end());

    return mergedDict;
}```",87,"[assert((mergeDictionariesThree( { {""R"", ""Red""}, {""B"", ""Black""}, {""P"", ""Pink""} }, { {""G"", ""Green""}, {""W"", ""White""} }, { {""O"", ""Orange""}, {""W"", ""White""}, {""B"", ""Black""} }) == std::map<std::string, std::string>{ {""B"", ""Black""}, { ""R"", ""Red"" }, { ""P"", ""Pink"" }, { ""G"", ""Green"" }, { ""W"", ""White"" }, { ""O"", ""Orange"" }}) && ""Test case 1 failed"");]"
87,This is  a function to get the frequency of the elements in a list.,"```
#include <vector>
#include <unordered_map>

std::unordered_map<int, int> freq_count(const std::vector<int>& list1) {
    std::unordered_map<int, int> freq_count;
    for (int num : list1) {
        freq_count[num]++;
    }
    return freq_count;
}
```",88,"[assert(freq_count({ 10,10,10,10,20,20,20,20,40,40,50,50,30 }) == (std::unordered_map<int, int>{ {10, 4}, { 20, 4 }, { 40, 2 }, { 50, 2 }, { 30, 1 }}));, assert(freq_count({ 1,2,3,4,3,2,4,1,3,1,4 }) == (std::unordered_map<int, int>{ {1, 3}, { 2, 2 }, { 3, 3 }, { 4, 3 }}));, assert(freq_count({ 5,6,7,4,9,10,4,5,6,7,9,5 }) == (std::unordered_map<int, int>{ {10, 1}, { 5, 3 }, { 6, 2 }, { 7, 2 }, { 4, 2 }, { 9, 2 }}));]"
89,This is  a C++ function to find the length of the longest word.,"```
#include <vector>
#include <string>

std::pair<int, int> len_log(const std::vector<std::string>& list1) {
    int max = list1[0].length();
    for (const auto& i : list1) {
        if (i.length() > max) {
            max = i.length();
        }
    }
    return {max, 0}; // Assuming you want to return a second value as per the original function signature
}
```",90,"[assert(len_log({ ""C++"", ""PHP"", ""bigdata"" }).first == 7);, assert(len_log({ ""a"", ""ab"", ""abc"" }).first == 3);, assert(len_log({ ""small"", ""big"", ""tall"" }).first == 5);]"
90,This is  a function to check if a substring is present in a given list of string values.,"```
#include <string>
#include <vector>

bool find_substring(const std::vector<std::string>& str1, const std::string& sub_str) {
    for (const auto& s : str1) {
        if (s.find(sub_str) != std::string::npos) {
            return true;
        }
    }
    return false;
}
```",91,"[assert(find_substring({ ""red"", ""black"", ""white"", ""green"", ""orange"" }, ""ack"") == true);, assert(find_substring({ ""red"", ""black"", ""white"", ""green"", ""orange"" }, ""abc"") == false);, assert(find_substring({ ""red"", ""black"", ""white"", ""green"", ""orange"" }, ""ange"") == true);]"
91,This is  a function to check whether the given number is undulating or not.,"```
#include <string>

bool is_undulating(const std::string& n) {
    if (n.size() < 3) {
        return false; // Undulating numbers must have at least 3 digits
    }

    char first = n[0];
    char second = n[1];

    // Alternation check
    for (size_t i = 0; i < n.size(); ++i) {
        if (i % 2 == 0 && n[i] != first) {
            return false;
        }
        if (i % 2 == 1 && n[i] != second) {
            return false;
        }
    }

    return true;
}```",92,"[assert(is_undulating(""1212121"") == true);, assert(is_undulating(""1991"") == false);, assert(is_undulating(""121"") == true);, assert(is_undulating(""123123123"") == false);, assert(is_undulating(""1"") == false);, assert(is_undulating(""12"") == false);        ]"
93,This is  a function to extract the index minimum value record from the given tuples.,"```
#include <vector>
#include <string>
#include <algorithm>
#include <utility>

std::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {
    auto res = *std::min_element(test_list.begin(), test_list.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
        });
    return res.first;
}```",94,"[assert(index_minimum({ {""Rash"", 143}, {""Manjeet"", 200}, {""Varsha"", 100} }) == ""Varsha"");, assert(index_minimum({ {""Yash"", 185}, {""Dawood"", 125}, {""Sanya"", 175} }) == ""Dawood"");, assert(index_minimum({ {""Sai"", 345}, {""Salman"", 145}, {""Ayesha"", 96} }) == ""Ayesha"");]"
94,This is  a C++ function to find the minimum length of sublist.,"```
#include <vector>
#include <string>
#include <algorithm>
#include <limits>

std::pair<int, int> Find_Min_Length(const std::vector<std::string>& lst) {
    int minLength = std::numeric_limits<int>::max();
    for (const auto& x : lst) {
        minLength = std::min(minLength, static_cast<int>(x.length()));
    }
    return {minLength, 0}; // Adjust the second return value as needed
}
```",95,"[assert(Find_Min_Length({ {1}, {1, 2} }).first == 1);, assert(Find_Min_Length({ {1, 2}, {1, 2, 3}, {1, 2, 3, 4} }).first == 2);, assert(Find_Min_Length({ {3, 3, 3}, {4, 4, 4, 4} }).first == 3);]"
96,This is  a function to find frequency count of list of lists.,"```
#include <vector>
#include <unordered_map>

std::unordered_map<int, int> frequency_lists(const std::vector<std::vector<int>>& list1) {
    std::vector<int> flat_list;
    for (const auto& sublist : list1) {
        flat_list.insert(flat_list.end(), sublist.begin(), sublist.end());
    }

    std::unordered_map<int, int> dic_data;
    for (int num : flat_list) {
        dic_data[num]++;
    }

    return dic_data;
}
```",97,"[assert(frequency_lists({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}) == (std::unordered_map<int, int>{{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}));, assert(frequency_lists({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}) == (std::unordered_map<int, int>{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}));, assert(frequency_lists({{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}}) == (std::unordered_map<int, int>{{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}));]"
97,This is  a function to multiply all the numbers in a list and divide with the length of the list.,"```

#include <vector>
#include <string>
#include <algorithm>
#include <utility>

std::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {
    auto res = *std::min_element(test_list.begin(), test_list.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
        });
    return res.first;
}```",98,"[assert(index_minimum({ {""Rash"", 143}, {""Manjeet"", 200}, {""Varsha"", 100} }) == ""Varsha"");, assert(index_minimum({ {""Yash"", 185}, {""Dawood"", 125}, {""Sanya"", 175} }) == ""Dawood"");, assert(index_minimum({ {""Sai"", 345}, {""Salman"", 145}, {""Ayesha"", 96} }) == ""Ayesha"");]"
98,This is  a function to convert the given decimal number to its binary equivalent.,"```
#include <iostream>
#include <string>
#include <bitset>

std::string decimal_to_binary(int n) {
    if (n == 0) return ""0"";  // Special case for zero
    return std::bitset<32>(n).to_string().substr(std::bitset<32>(n).to_string().find(1));
}```",99,"[assert(decimal_to_binary(8) == ""1000"");, assert(decimal_to_binary(18) == ""10010"");, assert(decimal_to_binary(7) == ""111"");, assert(decimal_to_binary(0) == ""0""); // Edge case, assert(decimal_to_binary(1) == ""1""); // Single-bit case]"
99,This is  a function to find the next smallest palindrome of a specified number.,"```
#include <iostream>
#include <string>

long long next_smallest_palindrome(long long num) {
    for (long long i = num + 1; i < LLONG_MAX; ++i) {
        std::string numstr = std::to_string(i);
        std::string revstr = std::string(numstr.rbegin(), numstr.rend());
        if (numstr == revstr) {
            return i;
        }
    }
    return -1; // In case theres no palindrome found (theoretically it should never reach here)
}
```",100,"[assert(next_smallest_palindrome(99) == 101);, assert(next_smallest_palindrome(1221) == 1331);, assert(next_smallest_palindrome(120) == 121);]"
100,This is  a function to find the kth element in the given array.,"```
#include <iostream>
#include <cassert>

int kthElement(int arr[], int n, int k) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    return arr[k - 1];
}```",101,"[assert(kthElement(new int[] {12, 3, 5, 7, 19}, 5, 2) == 5);, assert(kthElement(new int[] {17, 24, 8, 23}, 4, 3) == 23);, assert(kthElement(new int[] {16, 21, 25, 36, 4}, 5, 4) == 25);]"
101,This is  a function to convert snake case string to camel case string.,"```
#include <iostream>
#include <string>
#include <sstream>
#include <cctype>
#include <vector>
#include <cassert>

std::string snake_to_camel(const std::string& word) {
    std::string result;
    std::istringstream iss(word);
    std::string token;

    while (std::getline(iss, token, _)) {
        if (!result.empty()) {
            // Capitalize the first letter of the token
            token[0] = static_cast<char>(toupper(token[0]));
        }
        result += token;
    }

    // Capitalize the first letter of the final result
    if (!result.empty()) {
        result[0] = static_cast<char>(toupper(result[0]));
    }

    return result;
}```",102,"[assert(snake_to_camel(""C++_program"") == ""C++Program"");, assert(snake_to_camel(""C++_language"") == ""C++Language"");, assert(snake_to_camel(""programming_language"") == ""ProgrammingLanguage"");]"
102,"This is  a function to find eulerian number a(n, m).","```
#include <iostream>

int eulerian_num(int n, int m) { 
    if (m >= n || n == 0) 
        return 0; 
    if (m == 0) 
        return 1; 
    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m); 
}
```",103,"[assert(eulerian_num(3, 1) == 4);, assert(eulerian_num(4, 1) == 11);, assert(eulerian_num(5, 3) == 26);]"
103,This is  a function to sort each sublist of strings in a given list of lists using lambda function.,"```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>


// Function to sort sublists
std::vector<std::vector<std::string>> sort_sublists(const std::vector<std::vector<std::string>>& input_list) {
    std::vector<std::vector<std::string>> result;
    for (const auto& x : input_list) {
        std::vector<std::string> sorted_x = x;
        std::sort(sorted_x.begin(), sorted_x.end());
        result.push_back(sorted_x);
    }
    return result;
}```",104,"[assert((sort_sublists({ {""green"", ""orange""}, {""black"", ""white""}, {""white"", ""black"", ""orange""} }) == std::vector<std::vector<std::string>>{ {""green"", ""orange""}, { ""black"", ""white"" }, { ""black"", ""orange"", ""white"" } }));, assert((sort_sublists({ {""red"", ""green""}, {""blue"", ""black""}, {""orange"", ""brown""} }) == std::vector<std::vector<std::string>>{ {""green"", ""red""}, { ""black"", ""blue"" }, { ""brown"", ""orange"" } }));, assert((sort_sublists({ {""zilver"", ""gold""}, {""magnesium"", ""aluminium""}, {""steel"", ""bronze""} }) == std::vector<std::vector<std::string>>{ {""gold"", ""zilver""}, { ""aluminium"", ""magnesium"" }, { ""bronze"", ""steel"" } }));]"
104,This is  a C++ function to count true booleans in the given list.,"```
#include <vector>
#include <numeric>

std::pair<int, int> count(const std::vector<int>& lst) {
    return {std::accumulate(lst.begin(), lst.end(), 0), 0}; // The second value is just a placeholder
}
```",105,"[assert(count({ true, false, true }).first == 2);, assert(count({ false, false }).first == 0);, assert(count({ true, true, true }).first == 3);]"
105,This is  a function to add the given list to the given tuples.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> addLists(const std::vector<int>& testList, const std::vector<int>& testTup) {
    std::vector<int> res;
    res.reserve(testList.size() + testTup.size()); // Reserve space for the result vector

    // Copy the elements from testTup
    res.insert(res.end(), testTup.begin(), testTup.end());

    // Copy the elements from testList
    res.insert(res.end(), testList.begin(), testList.end());

    return res;
}```",106,"[assert((addLists({ 5, 6, 7 }, { 9, 10 }) == std::vector<int>{9, 10, 5, 6, 7}));, assert((addLists({ 6, 7, 8 }, { 10, 11 }) == std::vector<int>{10, 11, 6, 7, 8}));, assert((addLists({ 7, 8, 9 }, { 11, 12 }) == std::vector<int>{11, 12, 7, 8, 9}));]"
106,This is  a C++ function to count hexadecimal numbers for a given range.,"```
#include <iostream>
using namespace std;

int count_Hexadecimal(int L, int R) {  
    int count = 0;  
    for (int i = L; i <= R; i++) { 
        if (i >= 10 && i <= 15) { 
            count++;  
        } else if (i > 15) { 
            int k = i;  
            while (k != 0) {  
                if (k % 16 >= 10) { 
                    count++;  
                } 
                k = k / 16;  
            } 
        } 
    } 
    return count;  
}
```",107,"[assert(count_Hexadecimal(10, 15) == 6);, assert(count_Hexadecimal(2, 4) == 0);, assert(count_Hexadecimal(15, 16) == 1);]"
107,This is  a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"```
#include <vector>
#include <algorithm>
#include <queue>
#include <cassert>

std::vector<int> merge_sorted_list(std::vector<int> num1, std::vector<int> num2, std::vector<int> num3) {
    std::sort(num1.begin(), num1.end());
    std::sort(num2.begin(), num2.end());
    std::sort(num3.begin(), num3.end());

    std::vector<int> result;
    std::priority_queue<int, std::vector<int>, std::greater<int>> min_heap;

    for (int num : num1) min_heap.push(num);
    for (int num : num2) min_heap.push(num);
    for (int num : num3) min_heap.push(num);

    while (!min_heap.empty()) {
        result.push_back(min_heap.top());
        min_heap.pop();
    }

    return result;
}```",108,"[assert((merge_sorted_list({ 25, 24, 15, 4, 5, 29, 110 }, { 19, 20, 11, 56, 25, 233, 154 }, { 24, 26, 54, 48 }) == std::vector<int>{4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}));, assert((merge_sorted_list({ 1, 3, 5, 6, 8, 9 }, { 2, 5, 7, 11 }, { 1, 4, 7, 8, 12 }) == std::vector<int>{1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}));, assert((merge_sorted_list({ 18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1 }, { 25, 35, 22, 85, 14, 65, 75, 25, 58 }, { 12, 74, 9, 50, 61, 41 }) == std::vector<int>{1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}));]"
108,This is  a C++ function to find the count of rotations of a binary string with odd value.,"```
#include <string>

std::pair<int, int> odd_Equivalent(const std::string& s, int n) { 
    int count = 0; 
    for (int i = 0; i < n; i++) { 
        if (s[i] == 1) { 
            count = count + 1; 
        } 
    } 
    return {count, 0}; 
}
```",109,"[assert(odd_Equivalent(""011001"", 6).first == 3);, assert(odd_Equivalent(""11011"", 5).first == 4);, assert(odd_Equivalent(""1010"", 4).first == 2);]"
109,This is  a function to extract the ranges that are missing from the given list with the given start range and end range values.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<std::vector<int>> extractMissing(const std::vector<std::vector<int>>& testList, int strtVal, int stopVal) {
    std::vector<std::vector<int>> res;

    for (const auto& sub : testList) {
        if (sub[0] > strtVal) {
            res.push_back({ strtVal, sub[0] });
            strtVal = sub[1];
        }
    }

    if (strtVal < stopVal) {
        res.push_back({ strtVal, stopVal });
    }

    return res;
}```",110,"[assert((extractMissing({ {6, 9}, {15, 34}, {48, 70} }, 2, 100) == std::vector<std::vector<int>>{ {2, 6}, { 9, 15 }, { 34, 48 }, { 70, 100 }}));, assert((extractMissing({ {7, 2}, {15, 19}, {38, 50} }, 5, 60) == std::vector<std::vector<int>>{ {5, 7}, { 2, 15 }, { 19, 38 }, { 50, 60 }}));, assert((extractMissing({ {7, 2}, {15, 19}, {38, 50} }, 1, 52) == std::vector<std::vector<int>>{ {1, 7}, { 2, 15 }, { 19, 38 }, { 50, 52 }}));]"
110,This is  a function to find common elements in given nested lists. * list item * list item * list item * list item,"```
#include <vector>
#include <set>
#include <algorithm>
#include <iterator>  // For std::inserter
#include <cassert>

std::vector<int> common_in_nested_lists(const std::vector<std::vector<int>>& nestedlist) {
    std::set<int> result_set;
    if (!nestedlist.empty()) {
        result_set = std::set<int>(nestedlist[0].begin(), nestedlist[0].end());
        for (const auto& list : nestedlist) {
            std::set<int> current_set(list.begin(), list.end());
            std::set<int> intersection;
            std::set_intersection(result_set.begin(), result_set.end(),
                current_set.begin(), current_set.end(),
                std::inserter(intersection, intersection.begin()));
            result_set = intersection;
        }
    }
    std::vector<int> result(result_set.begin(), result_set.end());
    std::sort(result.begin(), result.end());  // Ensure the result is sorted
    return result;
}```",111,"[assert(common_in_nested_lists({ {12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18} }) == std::vector<int>({ 12, 18 }));, assert(common_in_nested_lists({ {12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16} }) == std::vector<int>({ 5, 23 }));, assert(common_in_nested_lists({ {2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4} }) == std::vector<int>({ 4 }));]"
111,This is  a C++ function to find the perimeter of a cylinder.,"```
#include <utility>
#include <cassert>

double perimeter(double diameter, double height) {
    return 2 * (diameter + height);  // Perimeter of a rectangle or similar shape
}```",112,"[assert(perimeter(2, 4) == 12);, assert(perimeter(1, 2) == 6);, assert(perimeter(3, 1) == 8);]"
112,This is  a function to check if a string represents an integer or not.,"```
#include <string>
#include <cctype>
#include <algorithm>  // For std::all_of
#include <cassert>

bool check_integer(const std::string& text) {
    std::string trimmed_text = text;

    // Trim leading and trailing whitespaces
    trimmed_text.erase(0, trimmed_text.find_first_not_of("" \t\n""));
    trimmed_text.erase(trimmed_text.find_last_not_of("" \t\n"") + 1);

    if (trimmed_text.empty()) {
        return false; // Return false if the string is empty after trimming
    }

    if (std::all_of(trimmed_text.begin(), trimmed_text.end(), ::isdigit)) {
        return true; // Its a valid integer without signs
    }
    else if ((trimmed_text[0] == + || trimmed_text[0] == -) &&
        std::all_of(trimmed_text.begin() + 1, trimmed_text.end(), ::isdigit)) {
        return true; // Its a valid integer with a sign
    }
    else {
        return false; // Its neither a valid integer nor a signed integer
    }
}```",113,"[assert(check_integer(""C++"") == false);, assert(check_integer(""1"") == true);, assert(check_integer(""12345"") == true);]"
113,This is  a function to assign frequency to each tuple in the given tuple list.,"```
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <sstream>
#include <algorithm>
#include <numeric>  // Include this header for std::accumulate
#include <cassert>

std::string assignFreq(const std::vector<std::vector<int>>& testList) {
    std::map<std::string, int> frequencyMap;

    // Iterate through each array and count the frequencies
    for (const auto& item : testList) {
        std::stringstream ss;
        ss << ""["";
        for (size_t i = 0; i < item.size(); ++i) {
            ss << item[i];
            if (i != item.size() - 1) {
                ss << "", "";
            }
        }
        ss << ""]"";
        std::string itemStr = ss.str();
        frequencyMap[itemStr]++;
    }

    // Prepare the result
    std::vector<std::string> res;
    for (const auto& entry : frequencyMap) {
        std::string formatted = entry.first.substr(1, entry.first.size() - 2) + "", "" + std::to_string(entry.second);
        res.push_back(""("" + formatted + "")"");
    }

    // Sort the result
    std::sort(res.begin(), res.end());

    // Join the list into a single string separated by commas
    return std::accumulate(res.begin(), res.end(), std::string(""""), [](const std::string& a, const std::string& b) {
        return a + (a.empty() ? """" : "", "") + b;
    });
}```",114," [ assert(assignFreq({{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}}) == ""(2, 7, 2), (6, 5, 8, 3), (9, 1)"");,

    
    assert(assignFreq({{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}}) == ""(4, 2, 4, 2), (4, 8, 1), (7, 1, 2), (9, 2, 1)"");,

    
    assert(assignFreq({{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}}) == ""(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)"");]"
114,This is  a function to check whether all dictionaries in a list are empty or not.,"```
#include <vector>
#include <unordered_map>

bool empty_dit(const std::unordered_map<int, int>& dict) {
    return dict.empty();
}```",115,"[assert(empty_dit({}) == true);, assert(empty_dit({ {1, 2}, {}, {} }) == false);, assert(empty_dit({}) == true)]"
115,This is  a function to convert a given tuple of positive integers into an integer.,"```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>

int tuple_to_int(const std::vector<int>& nums) {
    std::string result_str;
    for (int num : nums) {
        result_str += std::to_string(num);
    }
    int result = std::stoi(result_str);
    return result; 
}```",116,"[assert(tuple_to_int({ 1, 2, 3 }) == 123);, assert(tuple_to_int({ 4, 5, 6 }) == 456);, assert(tuple_to_int({ 5, 6, 7 }) == 567);]"
116,This is  a function to convert all possible convertible elements in the list to float.,"```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <sstream>
#include <cctype>
#include <variant>

// Helper function to check if a string can be converted to float
bool isConvertibleToFloat(const std::string& str) {
    std::istringstream iss(str);
    float f;
    iss >> std::noskipws >> f; // noskipws to ensure no extra characters
    return iss.eof() && !iss.fail();
}

// Function to convert convertible elements to float, others remain unchanged
std::vector<std::variant<float, std::string>> convertToFloat(const std::vector<std::string>& input) {
    std::vector<std::variant<float, std::string>> result;

    for (const auto& element : input) {
        if (isConvertibleToFloat(element)) {
            result.push_back(std::stof(element));
        } else {
            result.push_back(element);
        }
    }

    return result;
}```",117," [assert(std::get<float>(convertToFloat({""123.45""})[0]) == 123.45f);,
    assert(std::get<std::string>(convertToFloat({""hello""})[0]) == ""hello"");,
    assert(std::get<float>(convertToFloat({""-987.65""})[0]) == -987.65f);,
    assert(std::get<float>(convertToFloat({""42""})[0]) == 42.0f);,
    assert(std::get<std::string>(convertToFloat({""notANumber""})[0]) == ""notANumber"");]"
117,This is  a function to convert a string to a list.,"```
#include <iostream>
#include <vector>
#include <sstream>
#include <cassert>

std::vector<std::string> string_to_list(const std::string& str) {
    std::vector<std::string> lst;
    std::stringstream ss(str);
    std::string item;

    while (ss >> item) {
        lst.push_back(item);
    }

    return lst;
}```",118,"[assert((string_to_list(""C++ programming"") == std::vector<std::string>{""C++"", ""programming""}));, assert((string_to_list(""lists tuples strings"") == std::vector<std::string>{""lists"", ""tuples"", ""strings""}));]"
118,This is  a C++ function to find the element that appears only once in a sorted array.,"```
#include <vector>

int search(const std::vector<int>& arr) {
    int XOR = 0;
    for (int num : arr) {
        XOR = XOR ^ num;
    }
    return XOR;
}```",119,"[assert(search({ 1, 1, 2, 2, 3 }) == 3);, assert(search({ 1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8 }) == 8);, assert(search({ 1, 2, 2, 3, 3, 4, 4 }) == 1);]"
119,This is  a function to find the maximum product from the pairs of tuples within a given list.,"```


#include <vector>
#include <algorithm>
#include <cmath>
#include <cassert>

std::pair<int, std::pair<int, int>> max_product_tuple(const std::vector<std::pair<int, int>>& list1) {
    int max_product = 0;
    std::pair<int, int> max_pair = { 0, 0 };

    for (const auto& p : list1) {
        int product = std::abs(p.first * p.second);
        if (product > max_product) {
            max_product = product;
            max_pair = p;
        }
    }
    return { max_product, max_pair };
}```",120,"[assert(max_product_tuple({ {2, 7}, {2, 6}, {1, 8}, {4, 9} }).first == 36);, assert(max_product_tuple({ {10, 20}, {15, 2}, {5, 10} }).first == 200);, assert(max_product_tuple({ {11, 44}, {10, 15}, {20, 5}, {12, 9} }).first == 484);]"
120,This is  a function to find the triplet with sum of the given array,"```
#include <vector>

// Check if there is a triplet in array A that sums up to the given sum
bool check_triplet(const std::vector<int>& A, int n, int sum, int count) {
    if (count == 3 && sum == 0) {
        return true;
    }
    if (count == 3 || n == 0 || sum < 0) {
        return false;
    }
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) ||
        check_triplet(A, n - 1, sum, count);
}```",121,"[assert(check_triplet({ 2, 7, 4, 0, 9, 5, 1, 3 }, 8, 6, 0) == true);, assert(check_triplet({ 1, 4, 5, 6, 7, 8, 5, 9 }, 8, 6, 0) == false);, assert(check_triplet({ 10, 4, 2, 3, 5 }, 5, 15, 0) == true);]"
121,This is  a function to find n’th smart number.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

const int MAX = 3000;

int smartNumber(int n) {
    std::vector<int> primes(MAX, 0);    // Array to track prime factors
    std::vector<int> result;           // Store numbers with exactly 3 distinct prime factors

    for (int i = 2; i < MAX; ++i) {
        if (primes[i] == 0) {          // If `i` is a prime number
            primes[i] = 1;
            for (int j = i * 2; j < MAX; j += i) {
                primes[j]--;           // Decrease prime factor count for multiples of `i`
                if ((primes[j] + 3) == 0) {
                    result.push_back(j); // Add numbers with exactly 3 prime factors
                }
            }
        }
    }

    std::sort(result.begin(), result.end()); // Sort the result list
    return result[n - 1];                    // Return the nth smart number
}```",122,"[assert(smartNumber(1) == 30);, assert(smartNumber(50) == 273);, assert(smartNumber(1000) == 2664);]"
122,This is  a function to sum all amicable numbers from 1 to a specified number.,"```
#include <iostream>
#include <set>
#include <cassert>

int amicable_numbers_sum(int limit) {
    if (limit < 1) {
        return 0; // Return 0 if the input is less than 1.
    }

    std::set<int> amicables;
    for (int num = 2; num <= limit; num++) {
        if (amicables.find(num) != amicables.end()) {
            continue;
        }

        int sum_fact = 0;
        for (int fact = 1; fact < num; fact++) {
            if (num % fact == 0) {
                sum_fact += fact;
            }
        }

        int sum_fact2 = 0;
        for (int fact = 1; fact < sum_fact; fact++) {
            if (sum_fact % fact == 0) {
                sum_fact2 += fact;
            }
        }

        if (num == sum_fact2 && num != sum_fact) {
            amicables.insert(num);
            amicables.insert(sum_fact);
        }
    }

    int total_sum = 0;
    for (int num : amicables) {
        total_sum += num;
    }

    return total_sum;
}```",123,"[assert(amicable_numbers_sum(999) == 504);, assert(amicable_numbers_sum(9999) == 31626);, assert(amicable_numbers_sum(99) == 0);]"
123,This is  a function to get the angle of a complex number.,"```
#include <complex>
#include <cmath>

double angle_complex(double real, double imag) {
    std::complex<double> z(real, imag);
    return std::arg(z);
}```",124,"[assert(angle_complex(0, 1) == 1.5707963267948966);, assert(angle_complex(2, 1) == 0.4636476090008061);, assert(angle_complex(0, 2) == 1.5707963267948966);]"
124,This is  a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"```
#include <string>
#include <algorithm>

int find_length(const std::string& str, int n) {
    int current_sum = 0;
    int max_sum = 0;
    for (int i = 0; i < n; ++i) {
        current_sum += (str[i] == 0 ? 1 : -1);
        if (current_sum < 0) {
            current_sum = 0;
        }
        max_sum = std::max(current_sum, max_sum);
    }
    return max_sum; // Return only the maximum sum
}```",125,"[assert(find_length(""11000010001"", 11) == 6);, assert(find_length(""10111"", 5) == 1);, assert(find_length(""11011101100101"", 14) == 2);]"
126,This is  a function to multiply two integers without using the * operator in C++.,"```
int multiply_int(int x, int y) {
    if (y < 0) {
        return -multiply_int(x, -y);
    } else if (y == 0) {
        return 0;
    } else if (y == 1) {
        return x;
    } else {
        return x + multiply_int(x, y - 1);
    }
}
```",127,"[assert(multiply_int(10, 20) == 200);, assert(multiply_int(5, 10) == 50);, assert(multiply_int(4, 8) == 32);]"
127,This is  a function to shortlist words that are longer than n from a given list of words.,"```
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <cassert>
#include <iostream>

std::vector<std::string> longWords(int n, const std::string& str) {
    std::vector<std::string> wordLen;
    std::istringstream txt(str);
    std::string word;

    while (txt >> word) {
        if (word.length() > n) {
            wordLen.push_back(word);
        }
    }
    return wordLen;
}
```",128,"[assert((longWords(3, ""python is a programming language"") == std::vector<std::string>{""python"", ""programming"", ""language""}));, assert((longWords(2, ""writing a program"") == std::vector<std::string>{""writing"", ""program""}));, assert(longWords(5, ""sorting list"") == std::vector<std::string>{""sorting""});]"
129,This is  a function to find the item with maximum frequency in a given list.,"```
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <utility>

std::pair<int, int> max_occurrences(const std::vector<int>& nums) {
    std::unordered_map<int, int> dict;
    for (int i : nums) {
        dict[i] += 1;
    }
    auto result = std::max_element(dict.begin(), dict.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
    });
    return *result;
}
```",130,"[assert(max_occurrences({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}) == std::make_pair(2, 5));, assert(max_occurrences({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18}) == std::make_pair(8, 2));, assert(max_occurrences({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}) == std::make_pair(20, 3));]"
130,This is  a C++ function to reverse only the vowels of a given string.,"```

#include <string>
#include <utility> // For std::pair

std::pair<std::string, std::string> reverse_vowels(const std::string& str1) {
    std::string vowels = """";
    for (char ch : str1) {
        if (ch == a || ch == e || ch == i || ch == o || ch == u ||
            ch == A || ch == E || ch == I || ch == O || ch == U) {
            vowels += ch;
        }
    }

    std::string result_string = """";
    for (char ch : str1) {
        if (ch == a || ch == e || ch == i || ch == o || ch == u ||
            ch == A || ch == E || ch == I || ch == O || ch == U) {
            result_string += vowels.back();
            vowels.pop_back();
        }
        else {
            result_string += ch;
        }
    }

    return { result_string, """" }; // The second string is not used in the original code
}```",131,"[assert(reverse_vowels(""C++"").first == ""C++"");, assert(reverse_vowels(""USA"").first == ""ASU"");, assert(reverse_vowels(""ab"").first == ""ab"");]"
131,This is  a function to convert tuple to a string.,"```
#include <cassert>
#include <string>
#include <tuple>
#include <utility> // For std::pair

std::pair<std::string, std::string> tup_string(const std::tuple<std::string>& tup1) {
    std::string str = std::get<0>(tup1);
    return { str, """" }; // Provide a second value (empty string)
}```",132,"[assert(tup_string(std::make_tuple(""exercises"")).first == ""exercises"");, assert(tup_string(std::make_tuple(""C++"")).first == ""C++"");, assert(tup_string(std::make_tuple(""program"")).first == ""program"");]"
132,This is  a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"```
#include <vector>
#include <numeric>

int sum_negativenum(const std::vector<int>& nums) {
    return std::accumulate(nums.begin(), nums.end(), 0, [](int sum, int num) {
        return num < 0 ? sum + num : sum;
        });
}```",133,"[assert(sum_negativenum({ 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == -32);, assert(sum_negativenum({ 10, 15, -14, 13, -18, 12, -20 }) == -52);, assert(sum_negativenum({ 19, -65, 57, 39, 152, -639, 121, 44, 90, -190 }) == -894);]"
133,This is  a C++ function to check whether the last element of given array is even or odd after performing an operation p times.,"```
#include <iostream>
#include <vector>
#include <string>

std::string check_last(std::vector<int> arr, int n, int p) {
    int _sum = 0;
    for (int i = 0; i < n; i++) {
        _sum = _sum + arr[i];
    }
    if (p == 1) {
        if (_sum % 2 == 0) {
            return ""ODD"";
        } else {
            return ""EVEN"";
        }
    }
    return ""EVEN"";
}
```",134,"[assert(check_last({ 5, 7, 10 }, 3, 1) == ""ODD"");, assert(check_last({ 2, 3 }, 2, 3) == ""EVEN"");, assert(check_last({ 1, 2, 3 }, 3, 1) == ""ODD"");]"
134,This is  a function to find the nth hexagonal number.,"```
int hexagonal_num(int n) {
    return n * (2 * n - 1);
}```",135,"[assert(hexagonal_num(10) == 190);, assert(hexagonal_num(5) == 45);, assert(hexagonal_num(7) == 91);]"
135,This is  a function to calculate electricity bill.,"```
#include <iostream>
#include <utility> // For std::pair
using namespace std;

pair<double, double> cal_electbill(int units) {
    double amount, surcharge;
    if (units < 50) {
        amount = units * 2.60;
        surcharge = 25;
    }
    else if (units <= 100) {
        amount = 130 + ((units - 50) * 3.25);
        surcharge = 35;
    }
    else if (units <= 200) {
        amount = 130 + 162.50 + ((units - 100) * 5.26);
        surcharge = 45;
    }
    else {
        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);
        surcharge = 75;
    }
    double total = amount + surcharge;
    return make_pair(total, surcharge);
}```",136,"[assert(cal_electbill(75).first == 246.25);, assert(cal_electbill(265).first == 1442.75);, assert(cal_electbill(100).first == 327.5);]"
136,This is  a function to find the ration of zeroes in an array of integers.,"```
#include <vector>
#include <cmath>
#include <cassert>
#include <iostream>

double zeroCount(const std::vector<int>& nums) {
    int n = nums.size();
    int n1 = 0;
    for (int x : nums) {
        if (x == 0) {
            n1++;
        }
    }
    return std::round(static_cast<double>(n1) / n * 100.0) / 100.0;
}```",137,"[assert(std::abs(zeroCount({ 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }) - 0.15) < 0.01);, assert(std::abs(zeroCount({ 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) - 0.00) < 0.01);, assert(std::abs(zeroCount({ 2, 4, -6, -9, 11, -12, 14, -5, 17 }) - 0.00) < 0.01);]"
137,This is  a C++ function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"```
bool is_Sum_Of_Powers_Of_Two(int n) { 
    if (n % 2 == 1) { 
        return false; 
    } else { 
        return true; 
    } 
}
```",138,"[assert(is_Sum_Of_Powers_Of_Two(10) == true);, assert(is_Sum_Of_Powers_Of_Two(7) == false);, assert(is_Sum_Of_Powers_Of_Two(14) == true);]"
138,This is  a function to find the circumference of a circle.,"```
#include <iostream>
using namespace std;

pair<double, double> circle_circumference(double r) {
    double perimeter = 2 * 3.1415 * r;
    return make_pair(perimeter, perimeter);
}
```",139,"[assert(circle_circumference(10).first == 62.830000000000005);, assert(circle_circumference(5).first == 31.415000000000003);, assert(circle_circumference(4).first == 25.132);]"
139,This is  a function to extract elements that occur singly in the given tuple list.,"```
#include <vector>
#include <set>

std::pair<std::vector<int>, std::set<int>> extract_singly(const std::vector<std::vector<int>>& test_list) {
    std::vector<int> res;
    std::set<int> temp;
    for (const auto& inner : test_list) {
        for (const auto& ele : inner) {
            if (temp.find(ele) == temp.end()) {
                temp.insert(ele);
                res.push_back(ele);
            }
        }
    }
    return { res, temp };
}```",140,"[assert((extract_singly({ {3, 4, 5}, {4, 5, 7}, {1, 4} }).first == std::vector<int>{3, 4, 5, 7, 1}));, assert((extract_singly({ {1, 2, 3}, {4, 2, 3}, {7, 8} }).first == std::vector<int>{1, 2, 3, 4, 7, 8}));, assert((extract_singly({ {7, 8, 9}, {10, 11, 12}, {10, 11} }).first == std::vector<int>{7, 8, 9, 10, 11, 12}));]"
140,This is  a function to sort a list of elements using pancake sort.,"```
#include <vector>
#include <algorithm>

std::vector<int> pancake_sort(std::vector<int> nums) {
    int arr_len = nums.size();
    while (arr_len > 1) {
        int mi = std::max_element(nums.begin(), nums.begin() + arr_len) - nums.begin();
        std::reverse(nums.begin(), nums.begin() + mi + 1);
        std::reverse(nums.begin(), nums.begin() + arr_len);
        arr_len--;
    }
    return nums;
}```",141,"[assert(pancake_sort({ 15, 79, 25, 38, 69 }) == std::vector<int>({ 15, 25, 38, 69, 79 }));, assert(pancake_sort({ 98, 12, 54, 36, 85 }) == std::vector<int>({ 12, 36, 54, 85, 98 }));, assert(pancake_sort({ 41, 42, 32, 12, 23 }) == std::vector<int>({ 12, 23, 32, 41, 42 }));]"
141,This is  a function to count the same pair in three given lists.,"```
#include <vector>
#include <tuple>

std::pair<int, int> count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {
    int result = 0;
    size_t size = std::min({list1.size(), list2.size(), list3.size()});
    
    for (size_t i = 0; i < size; ++i) {
        if (list1[i] == list2[i] && list2[i] == list3[i]) {
            result++;
        }
    }
    return {result, 0};
}
```",142,"[assert(count_samepair({ 1,2,3,4,5,6,7,8 }, { 2,2,3,1,2,6,7,9 }, { 2,1,3,1,2,6,7,9 }).first == 3);, assert(count_samepair({ 1,2,3,4,5,6,7,8 }, { 2,2,3,1,2,6,7,8 }, { 2,1,3,1,2,6,7,8 }).first == 4);, assert(count_samepair({ 1,2,3,4,2,6,7,8 }, { 2,2,3,1,2,6,7,8 }, { 2,1,3,1,2,6,7,8 }).first == 5);]"
142,This is  a function to find number of lists present in the given tuple.,"```
#include <vector>
#include <cassert>
#include <iostream>

int findLists(const std::vector<std::vector<int>>& input) {
    return input.size(); // Return the number of rows (subarrays)
}```",143,"[assert(findLists({ {1, 2, 3, 4}, {5, 6, 7, 8} }) == 2);, assert(findLists({ {1, 2}, {3, 4}, {5, 6} }) == 3);, assert(findLists({ {9, 8, 7, 6, 5, 4, 3, 2, 1} }) == 1);]"
143,This is  a C++ function to find the sum of absolute differences in all pairs of the given array.,"```
#include <vector>

std::pair<int, int> sum_Pairs(std::vector<int>& arr, int n) {
    int sum = 0;
    for (int i = n - 1; i >= 0; --i) {
        sum += i * arr[i] - (n - 1 - i) * arr[i];
    }
    return {sum, 0}; // Assuming the second return value is 0 as it was not specified in your request
}
```",144,"[assert(sum_Pairs({ 1, 8, 9, 15, 16 }, 5).first == 74);, assert(sum_Pairs({ 1, 2, 3, 4 }, 4).first == 10);, assert(sum_Pairs({ 1, 2, 3, 4, 5, 7, 9, 11, 14 }, 9).first == 188);]"
144,This is  a C++ function to find the maximum difference between any two elements in a given array.,"```
#include <tuple>
#include <algorithm>
#include <vector>
#include <cmath> // Include to use std::abs
#include <cassert>

int max_Abs_Diff(const std::tuple<int, int, int, int>& nums, int target) {
    std::vector<int> vec = { std::get<0>(nums), std::get<1>(nums), std::get<2>(nums), std::get<3>(nums) };
    int max_diff = 0;
    for (int num : vec) {
        max_diff = std::max(max_diff, std::abs(num - target));
    }
    return max_diff;
}```",145,"[assert(max_Abs_Diff(std::make_tuple(2, 1, 5, 3), 4) == 3);, assert(max_Abs_Diff(std::make_tuple(9, 3, 2, 5), 5) == 4);, assert(max_Abs_Diff(std::make_tuple(3, 2, 1, 5), 3) == 2);  ]"
145,This is  a function to find the ascii value of total characters in a string.,"```
#include <iostream>
#include <string>

std::pair<int, char> ascii_value_string(const std::string& str1) {
    for (size_t i = 0; i < str1.length(); ++i) {
        return std::make_pair(static_cast<int>(str1[i]), str1[i]);
    }
    return std::make_pair(-1, \0); // return -1 and null character if the string is empty
}
```",146,"[assert(ascii_value_string(""C++"").first == 112);, assert(ascii_value_string(""Program"").first == 80);, assert(ascii_value_string(""Language"").first == 76);]"
146,This is  a function to find the maximum total path sum in the given triangle.,"```
#include <vector>
using namespace std;

pair<int, int> max_path_sum(vector<vector<int>>& tri, int m, int n) {
    for (int i = m - 1; i >= 0; --i) {
        for (int j = 0; j <= i; ++j) {
            if (tri[i + 1][j] > tri[i + 1][j + 1]) {
                tri[i][j] += tri[i + 1][j];
            } else {
                tri[i][j] += tri[i + 1][j + 1];
            }
        }
    }
    return {tri[0][0], 0};
}
```",147,"[assert(max_path_sum({ {1, 0, 0}, {4, 8, 0}, {1, 5, 3} }, 2, 2).first == 14);, assert(max_path_sum({ {13, 0, 0}, {7, 4, 0}, {2, 4, 6} }, 2, 2).first == 24);, assert(max_path_sum({ {2, 0, 0}, {11, 18, 0}, {21, 25, 33} }, 2, 2).first == 53);]"
147,This is  a function to divide a number into two parts such that the sum of digits is maximum.,"```
#include <iostream>
using namespace std;

int sum_digits_single(int x) {
    int ans = 0;
    while (x) {
        ans += x % 10;
        x /= 10;
    }
    return ans;
}

int closest(int x) {
    int ans = 0;
    while (ans * 10 + 9 <= x) {
        ans = ans * 10 + 9;
    }
    return ans;
}

pair<int, int> sum_digits_twoparts(int N) {
    int A = closest(N);
    return make_pair(sum_digits_single(A) + sum_digits_single(N - A), 0);
}
```",148,"[assert(sum_digits_twoparts(35).first == 17);, assert(sum_digits_twoparts(7).first == 7);, assert(sum_digits_twoparts(100).first == 19);]"
148,This is  a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"```
#include <vector>
#include <algorithm>
using namespace std;

pair<int, int> longest_subseq_with_diff_one(vector<int>& arr, int n) {
    vector<int> dp(n, 1);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
    }
    int result = 1;
    for (int i = 0; i < n; i++) {
        if (result < dp[i]) {
            result = dp[i];
        }
    }
    return {result, 0}; // Returning 0 as a placeholder for the second value
}
```",149,"[assert(longest_subseq_with_diff_one({ 1, 2, 3, 4, 5, 3, 2 }, 7).first == 6);, assert(longest_subseq_with_diff_one({ 10, 9, 4, 5, 4, 8, 6 }, 7).first == 3);, assert(longest_subseq_with_diff_one({ 1, 2, 3, 2, 3, 7, 2, 1 }, 8).first == 7);]"
150,This is  a C++ function to check whether the given number is co-prime or not.,"```
#include <iostream>

int gcd(int p, int q) {
    while (q != 0) {
        int temp = q;
        q = p % q;
        p = temp;
    }
    return p;
}

bool is_coprime(int x, int y) {
    return gcd(x, y) == 1;
}
```",151,"[assert(is_coprime(17, 13) == true);, assert(is_coprime(15, 21) == false);, assert(is_coprime(25, 45) == false);]"
151,This is  a function to sort the given array by using merge sort.,"```
#include <vector>

std::vector<int> merge(std::vector<int> a, std::vector<int> b) {
    std::vector<int> c;
    while (!a.empty() && !b.empty()) {
        if (a[0] < b[0]) {
            c.push_back(a[0]);
            a.erase(a.begin());
        } else {
            c.push_back(b[0]);
            b.erase(b.begin());
        }
    }
    if (a.empty()) {
        c.insert(c.end(), b.begin(), b.end());
    } else {
        c.insert(c.end(), a.begin(), a.end());
    }
    return c;
}

std::vector<int> merge_sort(std::vector<int> x) {
    if (x.size() == 0 || x.size() == 1) {
        return x;
    } else {
        size_t middle = x.size() / 2;
        std::vector<int> a = merge_sort(std::vector<int>(x.begin(), x.begin() + middle));
        std::vector<int> b = merge_sort(std::vector<int>(x.begin() + middle, x.end()));
        return merge(a, b);
    }
}
```",152,"[assert(merge_sort({3, 4, 2, 6, 5, 7, 1, 9}) == std::vector<int>({1, 2, 3, 4, 5, 6, 7, 9}));, assert(merge_sort({7, 25, 45, 78, 11, 33, 19}) == std::vector<int>({7, 11, 19, 25, 33, 45, 78}));, assert(merge_sort({3, 1, 4, 9, 8}) == std::vector<int>({1, 3, 4, 8, 9}));]"
152,This is  a function to find the vertex of a parabola.,"```
#include <tuple>

std::tuple<double, double> parabola_vertex(double a, double b, double c) {
    double x_vertex = -b / (2 * a);
    double y_vertex = (4 * a * c - b * b) / (4 * a);
    return std::make_tuple(x_vertex, y_vertex);
}
```",153,"[assert(parabola_vertex(5, 3, 2) == std::make_tuple(-0.3, 1.55));, assert(parabola_vertex(9, 8, 4) == std::make_tuple(-0.4444444444444444, 2.2222222222222223));, assert(parabola_vertex(2, 4, 6) == std::make_tuple(-1.0, 4.0));]"
153,This is  a function to extract every specified element from a given two dimensional list.,"```
#include <vector>

std::pair<std::vector<int>, std::vector<int>> specified_element(const std::vector<std::vector<int>>& nums, int N) {
    std::vector<int> result;
    for (const auto& i : nums) {
        result.push_back(i[N]);
    }
    return {result};
}
```",154,"[assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 0) == std::vector<int>{1, 4, 7}));, assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 2) == std::vector<int>{3, 6, 9}));, assert((specified_element({ {1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5} }, 3) == std::vector<int>{2, 2, 5}));]"
154,This is  a C++ function to toggle all even bits of a given number.,"```
#include <iostream>
using namespace std;

pair<int, int> even_bit_toggle_number(int n) {
    int res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 == 1) {
            res = res | (1 << count);
        }
        count = count + 1;
        temp >>= 1;
    }
    return make_pair(n ^ res, res);
}
```",155,"[assert(even_bit_toggle_number(10).first == 0);, assert(even_bit_toggle_number(20).first == 30);, assert(even_bit_toggle_number(30).first == 20);]"
155,This is  a function to convert a tuple of string values to a tuple of integer values.,"```
#include <vector>
#include <string>
#include <sstream>
#include <cassert>
#include <iostream>
#include <algorithm>

std::vector<std::vector<int>> tupleIntStr(const std::vector<std::vector<std::string>>& tupleStr) {
    std::vector<std::vector<int>> result;
    for (const auto& x : tupleStr) {
        result.push_back({ std::stoi(x[0]), std::stoi(x[1]) });
    }
    return result;
}

bool compareVectors(const std::vector<std::vector<int>>& a, const std::vector<std::vector<int>>& b) {
    return a == b;
}```",156,"[assert(compareVectors(tupleIntStr({ {""333"", ""33""}, {""1416"", ""55""} }), { {333, 33}, {1416, 55} }));, assert(compareVectors(tupleIntStr({ {""999"", ""99""}, {""1000"", ""500""} }), { {999, 99}, {1000, 500} }));, assert(compareVectors(tupleIntStr({ {""666"", ""66""}, {""1500"", ""555""} }), { {666, 66}, {1500, 555} }));]"
156,This is  a function to reflect the run-length encoding from a list.,"```
include <vector>
#include <cassert>
#include <iostream>
#include <variant>
#include <tuple>

using ListElement = std::variant<double, char>; // Handle both doubles and characters
using Group = std::pair<int, ListElement>;

std::vector<Group> encodeList(const std::vector<ListElement>& list1) {
    std::vector<Group> result;
    int count = 1;

    for (size_t i = 1; i < list1.size(); i++) {
        if (list1[i] == list1[i - 1]) {
            count++;
        }
        else {
            result.emplace_back(count, list1[i - 1]);
            count = 1;
        }
    }

    // Add the last group
    result.emplace_back(count, list1.back());
    return result;
}

// Helper function to compare two vectors of Groups
bool compareGroups(const std::vector<Group>& a, const std::vector<Group>& b) {
    if (a.size() != b.size()) return false;
    for (size_t i = 0; i < a.size(); i++) {
        if (a[i].first != b[i].first || a[i].second != b[i].second) {
            return false;
        }
    }
    return true;
}```",157,"[assert(compareGroups(encodeList({ 1.0, 1.0, 2.0, 3.0, 4.0, 4.3, 5.0, 1.0 }), { {2, 1.0}, {1, 2.0}, {1, 3.0}, {1, 4.0}, {1, 4.3}, {1, 5.0}, {1, 1.0} }));, ""assert(compareGroups(encodeList({ a, u, t, o, m, a, t, i, c, a, l, l, y }), { {1, a}, {1, u}, {1, t}, {1, o}, {1, m}, {1, a}, {1, t}, {1, i}, {1, c}, {1, a}, {2, l}, {1, y} }));"", ""assert(compareGroups(encodeList({ p, y, t, h, o, n }), { {1, p}, {1, y}, {1, t}, {1, h}, {1, o}, {1, n} }));""]"
157,This is  a C++ function to find k number of operations required to make all elements equal.,"```
#include <iostream>
#include <vector>
#include <algorithm>

std::pair<int, int> min_Ops(std::vector<int>& arr, int n, int k) {
    int max1 = *std::max_element(arr.begin(), arr.end());
    int res = 0;
    for (int i = 0; i < n; i++) {
        if ((max1 - arr[i]) % k != 0) {
            return {-1, 0};
        } else {
            res += (max1 - arr[i]) / k;
        }
    }
    return {res, 0}; // Returning res, and a second value to match the original function signature
}
```",158,"[assert(min_Ops({ 2, 2, 2, 2 }, 4, 3).first == 0);, assert(min_Ops({ 4, 2, 6, 8 }, 4, 3).first == -1);, assert(min_Ops({ 21, 33, 9, 45, 63 }, 5, 6).first == 24);]"
158,This is  a function to print the season for the given month and day.,"```
#include <string>
#include <tuple>

std::string month_season(const std::string& month, int days) {
    std::string season;

    if ((month == ""December"" && days > 20) ||
        (month == ""January"") ||
        (month == ""February"") ||
        (month == ""March"" && days <= 19)) {
        season = ""winter"";
    }
    else if ((month == ""March"" && days > 19) ||
        (month == ""April"") ||
        (month == ""May"") ||
        (month == ""June"" && days <= 20)) {
        season = ""spring"";
    }
    else if ((month == ""June"" && days > 20) ||
        (month == ""July"") ||
        (month == ""August"") ||
        (month == ""September"" && days <= 21)) {
        season = ""summer"";
    }
    else { // (month == ""September"" && days > 21) || (month == ""October"") || (month == ""November"") || (month == ""December"" && days <= 20)
        season = ""autumn"";
    }

    return season;
}```",159,"[assert(month_season(""January"", 4) == ""winter"");, assert(month_season(""October"", 28) == ""autumn"");, assert(month_season(""June"", 6) == ""spring"");]"
159,This is  a function to find x and y that satisfies ax + by = n.,"```
#include <iostream>
#include <string>
#include <tuple>

std::tuple<std::string, int, std::string, int> solution(int a, int b, int n) {
    for (int i = 0; i * a <= n; ++i) {
        if ((n - (i * a)) % b == 0) {
            return std::make_tuple(""x = "", i, "", y = "", (n - (i * a)) / b);
        }
    }
    return std::make_tuple(""No solution"", 0, """", 0);
}```",160,"[assert(solution(2, 3, 7) == std::make_tuple(""x = "", 2, "", y = "", 1));, assert(solution(4, 2, 7) == std::make_tuple(""No solution"", 0, """", 0));, assert(solution(1, 13, 17) == std::make_tuple(""x = "", 4, "", y = "", 1));]"
160,This is  a function to remove all elements from a given list present in another list.,"```
#include <vector>
#include <algorithm>

std::pair<std::vector<int>, std::vector<int>> remove_elements(const std::vector<int>& list1, const std::vector<int>& list2) {
    std::vector<int> result;
    for (const auto& x : list1) {
        if (std::find(list2.begin(), list2.end(), x) == list2.end()) {
            result.push_back(x);
        }
    }
    return { result, {} };
}```",161,"[assert((remove_elements({ 1,2,3,4,5,6,7,8,9,10 }, { 2,4,6,8 }).first == std::vector<int>{1, 3, 5, 7, 9, 10}));, assert((remove_elements({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, { 1, 3, 5, 7 }).first == std::vector<int>{2, 4, 6, 8, 9, 10}));, assert((remove_elements({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, { 5, 7 }).first == std::vector<int>{1, 2, 3, 4, 6, 8, 9, 10}));]"
161,This is  a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"```
#include <iostream>
using namespace std;

int sum_series(int n) {
    if (n < 1) {
        return 0;
    } else {
        return n + sum_series(n - 2);
    }
}
```",162,"[assert(sum_series(6) == 12);, assert(sum_series(10) == 30);, assert(sum_series(9) == 25);]"
162,This is  a function to calculate the area of a regular polygon.,"```
#include <cmath>

double area_polygon(int n, double s) {
    return 0.25 * n * s * s / tan(M_PI / n);
}```",163,"[assert(area_polygon(4, 20) == 400.00000000000006);, assert(area_polygon(10, 15) == 1731.1969896610804);, assert(area_polygon(9, 7) == 302.90938549487214);]"
163,This is  a C++ function to check whether the sum of divisors are same or not.,"```
#include <iostream>
#include <cmath>

int divSum(int n) {
    int sum = 1;
    int i = 2;
    while (i * i <= n) {
        if (n % i == 0) {
            sum = sum + i + std::floor(n / i);
        }
        i += 1;
    }
    return sum;
}

bool areEquivalent(int num1, int num2) {
    return divSum(num1) == divSum(num2);
}
```",164,"[assert(areEquivalent(36, 57) == false);, assert(areEquivalent(2, 4) == false);, assert(areEquivalent(23, 47) == true);]"
164,This is  a C++ function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"```
#include <string>

std::pair<int, int> count_char_position(const std::string& str1) {
    int count_chars = 0;
    for (size_t i = 0; i < str1.length(); ++i) {
        if ((i == static_cast<int>(str1[i]) - static_cast<int>(A)) ||
            (i == static_cast<int>(str1[i]) - static_cast<int>(a))) {
            count_chars += 1;
        }
    }
    return { count_chars, 0 };
}```",165,"[assert(count_char_position(""xbcefg"").first == 2);, assert(count_char_position(""ABcED"").first == 3);, assert(count_char_position(""AbgdeF"").first == 5);]"
165,This is  a C++ function to count the pairs with xor as an even number.,"```
#include <iostream>
#include <vector>


using namespace std;

int find_even_Pair(const vector<int>& A) {
    int evenPair = 0;
    for (int i = 0; i < A.size(); ++i) {
        for (int j = i + 1; j < A.size(); ++j) {
            if (((A[i] + A[j]) % 2) == 0) {
                evenPair++;
            }
        }
    }
    return evenPair;
}```",166,"[assert(find_even_Pair({ 5, 4, 7, 2, 1 }) == 4);, assert(find_even_Pair({ 7, 2, 8, 1, 0, 5, 11 }) == 9);, assert(find_even_Pair({ 1, 2, 3 }) == 1);]"
166,This is  a C++ function to find smallest power of 2 greater than or equal to n.,"```
#include <iostream>
using namespace std;

int next_Power_Of_2(int n) {
    int count = 0;
    if (n && !(n & (n - 1))) {
        return n;
    }
    while (n != 0) {
        n >>= 1;
        count++;
    }
    return 1 << count;
}```",167,"[assert(next_Power_Of_2(0) == 1);, assert(next_Power_Of_2(5) == 8);, assert(next_Power_Of_2(17) == 32);]"
167,This is  a C++ function to find the frequency of a number in a given array.,"```
#include <vector>

std::pair<int, int> frequency(const std::vector<int>& a, int x) {
    int count = 0;
    for (int i : a) {
        if (i == x) count++;
    }
    return {count, 0}; // Return 0 as the second value to match the function signature
}
```",168,"[assert(frequency({ 1, 2, 3 }, 4).first == 0);, assert(frequency({ 1, 2, 2, 3, 3, 3, 4 }, 3).first == 3);, assert(frequency({ 0, 1, 2, 3, 1, 2 }, 1).first == 2);]"
168,This is  a function to calculate the nth pell number.,"```
#include <iostream>
using namespace std;

pair<int, int> get_pell(int n) {
    if (n <= 2) {
        return {n, 0}; 
    }
    int a = 1;
    int b = 2;
    for (int i = 3; i <= n; ++i) {
        int c = 2 * b + a;
        a = b;
        b = c;
    }
    return {b, 0};
}
```",169,"[assert(get_pell(4).first == 12);, assert(get_pell(7).first == 169);, assert(get_pell(8).first == 408);]"
169,This is  a function to find sum of the numbers in a list between the indices of a specified range.,"```
#include <vector>

int sum_range_list(const std::vector<int>& list, int start, int end) {
    int sum = 0;
    for (int i = start; i <= end; ++i) {
        sum += list[i];
    }
    return sum;
}```",170,"[assert(sum_range_list({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 8, 10) == 29);, assert(sum_range_list({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 5, 7) == 16);, assert(sum_range_list({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }, 7, 10) == 38);]"
171,This is  a function to find the occurence of characters std in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"```
#include <string>

int count_occurance(const std::string& str) {
    // Implement the logic for counting occurrences of ""std""
    // This is a placeholder implementation
    int count = 0;
    size_t pos = str.find(""std"");
    while (pos != std::string::npos) {
        count++;
        pos = str.find(""std"", pos + 1);
    }
    return count;
}```",172,"[assert(count_occurance(""letstdlenstdporstd"") == 3);, assert(count_occurance(""truststdsolensporsd"") == 1);, assert(count_occurance(""makestdsostdworthit"") == 2);]"
172,This is  a function to remove everything except alphanumeric characters from a string.,"```
#include <regex>
#include <string>

std::pair<std::string, std::string> remove_splchar(const std::string& text) {
    std::regex pattern(""[\\W_]+"");
    return {std::regex_replace(text, pattern, """"), """"};
}
```",173,"[assert(remove_splchar(""C++  @#&^%$*program123"").first == ""C++program123"");, assert(remove_splchar(""C++ %^$@!^&*()  programming24%$^^()    language"").first == ""C++programming24language"");, assert(remove_splchar(""C++   ^%&^()(+_)(_^&67)                  program"").first == ""C++67program"");]"
173,This is  a function to group a sequence of key-value pairs into a dictionary of lists.,"```
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <cassert>

std::map<std::string, std::vector<std::string>> groupKeyValue(const std::vector<std::pair<std::string, int>>& l) {
    std::map<std::string, std::vector<std::string>> result;

    for (const auto& pair : l) {
        const std::string& key = pair.first;
        std::string value = std::to_string(pair.second);
        result[key].push_back(value);
    }

    return result;
}

// Helper to compare maps for assertion
bool compareMaps(const std::map<std::string, std::vector<std::string>>& a,
    const std::map<std::string, std::vector<std::string>>& b) {
    if (a.size() != b.size()) return false;
    for (const auto& [key, values] : a) {
        if (b.find(key) == b.end() || b.at(key) != values) return false;
    }
    return true;
}```",174,"[assert(compareMaps(groupKeyValue({ {""yellow"", 1}, {""blue"", 2}, {""yellow"", 3}, {""blue"", 4}, {""red"", 1} }), { {""yellow"", {""1"", ""3""}}, {""blue"", {""2"", ""4""}}, {""red"", {""1""}} }));, assert(compareMaps(groupKeyValue({ {""python"", 1}, {""python"", 2}, {""python"", 3}, {""python"", 4}, {""python"", 5} }), { {""python"", {""1"", ""2"", ""3"", ""4"", ""5""}} }));, assert(compareMaps(groupKeyValue({ {""yellow"", 100}, {""blue"", 200}, {""yellow"", 300}, {""blue"", 400}, {""red"", 100} }), { {""yellow"", {""100"", ""300""}}, {""blue"", {""200"", ""400""}}, {""red"", {""100""}} }));]"
174,This is  a function to verify validity of a string of parentheses.,"```
#include <string>
#include <stack>
#include <unordered_map>

bool is_valid_parenthese(const std::string& str1) {
    std::stack<char> stack;
    std::unordered_map<char, char> pchar = { {(, )}, {{, }}, {[, ]} };
    
    for (char parenthese : str1) {
        if (pchar.find(parenthese) != pchar.end()) {
            stack.push(parenthese);
        } else if (stack.empty() || pchar[stack.top()] != parenthese) {
            return false;
        } else {
            stack.pop();
        }
    }
    return stack.empty();
}
```",175,"[assert(is_valid_parenthese(""(){}[]"") == true);, assert(is_valid_parenthese(""()[{)}"") == false);, assert(is_valid_parenthese(""()"") == true);]"
175,This is  a function to find the perimeter of a triangle.,"```
int perimeter_triangle(int a, int b, int c) {
    return a + b + c;
}```",176,"[assert(perimeter_triangle(10, 20, 30) == 60);, assert(perimeter_triangle(3, 4, 5) == 12);, assert(perimeter_triangle(25, 35, 45) == 105);]"
176,This is  a C++ function to find two distinct numbers such that their lcm lies within the given range.,"```
#include <tuple>

std::pair<int, int> answer(int L, int R) {
    if (2 * L <= R) {
        return std::make_pair(L, 2 * L);
    }
    else {
        return std::make_pair(-1, -1);
    }
}```",177,"[assert(answer(3, 8) == std::make_pair(3, 6));, assert(answer(2, 6) == std::make_pair(2, 4));, assert(answer(1, 3) == std::make_pair(1, 2));]"
177,This is  a function to search some literals strings in a string.,"```
#include <string>
#include <vector>

std::string string_literals(const std::vector<std::string>& literals, const std::string& text) {
    for (const auto& literal : literals) {
        if (text.find(literal) != std::string::npos) {
            return ""Matched!"";
        }
    }
    return ""Not Matched!"";
}```",178,"[assert(string_literals({ ""language"" }, ""C++ language"") == ""Matched!"");, assert(string_literals({ ""program"" }, ""C++ language"") == ""Not Matched!"");, assert(string_literals({ ""C++"" }, ""programming language"") == ""Not Matched!"");]"
178,This is  a function to find if the given number is a keith number or not.,"```
#include <vector>

std::pair<bool, bool> is_num_keith(int x) {
    std::vector<int> terms;
    int temp = x;
    int n = 0;

    while (temp > 0) {
        terms.push_back(temp % 10);
        temp /= 10;
        n++;
    }

    std::reverse(terms.begin(), terms.end());
    int next_term = 0;
    int i = n;

    while (next_term < x) {
        next_term = 0;
        for (int j = 1; j <= n; j++) {
            next_term += terms[i - j];
        }
        terms.push_back(next_term);
        i++;
    }

    return std::make_pair(next_term == x, next_term == x);
}```",179,"[assert(is_num_keith(14).first == true);, assert(is_num_keith(12).first == false);, assert(is_num_keith(197).first == true);]"
179,This is  a function to calculate distance between two points using latitude and longitude.,"```
#include <iostream>
#include <cmath>
#include <cassert>

const double EARTH_RADIUS_KM = 6371.0;

// Convert degrees to radians
inline double degreesToRadians(double degrees) {
    return degrees * M_PI / 180.0;
}

// Calculate the distance between two points using the Haversine formula
double haversineDistance(double lat1, double lon1, double lat2, double lon2) {
    // Convert latitude and longitude from degrees to radians
    lat1 = degreesToRadians(lat1);
    lon1 = degreesToRadians(lon1);
    lat2 = degreesToRadians(lat2);
    lon2 = degreesToRadians(lon2);

    // Differences in coordinates
    double dLat = lat2 - lat1;
    double dLon = lon2 - lon1;

    // Haversine formula
    double a = std::sin(dLat / 2) * std::sin(dLat / 2) +
               std::cos(lat1) * std::cos(lat2) *
               std::sin(dLon / 2) * std::sin(dLon / 2);
    double c = 2 * std::atan2(std::sqrt(a), std::sqrt(1 - a));

    return EARTH_RADIUS_KM * c;
}```",180,"[assert(std::abs(haversineDistance(0.0, 0.0, 0.0, 0.0) - 0.0) < 1e-6);]"
180,This is  a function to find the longest common prefix in the given set of strings.,"```
#include <iostream>
#include <string>
#include <vector>

std::string common_prefix_util(const std::string &str1, const std::string &str2) {
    std::string result = """";
    int n1 = str1.length();
    int n2 = str2.length();
    int i = 0, j = 0;
    while (i <= n1 - 1 && j <= n2 - 1) {
        if (str1[i] != str2[j]) {
            break;
        }
        result += str1[i];
        i++;
        j++;
    }
    return result;
}

std::string common_prefix(const std::vector<std::string> &arr, int n) {
    std::string prefix = arr[0];
    for (int i = 1; i < n; i++) {
        prefix = common_prefix_util(prefix, arr[i]);
    }
    return prefix;
}
```",181,"[assert(common_prefix({""tablets"", ""tables"", ""taxi"", ""tamarind""}, 4) == ""ta"");, assert(common_prefix({""apples"", ""ape"", ""april""}, 3) == ""ap"");, assert(common_prefix({""teens"", ""teenager"", ""teenmar""}, 3) == ""teen"");]"
181,"This is  a function to find uppercase, lowercase, special character and numeric values using regex.","```
#include <iostream>
#include <string>
#include <regex>
#include <vector>

std::tuple<std::vector<char>, std::vector<char>, std::vector<char>, std::vector<char>> find_character(const std::string& str) {
    std::vector<char> uppercase_characters;
    std::vector<char> lowercase_characters;
    std::vector<char> numerical_characters;
    std::vector<char> special_characters;

    std::regex uppercase_regex(""[A-Z]"");
    std::regex lowercase_regex(""[a-z]"");
    std::regex numerical_regex(""[0-9]"");
    std::regex special_regex(""[, .!?]"");

    for (char ch : str) {
        if (std::regex_match(std::string(1, ch), uppercase_regex)) {
            uppercase_characters.push_back(ch);
        }
        if (std::regex_match(std::string(1, ch), lowercase_regex)) {
            lowercase_characters.push_back(ch);
        }
        if (std::regex_match(std::string(1, ch), numerical_regex)) {
            numerical_characters.push_back(ch);
        }
        if (std::regex_match(std::string(1, ch), special_regex)) {
            special_characters.push_back(ch);
        }
    }

    return {uppercase_characters, lowercase_characters, numerical_characters, special_characters};
}
```",182,"[assert(find_character(""ThisIsGeeksforGeeks"") == std::make_tuple(std::vector<char>{\T\, \I\, \G\, \G\}, std::vector<char>{\h\, \i\, \s\, \s\, \e\, \e\, \k\, \s\, \f\, \o\, \r\, \e\, \e\, \k\, \s\}, std::vector<char>{}, std::vector<char>{}));, assert(find_character(""Hithere2"") == std::make_tuple(std::vector<char>{\H\}, std::vector<char>{\i\, \t\, \h\, \e\, \r\, \e\}, std::vector<char>{\2\}, std::vector<char>{}));, assert(find_character(""HeyFolks32"") == std::make_tuple(std::vector<char>{\H\, \F\}, std::vector<char>{\e\, \y\, \o\, \l\, \k\, \s\}, std::vector<char>{\3\, \2\}, std::vector<char>{}));]"
182,This is  a function to count all the distinct pairs having a difference of k in any array.,"```
#include <iostream>
#include <vector>
using namespace std;

pair<int, int> count_pairs(vector<int>& arr, int n, int k) {
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) {
                count++;
            }
        }
    }
    return make_pair(count, 0);
}
```",183,"[assert(count_pairs({ 1, 5, 3, 4, 2 }, 5, 3).first == 2);, assert(count_pairs({ 8, 12, 16, 4, 0, 20 }, 6, 4).first == 5);, assert(count_pairs({ 2, 4, 1, 3, 4 }, 5, 2).first == 3);]"
183,This is  a function to find all the values in a list that are greater than a specified number.,"```
#include <vector>

std::pair<bool, bool> greater_specificnum(const std::vector<int>& list, int num) {
    bool greater_specificnum = std::all_of(list.begin(), list.end(), [num](int x) { return x >= num; });
    return {greater_specificnum, greater_specificnum};
}
```",184,"[assert(greater_specificnum({ 220, 330, 500 }, 200) == true);, assert(greater_specificnum({ 12, 17, 21 }, 20) == true);, assert(greater_specificnum({ 1, 2, 3, 4 }, 10) == false);]"
184,This is  a function to find the focus of a parabola.,"```
#include <tuple>

std::tuple<double, double> parabola_focus(double a, double b, double c) {
    double x_focus = -b / (2 * a);
    double y_focus = (4 * a * c - b * b + 1) / (4 * a);
    return std::make_tuple(x_focus, y_focus);
}
```",185,"[assert(parabola_focus(5, 3, 2) == std::make_tuple(-0.3, 1.6));, assert(parabola_focus(9, 8, 4) == std::make_tuple(-0.4444444444444444, 2.25));, assert(parabola_focus(2, 4, 6) == std::make_tuple(-1.0, 4.125));]"
185,This is  a function to search some literals strings in a string by using regex.,"```
#include <iostream>
#include <regex>
#include <string>
#include <vector>

std::string check_literals(const std::string& text, const std::vector<std::string>& patterns) {
    for (const auto& pattern : patterns) {
        if (std::regex_search(text, std::regex(pattern))) {
            return ""Matched!"";
        } else {
            return ""Not Matched!"";
        }
    }
    return ""Not Matched!"";
}
```",186,"[assert(check_literals(""The quick brown fox jumps over the lazy dog."", {""fox""}) == ""Matched!"");, assert(check_literals(""The quick brown fox jumps over the lazy dog."", {""horse""}) == ""Not Matched!"");, assert(check_literals(""The quick brown fox jumps over the lazy dog."", {""lazy""}) == ""Matched!"");]"
186,This is  a function to find the longest common subsequence for the given two sequences.,"```
#include <string>
using namespace std;

int longest_common_subsequence(const string& X, const string& Y, int m, int n) {
    if (m == 0 || n == 0) {
        return 0;
    } else if (X[m-1] == Y[n-1]) {
        return 1 + longest_common_subsequence(X, Y, m-1, n-1);
    } else {
        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));
    }
}
```",187,"[assert(longest_common_subsequence(""AGGTAB"", ""GXTXAYB"", 6, 7) == 4);, assert(longest_common_subsequence(""ABCDGH"", ""AEDFHR"", 6, 6) == 3);, assert(longest_common_subsequence(""AXYT"", ""AYZX"", 4, 4) == 2);]"
187,This is  a C++ function to check whether the given number can be represented by product of two squares or not.,"```
#include <cmath> 

bool prod_Square(int n) {
    for (int i = 2; i * i <= n; ++i) { // Optimization: Only iterate up to the square root of n
        if (n % (i * i) == 0) {
            int other_factor = n / (i * i);
            if (std::sqrt(other_factor) == static_cast<int>(std::sqrt(other_factor))) {
                return true;
            }
        }
    }
    return false;
}```",188,"[assert(prod_Square(25) == true);, assert(prod_Square(30) == false);, assert(prod_Square(16) == true);]"
189,This is  a C++ function to count the number of integral co-ordinates that lie inside a square.,"```
#include <utility>

std::pair<int, int> count_Intgral_Points(int x1, int y1, int x2, int y2) {
    return std::make_pair((y2 - y1 - 1) * (x2 - x1 - 1), 0);
}
```",190,"[assert(count_Intgral_Points(1, 1, 4, 4).first == 4);, assert(count_Intgral_Points(1, 2, 1, 2).first == 1);, assert(count_Intgral_Points(4, 2, 6, 4).first == 1);]"
190,This is  a function to check whether the given month name contains 30 days or not.,"```
#include <string>

bool check_monthnumber(const std::string& monthname3) {
    if (monthname3 == ""April"" || monthname3 == ""June"" || monthname3 == ""September"" || monthname3 == ""November"") {
        return true;
    }
    else {
        return false;
    }
}```",191,"[assert(check_monthnumber(""February"") == false);, assert(check_monthnumber(""June"") == true);, assert(check_monthnumber(""April"") == true);]"
191,This is  a C++ function to check whether a string has atleast one letter and one number.,"```
#include <string>

std::pair<bool, bool> check_String(const std::string& str) { 
    bool flag_l = false; 
    bool flag_n = false; 
    for (char i : str) { 
        if (isalpha(i)) { 
            flag_l = true;  
        } 
        if (isdigit(i)) { 
            flag_n = true; 
        } 
    } 
    return {flag_l, flag_n}; 
}
```",192,"[assert(check_String(""thishasboth29"").first == true);, assert(check_String(""C++"").first == false);, assert(check_String(""string"").first == false);]"
192,This is  a function to remove the duplicates from the given tuple.,"```
#include <iostream>
#include <unordered_set>
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> removeTuple(const std::vector<int>& testTup) {
    std::unordered_set<int> set(testTup.begin(), testTup.end()); // Use set to remove duplicates
    return std::vector<int>(set.begin(), set.end()); // Convert set back to vector
}```",193,"[assert(removeTuple({ 2, 3, 4, 4, 5, 6, 6, 7, 8, 8 }) == std::vector<int>({ 2, 3, 4, 5, 6, 7, 8 }));, assert(removeTuple({ 11, 12, 13, 11, 11, 12, 14, 13 }) == std::vector<int>({ 11, 12, 13, 14 }));]"
193,This is  a C++ function to convert octal number to decimal number.,"```
#include <iostream>
using namespace std;

int octal_To_Decimal(int n) {
    int num = n;
    int dec_value = 0;
    int base = 1;
    int temp = num;
    while (temp) {
        int last_digit = temp % 10;
        temp = temp / 10;
        dec_value += last_digit * base;
        base = base * 8;
    }
    return dec_value;
}
```",194,"[assert(octal_To_Decimal(25) == 21);, assert(octal_To_Decimal(30) == 24);, assert(octal_To_Decimal(40) == 32);]"
194,This is  a C++ function to find the first position of an element in a sorted array.,"```
#include <vector>

int first(const std::vector<int>& arr, int target, int limit) {
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == target) {
            return i;
        }
        if (arr[i] > limit) {
            break;
        }
    }
    return -1; // Or any indication of ""not found""
}```",195,"[assert(first({ 1, 2, 3, 4, 5, 6, 6 }, 6, 6) == 5);, assert(first({ 1, 2, 2, 2, 3, 2, 2, 4, 2 }, 2, 9) == 1);, assert(first({ 1, 2, 3 }, 1, 3) == 0);]"
195,This is  a function to remove all the tuples with length k.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<std::vector<int>> removeTuples(const std::vector<std::vector<int>>& testList, int K) {
    std::vector<std::vector<int>> res;
    for (const auto& ele : testList) {
        if (ele.size() != K) {
            res.push_back(ele);
        }
    }
    return res;
}```",196,"[assert((removeTuples({ {4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7} }, 1) == std::vector<std::vector<int>>{ {4, 5}, { 8, 6, 7 }, { 3, 4, 6, 7 }}));, assert((removeTuples({ {4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7} }, 2) == std::vector<std::vector<int>>{ {1, 2, 3}, { 3, 4, 6, 7 }}));, assert((removeTuples({ {1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7} }, 3) == std::vector<std::vector<int>>{ {4, 3}, { 1 }}));]"
197,This is  a function to find the largest triangle that can be inscribed in an ellipse.,"```
#include <cmath>
#include <tuple>

std::tuple<double, double> largest_triangle(double a, double b) {
    if (a < 0 || b < 0) {
        return {-1, -1};
    }
    double area = (3 * sqrt(3) * pow(a, 2)) / (4 * b);
    return {area, area}; 
}
```",198,"[assert(largest_triangle(4, 2) == 10.392304845413264);, assert(largest_triangle(5, 7) == 4.639421805988064);, assert(largest_triangle(9, 1) == 105.2220865598093);]"
198,This is  a C++ function to find highest power of 2 less than or equal to given number.,"```
#include <iostream>
using namespace std;

int highest_Power_of_2(int n) {
    int res = 0;
    for (int i = n; i > 0; --i) {
        if ((i & (i - 1)) == 0) {
            res = i;
            break;
        }
    }
    return res;
}
```",199,"[assert(highest_Power_of_2(10) == 8);, assert(highest_Power_of_2(19) == 16);, assert(highest_Power_of_2(32) == 32);]"
199,This is  a function to find all index positions of the maximum values in a given list.,"```
#include <vector>
#include <algorithm>

std::pair<std::vector<int>, int> position_max(const std::vector<int>& list1) {
    int max_val = *std::max_element(list1.begin(), list1.end());
    std::vector<int> max_result;
    for (size_t i = 0; i < list1.size(); ++i) {
        if (list1[i] == max_val) {
            max_result.push_back(i);
        }
    }
    return {max_result,0};
}
```",200,"[assert(position_max({ 12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54 }).first == std::vector<int>{7});, assert((position_max({ 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5 }).first == std::vector<int>{7, 8, 9, 10}));, assert(position_max({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }).first == std::vector<int>{11});]"
200,This is  a C++ function to check whether the elements in a list are same or not.,"```
#include <vector>
#include <string>
#include <unordered_set>

bool chkList(const std::vector<std::string>& lst) {
    std::unordered_set<std::string> unique_elements(lst.begin(), lst.end());
    return unique_elements.size() == 1;
}```",201,"[assert(chkList({ ""one"", ""one"", ""one"" }) == true);, assert(chkList({ ""one"", ""Two"", ""Three"" }) == false);, assert(chkList({ ""bigdata"", ""C++"", ""Django"" }) == false);]"
201,This is  a function to remove even characters in a string.,"```
#include <string>

std::string remove_even(const std::string& str) {
    std::string result;
    for (size_t i = 0; i < str.size(); ++i) {
        if (i % 2 == 0) {
            result += str[i];
        }
    }
    return result;
}```",202,"[assert(remove_even(""C++"") == ""pto"");, assert(remove_even(""program"") == ""porm"");, assert(remove_even(""language"") == ""lnug"");]"
202,This is  a C++ function to find the hamming distance between given two integers.,"```
#include <iostream>
using namespace std;

pair<int, int> hamming_Distance(int n1, int n2) {
    int x = n1 ^ n2;
    int setBits = 0;
    while (x > 0) {
        setBits += x & 1;
        x >>= 1;
    }
    return make_pair(setBits, 0);
}
```",203,"[assert(hamming_Distance(4, 8).first == 2);, assert(hamming_Distance(2, 4).first == 2);, assert(hamming_Distance(1, 2).first == 2);]"
204,This is  a function to find the inversions of tuple elements in the given tuple list.,"```
#include <cassert>
#include <tuple>
#include <vector>
#include <iostream>

// Single function to invert tuple elements and return as a vector
template <std::size_t Index = 0, typename... Args>
std::vector<int> inversion_elements(const std::tuple<Args...>& test_tup) {
    std::vector<int> res;
    if constexpr (Index < sizeof...(Args)) {
        res = inversion_elements<Index + 1>(test_tup); // Recurse to get the next elements
        res.insert(res.begin(), ~std::get<Index>(test_tup)); // Add the current element
    }
    return res; // Base case returns an empty vector when Index == sizeof...(Args)
}```",205,"[assert((inversion_elements(std::make_tuple(7, 8, 9, 1, 10, 7)) == std::vector<int>{-8, -9, -10, -2, -11, -8}));, assert((inversion_elements(std::make_tuple(2, 4, 5, 6, 1, 7)) == std::vector<int>{-3, -5, -6, -7, -2, -8}));, assert((inversion_elements(std::make_tuple(8, 9, 11, 14, 12, 13)) == std::vector<int>{-9, -10, -12, -15, -13, -14}));]"
205,This is  a function to perform the adjacent element concatenation in the given tuples.,"```

#include <tuple>
#include <vector>
#include <string>
#include <iostream>

std::tuple<std::vector<std::string>> concatenate_elements(const std::vector<std::string>& test_tup) {
    std::vector<std::string> res;
    for (size_t i = 0; i < test_tup.size() - 1; ++i) {
        res.push_back(test_tup[i] + test_tup[i + 1]);
    }
    return std::make_tuple(res);
}```",206,"[assert(concatenate_elements({ ""DSP "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""UTS"" }) == std::make_tuple(std::vector<std::string>{""DSP IS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL UTS""}));, assert(concatenate_elements({ ""RES "", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""QESR"" }) == std::make_tuple(std::vector<std::string>{""RES IS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL QESR""}));, assert(concatenate_elements({ ""MSAM"", ""IS "", ""BEST "", ""FOR "", ""ALL "", ""SKD"" }) == std::make_tuple(std::vector<std::string>{""MSAMIS "", ""IS BEST "", ""BEST FOR "", ""FOR ALL "", ""ALL SKD""}));]"
206,This is  a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"```
#include <vector>
#include <string>
using namespace std;

pair<int, int> find_longest_repeating_subseq(const string& str) {
    int n = str.length();
    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
    
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (str[i - 1] == str[j - 1] && i != j) {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            } else {
                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);
            }
        }
    }
    return {dp[n][n], 0}; // The second value is not used in the original code
}
```",207,"[assert(find_longest_repeating_subseq(""AABEBCDD"").first == 3);, assert(find_longest_repeating_subseq(""aabb"").first == 2);, assert(find_longest_repeating_subseq(""aab"").first == 1);]"
207,This is  a function to check the given decimal with a precision of 2 by using regex.,"```
#include <regex>
#include <string>

bool is_decimal(const std::string& num) {
    std::regex num_fetch(""^[0-9]+(\\.[0-9]{1,2})?$"");
    return std::regex_search(num, num_fetch);
}
```",208,"[assert(is_decimal(""123.11"") == true);, assert(is_decimal(""0.21"") == true);, assert(is_decimal(""123.1214"") == false);]"
208,This is  a function to delete the smallest element from the given heap and then insert a new item.,"```
#include <iostream>
#include <vector>
#include <queue>
#include <cassert>

std::vector<int> heapReplace(std::vector<int> heap, int a) {
    std::priority_queue<int, std::vector<int>, std::greater<int>> priorityQueue; // Min-heap

    // Add all elements from heap into the priority queue
    for (int num : heap) {
        priorityQueue.push(num);
    }

    priorityQueue.pop(); // Remove the smallest element (heap replace)
    priorityQueue.push(a); // Add the new element

    // Build the result vector from the priority queue
    std::vector<int> newHeap(priorityQueue.size());
    int index = 0;
    while (!priorityQueue.empty()) {
        newHeap[index++] = priorityQueue.top();
        priorityQueue.pop();
    }
    return newHeap;
}```",209,"[assert((heapReplace({ 25, 44, 68, 21, 39, 23, 89 }, 21) == std::vector<int>{21, 23, 25, 39, 44, 68, 89}));, assert((heapReplace({ 25, 44, 68, 21, 39, 23, 89 }, 110) == std::vector<int>{23, 25, 39, 44, 68, 89, 110}));, assert((heapReplace({ 25, 44, 68, 21, 39, 23, 89 }, 500) == std::vector<int>{23, 25, 39, 44, 68, 89, 500}));]"
209,"This is  a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","```
#include <regex>
#include <string>

bool is_allowed_specific_char(const std::string& str) {
    std::regex get_char(""[^a-zA-Z0-9.]"");
    return !std::regex_search(str, get_char);
}
```",210,"[assert(is_allowed_specific_char(""ABCDEFabcdef123450"") == true);, assert(is_allowed_specific_char(""*&%@#!}{"") == false);, assert(is_allowed_specific_char(""HELLOhowareyou98765"") == true);]"
210,This is  a C++ function to count numbers whose oth and nth bits are set.,"```
#include <cmath>

int count_Num(int n) { 
    if (n == 1) { 
        return 1; 
    } 
    int count = pow(2, n - 2); 
    return count; 
}
```",211,"[assert(count_Num(2) == 1);, assert(count_Num(3) == 2);, assert(count_Num(1) == 1);]"
211,This is  a C++ function to find the sum of fourth power of n natural numbers.,"```
#include <cmath>
#include <tuple>

std::pair<int, int> fourth_Power_Sum(int n) {
    int sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum = sum + (i * i * i * i);
    }
    return { sum, sum }; // Assuming you want to return the same sum twice as a pair
}```",212,"[assert(fourth_Power_Sum(2).first == 17);, assert(fourth_Power_Sum(4).first == 354);, assert(fourth_Power_Sum(6).first == 2275);]"
213,This is  a function to convert radians to degrees.,"```
#include <cmath>
#include <tuple>

std::pair<double, double> degree_radian(double radian) {
    double degree = radian * (180 / M_PI);
    return { degree, radian };
}```",214,"[assert(degree_radian(90).first == 5156.620156177409);, assert(degree_radian(60).first == 3437.746770784939);, assert(degree_radian(120).first== 6875.493541569878);]"
214,This is  a function to decode a run-length encoded given list.,"```
#include <iostream>
#include <vector>
#include <cassert>

// Function to decode run-length encoded list
std::vector<int> decodeRLE(const std::vector<std::pair<int, int>>& encodedList) {
    std::vector<int> decoded;
    for (const auto& pair : encodedList) {
        int count = pair.first;
        int value = pair.second;
        decoded.insert(decoded.end(), count, value);
    }
    return decoded;
}```",215," [assert(decodeRLE({{3, 2}, {1, 4}, {2, 6}}) == std::vector<int>({2, 2, 2, 4, 6, 6}));,
    assert(decodeRLE({{2, 1}, {3, 5}}) == std::vector<int>({1, 1, 5, 5, 5}));,
    assert(decodeRLE({{1, 9}, {4, 8}}) == std::vector<int>({9, 8, 8, 8, 8}));,
    assert(decodeRLE({}) == std::vector<int>());,
    assert(decodeRLE({{5, 7}}) == std::vector<int>({7, 7, 7, 7, 7}));]"
215,This is  a function to check if a nested list is a subset of another nested list.,"```
#include <vector>

std::pair<bool, bool> check_subset_list(const std::vector<int>& list1, const std::vector<int>& list2) {
    bool exist = true;
    for (int i : list2) {
        if (std::find(list1.begin(), list1.end(), i) == list1.end()) {
            exist = false;
        }
    }
    return {exist, false};
}
```",216,"[assert((check_subset_list({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }, { 12, 18, 23, 25, 45 }) == std::pair<bool, bool>(false, false)));, assert((check_subset_list({ 2, 3, 1, 4, 5, 6, 8 }, { 4, 5, 6, 8 }) == std::pair<bool, bool>(true, false)));, ""assert((check_subset_list({ a, b, e, c, d }, { g }) == std::pair<bool, bool>(false, false)));""]"
216,This is  a C++ function to find the first repeated character in a given string.,"```
#include <unordered_map>
#include <string>
#include <cassert>

char first_Repeated_Char(const std::string str) {
    std::unordered_map<char, int> h;
    for (char ch : str) {
        if (h.find(ch) != h.end()) {
            return ch;
        }
        else {
            h[ch] = 0;
        }
    }
    return \0;  // No repeated characters
}```",217,"[assert(first_Repeated_Char(""Google"") == \o\);, assert(first_Repeated_Char(""data"") == \a\);, assert(first_Repeated_Char(""C++"") == \\\0\);]"
218,This is  a function to extract maximum and minimum k elements in the given tuple.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> extractMinMax(const std::vector<int>& test_tup, int K) {
    std::vector<int> res(2 * K);
    std::vector<int> sorted_tup = test_tup;

    std::sort(sorted_tup.begin(), sorted_tup.end());

    std::copy(sorted_tup.begin(), sorted_tup.begin() + K, res.begin());  // Copy first K smallest
    std::copy(sorted_tup.end() - K, sorted_tup.end(), res.begin() + K);   // Copy last K largest

    return res;
}
```",219,"[assert((extractMinMax({ 5, 20, 3, 7, 6, 8 }, 2) == std::vector<int>{3, 5, 8, 20}));, assert((extractMinMax({ 4, 5, 6, 1, 2, 7 }, 3) == std::vector<int>{1, 2, 4, 5, 6, 7}));, assert((extractMinMax({ 2, 3, 4, 8, 9, 11, 7 }, 4) == std::vector<int>{2, 3, 4, 7, 7, 8, 9, 11}));]"
219,"This is  a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","```
#include <iostream>
#include <regex>
#include <cassert>

std::string replaceMaxSpecialChar(const std::string& text, int n) {
    std::regex pattern(""[ ,.]"");
    return std::regex_replace(text, pattern, "":"", std::regex_constants::format_first_only);
}```",220,"[assert(replaceMaxSpecialChar(""Python language, Programming language."", 2) == ""Python:language, Programming language."");, assert(replaceMaxSpecialChar(""a b c,d e f"", 3) == ""a:b c,d e f"");, assert(replaceMaxSpecialChar(""ram reshma,ram rahim"", 1) == ""ram:reshma,ram rahim"");]"
221,This is  a function to check if all the elements in tuple have same data type or not.,"```
#include <iostream>
#include <vector>
#include <typeinfo>
#include <cassert>
#include <any>

bool checkType(const std::vector<std::any>& testTuple) {
    if (testTuple.empty()) return true;
    const std::type_info& type = testTuple[0].type();
    for (const auto& ele : testTuple) {
        if (ele.type() != type) {
            return false;
        }
    }
    return true;
}```",222,"[assert(checkType({ 5, 6, 7, 3, 5, 6 }) == true);, ""assert(checkType({ 1, 2, 4 }) == false);"", assert(checkType({ 3, 2, 1, 4, 5 }) == true);]"
222,This is  a function to check for majority element in the given sorted array.,"```
bool isMajority(const std::vector<int>& arr, int n, int x) {
    int i = binarySearch(arr, 0, n - 1, x);
    if (i == -1) {
        return false;
    }
    return ((i + n / 2) <= (n - 1) && arr[i + n / 2] == x);
}

int binarySearch(const std::vector<int>& arr, int low, int high, int x) {
    if (high >= low) {
        int mid = (low + high) / 2;
        if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x)) {
            return mid;
        }
        else if (x > arr[mid]) {
            return binarySearch(arr, mid + 1, high, x);
        }
        else {
            return binarySearch(arr, low, mid - 1, x);
        }
    }
    return -1;
}```",223,"[assert(isMajority({ 1, 2, 3, 3, 3, 3, 10 }, 7, 3) == true);, assert(isMajority({ 1, 1, 2, 4, 4, 4, 6, 6 }, 8, 4) == false);, assert(isMajority({ 1, 1, 1, 2, 2 }, 5, 1) == true);]"
223,This is  a C++ function to count set bits of a given number.,"```
int countSetBits(int n) {
    int count = 0;
    while (n != 0) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}```",224,"[assert(countSetBits(2) == 1);, assert(countSetBits(4) == 1);, assert(countSetBits(6) == 2);]"
224,This is  a C++ function to find the minimum element in a sorted and rotated array.,"```
#include <vector>
int find_Min(const std::vector<int>& arr, int low, int high) {
    while (low < high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == arr[high]) {
            high--;
        }
        else if (arr[mid] > arr[high]) {
            low = mid + 1;
        }
        else {
            high = mid;
        }
    }
    return arr[high];
}```",225,"[assert(find_Min({ 1, 2, 3, 4, 5 }, 0, 4) == 1);, assert(find_Min({ 4, 6, 8 }, 0, 2) == 4);, assert(find_Min({ 2, 3, 5, 7, 9 }, 0, 4) == 2);]"
225,This is  a C++ function to remove the characters which have odd index values of a given string.,"```
#include<string>
std::string oddValuesString(const std::string& str) {
    std::string result;
    for (size_t i = 0; i < str.length(); i += 2) {
        result += str[i];
    }
    return result;
}```",226,"[assert(oddValuesString(""abcdef"") == ""ace"");, assert(oddValuesString(""python"") == ""pto"");, assert(oddValuesString(""data"") == ""dt"");]"
227,This is  a C++ function to check whether all the bits are unset in the given range or not.,"```
bool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {  
    int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)); 
    int new_num = n & num;
    return new_num == 0; 
}
```",228,"[assert(all_Bits_Set_In_The_Given_Range(4, 1, 2) == true);, assert(all_Bits_Set_In_The_Given_Range(17, 2, 4) == true);, assert(all_Bits_Set_In_The_Given_Range(39, 4, 6) == false);]"
228,This is  a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> reArrangeArray(std::vector<int> arr, int n) {
    int j = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] < 0) {
            std::swap(arr[i], arr[j]);
            j++;
        }
    }
    return arr;
}```",229,"[assert(reArrangeArray({ -1, 2, -3, 4, 5, 6, -7, 8, 9 }, 9) == std::vector<int>({ -1, -3, -7, 4, 5, 6, 2, 8, 9 }));, assert(reArrangeArray({ 12, -14, -26, 13, 15 }, 5) == std::vector<int>({ -14, -26, 12, 13, 15 }));, assert(reArrangeArray({ 10, 24, 36, -42, -39, -78, 85 }, 7) == std::vector<int>({ -42, -39, -78, 10, 24, 36, 85 }));]"
229,This is  a function to replace blank spaces with any character in a string.,"```
#include <iostream>
#include <string>
#include <cassert>

std::string replaceBlank(const std::string& str1, char ch) {
    std::string result = str1;
    for (char& c : result) {
        if (c ==  ) {
            c = ch;
        }
    }
    return result;
}```",230,"[assert(replaceBlank(""hello people"", \@\) == ""hello@people"");, assert(replaceBlank(""python program language"", \$\) == ""python$program$language"");, assert(replaceBlank(""blank space"", \-\) == ""blank-space"");]"
230,This is  a function to find the maximum sum in the given right triangle of numbers.,"```
#include <iostream>
#include <vector>
#include <cassert>

int maxSum(std::vector<std::vector<int>> tri, int n) {
    if (n > 1) {
        tri[1][1] += tri[0][0];
        tri[1][0] += tri[0][0];
    }
    for (int i = 2; i < n; i++) {
        tri[i][0] += tri[i - 1][0];
        tri[i][i] += tri[i - 1][i - 1];
        for (int j = 1; j < i; j++) {
            tri[i][j] += std::max(tri[i - 1][j - 1], tri[i - 1][j]);
        }
    }
    int max = tri[n - 1][0];
    for (int j = 1; j < n; j++) {
        if (tri[n - 1][j] > max) {
            max = tri[n - 1][j];
        }
    }
    return max;
}```",231,"[assert(maxSum({ {1}, {2, 1}, {3, 3, 2} }, 3) == 6);, assert(maxSum({ {1}, {1, 2}, {4, 1, 12} }, 3) == 15);, assert(maxSum({ {2}, {3, 2}, {13, 23, 12} }, 3) == 28);]"
231,This is  a function to get the n largest items from a dataset.,"```
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> larg_nnum(const std::vector<int>& nums, int n) {
    std::vector<int> sorted_nums = nums;
    std::sort(sorted_nums.rbegin(), sorted_nums.rend());
    sorted_nums.resize(n);
    return sorted_nums;
}```",232,"[assert((larg_nnum({ 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 2) == std::vector<int>{100, 90}));, assert((larg_nnum({ 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 5) == std::vector<int>{100, 90, 80, 70, 60}));, assert((larg_nnum({ 10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100 }, 3) == std::vector<int>{100, 90, 80}));]"
232,This is  a function to find the lateral surface area of a cylinder.,"```
#include <iostream>
#include <cassert>

double lateralsurfaceCylinder(double r, double h) {
    double lateralsurface = 2 * 3.1415 * r * h;
    return lateralsurface;
}```",233,"[assert(lateralsurfaceCylinder(10, 5) == 314.15000000000003);, assert(lateralsurfaceCylinder(4, 5) == 125.66000000000001);, assert(lateralsurfaceCylinder(4, 10) == 251.32000000000002);]"
233,This is  a function to find the volume of a cube.,"```
#include <iostream>
using namespace std;

int volume_cube(int side) {
    return side * side * side;
}
```",234,"[assert(volume_cube(3) == 27);, assert(volume_cube(2) == 8);, assert(volume_cube(5) == 125);]"
235,This is  a C++ function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"```
int No_of_Triangle(int N, int K) {
    if (N < K) {
        return -1;
    } else {
        int Tri_up = 0;
        Tri_up = ((N - K + 1) * (N - K + 2)) / 2;
        int Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) / 2;
        return Tri_up + Tri_down;
    }
}
```",236,"[assert(No_of_Triangle(4, 2) == 7);, assert(No_of_Triangle(4, 3) == 3);, assert(No_of_Triangle(1, 3) == -1);]"
236,This is  a function to check the occurrences of records which occur similar times in the given tuples.,"```
#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <cassert>

// Function to check occurrences of records that occur a similar number of times
std::set<int> findSimilarOccurrences(const std::vector<std::pair<int, int>>& records) {
    std::map<int, int> frequency;
    for (const auto& record : records) {
        frequency[record.second]++;
    }
    
    std::map<int, int> countOccurrences;
    for (const auto& pair : frequency) {
        countOccurrences[pair.second]++;
    }
    
    std::set<int> result;
    for (const auto& pair : countOccurrences) {
        if (pair.second > 1 && pair.first > 1) {  // Ensuring only relevant frequencies are included
            result.insert(pair.first);
        }
    }
    return result;
}```",237," [assert(findSimilarOccurrences({{1, 2}, {2, 3}, {3, 2}, {4, 3}, {5, 4}}) == std::set<int>({2}));,
    assert(findSimilarOccurrences({{1, 5}, {2, 6}, {3, 5}, {4, 6}, {5, 7}}) == std::set<int>({2}));,
    assert(findSimilarOccurrences({{1, 1}, {2, 2}, {3, 3}, {4, 4}}).empty());,
    assert(findSimilarOccurrences({}).empty());]"
237,This is  a C++ function to count number of non-empty substrings of a given string.,"```
#include <string>

int number_of_substrings(const std::string& str) {
    int n = str.length();
    return n * (n + 1) / 2;
}```",238,"[assert(number_of_substrings(""abc"") == 6);, assert(number_of_substrings(""abcd"") == 10);, assert(number_of_substrings(""abcde"") == 15);]"
238,This is  a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::pair<int, int> get_total_number_of_sequences(int m, int n) {
    std::vector<std::vector<int>> T(m + 1, std::vector<int>(n + 1, 0));
    for (int i = 0; i <= m; ++i) {
        for (int j = 0; j <= n; ++j) {
            if (i == 0 || j == 0) {
                T[i][j] = 0;
            }
            else if (i < j) {
                T[i][j] = 0;
            }
            else if (j == 1) {
                T[i][j] = i;
            }
            else {
                T[i][j] = T[i - 1][j] + T[i / 2][j - 1];
            }
        }
    }
    return { T[m][n], 0 }; // The second value is a placeholder (0) as per your initial request
}```",239,"[assert(get_total_number_of_sequences(10, 4).first == 4); // First value of the pair should be compared, assert(get_total_number_of_sequences(5, 2).first == 6);  // First value of the pair should be compared, assert(get_total_number_of_sequences(16, 3).first == 84); // First value of the pair should be compared]"
239,This is  a function to replace the last element of the list with another list.,"```
#include <iostream>
#include <vector>
#include <cassert>

// Function to replace the last element of a list with another list
std::vector<int> replaceLastElement(const std::vector<int>& original, const std::vector<int>& replacement) {
    if (original.empty()) return replacement;
    std::vector<int> result(original.begin(), original.end() - 1);
    result.insert(result.end(), replacement.begin(), replacement.end());
    return result;
}```",240," [assert(replaceLastElement({1, 2, 3}, {4, 5}) == std::vector<int>({1, 2, 4, 5}));,
    assert(replaceLastElement({7, 8, 9}, {10}) == std::vector<int>({7, 8, 10}));,
    assert(replaceLastElement({1}, {2, 3, 4}) == std::vector<int>({2, 3, 4}));,
    assert(replaceLastElement({}, {5, 6, 7}) == std::vector<int>({5, 6, 7}));,
    assert(replaceLastElement({1, 2, 3}, {}) == std::vector<int>({1, 2}));]"
240,This is  a function to generate a 3d array having each element as *.,"```
#include <iostream>
#include <cassert>
#include <vector>

std::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {
    std::vector<std::vector<std::vector<char>>> array_3d(o, std::vector<std::vector<char>>(n, std::vector<char>(m, *)));
    return array_3d;
}```",241,"[""assert(array_3d(1, 1, 1) == std::vector<std::vector<std::vector<char>>>{ { { {*}}}});"", ""assert((array_3d(5, 3, 4) == std::vector<std::vector<std::vector<char>>>{ { {*, *, *, *, *}, { *, *, *, *, * }, { *, *, *, *, * } }, { {*, *, *, *, *}, {*, *, *, *, *}, {*, *, *, *, *} }, { {*, *, *, *, *}, {*, *, *, *, *}, {*, *, *, *, *} }, { {*, *, *, *, *}, {*, *, *, *, *}, {*, *, *, *, *} } }));"", ""assert((array_3d(1, 1, 3) == std::vector<std::vector<std::vector<char>>>{ { {*}}, { {*} }, { {*} }}));""]"
241,This is  a function to count total characters in a string.,"```
#include <iostream>
#include <cassert>
#include <string>

int count_charac(const std::string& str1) {
    int total = 0;
    for (char i : str1) {
        total = total + 1;
    }
    return total;
}```",242,"[assert(count_charac(""language"") == 8);          // Assertion is correct, assert(count_charac(""words"") == 5);             // Assertion is correct]"
242,This is  a function to sort the given list based on the occurrence of first element of tuples.,"```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cassert>
#include <unordered_map>

using namespace std;

vector<vector<vector<string>>> sortOnOccurrence(const vector<vector<string>>& lst) {
    unordered_map<string, vector<string>> grouped;
    vector<vector<vector<string>>> result;

    // Group and eliminate duplicates
    for (const auto& pair : lst) {
        const string& key = pair[0];
        const string& value = pair[1];
        if (find(grouped[key].begin(), grouped[key].end(), value) == grouped[key].end()) {
            grouped[key].push_back(value);
        }
    }

    // Convert grouped elements to the required structure
    for (const auto& [key, values] : grouped) {
        vector<string> sortedValues = values;
        sort(sortedValues.begin(), sortedValues.end());
        result.push_back({ {key}, sortedValues, {to_string(sortedValues.size())} });
    }

    // Ensure the result is sorted by keys for consistent comparison
    sort(result.begin(), result.end(), [](const vector<vector<string>>& a, const vector<vector<string>>& b) {
        return a[0][0] < b[0][0];
        });

    return result;
}

bool compareResult(const vector<vector<vector<string>>>& res1, const vector<vector<vector<string>>>& res2) {
    if (res1.size() != res2.size()) return false;
    for (size_t i = 0; i < res1.size(); ++i) {
        if (res1[i][0] != res2[i][0]) return false;
        vector<string> v1 = res1[i][1];
        vector<string> v2 = res2[i][1];
        sort(v1.begin(), v1.end());
        sort(v2.begin(), v2.end());
        if (v1 != v2 || res1[i][2] != res2[i][2]) return false;
    }
    return true;
}```",243,"[assert(compareResult(sortOnOccurrence({ {""1"", ""Jake""}, {""2"", ""Bob""}, {""1"", ""Cara""} }), { {{""1""}, {""Cara"", ""Jake""}, {""2""}}, {{""2""}, {""Bob""}, {""1""}} }));, assert(compareResult(sortOnOccurrence({ {""b"", ""ball""}, {""a"", ""arm""}, {""b"", ""b""}, {""a"", ""ant""} }), { {{""a""}, {""ant"", ""arm""}, {""2""}}, {{""b""}, {""b"", ""ball""}, {""2""}} }));, assert(compareResult(sortOnOccurrence({ {""2"", ""Mark""}, {""3"", ""Maze""}, {""2"", ""Sara""} }), { {{""2""}, {""Mark"", ""Sara""}, {""2""}}, {{""3""}, {""Maze""}, {""1""}} }));]"
243,This is  a C++ function to find the next perfect square greater than a given number.,"```
#include<cmath>

int next_Perfect_Square(int n) {
    int root = static_cast<int>(sqrt(n));
    return (root + 1) * (root + 1);
}```",244,"[assert(next_Perfect_Square(35) == 36);, assert(next_Perfect_Square(6) == 9);, assert(next_Perfect_Square(9) == 16);]"
244,This is  a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <climits>

using namespace std;

int maxSum(const vector<int>& arr, int n) {
    vector<int> MSIBS = arr;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {
                MSIBS[i] = MSIBS[j] + arr[i];
            }
        }
    }

    vector<int> MSDBS = arr;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j < i; j++) {
            if (arr[n - i] > arr[n - j] && MSDBS[n - i] < MSDBS[n - j] + arr[n - i]) {
                MSDBS[n - i] = MSDBS[n - j] + arr[n - i];
            }
        }
    }

    int maxSum = INT_MIN;
    for (int i = 0; i < n; i++) {
        maxSum = max(maxSum, MSIBS[i] + MSDBS[n - 1 - i] - arr[i]);
    }

    return maxSum;
}```",245,"[assert(maxSum({ 1, 15, 51, 45, 33, 100, 12, 18, 9 }, 9) == 172);, assert(maxSum({ 80, 60, 30, 40, 20, 10 }, 6) == 210);, assert(maxSum({ 2, 3, 14, 16, 21, 23, 29, 30 }, 8) == 110);]"
245,This is  a function for computing square roots using the babylonian method.,"```
#include<cmath>

double babylonian_squareroot(double number) {
    if (number == 0) {
        return 0;
    }
    double g = number / 2.0;
    double g2 = g + 1;
    while (g != g2) {
        double n = number / g;
        g2 = g;
        g = (g + n) / 2;
    }
    return g;
}```",246,"[assert(fabs(babylonian_squareroot(10) - 3.162277660168379) < 1e-9);, assert(fabs(babylonian_squareroot(2) - 1.414213562373095) < 1e-9);, assert(fabs(babylonian_squareroot(9) - 3.0) < 1e-9);]"
246,This is  a function to find the longest palindromic subsequence in the given string.,"```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <algorithm>

using namespace std;

int lps(const string& str) {
    int n = str.length();
    vector<vector<int>> L(n, vector<int>(n, 0));

    // Strings of length 1 are palindromes of length 1
    for (int i = 0; i < n; i++) {
        L[i][i] = 1;
    }

    for (int cl = 2; cl <= n; cl++) {
        for (int i = 0; i <= n - cl; i++) {
            int j = i + cl - 1;
            if (str[i] == str[j] && cl == 2) {
                L[i][j] = 2;
            }
            else if (str[i] == str[j]) {
                L[i][j] = L[i + 1][j - 1] + 2;
            }
            else {
                L[i][j] = max(L[i][j - 1], L[i + 1][j]);
            }
        }
    }

    return L[0][n - 1];
}```",247,"[assert(lps(""TENS FOR TENS"") == 5);, assert(lps(""CARDIO FOR CARDS"") == 7);, assert(lps(""PART OF THE JOURNEY IS PART"") == 9);]"
247,This is  a function to calculate the harmonic sum of n-1.,"```
#include <cassert>

double harmonic_sum(int n) {
    double sum = 0.0;
    for (int i = 1; i <= n; ++i) {
        sum += 1.0 / i;
    }
    return sum;
}```",248,"[assert(harmonic_sum(7) == 2.5928571428571425);, assert(harmonic_sum(4) == 2.083333333333333);, assert(harmonic_sum(19) == 3.547739657143682);]"
248,This is  a function to find the intersection of two arrays using lambda function.,"```
#include <vector>
#include <cassert>
#include <algorithm>
#include <iterator>

std::vector<int> intersection_array(std::vector<int> a, std::vector<int> b) {
    std::vector<int> result;
    std::sort(a.begin(), a.end());
    std::sort(b.begin(), b.end());
    std::set_intersection(a.begin(), a.end(), b.begin(), b.end(), std::back_inserter(result));
    return result;
}```",249,"[assert(intersection_array({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}) == std::vector<int>({1, 2, 8, 9}));, assert(intersection_array({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}) == std::vector<int>({3, 5, 7, 9}));, assert(intersection_array({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}) == std::vector<int>({10}));]"
249,This is  a C++ function to count the occcurences of an element in a tuple.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
#include <iterator>

using namespace std;

int countX(const vector<int>& tup, int x) {
    int count = 0;
    for (int ele : tup) {
        if (ele == x) {
            count++;
        }
    }
    return count;
}```",250,"[assert(countX({ 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 4) == 0);, assert(countX({ 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 10) == 3);, assert(countX({ 10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2 }, 8) == 4);]"
250,This is  a function to insert an element before each element of a list.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>
#include <iterator>

using namespace std;



vector<string> insertElement(const vector<string>& list, const string& element) {
    vector<string> newList;
    for (const auto& elt : list) {
        newList.push_back(element);
        newList.push_back(elt);
    }
    return newList;
}```",251,"[assert(insertElement({ ""Red"", ""Green"", ""Black"" }, ""c"") == vector<string>({ ""c"", ""Red"", ""c"", ""Green"", ""c"", ""Black"" }));, assert(insertElement({ ""python"", ""java"" }, ""program"") == vector<string>({ ""program"", ""python"", ""program"", ""java"" }));, assert(insertElement({ ""happy"", ""sad"" }, ""laugh"") == vector<string>({ ""laugh"", ""happy"", ""laugh"", ""sad"" }));]"
251,This is  a C++ function to convert complex numbers to polar coordinates.,"```
#include <cassert>
#include <tuple>

std::tuple<double, double> convert(int x) {
    return std::make_tuple(static_cast<double>(x), 0.0);
}```",252,"[assert(convert(1) == std::make_tuple(1.0, 0.0));, assert(convert(4) == std::make_tuple(4.0, 0.0));, assert(convert(5) == std::make_tuple(5.0, 0.0));]"
252,This is  a C++ function to count integers from a given list.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <typeinfo>
#include<any>

int count_integer(const std::vector<std::any>& vec) {
    int count = 0;
    for (const auto& elem : vec) {
        if (elem.type() == typeid(int)) {
            count++;
        }
    }
    return count;
}```",253,"[assert(count_integer({ 1, 2, std::string(""abc""), 1.2 }) == 2);, assert(count_integer({ 1, 2, 3 }) == 3);, assert(count_integer({ 1, 1.2, 4, 5.1 }) == 2);]"
253,This is  a function to find all words starting with a or e in a given string.,"```
#include <iostream>
#include <vector>
#include <string>
#include <regex>
#include <cassert>
#include <algorithm>

// Function to find words matching the pattern [ae]\w+
std::vector<std::string> wordsAe(const std::string& text) {
    std::vector<std::string> list;
    std::regex pattern(""[ae]\\w+"");
    std::sregex_iterator begin(text.begin(), text.end(), pattern), end;

    for (auto it = begin; it != end; ++it) {
        list.push_back(it->str());
    }

    return list;
}

// Utility function for comparing vectors
bool compareVectors(const std::vector<std::string>& a, const std::vector<std::string>& b) {
    return a == b;
}```",254,"[assert(compareVectors(wordsAe(""python programe""), { ""ame"" }));, assert(compareVectors(wordsAe(""python programe language""), { ""ame"", ""anguage"" }));, assert(compareVectors(wordsAe(""assert statement""), { ""assert"", ""atement"" }));]"
254,This is  a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
using namespace std;

// Helper function for generating combinations
void combinationsHelper(const vector<string>& l, int n, vector<string>& current, vector<vector<string>>& result, int start) {
    if (current.size() == n) {
        result.push_back(current);
        return;
    }
    for (int i = start; i < l.size(); i++) {
        current.push_back(l[i]);
        combinationsHelper(l, n, current, result, i);
        current.pop_back();
    }
}

// Function to generate color combinations
vector<vector<string>> combinationsColors(const vector<string>& l, int n) {
    vector<vector<string>> result;
    vector<string> current;
    combinationsHelper(l, n, current, result, 0);
    return result;
}

// Utility function to compare vectors of vectors
bool compareVectorOfVectors(const vector<vector<string>>& a, const vector<vector<string>>& b) {
    return a == b;
}```",255,"[assert(compareVectorOfVectors(combinationsColors({ ""Red"", ""Green"", ""Blue"" }, 1), { {""Red""}, {""Green""}, {""Blue""} }));, assert(compareVectorOfVectors(combinationsColors({ ""Red"", ""Green"", ""Blue"" }, 2), { {""Red"", ""Red""}, {""Red"", ""Green""}, {""Red"", ""Blue""}, {""Green"", ""Green""}, {""Green"", ""Blue""}, {""Blue"", ""Blue""} }));, assert(compareVectorOfVectors(combinationsColors({ ""Red"", ""Green"", ""Blue"" }, 3), { {""Red"", ""Red"", ""Red""}, {""Red"", ""Red"", ""Green""}, {""Red"", ""Red"", ""Blue""}, {""Red"", ""Green"", ""Green""}, {""Red"", ""Green"", ""Blue""}, {""Red"", ""Blue"", ""Blue""}, {""Green"", ""Green"", ""Green""}, {""Green"", ""Green"", ""Blue""}, {""Green"", ""Blue"", ""Blue""}, {""Blue"", ""Blue"", ""Blue""} }));]"
255,This is  a C++ function to count the number of prime numbers less than a given non-negative number.,"```
int countPrimesNums(int n) {
    int ctr = 0;
    for (int num = 0; num < n; num++) {
        if (num <= 1) {
            continue;
        }
        bool isPrime = true;
        for (int i = 2; i * i <= num; i++) { // Optimize the loop to go only up to sqrt(num)
            if (num % i == 0) {
                isPrime = false;
                break;
            }
        }
        if (isPrime) {
            ctr++;
        }
    }
    return ctr;
}```",256,"[assert(countPrimesNums(5) == 2);, assert(countPrimesNums(10) == 4);, assert(countPrimesNums(100) == 25);]"
256,This is  a function to swap two numbers.,"```
#include <cassert>
#include <tuple>

std::tuple<int, int> swap_numbers(int a, int b) {
    return std::make_tuple(b, a);
}```",257,"[assert(swap_numbers(10, 20) == std::make_tuple(20, 10));, assert(swap_numbers(15, 17) == std::make_tuple(17, 15));, assert(swap_numbers(100, 200) == std::make_tuple(200, 100));]"
257,This is  a function to find number of odd elements in the given list using lambda function.,"```
#include <cassert>
#include <vector>

int count_odd(const std::vector<int>& numbers) {
    int count = 0;
    for (int number : numbers) {
        if (number % 2 != 0) {
            count++;
        }
    }
    return count;
}```",258,"[assert(count_odd({1, 2, 3, 5, 7, 8, 10}) == 4);, assert(count_odd({10, 15, 14, 13, -18, 12, -20}) == 2);, assert(count_odd({1, 2, 4, 8, 9}) == 2);]"
258,This is  a function to maximize the given two tuples.,"```
#include <cassert>
#include <vector>
#include <algorithm>
#include <iostream>

std::vector<std::vector<int>> maximizeElements(const std::vector<std::vector<int>>& testTup1, const std::vector<std::vector<int>>& testTup2) {
    size_t rows = testTup1.size();
    std::vector<std::vector<int>> res(rows);

    for (size_t i = 0; i < rows; i++) {
        size_t cols = testTup1[i].size();
        res[i].resize(cols);
        for (size_t j = 0; j < cols; j++) {
            res[i][j] = std::max(testTup1[i][j], testTup2[i][j]);
        }
    }

    return res;
}

bool deepEquals(const std::vector<std::vector<int>>& a, const std::vector<std::vector<int>>& b) {
    return a == b;
}```",259,"[assert(deepEquals(maximizeElements({ {1, 3}, {4, 5}, {2, 9}, {1, 10} }, { {6, 7}, {3, 9}, {1, 1}, {7, 3} }), { {6, 7}, {4, 9}, {2, 9}, {7, 10} }));, assert(deepEquals(maximizeElements({ {2, 4}, {5, 6}, {3, 10}, {2, 11} }, { {7, 8}, {4, 10}, {2, 2}, {8, 4} }), { {7, 8}, {5, 10}, {3, 10}, {8, 11} }));, assert(deepEquals(maximizeElements({ {3, 5}, {6, 7}, {4, 11}, {3, 12} }, { {8, 9}, {5, 11}, {3, 3}, {9, 5} }), { {8, 9}, {6, 11}, {4, 11}, {9, 12} }));]"
259,This is  a function to find the nth newman–shanks–williams prime number.,"```
#include <iostream>
using namespace std;

int newman_prime(int n) {
    if (n == 0 || n == 1) {
        return 1;
    }
    return 2 * newman_prime(n - 1) + newman_prime(n - 2);
}
```",260,"[assert(newman_prime(3) == 7);, assert(newman_prime(4) == 17);, assert(newman_prime(5) == 41);]"
260,This is  a function to perform mathematical division operation across the given tuples.,"```
#include <cassert>
#include <vector>
#include <iostream>

std::vector<int> divisionElements(const std::vector<int>& testTup1, const std::vector<int>& testTup2) {
    size_t size = testTup1.size();
    std::vector<int> res(size);
    
    for (size_t i = 0; i < size; i++) {
        res[i] = testTup1[i] / testTup2[i];
    }
    
    return res;
}

bool equals(const std::vector<int>& a, const std::vector<int>& b) {
    return a == b;
}```",261,"[assert(equals(divisionElements({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3}));, assert(equals(divisionElements({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4}));, assert(equals(divisionElements({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2}));]"
261,This is  a function to split a given list into two parts where the length of the first part of the list is given.,"```
#include <cassert>
#include <vector>
#include <iostream>

template <typename T>
std::vector<std::vector<T>> splitTwoParts(const std::vector<T>& list1, int L) {
    std::vector<T> part1(list1.begin(), list1.begin() + L);
    std::vector<T> part2(list1.begin() + L, list1.end());
    return { part1, part2 };
}

template <typename T>
bool deepEquals(const std::vector<std::vector<T>>& a, const std::vector<std::vector<T>>& b) {
    return a == b;
}```",262,"[assert(deepEquals(splitTwoParts<int>({ 1, 1, 2, 3, 4, 4, 5, 1 }, 3), { {1, 1, 2}, {3, 4, 4, 5, 1} }));, assert(deepEquals(splitTwoParts<std::string>({ ""a"", ""b"", ""c"", ""d"" }, 2), { {""a"", ""b""}, {""c"", ""d""} }));, assert(deepEquals(splitTwoParts<std::string>({ ""p"", ""y"", ""t"", ""h"", ""o"", ""n"" }, 4), { {""p"", ""y"", ""t"", ""h""}, {""o"", ""n""} }));]"
262,This is  a function to merge two dictionaries.,"```
#include <map>

std::map<std::string, int> merge_dict(const std::map<std::string, int>& d1, const std::map<std::string, int>& d2) {
    std::map<std::string, int> d = d1;
    d.insert(d2.begin(), d2.end());
    return d;
}
```",263,"[assert(mapsEqual(mergeDict({{""a"", 100}, {""b"", 200}}, {{""x"", 300}, {""y"", 200}}), {{""a"", 100}, {""b"", 200}, {""x"", 300}, {""y"", 200}}));, assert(mapsEqual(mergeDict({{""a"", 10}, {""b"", 20}}, {{""x"", 30}, {""y"", 40}}), {{""a"", 10}, {""b"", 20}, {""x"", 30}, {""y"", 40}}));]"
263,This is  a function to calculate a dogs age in dogs years.,"```
#include <iostream>
using namespace std;

double dog_age(double h_age) {
    if (h_age < 0) {
        exit(0);
    }
    else if (h_age <= 2) {
        double d_age = h_age * 10.5;
        return d_age;
    }
    else {
        double d_age = 21 + (h_age - 2) * 4;
        return d_age;
    }
}```",264,"[assert(dog_age(12) == 61);, assert(dog_age(15) == 73);, assert(dog_age(24) == 109);]"
264,This is  a function to split a list for every nth element.,"```
#include <cassert>
#include <vector>
#include <iostream>

template <typename T>
std::vector<std::vector<T>> listSplit(const std::vector<T>& input, int step) {
    std::vector<std::vector<T>> result;
    
    // Loop through the input list, creating sublists with the given step
    for (int i = 0; i < step; i++) {
        std::vector<T> tempList;
        for (int j = i; j < input.size(); j += step) {
            tempList.push_back(input[j]);
        }
        result.push_back(tempList);
    }
    return result;
}

// Function to compare two 2D vectors
template <typename T>
bool vectorsEqual(const std::vector<std::vector<T>>& v1, const std::vector<std::vector<T>>& v2) {
    return v1 == v2;
}```",265,"[assert(vectorsEqual(listSplit<std::string>({""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n""}, 3), {{""a"", ""d"", ""g"", ""j"", ""m""}, {""b"", ""e"", ""h"", ""k"", ""n""}, {""c"", ""f"", ""i"", ""l""}}));, assert(vectorsEqual(listSplit<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}}));, assert(vectorsEqual(listSplit<std::string>({""python"", ""java"", ""C"", ""C++"", ""DBMS"", ""SQL""}, 2), {{""python"", ""C"", ""DBMS""}, {""java"", ""C++"", ""SQL""}}));]"
265,This is  a function to find the lateral surface area of a cube.,"```
#include <cassert>

double lateralsurface_cube(double side) {
    return 4 * side * side;
}```",266,"[assert(lateralsurface_cube(5) == 100);, assert(lateralsurface_cube(9) == 324);, assert(lateralsurface_cube(10) == 400);]"
266,This is  a C++ function to find the sum of squares of first n odd natural numbers.,"```
int square_Sum(int n) {
    return static_cast<int>(n * (4 * n * n - 1) / 3);
}
```",267,"[assert(square_Sum(2) == 10);, assert(square_Sum(3) == 35);, assert(square_Sum(4) == 84);]"
267,This is  a function to find the nth star number.,"```
#include <tuple>
#include <cassert>
#include <iostream>

std::tuple<int> find_star_num(int n) {
    return std::make_tuple(6 * n * (n - 1) + 1);
}```",268,"[assert(std::get<0>(find_star_num(3)) == 37);, assert(std::get<0>(find_star_num(4)) == 73);, assert(std::get<0>(find_star_num(5)) == 121);]"
268,This is  a function to find the ascii value of a character.,"```
#include <iostream>

int ascii_value(char k) {
    return static_cast<int>(k);
}
```",269,"[""assert(ascii_value(A) == 65);"", ""assert(ascii_value(R) == 82);"", ""assert(ascii_value(S) == 83);""]"
269,This is  a C++ function to find the sum of even numbers at even positions.,"```
#include <cassert>
#include <vector>

int sum_even_and_even_index(const std::vector<int>& nums, int n) {
    int sum = 0;
    for (int i = 0; i < n; ++i) {
        if (nums[i] % 2 == 0 && i % 2 == 0) {
            sum += nums[i];
        }
    }
    return sum;
}```",270,"[assert(sum_even_and_even_index({5, 6, 12, 1, 18, 8}, 6) == 30);, assert(sum_even_and_even_index({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10) == 26);, assert(sum_even_and_even_index({5, 6, 12, 1}, 4) == 12);]"
270,This is  a C++ function to find the sum of fifth power of first n even natural numbers.,"```
#include <iostream>
using namespace std;

long long even_Power_Sum(int n) {
    long long sum = 0; 
    for (int i = 1; i <= n; i++) {
        int j = 2 * i; 
        sum += (j * j * j * j * j); 
    }
    return sum; 
}
```",271,"[assert(even_Power_Sum(2) == 1056);, assert(even_Power_Sum(3) == 8832);, assert(even_Power_Sum(1) == 32);]"
271,This is  a function to perfom the rear element extraction from list of tuples records.,"```
#include <iostream>
#include <vector>
#include <variant>
#include <cassert>

std::vector<int> rearExtract(const std::vector<std::vector<std::variant<int, std::string>>>& testList) {
    std::vector<int> res;
    for (const auto& lis : testList) {
        if (std::holds_alternative<int>(lis.back())) {
            res.push_back(std::get<int>(lis.back()));
        }
    }
    return res;
}


    
    ```",272,"[assert((rearExtract({{{1, ""Rash"", 21}, {2, ""Varsha"", 20}, {3, ""Kil"", 19}}}) == std::vector<int>{21, 20, 19}));, assert((rearExtract({{{1, ""Sai"", 36}, {2, ""Ayesha"", 25}, {3, ""Salman"", 45}}}) == std::vector<int>{36, 25, 45}));, assert((rearExtract({{{1, ""Sudeep"", 14}, {2, ""Vandana"", 36}, {3, ""Dawood"", 56}}}) == std::vector<int>{14, 36, 56}));]"
272,This is  a function to substract the contents of one tuple with corresponding index of other tuple.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <functional>

std::vector<int> subtractElements(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    std::vector<int> res(test_tup1.size());
    std::function<int(int, int)> subtract = [](int i, int j) { return i - j; };

    for (size_t k = 0; k < test_tup1.size(); ++k) {
        res[k] = subtract(test_tup1[k], test_tup2[k]);
    }

    return res;
}```",273,"[assert((subtractElements({10, 4, 5}, {2, 5, 18}) == std::vector<int>{8, -1, -13}));, assert((subtractElements({11, 2, 3}, {24, 45, 16}) == std::vector<int>{-13, -43, -13}));, assert((subtractElements({7, 18, 9}, {10, 11, 12}) == std::vector<int>{-3, 7, -3}));]"
273,This is  a C++ function to find sum of even index binomial coefficients.,"```
#include <cmath>
#include<vector>

int even_binomial_Coeff_Sum(int n) {
    return 1 << (n - 1);
}```",274,"[assert(even_binomial_Coeff_Sum(4) == 8);, assert(even_binomial_Coeff_Sum(6) == 32);, assert(even_binomial_Coeff_Sum(2) == 2);]"
274,This is  a C++ function to find the position of the last removed element from the given array.,"```
#include <cassert>
#include <vector>

int get_Position(const std::vector<int>& arr, int target, int default_value) {
    for (size_t i = 0; i < arr.size(); ++i) {
        if (arr[i] == target) {
            return i;
        }
    }
    return default_value;
}```",275,"[assert(get_Position({ 2, 5, 4 }, 3, 2) == 2);  // target not found, returns default_value, assert(get_Position({ 4, 3 }, 2, 2) == 2);     // target not found, returns default_value, assert(get_Position({ 1, 2, 3, 4 }, 4, 1) == 3);  ]"
275,This is  a function to find the volume of a cylinder.,"```
#include <cassert>
#include <cmath>

int volume_cylinder(double radius, double height) {
    return M_PI * radius * radius * height;
}```",276,"[assert(volume_cylinder(10, 5) == 1570);, assert(volume_cylinder(4, 5) == 251);, assert(volume_cylinder(4, 10) == 502);]"
276,This is  a function to filter a dictionary based on values.,"```
#include <cassert>
#include <map>
#include <string>

std::map<std::string, int> dict_filter(const std::map<std::string, int>& input_dict, int threshold) {
    std::map<std::string, int> result;
    for (const auto& pair : input_dict) {
        if (pair.second >= threshold) {
            result[pair.first] = pair.second;
        }
    }
    return result;
}```",277,"[assert((dict_filter({ {""Cierra Vega"", 175}, {""Alden Cantrell"", 180}, {""Kierra Gentry"", 165}, {""Pierre Cox"", 190} }, 170) == std::map<std::string, int>{ {""Cierra Vega"", 175}, { ""Alden Cantrell"", 180 }, { ""Pierre Cox"", 190 }}));, assert((dict_filter({ {""Cierra Vega"", 175}, {""Alden Cantrell"", 180}, {""Kierra Gentry"", 165}, {""Pierre Cox"", 190} }, 180) == std::map<std::string, int>{ {""Alden Cantrell"", 180}, { ""Pierre Cox"", 190 }}));, assert((dict_filter({ {""Cierra Vega"", 175}, {""Alden Cantrell"", 180}, {""Kierra Gentry"", 165}, {""Pierre Cox"", 190} }, 190) == std::map<std::string, int>{ {""Pierre Cox"", 190}}));]"
277,This is  a function to find the element count that occurs before the record in the given tuple.,"```
#include <cassert>
#include <vector>
#include <variant>
#include <iostream>

// Function to count the number of elements until we encounter a nested vector
std::vector<int> countFirstElements(const std::vector<std::variant<int, std::vector<int>>>& testTup) {
    int count = 0;
    for (const auto& elem : testTup) {
        if (std::holds_alternative<std::vector<int>>(elem)) {
            break; // Stop if we encounter a nested vector
        }
        count++;
    }
    return {count, 0}; // Return count and 0 for simplicity
}```",278,"[assert(countFirstElements({1, 5, 7, std::vector<int>{4, 6}, 10})[0] == 3);, assert(countFirstElements({2, 9, std::vector<int>{5, 7}, 11})[0] == 2);, assert(countFirstElements({11, 15, 5, 8, std::vector<int>{2, 3}, 8})[0] == 4);]"
278,This is  a function to find the nth decagonal number.,"```
#include <cassert>

int is_num_decagonal(int n) {
    return n * (4 * n - 3);
}```",279,"[assert(is_num_decagonal(3) == 27);, assert(is_num_decagonal(7) == 175);, assert(is_num_decagonal(10) == 370);]"
279,This is  a function to search an element in the given array by using sequential search.,"```
#include <cassert>
#include <vector>

std::pair<bool, int> sequential_search(const std::vector<int>& arr, int target) {
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == target) {
            return { true, i };
        }
    }
    return { false, -1 };
}```",280,"[assert(sequentialSearch({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31) == std::make_pair(true, 3));, assert(sequentialSearch({12, 32, 45, 62, 35, 47, 44, 61}, 61) == std::make_pair(true, 7));, assert(sequentialSearch({9, 10, 17, 19, 22, 39, 48, 56}, 48) == std::make_pair(true, 6));]"
280,This is  a C++ function to check if the elements of a given list are unique or not.,"```
#include <vector>
#include <unordered_set>

bool all_unique(const std::vector<int>& vec) {
    std::unordered_set<int> seen;
    for (int num : vec) {
        if (seen.count(num)) {
            return false;
        }
        seen.insert(num);
    }
    return true;
}```",281,"[assert(all_unique({ 1, 2, 3 }) == true);, assert(all_unique({ 1, 2, 1, 2 }) == false);, assert(all_unique({ 1, 2, 3, 4, 5 }) == true);]"
282,This is  a C++ function to check whether the frequency of each digit is less than or equal to the digit itself.,"```
#include <iostream>

bool validate(int n) {
    for (int i = 0; i < 10; i++) {
        int temp = n;
        int count = 0;
        while (temp) {
            if (temp % 10 == i) {
                count++;
            }
            if (count > i) {
                return false;
            }
            temp /= 10;
        }
    }
    return true;
}```",283,"[assert(validate(1234) == true);, assert(validate(51241) == false);, assert(validate(321) == true);]"
284,This is  a function that matches a string that has an a followed by two to three b.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_two_three(const std::string& text) {
    std::regex patterns(""ab{2,3}"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",285,"[assert(text_match_two_three(""ac"") == ""Not matched!"");, assert(text_match_two_three(""dc"") == ""Not matched!"");, assert(text_match_two_three(""abbbba"") == ""Found a match!"");]"
285,This is  a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"```
#include <vector>
#include <algorithm>
#include <limits>

int max_sub_array_sum_repeated(std::vector<int> a, int n, int k) {
    int max_so_far = std::numeric_limits<int>::min();
    int max_ending_here = 0;
    for (int i = 0; i < n * k; ++i) {
        max_ending_here += a[i % n];
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
        }
        if (max_ending_here < 0) {
            max_ending_here = 0;
        }
    }
    return max_so_far; // The second value is 0 as it was not defined in the original code
}```",286,"[assert(max_sub_array_sum_repeated({ 10, 20, -30, -1 }, 4, 3) == 30);, assert(max_sub_array_sum_repeated({ -1, 10, 20 }, 3, 2) == 59);, assert(max_sub_array_sum_repeated({ -1, -2, -3 }, 3, 3) == -1);]"
286,This is  a C++ function to find the sum of squares of first n even natural numbers.,"```
int square_Sum(int n) {  
    return static_cast<int>(2 * n * (n + 1) * (2 * n + 1) / 3); 
}
```",287,"[assert(square_Sum(2) == 20);, assert(square_Sum(3) == 56);, assert(square_Sum(4) == 120);]"
287,This is  a function to count array elements having modular inverse under given prime number p equal to itself.,"```
#include <vector>

int modular_inverse(const std::vector<int>& arr, int N, int P) {
    int current_element = 0;
    for (int i = 0; i < N; i++) {
        if ((arr[i] * arr[i]) % P == 1) {
            current_element++;
        }
    }
    return current_element; // Assuming the second return value is not used in the original C++ code
}```",288,"[assert(modular_inverse({ 1, 6, 4, 5 }, 4, 7) == 2);, assert(modular_inverse({ 1, 3, 8, 12, 12 }, 5, 13) == 3);, assert(modular_inverse({ 2, 3, 4, 5 }, 4, 6) == 1);]"
288,This is  a C++ function to calculate the number of odd days in a given year.,"```
#include <iostream>
using namespace std;

int odd_Days(int N) {
    int hund1 = N / 100;
    int hund4 = N / 400;
    int leap = N >> 2;
    int ordd = N - leap;
    if (hund1) {
        ordd += hund1;
        leap -= hund1;
    }
    if (hund4) {
        ordd -= hund4;
        leap += hund4;
    }
    int days = ordd + leap * 2;
    int odd = days % 7;
    return odd; // The second value is added as a placeholder
}```",289,"[assert(odd_Days(100) == 5);, assert(odd_Days(50) == 6);, assert(odd_Days(75) == 2);]"
289,This is  a function to find the list of lists with maximum length.,"```
#include <cassert>
#include <vector>
#include <string>
#include <algorithm>
#include <tuple>

std::tuple<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {
    int max_length = 0;
    std::vector<int> max_list;

    for (const auto& x : list1) {
        if (x.size() > max_length) {
            max_length = x.size();
            max_list = x;
        }
    }

    return std::make_tuple(max_length, max_list);
}```",290,"[assert(max_length({ {0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17} }) == std::make_tuple(3, std::vector<int>{13, 15, 17}));, assert(max_length({ {1}, {5, 7}, {10, 12, 14, 15} }) == std::make_tuple(4, std::vector<int>{10, 12, 14, 15}));, assert(max_length({ {5}, {15, 20, 25} }) == std::make_tuple(3, std::vector<int>{15, 20, 25}));]"
290,This is  a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"```
#include <vector>

int count_no_of_ways(int n, int k) {
    std::vector<int> dp(n + 1, 0);
    long long total = k;
    const int mod = 1000000007;
    dp[1] = k;
    dp[2] = k * k % mod;

    for (int i = 3; i <= n; ++i) {
        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;
    }

    return dp[n];  // Returning a pair, second value as 0 as a placeholder
}```",291,"[assert(count_no_of_ways(2, 4) == 16);, assert(count_no_of_ways(3, 2) == 6);, assert(count_no_of_ways(4, 4) == 228);]"
291,This is  a C++ function to find quotient of two numbers.,"```
#include <utility>

int find(int n, int m) {
    int q = n / m;
    return q; // Assuming the second return value is 0 as the original code has only one return value
}```",292,"[assert(find(10, 3) == 3);, assert(find(4, 2) == 2);, assert(find(20, 5) == 4);]"
292,This is  a function to find the third side of a right angled triangle.,"```
#include <cmath>

double otherside_rightangle(double a, double b) {
    return std::sqrt(a * a + b * b);
}```",293,"[assert(otherside_rightangle(7,8) == 10.63014581273465);, assert(otherside_rightangle(3,4) == 5);, assert(otherside_rightangle(7,15) == 16.55294535724685);]"
293,This is  a function to find the maximum value in a given heterogeneous list.,"```
#include <cassert>
#include <iostream>
#include <vector>
#include <variant>
#include <string>
#include <limits>

int maxVal(const std::vector<std::variant<int, std::string>>& listVal) {
    int maxVal = std::numeric_limits<int>::min();  // Initialize to the smallest possible int

    for (const auto& obj : listVal) {
        if (std::holds_alternative<int>(obj)) {  // Check if its an integer
            int value = std::get<int>(obj);
            if (value > maxVal) {
                maxVal = value;
            }
        }
    }
    return maxVal;
}```",294,"[assert(maxVal({ ""Python"", 3, 2, 4, 5, ""version"" }) == 5);, assert(maxVal({ ""Python"", 15, 20, 25 }) == 25);, assert(maxVal({ ""Python"", 30, 20, 40, 50, ""version"" }) == 50);]"
294,This is  a function to return the sum of all divisors of a number.,"```
#include <vector>
#include <numeric>

std::pair<int, int> sum_div(int number) {
    std::vector<int> divisors = { 1 }; // 1 is always a divisor
    for (int i = 2; i < number; i++) {
        if (number % i == 0) {
            divisors.push_back(i);
        }
    }
    int sum = std::accumulate(divisors.begin(), divisors.end(), 0);
    return { sum, divisors.size() }; // Return both the sum and the count of divisors
}```",295,"[assert(sum_div(8) == std::make_pair(7, 3));, assert(sum_div(12) == std::make_pair(16, 5));, assert(sum_div(7) == std::make_pair(1, 1));  ]"
295,This is  a C++ function to count inversions in an array.,"```
#include <iostream>
#include <array>
using namespace std;

int get_Inv_Count(int arr[], int n) {
    int inv_count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                inv_count += 1;
            }
        }
    }
    return inv_count;
}
```",296,"[assert(get_Inv_Count((array<int, 5>{ 1, 20, 6, 4, 5 }).data(), 5) == 5);, assert(get_Inv_Count((array<int, 3>{ 1, 2, 1 }).data(), 3) == 1);, assert(get_Inv_Count((array<int, 5>{ 1, 2, 5, 6, 1 }).data(), 5) == 3);]"
296,This is  a function to flatten a given nested list structure.,"```
#include <iostream>
#include <vector>
#include <any>
#include <typeinfo>
#include <cassert>
#include <algorithm>

using namespace std;

vector<any> flattenList(const vector<any>& list1) {
    vector<any> resultList;

    for (const auto& item : list1) {
        // Check if the element is a vector itself (similar to Object[] in Java)
        if (item.type() == typeid(vector<any>)) {
            // Recursively flatten nested vectors
            vector<any> flattenedSubList = flattenList(any_cast<vector<any>>(item));
            resultList.insert(resultList.end(), flattenedSubList.begin(), flattenedSubList.end());
        } else {
            // Add direct elements
            resultList.push_back(item);
        }
    }
    return resultList;
}

// Helper to print the result and check for equality
bool compareLists(const vector<any>& result, const vector<int>& expected) {
    if (result.size() != expected.size()) return false;
    for (size_t i = 0; i < result.size(); ++i) {
        if (any_cast<int>(result[i]) != expected[i]) return false;
    }
    return true;
}
```",297,"[assert(compareLists(flattenList({0, 10, vector<any>{20, 30}, 40, 50, vector<any>{60, 70, 80}, vector<any>{90, 100, 110, 120}}),
                        {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120}));,

    assert(compareLists(flattenList({vector<any>{10, 20}, vector<any>{40}, vector<any>{30, 56, 25}, vector<any>{10, 20}, vector<any>{33}, vector<any>{40}}),
                        {10, 20, 40, 30, 56, 25, 10, 20, 33, 40}));,

    assert(compareLists(flattenList({vector<any>{1, 2, 3}, vector<any>{4, 5, 6}, vector<any>{10, 11, 12}, vector<any>{7, 8, 9}}),
                        {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}));]"
297,This is  a function to find the nested list elements which are present in another list.,"```
#include <iostream>
#include <vector>
#include <unordered_set>
#include <cassert>

std::vector<std::vector<int>> intersectionNestedLists(const std::vector<int>& l1, const std::vector<std::vector<int>>& l2) {
    std::vector<std::vector<int>> result;
    std::unordered_set<int> l1Set(l1.begin(), l1.end());

    for (const auto& lst : l2) {
        std::vector<int> intersected;
        for (int n : lst) {
            if (l1Set.find(n) != l1Set.end()) {
                intersected.push_back(n);
            }
        }
        result.push_back(intersected);
    }

    return result;
}```",298,"[assert((intersectionNestedLists({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }, { {12, 18, 23, 25, 45}, {7, 11, 19, 24, 28}, {1, 5, 8, 18, 15, 16} }) == std::vector<std::vector<int>>{ {12}, { 7, 11 }, { 1, 5, 8 }}));, assert((intersectionNestedLists({ 2, 3, 1 }, { {4, 5}, {6, 8} }) == std::vector<std::vector<int>>{ {}, {}}));]"
298,This is  a function to calculate the maximum aggregate from the list of tuples.,"```
#include <iostream>
#include <unordered_map>
#include <vector>
#include <string>
#include <cassert>
#include <algorithm>

std::pair<std::string, int> maxAggregate(std::vector<std::vector<std::string>> stdata) {
    std::unordered_map<std::string, int> temp;

    for (const auto& data : stdata) {
        std::string name = data[0];
        int marks = std::stoi(data[1]);
        temp[name] += marks;
    }

    auto max_entry = std::max_element(temp.begin(), temp.end(),
        [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {
            return a.second < b.second;
        });
    return max_entry != temp.end() ? *max_entry : std::make_pair("""", 0);
}```",299,"[assert(maxAggregate({ {""Juan Whelan"", ""90""}, {""Sabah Colley"", ""88""}, {""Peter Nichols"", ""7""}, {""Juan Whelan"", ""122""}, {""Sabah Colley"", ""84""} }).first == ""Juan Whelan"");, assert(maxAggregate({ {""Juan Whelan"", ""50""}, {""Sabah Colley"", ""48""}, {""Peter Nichols"", ""37""}, {""Juan Whelan"", ""22""}, {""Sabah Colley"", ""14""} }).first == ""Juan Whelan"");, assert(maxAggregate({ {""Juan Whelan"", ""10""}, {""Sabah Colley"", ""20""}, {""Peter Nichols"", ""30""}, {""Juan Whelan"", ""40""}, {""Sabah Colley"", ""50""} }).first == ""Sabah Colley"");]"
299,This is  a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"```
#include <iostream>

double count_binary_seq(int n) {
    double nCr = 1;
    double res = 1;
    for (int r = 1; r <= n; r++) {
        nCr = (nCr * (n + 1 - r)) / r;
        res += nCr * nCr;
    }
    return res;
}```",300,"[assert(count_binary_seq(1) == 2.0);, assert(count_binary_seq(2) == 6.0);, assert(count_binary_seq(3) == 20.0);]"
300,This is  a function to find the depth of a dictionary.,"```
#include <iostream>
#include <map>
#include <variant>
#include <vector>
#include <algorithm>

int dict_depth(const std::variant<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int>>>>, int>& d) {
    if (auto dict = std::get_if<std::map<std::string, std::variant<int, std::map<std::string, std::variant<int>>>>>(&d)) {
        return 1 + (dict->empty() ? 0 : 
                    std::max_element(dict->begin(), dict->end(), 
                                     [](const auto& a, const auto& b) { 
                                         return dict_depth(a.second) < dict_depth(b.second); 
                                     })->second);
    }
    return 0;
}
```",301,"[assert(dict_depth({{""a"", 1}, {""b"", {{""c"", {{""d"", {}}}}}}}) == 4);, assert(dict_depth({{""a"", 1}, {""b"", {{""c"", ""C++""}}}}) == 2);, assert(dict_depth({{1, ""Sun""}, {2, {{3, {{4, ""Mon""}}}}}}) == 3);]"
301,This is  a C++ function to find the most significant bit number which is also a set bit.,"```
#include <iostream>

int set_Bit_Number(int n) {
    if (n == 0) {
        return 0;
    }
    int msb = 0;
    n = n / 2;
    while (n > 0) {
        n = n / 2;
        msb += 1;
    }
    return  1 << msb ; // The second value can be adjusted as needed
}```",302,"[assert(set_Bit_Number(6) == 4);, assert(set_Bit_Number(10) == 8);, assert(set_Bit_Number(18) == 16);]"
302,This is  a C++ function to check whether the count of inversion of two types are same or not.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>

bool solve(const std::vector<int>& a, int n) {
    int mx = INT_MIN;
    for (int j = 1; j < n; j++) {
        if (mx > a[j]) {
            return false;
        }
        mx = std::max(mx, a[j - 1]);
    }
    return true;
}
```",303,"[assert(solve({1,0,2}, 3) == true);, assert(solve({1,2,0}, 3) == false);, assert(solve({1,2,1}, 3) == true);]"
303,This is  a C++ function to find element at a given index after number of rotations.,"```
#include <vector>
using namespace std;

int find_Element(vector<int> arr, vector<vector<int>> ranges, int rotations, int index) {
    for (int i = rotations - 1; i >= 0; i--) {
        int left = ranges[i][0];
        int right = ranges[i][1];
        if (left <= index && right >= index) {
            if (index == left) {
                index = right;
            }
            else {
                index = index - 1;
            }
        }
    }
    return arr[index];
}```",304,"[assert(find_Element({ 1,2,3,4,5 }, { {0,2},{0,3} }, 2, 1) == 3);, assert(find_Element({ 1,2,3,4 }, { {0,1},{0,2} }, 1, 2) == 3);, assert(find_Element({ 1,2,3,4,5,6 }, { {0,1},{0,2} }, 1, 1) == 1);]"
304,This is  a function to match two words from a list of words starting with letter p.,"```
#include <iostream>
#include <vector>
#include <string>
#include <regex>
#include <cassert>

using namespace std;

vector<string> startWithP(const vector<string>& words) {
    regex pattern(R""(\b(P\w+)\W(P\w+)\b)""); // Matches two words starting with P

    for (const string& w : words) {
        smatch match;
        if (regex_search(w, match, pattern)) {
            return { match[1], match[2] };
        }
    }

    return {};
}```",305,"[assert((startWithP({ ""Python PHP"", ""Java JavaScript"" }) == vector<string>{""Python"", ""PHP""}));, assert((startWithP({ ""Python Programming"", ""Java Programming"" }) == vector<string>{""Python"", ""Programming""}));, assert((startWithP({ ""Pqrst Pqr"", ""qrstuv"" }) == vector<string>{""Pqrst"", ""Pqr""}));]"
305,"This is  a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","```
#include <iostream>
#include <vector>
#include <cassert>

using namespace std;

int max_sum_increasing_subseq(vector<int> a, int n) {
    vector<int> dp(n, 0);

    // Initialize dp with the original array values
    for (int i = 0; i < n; i++) {
        dp[i] = a[i];
    }

    // Compute the maximum sum increasing subsequence
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (a[i] > a[j] && dp[i] < dp[j] + a[i]) {
                dp[i] = dp[j] + a[i];
            }
        }
    }

    // Find maximum value in dp array
    int max_sum = 0;
    for (int i = 0; i < n; i++) {
        max_sum = max(max_sum, dp[i]);
    }

    return max_sum;
}```",306,"[assert(max_sum_increasing_subseq({ 1, 101, 2, 3, 100, 4, 5 }, 7) == 106); // 1 + 2 + 3 + 100, assert(max_sum_increasing_subseq({ 3, 4, 5, 10 }, 4) == 22); // 3 + 4 + 5 + 10, assert(max_sum_increasing_subseq({ 10, 5, 4, 3 }, 4) == 10); // Only 10 (single element case), assert(max_sum_increasing_subseq({ 11, 15, 19, 21, 26, 28, 31 }, 7) == 151); // Whole sequence]"
307,This is  a function to find the specified number of largest products from two given lists.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

using namespace std;

vector<long long> largeProduct(const vector<int>& nums1, const vector<int>& nums2, int N) {
    vector<long long> products;

    // Compute all products
    for (int x : nums1) {
        for (int y : nums2) {
            products.push_back(static_cast<long long>(x) * y);
        }
    }

    // Sort in descending order
    sort(products.rbegin(), products.rend());

    // Return the top N elements
    return vector<long long>(products.begin(), products.begin() + min(N, (int)products.size()));
}

// Helper function to compare vectors
bool vectors_are_equal(const vector<long long>& v1, const vector<long long>& v2) {
    return v1 == v2;
}```",308,"[assert(vectors_are_equal( largeProduct({ 1, 2, 3, 4, 5, 6 }, { 3, 6, 8, 9, 10, 6 }, 3), { 60, 54, 50 } ));, assert(vectors_are_equal( largeProduct({ 1, 2, 3, 4, 5, 6 }, { 3, 6, 8, 9, 10, 6 }, 4), { 60, 54, 50, 48 } ));, assert(vectors_are_equal( largeProduct({ 1, 2, 3, 4, 5, 6 }, { 3, 6, 8, 9, 10, 6 }, 5), { 60, 54, 50, 48, 45 } ));]"
309,This is  a function to convert a given string to a tuple.,"```
#include <tuple>
#include <string>
#include <vector>
#include <cctype>
#include <cassert>
#include <iostream>

std::tuple<std::vector<char>> string_to_tuple(const std::string& str1) {
    std::vector<char> result;

    for (char x : str1) {
        if (!isspace(x)) {  // Remove spaces
            result.push_back(x);
        }
    }

    return std::make_tuple(result);
}

// Helper function to compare tuples containing vectors
bool compare_tuples(const std::tuple<std::vector<char>>& t1, const std::tuple<std::vector<char>>& t2) {
    return std::get<0>(t1) == std::get<0>(t2);
}```",310,"[assert(compare_tuples(string_to_tuple(""C++ 3.0""), std::make_tuple(std::vector<char>{\C\, \+\, \+\, \3\, \.\, \0\})));, assert(compare_tuples(string_to_tuple(""item1""), std::make_tuple(std::vector<char>{\i\, \t\, \e\, \m\, \1\})));, assert(compare_tuples(string_to_tuple(""15.10""), std::make_tuple(std::vector<char>{\1\, \5\, \.\, \1\, \0\})));]"
310,This is  a C++ function to set the left most unset bit.,"```
#include <iostream>

int set_left_most_unset_bit(int n) {
    if (!(n & (n + 1))) {
        return {n, 0};
    }
    int pos = 0, temp = n, count = 0;
    while (temp) {
        if (!(temp & 1)) {
            pos = count;
        }
        count += 1; 
        temp >>= 1;
    }
    return n | (1 << pos);
}
```",311,"[assert(set_left_most_unset_bit(10) == 14);, assert(set_left_most_unset_bit(12) == 14);, assert(set_left_most_unset_bit(15) == 15);]"
311,This is  a function to find the volume of a cone.,"```
#include <cassert>
#include <cmath>

int volume_cone(double radius, double height) {
    return (M_PI * radius * radius * height) / 3.0;
}```",312,"[assert(volume_cone(5, 12) == 314);, assert(volume_cone(10, 15) == 1570);, assert(volume_cone(19, 17) == 6426);]"
312,This is  a C++ function to print positive numbers in a list.,"```
#include <cassert>
#include <vector>

std::vector<int> pos_nos(const std::vector<int>& nums) {
    std::vector<int> positives;
    for (int num : nums) {
        if (num > 0) {
            positives.push_back(num);
        }
    }
    return positives;
}```",313,"[assert((pos_nos({-1, -2, 1, 2}) == std::vector<int>{1, 2}));, assert((pos_nos({3, 4, -5}) == std::vector<int>{3, 4}));, assert((pos_nos({-2, -3, 1}) == std::vector<int>{1}));]"
313,This is  a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"```
#include <iostream>
#include <algorithm>
#include <vector>
#include <cassert>

using namespace std;

int max_sum_rectangular_grid(const vector<vector<int>>& grid, int n) {
    int incl = max(grid[0][0], grid[1][0]);
    int excl = 0;

    for (int i = 1; i < n; ++i) {
        int excl_new = max(excl, incl);
        incl = excl + max(grid[0][i], grid[1][i]);
        excl = excl_new;
    }

    return max(excl, incl);
}```",314,"[assert(max_sum_rectangular_grid({ {1, 4, 5}, {2, 0, 0} }, 3) == 7);, assert(max_sum_rectangular_grid({ {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10} }, 5) == 24);, assert(max_sum_rectangular_grid({ {7, 9, 11, 15, 19}, {21, 25, 28, 31, 32} }, 5) == 81);]"
314,This is  a C++ function to find the first maximum length of even word.,"```
#include <iostream>
#include <string>

std::string find_Max_Len_Even(const std::string& str) {
    int n = str.length();
    int i = 0;
    int currlen = 0;
    int maxlen = 0;
    int st = -1;

    while (i < n) {
        if (str[i] ==  ) {
            if (currlen % 2 == 0) {
                if (maxlen < currlen) {
                    maxlen = currlen;
                    st = i - currlen;
                }
            }
            currlen = 0;
        } else {
            currlen++;
        }
        i++;
    }

    if (currlen % 2 == 0) {
        if (maxlen < currlen) {
            maxlen = currlen;
            st = i - currlen;
        }
    }
    
    if (st == -1) {
        return ""-1"";
    }
    return str.substr(st, maxlen);
}
```",315,"[assert(find_Max_Len_Even(""C++ language"") == ""language"");, assert(find_Max_Len_Even(""maximum even length"") == ""length"");, assert(find_Max_Len_Even(""eve"") == ""-1"");]"
315,This is  a function to find the index of the last occurrence of a given number in a sorted array.,"```
#include <vector>

int find_last_occurrence(const std::vector<int>& A, int x) {
    int left = 0, right = A.size() - 1;
    int result = -1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (x == A[mid]) {
            result = mid;
            left = mid + 1;
        }
        else if (x < A[mid]) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return result;
}```",316,"[assert(find_last_occurrence({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 3);, assert(find_last_occurrence({2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9) == 9);, assert(find_last_occurrence({2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6) == 6);]"
316,This is  a function to reflect the modified run-length encoding from a list.,"```
#include <vector>
#include <list>
#include <utility>
#include <algorithm>

std::vector<std::pair<int, int>> modified_encode(const std::vector<int>& alist) {
    std::vector<std::pair<int, int>> result;
    
    if (alist.empty()) return result;

    int count = 1;
    for (size_t i = 1; i <= alist.size(); ++i) {
        if (i < alist.size() && alist[i] == alist[i - 1]) {
            count++;
        } else {
            if (count > 1) {
                result.emplace_back(count, alist[i - 1]);
            } else {
                result.emplace_back(1, alist[i - 1]);
            }
            count = 1;
        }
    }

    return result;
}
```",317,"[assert(modified_encode(std::vector<int>{1, 1, 2, 3, 4, 4, 5, 1}) == std::vector<std::variant<int, std::string, std::vector<std::variant<int, std::string>>>{std::vector<std::variant<int, std::string>>{2, 1}, 2, 3, std::vector<std::variant<int, std::string>>{2, 4}, 5, 1});, assert(modified_encode(""automatically"") == std::vector<std::variant<int, std::string, std::vector<std::variant<int, std::string>>>{""a"", ""u"", ""t"", ""o"", ""m"", ""a"", ""t"", ""i"", ""c"", ""a"", std::vector<std::variant<int, std::string>>{2, ""l""}, ""y""});, assert(modified_encode(""C++"") == std::vector<std::variant<int, std::string, std::vector<std::variant<int, std::string>>>{""p"", ""y"", ""t"", ""h"", ""o"", ""n""});]"
317,This is  a C++ function to find the maximum volume of a cuboid with given sum of sides.,"```
#include <algorithm>

int max_volume(int s) {
    int maxvalue = 0;
    for (int i = 1; i < s - 1; ++i) {
        for (int j = 1; j < s; ++j) {
            int k = s - i - j;
            maxvalue = std::max(maxvalue, i * j * k);
        }
    }
    return maxvalue;
}
```",318,"[assert(max_volume(8) == 18);, assert(max_volume(4) == 2);, assert(max_volume(1) == 0);]"
318,This is  a function to find all five characters long word in the given string by using regex.,"```
#include <cassert>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>

std::vector<std::string> find_long_word(const std::string& sentence) {
    std::istringstream iss(sentence);
    std::string word;
    std::vector<std::string> long_words;
    size_t max_length = 0;

    while (iss >> word) {
        size_t length = word.size();
        if (length > max_length) {
            max_length = length;
            long_words.clear(); // Clear previous long words
            long_words.push_back(word);
        }
        else if (length == max_length) {
            long_words.push_back(word);
        }
    }

    return long_words;
}```",319,"[assert(find_long_word(""Please move back to strem"") == std::vector<std::string>{""Please""});, assert(find_long_word(""4K Ultra HD streaming player"") == std::vector<std::string>{""streaming""});, assert(find_long_word(""Streaming Media Player"") == std::vector<std::string>{""Streaming""});]"
319,This is  a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"```
#include <iostream>

int sum_difference(int n) {
    int sumofsquares = 0;
    int squareofsum = 0;
    for (int num = 1; num <= n; num++) {
        sumofsquares += num * num;
        squareofsum += num;
    }
    squareofsum = squareofsum * squareofsum;
    return squareofsum - sumofsquares;// Return second value as 0 since its not used
}```",320,"[assert(sum_difference(12) == 5434);, assert(sum_difference(20) == 41230);, assert(sum_difference(54) == 2151270);]"
320,This is  a function to find the demlo number for the given number.,"```
#include <iostream>
#include <string>

std::string find_demlo(std::string s) {
    int l = s.length();
    std::string res = """";
    for (int i = 1; i <= l; i++) {
        res += std::to_string(i);
    }
    for (int i = l - 1; i > 0; i--) {
        res += std::to_string(i);
    }
    return res;
}
```",321,"[assert(find_demlo(""111111"") == ""12345654321"");, assert(find_demlo(""1111"") == ""1234321"");, assert(find_demlo(""13333122222"") == ""123456789101110987654321"");]"
321,This is  a function to find all index positions of the minimum values in a given list.,"```
#include <cassert>
#include <vector>

std::vector<int> position_min(const std::vector<int>& arr) {
    std::vector<int> positions;
    int min_value = *std::min_element(arr.begin(), arr.end());
    for (size_t i = 0; i < arr.size(); ++i) {
        if (arr[i] == min_value) {
            positions.push_back(i);
        }
    }
    return positions;
}```",322,"[assert(position_min({ 1,2,2,2,4,4,4,5,5,5,5 }) == std::vector<int>{0});, assert(position_min({ 2,1,5,6,8,3,4,9,10,11,8,12 }) == std::vector<int>{1});]"
322,This is  a function to re-arrange the given array in alternating positive and negative items.,"```
#include <cassert>
#include <iostream>
#include <vector>

std::vector<int> re_arrange(std::vector<int> arr, int n) {
    std::vector<int> result(n);
    int posIndex = 0, negIndex = 0;

    // Separate positive and negative numbers
    std::vector<int> positive, negative;
    for (int num : arr) {
        if (num >= 0) {
            positive.push_back(num);
        }
        else {
            negative.push_back(num);
        }
    }

    // Interleave positive and negative numbers
    int index = 0;
    while (posIndex < positive.size() && negIndex < negative.size()) {
        result[index++] = negative[negIndex++];
        result[index++] = positive[posIndex++];
    }

    // Append remaining positive or negative numbers
    while (posIndex < positive.size()) {
        result[index++] = positive[posIndex++];
    }
    while (negIndex < negative.size()) {
        result[index++] = negative[negIndex++];
    }

    return result;
}```",323,"[assert((re_arrange({ -5, -2, 5, 2, 4, 7, 1, 8, 0, -8 }, 10) == std::vector<int>{-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}));, assert((re_arrange({ 1, 2, 3, -4, -1, 4 }, 6) == std::vector<int>{-4, 1, -1, 2, 3, 4}));, assert((re_arrange({ 4, 7, 9, 77, -4, 5, -3, -9 }, 8) == std::vector<int>{-4, 4, -3, 7, -9, 9, 77, 5}));]"
323,This is  a function to extract the sum of alternate chains of tuples.,"```
#include <cassert>
#include <tuple>

std::tuple<int, int> sum_of_alternates(std::tuple<int, int, int, int, int, int> nums) {
    int sum1 = 0, sum2 = 0;
    int* arr = (int*)&nums; // cast tuple to int array

    for (int i = 0; i < 6; ++i) {
        if (i % 2 == 0) {
            sum1 += arr[i];
        }
        else {
            sum2 += arr[i];
        }
    }

    return std::make_tuple(sum1, sum2);
}```",324,"[assert(sum_of_alternates(std::make_tuple(5, 6, 3, 6, 10, 34)) == std::make_tuple(46, 18));, assert(sum_of_alternates(std::make_tuple(6, 7, 8, 9, 4, 5)) == std::make_tuple(21, 18));]"
324,This is  a C++ function to find the minimum number of squares whose sum is equal to a given number.,"```
#include <iostream>
#include <algorithm>
using namespace std;

int get_Min_Squares(int n) {
    if (n <= 3) {
        return n;
    }
    int res = n;
    for (int x = 1; x <= n; x++) {
        int temp = x * x;
        if (temp > n) {
            break;
        } else {
            res = min(res, 1 + get_Min_Squares(n - temp));
        }
    }
    return res;
}
```",325,"[assert(get_Min_Squares(6) == 3);, assert(get_Min_Squares(2) == 2);, assert(get_Min_Squares(4) == 1);]"
325,This is  a function to get the word with most number of occurrences in the given strings list.,"```
#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <sstream>
#include <algorithm>

std::string most_occurrences(const std::vector<std::string>& phrases) {
    std::unordered_map<std::string, int> word_count;
    for (const auto& phrase : phrases) {
        std::istringstream iss(phrase);
        std::string word;
        while (iss >> word) {
            word_count[word]++;
        }
    }

    return std::max_element(word_count.begin(), word_count.end(),
        [](const auto& a, const auto& b) {
            return a.second < b.second;
        })->first;
}```",326,"[assert(most_occurrences({ ""UTS is best for RTF"", ""RTF love UTS"", ""UTS is best"" }) == ""UTS"");, assert(most_occurrences({ ""Its been a great year"", ""this year is so worse"", ""this year is okay"" }) == ""year"");, assert(most_occurrences({ ""Families can be reunited"", ""people can be reunited"", ""Tasks can be achieved"" }) == ""can"");]"
326,This is  a function to print check if the triangle is isosceles or not.,"```
bool check_isosceles(int x, int y, int z) {
    if (x == y || y == z || z == x) {
        return true;
    } else {
        return false;
    }
}
```",327,"[assert(check_isosceles(6, 8, 12) == false);, assert(check_isosceles(6, 6, 12) == true);, assert(check_isosceles(6, 16, 20) == false);]"
327,This is  a function to rotate a given list by specified number of items to the left direction.,"```
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> rotate_left(const std::vector<int>& arr, int d, int n) {
    std::vector<int> result(arr);
    std::rotate(result.begin(), result.begin() + d, result.begin() + n);
    return result;
}```",328,"[assert(rotate_left({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 3, 10) == std::vector<int>({ 4, 5, 6, 7, 8, 9, 10, 1, 2, 3 }));, assert(rotate_left({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2, 10) == std::vector<int>({ 3, 4, 5, 6, 7, 8, 9, 10, 1, 2 }));, assert(rotate_left({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5, 10) == std::vector<int>({ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5 }));]"
328,This is  a C++ function to count negative numbers in a list.,"```
#include <vector>

int neg_count(const std::vector<int> list) {
    int neg_count = 0;
    for (int num : list) {
        if (num <= 0) {
            neg_count += 1;
        }
    }
    return neg_count ; // Added 0 to match the return type with a pair
}
```",329,"[assert(neg_count(std::vector<int>{-1, -2, 3, -4, -5}) == 3);, assert(neg_count(std::vector<int>{1, 2, 3}) == 0);, assert(neg_count(std::vector<int>{1, 2, -3, -10, 20}) == 2);]"
329,"This is  a function to find all three, four, five characters long words in the given string by using regex.","```
#include <iostream>
#include <vector>
#include <regex>
#include <string>
#include <cassert>

std::vector<std::string> findChar(const std::string& text) {
    std::vector<std::string> result;
    std::regex pattern(R""(\b\w{3,5}\b)"");
    auto words_begin = std::sregex_iterator(text.begin(), text.end(), pattern);
    auto words_end = std::sregex_iterator();

    for (auto it = words_begin; it != words_end; ++it) {
        result.push_back(it->str());
    }

    return result;
}```",330,"[assert((findChar(""For the four consumer complaints contact manager AKR reddy"") == std::vector<std::string>{""For"", ""the"", ""four"", ""AKR"", ""reddy""}));, assert((findChar(""Certain service are subject to change MSR"") == std::vector<std::string>{""are"", ""MSR""}));, assert((findChar(""Third party legal desclaimers"") == std::vector<std::string>{""Third"", ""party"", ""legal""}));]"
330,This is  a C++ function to count unset bits of a given number.,"```
#include <iostream>
using namespace std;

int count_unset_bits(int n) { 
    int count = 0; 
    int x = 1; 
    while (x < n + 1) { 
        if ((x & n) == 0) { 
            count += 1; 
        } 
        x = x << 1; 
    } 
    return count;
}
```",331,"[assert(count_unset_bits(2) == 1);, assert(count_unset_bits(4) == 2);, assert(count_unset_bits(6) == 1);]"
331,This is  a function to count character frequency of a given string.,"```
#include <cassert>
#include <vector>
#include <algorithm>
#include <string>
#include <unordered_map>

// Function to calculate character frequency
std::unordered_map<char, int> char_frequency(const std::string& str) {
    std::unordered_map<char, int> freq;
    for (char c : str) {
        freq[c]++;
    }
    return freq;
}

// Function to compare two unordered maps for equality
bool compare_maps(const std::unordered_map<char, int>& map1, const std::unordered_map<char, int>& map2) {
    return map1.size() == map2.size() && std::equal(map1.begin(), map1.end(), map2.begin());
}```",332,"[assert(compare_maps(char_frequency(""C++""), std::unordered_map<char, int>{ {\C\, 1}, { \+\, 2 } }));, assert(compare_maps(char_frequency(""program""), std::unordered_map<char, int>{ {\p\, 1}, { \r\, 2 }, { \o\, 1 }, { \g\, 1 }, { \a\, 1 }, { \m\, 1 } }));, assert(compare_maps(char_frequency(""language""), std::unordered_map<char, int>{ {\l\, 1}, { \a\, 2 }, { \n\, 1 }, { \g\, 2 }, { \u\, 1 }, { \e\, 1 } }));]"
332,This is  a C++ function to sort a list according to the second element in sublist.,"```
#include <cassert>
#include <iostream>
#include <vector>
#include <algorithm>

void sort(std::vector<std::pair<std::string, int>>& subLi) {
    std::sort(subLi.begin(), subLi.end(), [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {
        return a.second < b.second;
        });
}```",333,"[assert(([]() { std::vector<std::pair<std::string, int>> subLi = { {""a"", 10}, {""b"", 5}, {""c"", 20}, {""d"", 15} }; sort(subLi);, assert(([]() { std::vector<std::pair<std::string, int>> subLi = { {""452"", 10}, {""256"", 5}, {""100"", 20}, {""135"", 15} }; sort(subLi);, assert(([]() { std::vector<std::pair<std::string, int>> subLi = { {""rishi"", 10}, {""akhil"", 5}, {""ramya"", 20}, {""gaur"", 15} }; sort(subLi);]"
333,This is  a C++ function to check whether the triangle is valid or not if sides are given.,"```
bool check_Validity(int a, int b, int c) {
    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {
        return false;
    } else {
        return true;
    }
}
```",334,"[assert(check_Validity(1, 2, 3) == false);, assert(check_Validity(2, 3, 5) == false);, assert(check_Validity(7, 10, 5) == true);]"
334,This is  a function to find the sum of arithmetic progression.,"```
#include <iostream>
using namespace std;

double ap_sum(double a, int n, double d) {
    double total = (n * (2 * a + (n - 1) * d)) / 2;
    return total;
}
```",335,"[assert(ap_sum(1, 5, 2) == 25);, assert(ap_sum(2, 6, 4) == 72);, assert(ap_sum(1, 4, 5) == 34);]"
335,This is  a function to check whether the given month name contains 28 days or not.,"```
bool check_monthnum(const std::string& monthname1) {
    if (monthname1 == ""February"") {
        return true;
    } else {
        return false;
    }
}
```",336,"[assert(check_monthnum(""February"") == true);, assert(check_monthnum(""January"") == false);, assert(check_monthnum(""March"") == false);]"
336,"This is  a function that matches a word at the end of a string, with optional punctuation.","```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_word(const std::string& text) {
    std::regex patterns(""\\w+\\S*$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",337,"[assert(text_match_word(""C++."") == ""Found a match!"");, assert(text_match_word(""C++."") == ""Found a match!"");, assert(text_match_word(""  lang  ."") == ""Not matched!"");]"
337,This is  a C++ function to count the number of substrings with same first and last characters.,"```
#include <string>

bool check_Equality(const std::string& s) {
    return (s[0] == s[s.length() - 1]);
}

int count_Substring_With_Equal_Ends(const std::string& s) {
    int result = 0;
    int n = s.length();
    for (int i = 0; i < n; ++i) {
        for (int j = 1; j <= n - i; ++j) {
            if (check_Equality(s.substr(i, j))) {
                result++;
            }
        }
    }
    return result;
}
```",338,"[assert(count_Substring_With_Equal_Ends(""aba"") == 4);, assert(count_Substring_With_Equal_Ends(""abcab"") == 7);, assert(count_Substring_With_Equal_Ends(""abc"") == 3);]"
338,This is  a C++ function to find the maximum occuring divisor in an interval.,"```
#include <cassert>
#include <algorithm>  // for std::min

int find_Divisor(int a, int b) {
    // Find the greatest common divisor using the Euclidean algorithm
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}```",339,"[assert(find_Divisor(2, 2) == 2);, assert(find_Divisor(2, 5) == 1);, assert(find_Divisor(5, 10) == 2);]"
339,This is  a C++ function to find the sum of the three lowest positive numbers from a given list of numbers.,"```
#include <vector>
#include <algorithm>
#include <numeric>

int sum_three_smallest_nums(const std::vector<int>&lst) {
    std::vector<int> positives;
    for (int x : lst) {
        if (x > 0) {
            positives.push_back(x);
        }
    }
    std::sort(positives.begin(), positives.end());
    return std::accumulate(positives.begin(), positives.begin() + std::min(3, (int)positives.size()), 0);
}```",340,"[assert(sum_three_smallest_nums({10,20,30,40,50,60,7}) == 37);, assert(sum_three_smallest_nums({1,2,3,4,5}) == 6);, assert(sum_three_smallest_nums({0,1,2,3,4,5}) == 6);]"
340,This is  a function to convert the given set into ordered tuples.,"```
#include <cassert>
#include <vector>
#include <algorithm>
#include <tuple>
#include <set>

std::tuple<std::vector<int>> set_to_tuple(const std::set<int>& s) {
    std::vector<int> t(s.begin(), s.end());
    std::sort(t.begin(), t.end());
    return std::make_tuple(t);
}```",341,"[assert(set_to_tuple({ 1, 2, 3, 4, 5 }) == std::make_tuple(std::vector<int>{1, 2, 3, 4, 5}));, assert(set_to_tuple({ 6, 7, 8, 9, 10, 11 }) == std::make_tuple(std::vector<int>{6, 7, 8, 9, 10, 11}));, assert(set_to_tuple({ 12, 13, 14, 15, 16 }) == std::make_tuple(std::vector<int>{12, 13, 14, 15, 16}));]"
341,This is  a function to find the smallest range that includes at-least one element from each of the given arrays.,"```
#include <cassert>
#include <vector>
#include <queue>
#include <algorithm>
#include <climits>

std::vector<int> findMinimumRange(const std::vector<std::vector<int>>& lists) {
    int high = INT_MIN;
    std::vector<int> p{ 0, INT_MAX };

    // Using a priority queue for min-heap (min priority queue)
    using Element = std::vector<int>;
    auto cmp = [](const Element& a, const Element& b) { return a[0] > b[0]; };  // Compare by value
    std::priority_queue<Element, std::vector<Element>, decltype(cmp)> pq(cmp);

    for (int i = 0; i < lists.size(); i++) {
        pq.push({ lists[i][0], i, 0 });  // {value, listIndex, elementIndex}
        high = std::max(high, lists[i][0]);
    }

    while (true) {
        Element top = pq.top();
        pq.pop();
        int low = top[0];
        int listIndex = top[1];
        int elementIndex = top[2];

        if (high - low < p[1] - p[0]) {
            p[0] = low;
            p[1] = high;
        }

        if (elementIndex == lists[listIndex].size() - 1) {
            return p;
        }

        pq.push({ lists[listIndex][elementIndex + 1], listIndex, elementIndex + 1 });
        high = std::max(high, lists[listIndex][elementIndex + 1]);
    }
}```",342,"[assert((findMinimumRange({ {3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6} }) == std::vector<int>{4, 6}));, assert((findMinimumRange({ {2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6} }) == std::vector<int>{4, 7}));, assert((findMinimumRange({ {4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7} }) == std::vector<int>{5, 7}));]"
342,This is  a function to calculate the number of digits and letters in a string.,"```
#include <iostream>
#include <string>
#include <cassert>
#include <cctype>

std::pair<int, int> dig_let(const std::string& s) {
    int d = 0, l = 0;
    for (char c : s) {
        if (isdigit(c)) {
            d++;
        }
        else if (isalpha(c)) {
            l++;
        }
    }
    return { l, d };  // Return as a pair (letters, digits)
}```",343,"[assert(dig_let(""python"") == std::make_pair(6,0));  // Corrected test case, assert(dig_let(""program"") == std::make_pair(7, 0));  // Corrected test case]"
343,This is  a C++ function to find number of elements with odd factors in a given range.,"```
#include <cmath>

int count_Odd_Squares(int n, int m) {
    return static_cast<int>(sqrt(m)) - static_cast<int>(sqrt(n - 1));
}
```",344,"[assert(count_Odd_Squares(5, 100) == 8);, assert(count_Odd_Squares(8, 65) == 6);, assert(count_Odd_Squares(2, 5) == 1);]"
344,This is  a function to find the difference between two consecutive numbers in a given list.,"```
#include <vector>
#include <cassert>

std::vector<int> diff_consecutivenums(const std::vector<int>& nums) {
    std::vector<int> differences;
    for (size_t i = 1; i < nums.size(); ++i) {
        differences.push_back(nums[i] - nums[i - 1]);
    }
    return differences;
}```",345,"[assert((diff_consecutivenums({ 1, 1, 3, 4, 4, 5, 6, 7 }) == std::vector<int>{0, 2, 1, 0, 1, 1, 1}));, assert((diff_consecutivenums({ 4, 5, 8, 9, 6, 10 }) == std::vector<int>{1, 3, 1, -3, 4}));, assert((diff_consecutivenums({ 0, 1, 2, 3, 4, 4, 4, 4, 5, 7 }) == std::vector<int>{1, 1, 1, 1, 0, 0, 0, 1, 2}));]"
345,"This is  a function to find entringer number e(n, k).","```
#include <iostream>

int zigzag(int n, int k) {
    if (n == 0 && k == 0) {
        return 1;
    }
    if (k == 0) {
        return 0;
    }
    return zigzag(n, k - 1) + zigzag(n - 1, n - k);
}
```",346,"[assert(zigzag(4, 3) == 5);, assert(zigzag(4, 2) == 4);, assert(zigzag(3, 1) == 1);]"
346,This is  a C++ function to count the number of squares in a rectangle.,"```
#include <vector>
#include <cassert>
#include <tuple>

int count_Squares(int m, int n) {
    if (n < m) {
        int temp = m;
        m = n;
        n = temp;
    }
    return n * (n + 1) * (3 * m - n + 1) / 6;  // Return integer, not a tuple
}```",347,"[assert(count_Squares(4, 3) == 20);, assert(count_Squares(1, 2) == 2);, assert(count_Squares(2, 2) == 5);]"
347,This is  a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"```
#include <iostream>
using namespace std;

long long bin_coff(int n, int r) {
    long long val = 1;
    if (r > (n - r)) {
        r = (n - r);
    }
    for (int i = 0; i < r; i++) {
        val *= (n - i);
        val /= (i + 1);
    }
    return val;
}

long long find_ways(int M) {
    int n = M / 2;
    long long a = bin_coff(2 * n, n);
    long long b = a / (n + 1);
    return b;
}```",348,"[assert(find_ways(4) == 2);, assert(find_ways(6) == 5);, assert(find_ways(8) == 14);]"
348,This is  a C++ function to check whether the given string is a binary string or not.,"```
#include <iostream>
#include <set>
#include <string>

std::string check(const std::string &str) {
    std::set<char> p(str.begin(), str.end());
    std::set<char> s = {0, 1};
    
    if (s == p || p == std::set<char>({0}) || p == std::set<char>({1})) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}
```",349,"[assert(check(""01010101010"") == ""Yes"");, assert(check(""name0"") == ""No"");, assert(check(""101"") == ""Yes"");]"
349,This is  a C++ function to minimize the length of the string by removing occurrence of only one character.,"```
#include <iostream>
#include <string>
#include <vector>

int minimum_Length(const std::string& s) {
    int maxOcc = 0;
    int n = s.length();
    std::vector<int> arr(26, 0);

    for (int i = 0; i < n; ++i) {
        arr[s[i] - a] += 1;
    }

    for (int i = 0; i < 26; ++i) {
        if (arr[i] > maxOcc) {
            maxOcc = arr[i];
        }
    }

    return n - maxOcc; // The second value is ignored, matching the C++ return structure
}```",350,"[assert(minimum_Length(""mnm"") == 1);, assert(minimum_Length(""abcda"") == 3);, assert(minimum_Length(""abcb"") == 2);]"
350,This is  a C++ function to find the first element occurring k times in a given array.,"```
#include <unordered_map>
#include <vector>

int first_Element(const std::vector<int>& arr, int n, int k) { 
    std::unordered_map<int, int> count_map; 
    for (int i = 0; i < n; ++i) { 
        count_map[arr[i]]++; 
    } 
    for (int i = 0; i < n; ++i) {  
        if (count_map[arr[i]] == k) { 
            return arr[i]; 
        } 
    } 
    return -1; 
}
```",351,"[assert(first_Element({0,1,2,3,4,5}, 6, 1) == 0);, assert(first_Element({1,2,1,3,4}, 5, 2) == 1);, assert(first_Element({2,3,4,3,5,7,1,2,3,5}, 10, 2) == 2);]"
351,This is  a C++ function to check whether all the characters in a given string are unique.,"```
#include <string>

bool unique_Characters(const std::string& str) {
    for (size_t i = 0; i < str.length(); ++i) {
        for (size_t j = i + 1; j < str.length(); ++j) {
            if (str[i] == str[j]) {
                return false;
            }
        }
    }
    return true;
}
```",352,"[assert(unique_Characters(""aba"") == false);, assert(unique_Characters(""abc"") == true);, assert(unique_Characters(""abab"") == false);]"
352,This is  a function to remove a specified column from a given nested list.,"```
#include <vector>
#include <cassert>

std::vector<std::vector<int>> remove_column(const std::vector<std::vector<int>>& matrix, int col) {
    std::vector<std::vector<int>> result;
    for (const auto& row : matrix) {
        std::vector<int> newRow;
        for (int i = 0; i < row.size(); ++i) {
            if (i != col) {
                newRow.push_back(row[i]);
            }
        }
        result.push_back(newRow);
    }
    return result;
}```",353,"[assert((remove_column({ {1, 2, 3}, {2, 4, 5}, {1, 1, 1} }, 0) == std::vector<std::vector<int>>{ {2, 3}, { 4, 5 }, { 1, 1 }}));, assert((remove_column({ {1, 2, 3}, {-2, 4, -5}, {1, -1, 1} }, 2) == std::vector<std::vector<int>>{ {1, 2}, { -2, 4 }, { 1, -1 }}));, assert((remove_column({ {1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11} }, 0) == std::vector<std::vector<int>>{ {3}, { 7 }, { 3 }, { 15, 17 }, { 7 }, { 11 }}));]"
353,This is  a function to find t-nth term of arithemetic progression.,"```
#include <cassert>

double tn_ap(double a, int n, double d) {
    double tn = a + (n - 1) * d;
    return tn;  // Return the value directly, not a tuple
}```",354,"[assert(tn_ap(1, 5, 2) == 9);, assert(tn_ap(2, 6, 4) == 22);, assert(tn_ap(1, 4, 5) == 16); ]"
354,This is  a C++ function to count the number of rectangles in a circle of radius r.,"```
#include <iostream>

int count_Rectangles(int radius) {
    int rectangles = 0;
    int diameter = 2 * radius;
    int diameterSquare = diameter * diameter;

    for (int a = 1; a < 2 * radius; ++a) {
        for (int b = 1; b < 2 * radius; ++b) {
            int diagnalLengthSquare = (a * a + b * b);
            if (diagnalLengthSquare <= diameterSquare) {
                rectangles += 1;
            }
        }
    }
    return rectangles; // Second value is a placeholder, as the original C++ code returns a tuple
}```",355,"[assert(count_Rectangles(2) == 8);, assert(count_Rectangles(1) == 1);, assert(count_Rectangles(0) == 0);]"
355,This is  a function to find the third angle of a triangle using two angles.,"```
int find_angle(int a, int b) {
    int c = 180 - (a + b);
    return c;
}
```",356,"[assert(find_angle(47, 89) == 44);, assert(find_angle(45, 95) == 40);, assert(find_angle(50, 40) == 90);]"
356,This is  a function to find the maximum element of all the given tuple records.,"```
#include <cassert>
#include <vector>
#include <algorithm>

int find_max(const std::vector<std::pair<int, int>>& pairs) {
    int max_value = 0;
    for (const auto& p : pairs) {
        max_value = std::max(max_value, std::max(p.first, p.second));
    }
    return max_value;
}```",357,"[assert(find_max({{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}}) == 10);, assert(find_max({{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}}) == 11);, assert(find_max({{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}}) == 12);]"
357,This is  a function to find modulo division of two lists using map and lambda function.,"```
#include <vector>
#include <functional>

std::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    std::vector<int> result;
    for (size_t i = 0; i < nums1.size(); ++i) {
        result.push_back(nums1[i] % nums2[i]);
    }
    return result;
}
```",358,"[assert((moddiv_list({ 3,2 }, { 1,4 }) == std::vector<int>{0, 2}));, assert((moddiv_list({ 90,120 }, { 50,70 }) == std::vector<int>{40, 50}));]"
358,This is  a C++ function to check whether one root of the quadratic equation is twice of the other or not.,"```
#include <string>

std::string Check_Solution(int a, int b, int c) {
    if (2 * b * b == 9 * a * c) {
        return ""Yes"";
    }
    else {
        return ""No"";
    }
}```",359,"[assert(Check_Solution(1, 3, 2) == ""Yes"");, assert(Check_Solution(1, 2, 3) == ""No"");, assert(Check_Solution(1, -5, 6) == ""No"");]"
359,This is  a function to find the n’th carol number.,"```
#include <cmath>

long long get_carol(int n) {
    long long result = pow(2, n) - 1;
    return result * result - 2;
}
```",360,"[assert(get_carol(2) == 7);, assert(get_carol(4) == 223);, assert(get_carol(5) == 959);]"
360,This is  a function to remove empty lists from a given list of lists.,"```
#include <vector>
#include <string>
#include <variant>
#include <cassert>

// Comparator function to compare variants
bool variant_equal(const std::variant<std::string, std::vector<int>>& lhs, 
                   const std::variant<std::string, std::vector<int>>& rhs) {
    if (lhs.index() != rhs.index()) {
        return false;
    }

    if (std::holds_alternative<std::string>(lhs)) {
        return std::get<std::string>(lhs) == std::get<std::string>(rhs);
    }

    if (std::holds_alternative<std::vector<int>>(lhs)) {
        return std::get<std::vector<int>>(lhs) == std::get<std::vector<int>>(rhs);
    }

    return false;
}

// Function to remove empty variants (empty string or empty vector)
std::vector<std::variant<std::string, std::vector<int>>> removeEmpty(const std::vector<std::variant<std::string, std::vector<int>>>& list) {
    std::vector<std::variant<std::string, std::vector<int>>> result;
    for (const auto& item : list) {
        if (std::holds_alternative<std::string>(item)) {
            if (!std::get<std::string>(item).empty()) {
                result.push_back(item);
            }
        }
        else if (std::holds_alternative<std::vector<int>>(item)) {
            if (!std::get<std::vector<int>>(item).empty()) {
                result.push_back(item);
            }
        }
    }
    return result;
}

// Helper function to compare vectors of variants
bool vector_equal(const std::vector<std::variant<std::string, std::vector<int>>>& lhs,
                  const std::vector<std::variant<std::string, std::vector<int>>>& rhs) {
    if (lhs.size() != rhs.size()) {
        return false;
    }
    for (size_t i = 0; i < lhs.size(); ++i) {
        if (!variant_equal(lhs[i], rhs[i])) {
            return false;
        }
    }
    return true;
}```",361,"[assert(vector_equal(removeEmpty({ {}, {}, {}, ""Red"", ""Green"", std::vector<int>{1, 2}, ""Blue"", {}, {} }), std::vector<std::variant<std::string, std::vector<int>>>{""Red"", ""Green"", std::vector<int>{1, 2}, ""Blue""}));, assert(vector_equal(removeEmpty({ {}, {}, {}, {}, {}, ""Green"", std::vector<int>{1, 2}, ""Blue"", {}, {} }), std::vector<std::variant<std::string, std::vector<int>>>{""Green"", std::vector<int>{1, 2}, ""Blue""}));, assert(vector_equal(removeEmpty({ {}, {}, {}, ""Python"", {}, {}, ""programming"", ""language"", {}, {}, {}, {}, {} }), std::vector<std::variant<std::string, std::vector<int>>>{""Python"", ""programming"", ""language""}));]"
361,This is  a C++ function to find the item with maximum occurrences in a given list.,"```
#include <cassert>
#include <vector>
#include <unordered_map>

std::string max_occurrences(const std::vector<int>& nums) {
    std::unordered_map<int, int> count;
    for (int num : nums) {
        count[num]++;
    }

    int max_count = 0;
    std::string result;
    for (const auto& pair : count) {
        if (pair.second > max_count) {
            max_count = pair.second;
            result = std::to_string(pair.first);
        }
        else if (pair.second == max_count) {
            result += "","" + std::to_string(pair.first);
        }
    }
    return result;
}```",362,"[assert(max_occurrences({ 1, 2, 3, 1, 2, 3, 12, 4, 2 }) == ""2"");, assert(max_occurrences({ 1, 2, 6, 7, 0, 1, 0, 1, 0 }) == ""1,0"");, assert(max_occurrences({ 1, 2, 3, 1, 2, 4, 1 }) == ""1"");]"
362,This is  a function to add the k elements to each element in the tuple.,"```
#include <iostream>
#include <vector>
#include <cassert>

// Function to add K to each element in each sublist
std::vector<std::vector<int>> addKElement(const std::vector<std::vector<int>>& testList, int K) {
    std::vector<std::vector<int>> res;
    for (const auto& sub : testList) {
        std::vector<int> newSub;
        for (int j : sub) {
            newSub.push_back(j + K);
        }
        res.push_back(newSub);
    }
    return res;
}

// Helper function to compare two 2D vectors
bool vector_equal(const std::vector<std::vector<int>>& lhs, const std::vector<std::vector<int>>& rhs) {
    if (lhs.size() != rhs.size()) {
        return false;
    }
    for (size_t i = 0; i < lhs.size(); ++i) {
        if (lhs[i] != rhs[i]) {
            return false;
        }
    }
    return true;
}```",363,"[assert(vector_equal(addKElement({ {1, 3, 4}, {2, 4, 6}, {3, 8, 1} }, 4), { {5, 7, 8}, {6, 8, 10}, {7, 12, 5} }));, assert(vector_equal(addKElement({ {1, 2, 3}, {4, 5, 6}, {7, 8, 9} }, 8), { {9, 10, 11}, {12, 13, 14}, {15, 16, 17} }));, assert(vector_equal(addKElement({ {11, 12, 13}, {14, 15, 16}, {17, 18, 19} }, 9), { {20, 21, 22}, {23, 24, 25}, {26, 27, 28} }));]"
363,This is  a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"```
#include <vector>
#include <string>
#include <variant>
#include <cassert>

#include <string>
using namespace std;

char make_flip(char ch) {
    return (ch == 0) ? 1 : 0;
}

int get_flip_with_starting_character(const string& str, char expected) {
    int flip_count = 0;
    for (size_t i = 0; i < str.length(); ++i) {
        if (str[i] != expected) {
            flip_count++;
        }
        expected = make_flip(expected);
    }
    return flip_count;
}

int min_flip_to_make_string_alternate(const string& str) {
    return min(get_flip_with_starting_character(str, 0), get_flip_with_starting_character(str, 1));
}```",364,"[assert(min_flip_to_make_string_alternate(""0001010111"") == 2);, assert(min_flip_to_make_string_alternate(""001"") == 1);, assert(min_flip_to_make_string_alternate(""010111011"") == 2);]"
364,This is  a C++ function to count the number of digits of a given number.,"```
#include <iostream>

int count_Digit(int n) {
    int count = 0;
    while (n != 0) {
        n /= 10;
        count += 1;
    }
    return count; // To match the return type (tuple) in C++
}```",365,"[assert(count_Digit(12345) == 5);, assert(count_Digit(11223305) == 8);, assert(count_Digit(4123459) == 7);]"
365,This is  a C++ function to find the largest product of the pair of adjacent elements from a given list of integers.,"```
#include <cassert>
#include <vector>

int adjacent_num_product(const std::vector<int>& nums) {
    int max_product = 0;
    for (size_t i = 0; i < nums.size() - 1; ++i) {
        int product = nums[i] * nums[i + 1];
        if (product > max_product) {
            max_product = product;
        }
    }
    return max_product;
}```",366,"[assert(adjacent_num_product({ 1, 2, 3, 4, 5, 6 }) == 30);, assert(adjacent_num_product({ 1, 2, 3, 4, 5 }) == 20);, assert(adjacent_num_product({ 2, 3 }) == 6);]"
366,This is  a function to check if a binary tree is balanced or not.,"```
#include <iostream>
#include <queue>
#include <cmath>
#include <cassert>

using namespace std;

class Node {
public:
    int data;
    Node* left, * right;

    Node(int item) {
        data = item;
        left = right = nullptr;
    }
};

int getHeight(Node* root) {
    if (root == nullptr) {
        return 0;
    }
    return max(getHeight(root->left), getHeight(root->right)) + 1;
}

bool isTreeBalanced(Node* root) {
    if (root == nullptr) {
        return true;
    }
    int lh = getHeight(root->left);
    int rh = getHeight(root->right);
    return abs(lh - rh) <= 1 && isTreeBalanced(root->left) && isTreeBalanced(root->right);
}

// Helper method to convert array to binary tree
Node* arrayToTree(int arr[], int n) {
    if (arr == nullptr || n == 0 || arr[0] == -1) {
        return nullptr;
    }

    Node* root = new Node(arr[0]);
    queue<Node*> q;
    q.push(root);
    int i = 1; // Start from the second element in the array

    while (i < n) {
        Node* current = q.front();
        q.pop();

        // Left child
        if (i < n && arr[i] != -1) {
            current->left = new Node(arr[i]);
            q.push(current->left);
        }
        i++;

        // Right child
        if (i < n && arr[i] != -1) {
            current->right = new Node(arr[i]);
            q.push(current->right);
        }
        i++;
    }

    return root;
}```",367,"[assert(!isTreeBalanced(arrayToTree(new int[]{1, 2, -1, 3, -1, -1, -1}, 7)) && ""Test case 1 failed: Unbalanced tree should return false"");, assert(isTreeBalanced(arrayToTree(new int[]{1, 2, 3, -1, -1, -1, -1}, 7)) && ""Test case 2 failed: Balanced tree should return true"");, assert(!isTreeBalanced(arrayToTree(new int[]{1, 2, 3, 4, -1, -1, 5, 6, -1, -1, -1, -1, -1, -1, 7}, 15)) && ""Test case 3 failed: Unbalanced tree should return false"");]"
367,This is  a function to repeat the given tuple n times.,"```
#include <cassert>
#include <tuple>
#include <vector>

std::vector<std::tuple<int, int>> repeat_tuples(std::tuple<int, int> t, int n) {
    std::vector<std::tuple<int, int>> result(n, t);
    return result;
}

bool operator==(const std::vector<std::tuple<int, int>>& v1, const std::vector<std::tuple<int, int>>& v2) {
    if (v1.size() != v2.size()) return false;
    for (size_t i = 0; i < v1.size(); ++i) {
        if (v1[i] != v2[i]) return false;
    }
    return true;
}```",368,"[assert((repeat_tuples(std::make_tuple(1, 3), 4) == std::vector<std::tuple<int, int>>{std::make_tuple(1, 3), std::make_tuple(1, 3), std::make_tuple(1, 3), std::make_tuple(1, 3)}));, assert((repeat_tuples(std::make_tuple(1, 2), 3) == std::vector<std::tuple<int, int>>{std::make_tuple(1, 2), std::make_tuple(1, 2), std::make_tuple(1, 2)}));, assert((repeat_tuples(std::make_tuple(3, 4), 5) == std::vector<std::tuple<int, int>>{std::make_tuple(3, 4), std::make_tuple(3, 4), std::make_tuple(3, 4), std::make_tuple(3, 4), std::make_tuple(3, 4)}));]"
368,This is  a function to find the lateral surface area of cuboid,"```
int lateralsurface_cuboid(int length, int width, int height) {
    return 2 * (length * height + width * height);
}```",369,"[assert(lateralsurface_cuboid(8, 5, 6) == 156);, assert(lateralsurface_cuboid(7, 9, 10) == 320);, assert(lateralsurface_cuboid(10, 20, 30) == 1800);]"
369,This is  a function to sort a tuple by its float element.,"```
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

vector<pair<string, string>> float_sort(const vector<pair<string, string>>& items) {
    vector<pair<string, string>> sorted_items = items;
    sort(sorted_items.begin(), sorted_items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {
        return stof(a.second) > stof(b.second);
        });
    return sorted_items;
}```",370,"[assert((float_sort({ {""item1"", ""12.20""}, {""item2"", ""15.10""}, {""item3"", ""24.5""} }) == vector<pair<string, string>>{ {""item3"", ""24.5""}, { ""item2"", ""15.10"" }, { ""item1"", ""12.20"" }}));, assert((float_sort({ {""item1"", ""15""}, {""item2"", ""10""}, {""item3"", ""20""} }) == vector<pair<string, string>>{ {""item3"", ""20""}, { ""item1"", ""15"" }, { ""item2"", ""10"" }}));, assert((float_sort({ {""item1"", ""5""}, {""item2"", ""10""}, {""item3"", ""14""} }) == vector<pair<string, string>>{ {""item3"", ""14""}, { ""item2"", ""10"" }, { ""item1"", ""5"" }}));]"
370,This is  a function to find the smallest missing element in a sorted array.,"```
#include <vector>

int smallest_missing(const std::vector<int>& A, int left_element, int right_element) {
    if (left_element > right_element) {
        return left_element;
    }
    int mid = left_element + (right_element - left_element) / 2;
    if (A[mid] == mid) {
        return smallest_missing(A, mid + 1, right_element);
    } else {
        return smallest_missing(A, left_element, mid - 1);
    }
}
```",371,"[assert(smallest_missing({0, 1, 2, 3, 4, 5, 6}, 0, 6) == 7);, assert(smallest_missing({0, 1, 2, 6, 9, 11, 15}, 0, 6) == 3);, assert(smallest_missing({1, 2, 3, 4, 6, 9, 11, 15}, 0, 7) == 0);]"
371,This is  a function to sort a given list of elements in ascending order using heap queue algorithm.,"```
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> heap_assending(std::vector<int> heap) {
    std::sort(heap.begin(), heap.end());
    return heap;
}```",372,"[assert((heap_assending({ 18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1 }) == std::vector<int> {1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}));, assert((heap_assending({ 25, 35, 22, 85, 14, 65, 75, 25, 58 }) == std::vector<int> {14, 22, 25, 25, 35, 58, 65, 75, 85}));, assert((heap_assending({ 1, 3, 5, 7, 9, 2, 4, 6, 8, 0 }) == std::vector<int> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));]"
372,This is  a function to find the volume of a cuboid.,"```
int volume_cuboid(int length, int width, int height) {
    return length * width * height;
}```",373,"[assert(volume_cuboid(1, 2, 3) == 6);, assert(volume_cuboid(5, 7, 9) == 315);, assert(volume_cuboid(10, 15, 21) == 3150);]"
374,This is  a function to round the given number to the nearest multiple of a specific number.,"```
#include <utility>

int round_num(int n, int m) {
    int a = (n / m) * m;
    int b = a + m;
    return (n - a > b - n) ? b : a;
}```",375,"[assert(round_num(4722, 10) == 4720);, assert(round_num(1111, 5) == 1110);, assert(round_num(219, 2) == 218);]"
375,This is  a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"```
#include <cassert>
#include <vector>
#include <unordered_set>
#include <string>

std::vector<std::string> removeReplica(const std::vector<int>& testTup) {
    std::unordered_set<int> temp;
    std::vector<std::string> res(testTup.size());

    for (size_t i = 0; i < testTup.size(); i++) {
        if (temp.find(testTup[i]) == temp.end()) {
            temp.insert(testTup[i]);
            res[i] = std::to_string(testTup[i]);
        }
        else {
            res[i] = ""MSP"";
        }
    }

    return res;
}```",376,"[assert((removeReplica({ 1, 1, 4, 4, 4, 5, 5, 6, 7, 7 }) == std::vector<std::string>{""1"", ""MSP"", ""4"", ""MSP"", ""MSP"", ""5"", ""MSP"", ""6"", ""7"", ""MSP""}));, assert((removeReplica({ 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9 }) == std::vector<std::string>{""2"", ""3"", ""4"", ""MSP"", ""5"", ""6"", ""MSP"", ""7"", ""8"", ""9"", ""MSP""}));, assert((removeReplica({ 2, 2, 5, 4, 5, 7, 5, 6, 7, 7 }) == std::vector<std::string>{""2"", ""MSP"", ""5"", ""4"", ""MSP"", ""7"", ""MSP"", ""6"", ""MSP"", ""MSP""}));]"
376,This is  a C++ function to remove all occurrences of a character in a given string.,"```
#include <iostream>
#include <string>
#include <algorithm>

std::string remove_Char(std::string s, char c) {
    int counts = std::count(s.begin(), s.end(), c);
    s.erase(std::remove(s.begin(), s.end(), c), s.end());
    return s;
}
```",377,"[assert(remove_Char(""aba"", \a\) == ""b"");, assert(remove_Char(""toggle"", \g\) == ""tole"");, assert(remove_Char(""aabbc"", \b\) == ""aac"");]"
377,This is  a C++ function to shift last element to first position in the given list.,"```
#include <cassert>
#include <vector>

std::vector<int> move_first(std::vector<int> arr) {
    if (!arr.empty()) {
        int last = arr.back();
        arr.pop_back();
        arr.insert(arr.begin(), last);
    }
    return arr;
}```",378,"[assert(move_first({1, 2, 3, 4}) == std::vector<int>{4, 1, 2, 3});, assert(move_first({0, 1, 2, 3}) == std::vector<int>{3, 0, 1, 2});, assert(move_first({9, 8, 7, 1}) == std::vector<int>{1, 9, 8, 7});]"
378,This is  a function to find the surface area of a cuboid.,"```
#include <iostream>
using namespace std;

int surfacearea_cuboid(int length, int width, int height) {
    return 2 * (length * width + width * height + height * length);
}
```",379,"[assert(surfacearea_cuboid(1, 2, 3) == 22);, assert(surfacearea_cuboid(5, 7, 9) == 286);, assert(surfacearea_cuboid(10, 15, 21) == 1350);]"
379,This is  a function to generate a two-dimensional array.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<std::vector<int>> multi_list(int rows, int cols) {
    std::vector<std::vector<int>> result(rows, std::vector<int>(cols, 0));
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = i * j;
        }
    }
    return result;
}```",380,"[assert(multi_list(3, 4) == std::vector<std::vector<int>>{{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}});, assert(multi_list(5, 7) == std::vector<std::vector<int>>{{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}});, assert(multi_list(10, 15) == std::vector<std::vector<int>>{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}});]"
380,This is  a function to sort a list of lists by a given index of the inner list.,"```
#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>

std::vector<std::tuple<std::string, int, int>> index_on_inner_list(const std::vector<std::tuple<std::string, int, int>>& input, int index) {
    std::vector<std::tuple<std::string, int, int>> output = input;
    std::sort(output.begin(), output.end(), [index](const auto& a, const auto& b) {
        return std::get(index, a) < std::get(index, b);
    });
    return output;
}```",381,"[assert(index_on_inner_list({{""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98}}, 0) == std::vector<std::tuple<std::string, int, int>>{{""Beau Turnbull"", 94, 98}, {""Brady Kent"", 97, 96}, {""Greyson Fulton"", 98, 99}, {""Wyatt Knott"", 91, 94}});, assert(index_on_inner_list({{""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98}}, 1) == std::vector<std::tuple<std::string, int, int>>{{""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98}, {""Brady Kent"", 97, 96}, {""Greyson Fulton"", 98, 99}});, assert(index_on_inner_list({{""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98}}, 2) == std::vector<std::tuple<std::string, int, int>>{{""Wyatt Knott"", 91, 94}, {""Brady Kent"", 97, 96}, {""Beau Turnbull"", 94, 98}, {""Greyson Fulton"", 98, 99}});]"
381,This is  a function to find the number of rotations in a circularly sorted array.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>

int find_rotation_count(std::vector<int> A) {
    int left = 0, right = A.size() - 1;
    while (left <= right) {
        if (A[left] <= A[right]) {
            return left;
        }
        int mid = (left + right) / 2;
        int next = (mid + 1) % A.size();
        int prev = (mid - 1 + A.size()) % A.size();
        if (A[mid] <= A[next] && A[mid] <= A[prev]) {
            return mid;
        }
        else if (A[mid] <= A[right]) {
            right = mid - 1;
        }
        else if (A[mid] >= A[left]) {
            left = mid + 1;
        }
    }
    return -1;
}```",382,"[assert(find_rotation_count({ 8, 9, 10, 1, 2, 3, 4, 5, 6, 7 }) == 3);, assert(find_rotation_count({ 8, 9, 10, 2, 5, 6 }) == 3);, assert(find_rotation_count({ 2, 5, 6, 8, 9, 10 }) == 0);]"
382,This is  a C++ function to toggle all odd bits of a given number.,"```
#include <iostream>
using namespace std;

int even_bit_toggle_number(int n) {
    int res = 0, count = 0, temp = n;
    while (temp > 0) {
        if (count % 2 == 0) {
            res = res | (1 << count);
        }
        count++;
        temp >>= 1;
    }
    return n ^ res;
}```",383,"[assert(even_bit_toggle_number(10) == 15);, assert(even_bit_toggle_number(20) == 1);, assert(even_bit_toggle_number(30) == 11);]"
384,This is  a function to find the nth perrin number using recursion.,"```
#include <iostream>

int get_perrin(int n) {
    if (n == 0) {
        return 3;
    }
    if (n == 1) {
        return 0;
    }
    if (n == 2) {
        return 2;
    }
    return get_perrin(n - 2) + get_perrin(n - 3);
}
```",385,"[assert(get_perrin(9) == 12);, assert(get_perrin(4) == 2);, assert(get_perrin(6) == 5);]"
385,This is  a function to find out the minimum no of swaps required for bracket balancing in the given string.,"```
#include <string>

int swap_count(const std::string& s) {
    const char* chars = s.c_str();
    int count_left = 0;
    int count_right = 0;
    int swap = 0;
    int imbalance = 0;
    for (size_t i = 0; i < s.length(); ++i) {
        if (chars[i] == [) {
            count_left += 1;
            if (imbalance > 0) {
                swap += imbalance;
                imbalance -= 1;
            }
        }
        else if (chars[i] == ]) {
            count_right += 1;
            imbalance = (count_right - count_left);
        }
    }
    return swap; // Return second value as 0 since it has no equivalent in the original code
}```",386,"[assert(swap_count(""[]][]["") == 2);, assert(swap_count(""[[][]]"") == 0);, assert(swap_count(""[[][]]]["") == 1);]"
386,This is  a C++ function to check whether the hexadecimal number is even or odd.,"```
#include <string>

std::string even_or_odd(std::string N) {
    int l = N.length();
    if (N[l - 1] == 0 || N[l - 1] == 2 || 
        N[l - 1] == 4 || N[l - 1] == 6 || 
        N[l - 1] == 8 || N[l - 1] == A || 
        N[l - 1] == C || N[l - 1] == E) {
        return ""Even"";
    } else {
        return ""Odd"";
    }
}
```",387,"[assert(even_or_odd(""AB3454D"") == ""Odd"");, assert(even_or_odd(""ABC"") == ""Even"");, assert(even_or_odd(""AAD"") == ""Odd"");]"
388,This is  a function to find the nth lucas number.,"```
int find_lucas(int n) {
    if (n == 0) {
        return 2;
    }
    if (n == 1) {
        return 1;
    }
    return find_lucas(n - 1) + find_lucas(n - 2);
}
```",389,"[assert(find_lucas(9) == 76);, assert(find_lucas(4) == 7);, assert(find_lucas(3) == 4);]"
389,This is  a function to insert a given string at the beginning of all items in a list.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <string>

std::vector<std::string> add_string(const std::vector<int>& nums, const std::string& str) {
    std::vector<std::string> result;
    for (const auto& num : nums) {
        result.push_back(str + std::to_string(num));
    }
    return result;
}

std::vector<std::string> add_string(const std::vector<char>& chars, const std::string& str) {
    std::vector<std::string> result;
    for (const auto& ch : chars) {
        result.push_back(str + ch);
    }
    return result;
}```",390,"[assert((add_string(std::vector<int>{ 1, 2, 3, 4 }, ""temp"") == std::vector<std::string>{""temp1"", ""temp2"", ""temp3"", ""temp4""}));, assert((add_string(std::vector<char>{ \a\, \b\, \c\, \d\ }, ""C++"") == std::vector<std::string>{""C++a"", ""C++b"", ""C++c"", ""C++d""}));, assert((add_string(std::vector<int>{ 5, 6, 7, 8 }, ""string"") == std::vector<std::string>{""string5"", ""string6"", ""string7"", ""string8""}));]"
390,This is  a function to convert more than one list to nested dictionary.,"```
#include <iostream>
#include <vector>
#include <map>
#include <cassert>

std::vector<std::map<std::string, std::map<std::string, int>>> convert_list_dictionary(
    const std::vector<std::string>& keys,
    const std::vector<std::string>& values,
    const std::vector<int>& scores) {

    std::vector<std::map<std::string, std::map<std::string, int>>> result;

    for (size_t i = 0; i < keys.size(); i++) {
        std::map<std::string, int> inner_map;
        inner_map[values[i]] = scores[i];
        std::map<std::string, std::map<std::string, int>> outer_map;
        outer_map[keys[i]] = inner_map;
        result.push_back(outer_map);
    }

    return result;
}```",391,"[assert(convert_list_dictionary({ ""S001"", ""S002"", ""S003"", ""S004"" }, { ""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards"" }, { 85, 98, 89, 92 }) == (std::vector<std::map<std::string, std::map<std::string, int>>>{ { {""S001"", { {""Adina Park"", 85} }}}, { {""S002"", {{""Leyton Marsh"", 98}}} }, { {""S003"", {{""Duncan Boyle"", 89}}} }, { {""S004"", {{""Saim Richards"", 92}}} } }));, assert(convert_list_dictionary({ ""abc"",""def"",""ghi"",""jkl"" }, { ""C++"",""program"",""language"",""programs"" }, { 100,200,300,400 }) == (std::vector<std::map<std::string, std::map<std::string, int>>>{ { {""abc"", { {""C++"", 100} }}}, { {""def"", {{""program"", 200}}} }, { {""ghi"", {{""language"", 300}}} }, { {""jkl"", {{""programs"", 400}}} } }));, assert(convert_list_dictionary({ ""A1"",""A2"",""A3"",""A4"" }, { ""java"",""C"",""C++"",""DBMS"" }, { 10,20,30,40 }) == (std::vector<std::map<std::string, std::map<std::string, int>>>{ { {""A1"", { {""java"", 10} }}}, { {""A2"", {{""C"", 20}}} }, { {""A3"", {{""C++"", 30}}} }, { {""A4"", {{""DBMS"", 40}}} } }));]"
391,"This is  a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","```
#include <vector>
#include <algorithm>
#include <cassert>

int get_max_sum(int n) {
    std::vector<int> res;
    res.push_back(0);
    res.push_back(1);
    int i = 2;
    while (i < n + 1) {
        res.push_back(std::max(i, res[i / 2] + res[i / 3] + res[i / 4] + res[i / 5]));
        i = i + 1;
    }
    return res[n];
}```",392,"[assert(get_max_sum(60) == 106);, assert(get_max_sum(10) == 12);, assert(get_max_sum(2) == 2);]"
392,This is  a function to find the list with maximum length using lambda function.,"```
#include <cassert>
#include <vector>
#include <tuple>

std::tuple<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& lists) {
    int max_length = 0;
    std::vector<int> max_list;

    for (const auto& list : lists) {
        if (list.size() > max_length) {
            max_length = list.size();
            max_list = list;
        }
    }

    return { max_length, max_list };
}```",393,"[assert(max_length_list({ {0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17} }) == std::make_tuple(3, std::vector<int>{13, 15, 17}));, assert(max_length_list({ {1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1} }) == std::make_tuple(5, std::vector<int>{1, 2, 3, 4, 5}));, assert(max_length_list({ {3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12} }) == std::make_tuple(4, std::vector<int>{6, 7, 8, 9}));]"
393,This is  a function to check if given tuple is distinct or not.,"```
#include <cassert>
#include <set>
#include <tuple>

template <typename Tuple>
bool check_distinct(const Tuple& values) {
    std::set<int> distinct_values;
    // Use std::apply to unpack the tuple elements and insert them into the set
    std::apply([&distinct_values](const auto&... args) {
        (distinct_values.insert(args), ...);
    }, values);
    
    return distinct_values.size() == std::tuple_size<Tuple>::value; // Use tuple_size to get the number of elements
}```",394,"[assert(check_distinct(std::make_tuple(1, 4, 5, 6, 1, 4)) == false);, assert(check_distinct(std::make_tuple(1, 4, 5, 6, 7, 8)) == true); // Fixed to match 6 elements, assert(check_distinct(std::make_tuple(2, 3, 4, 5, 6, 7)) == true);]"
394,This is  a C++ function to find the first non-repeated character in a given string.,"```
#include <iostream>
#include <vector>
#include <map>
#include <cassert>
#include <algorithm>
#include <string>
#include <unordered_map>
#include <vector>

std::string first_non_repeating_character(const std::string& str1) {
    std::vector<char> char_order;
    std::unordered_map<char, int> ctr;

    for (char c : str1) {
        if (ctr.find(c) != ctr.end()) {
            ctr[c] += 1;
        }
        else {
            ctr[c] = 1;
            char_order.push_back(c);
        }
    }

    for (char c : char_order) {
        if (ctr[c] == 1) {
            return std::string(1, c); // Convert char to string and return
        }
    }

    return """"; // Return an empty string if no non-repeating character is found
}```",395,"[assert(first_non_repeating_character(""abcabc"") == """");, assert(first_non_repeating_character(""abc"") == ""a"");, assert(first_non_repeating_character(""ababc"") == ""c"");]"
396,This is  a function to find the median of three specific numbers.,"```
#include <cassert>

double median_numbers(double a, double b, double c) {
    return a > b ? (a < c ? a : (b > c ? b : c)) : (b < c ? b : (a > c ? a : c));
}```",397,"[assert(median_numbers(25, 55, 65) == 55.0);, assert(median_numbers(20, 10, 30) == 20.0);, assert(median_numbers(15, 45, 75) == 45.0);]"
397,This is  a function to compute the sum of digits of each number of a given list.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include<string>
#include <cmath> // For abs()

int sumOfDigits(const std::vector<int>& nums) {
    int sum = 0;
    for (int n : nums) {
        // Use absolute value in case of negative numbers
        for (char el : std::to_string(std::abs(n))) {
            if (isdigit(el)) {
                sum += el - 0; // Convert char digit to integer
            }
        }
    }
    return sum;
}```",398,"[assert(sumOfDigits({ 10, 2, 56 }) == 14);, assert(sumOfDigits({ 10, 20, -4, 5, -70 }) == 19);]"
398,This is  a function to perform the mathematical bitwise xor operation across the given tuples.,"```

#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> bitwiseXor(const std::vector<int>& arr1, const std::vector<int>& arr2) {
    std::vector<int> res(arr1.size());
    for (size_t i = 0; i < arr1.size(); i++) {
        res[i] = arr1[i] ^ arr2[i];
    }
    return res;
}```",399,"[assert((bitwiseXor({ 11, 5, 7, 10 }, { 6, 3, 4, 4 }) == std::vector<int>{13, 6, 3, 14}));, assert((bitwiseXor({ 12, 6, 8, 11 }, { 7, 4, 5, 6 }) == std::vector<int>{11, 2, 13, 13}));]"
399,This is  a function to extract the frequency of unique tuples in the given list order irrespective.,"```
#include <vector>
#include <cassert>
#include <algorithm>

int extract_freq(const std::vector<std::pair<int, int>>& pairs) {
    std::vector<int> frequencies;
    for (const auto& p : pairs) {
        frequencies.push_back(p.second);
    }
    std::sort(frequencies.begin(), frequencies.end());
    frequencies.erase(std::unique(frequencies.begin(), frequencies.end()), frequencies.end());
    return frequencies.size();
}```",400,"[assert(extract_freq({ {3, 4}, {1, 2}, {4, 3}, {5, 6} }) == 4); // Corrected to 4, assert(extract_freq({ {4, 15}, {2, 3}, {5, 4}, {6, 7} }) == 4); // Corrected to 4, assert(extract_freq({ {5, 16}, {2, 3}, {6, 5}, {6, 9} }) == 4); // Corrected to 4]"
400,This is  a function to perform index wise addition of tuple elements in the given two nested tuples.,"```
#include <iostream>
#include <cassert>
#include <vector>

std::vector<std::vector<int>> addNestedTuples(const std::vector<std::vector<int>>& ks, const std::vector<std::vector<int>>& ks2) {
    std::vector<std::vector<int>> res(ks.size());
    for (size_t i = 0; i < ks.size(); i++) {
        res[i].resize(ks[i].size());
        for (size_t j = 0; j < ks[i].size(); j++) {
            res[i][j] = ks[i][j] + ks2[i][j];
        }
    }
    return res;
}```",401,"[assert((addNestedTuples({ {1, 3}, {4, 5}, {2, 9}, {1, 10} }, { {6, 7}, {3, 9}, {1, 1}, {7, 3} }) == std::vector<std::vector<int>>{ {7, 10}, { 7, 14 }, { 3, 10 }, { 8, 13 }}));, assert((addNestedTuples({ {2, 4}, {5, 6}, {3, 10}, {2, 11} }, { {7, 8}, {4, 10}, {2, 2}, {8, 4} }) == std::vector<std::vector<int>>{ {9, 12}, { 9, 16 }, { 5, 12 }, { 10, 15 }}));, assert((addNestedTuples({ {3, 5}, {6, 7}, {4, 11}, {3, 12} }, { {8, 9}, {5, 11}, {3, 3}, {9, 5} }) == std::vector<std::vector<int>>{ {11, 14}, { 11, 18 }, { 7, 14 }, { 12, 17 }}));]"
401,This is  a function to compute the value of ncr%p.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>

int ncr_modp(int n, int r, int p) {
    std::vector<int> C(r + 1, 0);
    C[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = std::min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}```",402,"[assert(ncr_modp(10, 2, 13) == 6);, assert(ncr_modp(15, 12, 43) == 25);, assert(ncr_modp(17, 9, 18) == 10);]"
402,This is  a function to check if a url is valid or not using regex.,"```
#include <iostream>
#include <regex>
#include <string>

bool is_valid_URL(const std::string& str) {
    std::string regex = R""(((http|https)://)(www\.)?[a-zA-Z0-9@:%._\+~#?&//=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%._\+~#?&//=]*))"";
    std::regex p(regex);
    if (str.empty()) {
        return false;
    }
    return std::regex_search(str, p);
}```",403,"[assert(is_valid_URL(""https://www.google.com"") == true);, assert(is_valid_URL(""https:/www.gmail.com"") == false);, assert(is_valid_URL(""https:// www.redit.com"") == false);]"
403,This is  a C++ function to find the minimum of two numbers.,"```
int minimum(int a, int b) {
    if (a <= b) {
        return a;
    } else {
        return b;
    }
}
```",404,"[assert(minimum(1, 2) == 1);, assert(minimum(-5, -4) == -5);, assert(minimum(0, 0) == 0);]"
404,This is  a function to check whether an element exists within a tuple.,"```
#include <iostream>
#include <string>
#include <cassert>
#include <vector>

bool checkTuplex(const std::vector<std::string>& tuplex, const std::string& tuple1) {
    for (const auto& t : tuplex) {
        if (t == tuple1) {
            return true;
        }
    }
    return false;
}```",405,"[assert(checkTuplex({ ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"" }, ""r"") == true);, assert(checkTuplex({ ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"" }, ""5"") == false);, assert(checkTuplex({ ""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"" }, ""3"") == true);]"
405,This is  a C++ function to find the parity of a given number.,"```
#include <iostream>
#include <string>

std::string find_Parity(int x) { 
    int y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1) { 
        return ""Odd Parity""; 
    } 
    return ""Even Parity""; 
}
```",406,"[assert(find_Parity(12) == ""Even Parity"");, assert(find_Parity(7) == ""Odd Parity"");, assert(find_Parity(10) == ""Even Parity"");]"
406,This is  a function to create the next bigger number by rearranging the digits of a given number.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <string>

long long rearrangeBigger(long long n) {
    std::string numStr = std::to_string(n);
    std::vector<char> nums(numStr.begin(), numStr.end());

    for (int i = nums.size() - 2; i >= 0; i--) {
        if (nums[i] < nums[i + 1]) {
            // Find the smallest number greater than nums[i]
            char y = nums[i];
            char minGreater = nums[i + 1];
            int minGreaterIndex = i + 1;

            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[j] > y && nums[j] <= minGreater) {
                    minGreater = nums[j];
                    minGreaterIndex = j;
                }
            }

            // Swap the numbers
            std::swap(nums[i], nums[minGreaterIndex]);

            // Sort the remaining digits
            std::sort(nums.begin() + i + 1, nums.end());

            // Convert back to long long
            try {
                return std::stoll(std::string(nums.begin(), nums.end()));
            }
            catch (std::invalid_argument& e) {
                return -1;  // Return -1 if parsing fails (equivalent to null in Java)
            }
        }
    }
    return -1;  // Return -1 if no larger number can be formed
}```",407,"[assert(rearrangeBigger(12) == 21);, assert(rearrangeBigger(10) == -1);  // No larger number possible, assert(rearrangeBigger(102) == 120);]"
407,This is  a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"```
#include <iostream>
#include <vector>
#include <queue>
#include <cassert>

using namespace std;

vector<vector<int>> kSmallestPairs(const vector<int>& nums1, const vector<int>& nums2, int k) {
    priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
    vector<vector<int>> pairs;

    pq.push({ nums1[0] + nums2[0], 0, 0 });

    while (!pq.empty() && pairs.size() < k) {
        vector<int> current = pq.top();
        pq.pop();
        int i = current[1], j = current[2];

        pairs.push_back({ nums1[i], nums2[j] });

        if (j + 1 < nums2.size()) {
            pq.push({ nums1[i] + nums2[j + 1], i, j + 1 });
        }

        if (j == 0 && i + 1 < nums1.size()) {
            pq.push({ nums1[i + 1] + nums2[0], i + 1, 0 });
        }
    }

    return pairs;
}

bool vectorsEqual(const vector<vector<int>>& v1, const vector<vector<int>>& v2) {
    if (v1.size() != v2.size()) return false;
    for (size_t i = 0; i < v1.size(); ++i) {
        if (v1[i] != v2[i]) return false;
    }
    return true;
}```",408,"[assert(vectorsEqual(kSmallestPairs({ 1, 3, 7 }, { 2, 4, 6 }, 2), { {1, 2}, {1, 4} }));, assert(vectorsEqual(kSmallestPairs({ 1, 3, 7 }, { 2, 4, 6 }, 1), { {1, 2} }));, assert(vectorsEqual(kSmallestPairs({ 1, 3, 7 }, { 2, 4, 6 }, 7), { {1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {7, 2}, {3, 6} }));]"
408,This is  a function to find the minimum product from the pairs of tuples within a given list.,"```
#include <cassert>
#include <vector>
#include <utility>
#include <algorithm>

int min_product_tuple(const std::vector<std::pair<int, int>>& tuples) {
    int min_product = INT_MAX;
    for (const auto& t : tuples) {
        int product = t.first * t.second;
        if (product < min_product) {
            min_product = product;
        }
    }
    return min_product;
}```",409,"[assert(min_product_tuple({ {2, 7}, {2, 6}, {1, 8}, {4, 9} }) == 8);, assert(min_product_tuple({ {10, 20}, {15, 2}, {5, 10} }) == 30);, assert(min_product_tuple({ {11, 44}, {10, 15}, {20, 5}, {12, 9} }) == 100);]"
411,This is  a C++ function to remove odd numbers from a given list.,"```
#include <cassert>
#include <vector>

std::vector<int> remove_odd(const std::vector<int>& nums) {
    std::vector<int> result;
    for (int num : nums) {
        if (num % 2 == 0) {
            result.push_back(num);
        }
    }
    return result;
}```",412,"[assert(remove_odd({ 1, 2, 3 }) == std::vector<int>{2});, assert((remove_odd({ 2, 4, 6 }) == std::vector<int>{2, 4, 6}));, assert((remove_odd({ 10, 20, 3 }) == std::vector<int>{10, 20}));]"
412,This is  a function to extract the nth element from a given list of tuples.,"```
#include <iostream>
#include <vector>
#include <tuple>
#include <cassert>
#include <string>

std::vector<std::string> extract_nth_element(const std::vector<std::tuple<std::string, int, int>>& data, int n) {
    std::vector<std::string> result;
    for (const auto& entry : data) {
        if (n == 0) {
            result.push_back(std::get<0>(entry));
        }
        else if (n == 1) {
            result.push_back(std::to_string(std::get<1>(entry)));
        }
        else if (n == 2) {
            result.push_back(std::to_string(std::get<2>(entry)));
        }
    }
    return result;
}```",413,"[assert((extract_nth_element({ {""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98} }, 0) == std::vector<std::string>{""Greyson Fulton"", ""Brady Kent"", ""Wyatt Knott"", ""Beau Turnbull""}));, assert((extract_nth_element({ {""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98} }, 2) == std::vector<std::string>{""99"", ""96"", ""94"", ""98""}));, assert((extract_nth_element({ {""Greyson Fulton"", 98, 99}, {""Brady Kent"", 97, 96}, {""Wyatt Knott"", 91, 94}, {""Beau Turnbull"", 94, 98} }, 1) == std::vector<std::string>{""98"", ""97"", ""91"", ""94""}));]"
413,This is  a C++ function to check whether the value exists in a sequence or not.,"```
#include <cassert>
#include <vector>

bool overlapping(const std::vector<int>& a, const std::vector<int>& b) {
    for (int num : a) {
        if (std::find(b.begin(), b.end(), num) != b.end()) {
            return true;
        }
    }
    return false;
}```",414,"[assert(overlapping({1, 2, 3, 4, 5}, {6, 7, 8, 9}) == false);, assert(overlapping({1, 2, 3}, {4, 5, 6}) == false);, assert(overlapping({1, 4, 5}, {1, 4, 5}) == true);]"
414,This is  a C++ function to find a pair with highest product from a given array of integers.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>

using namespace std;

// Function to find the pair with the maximum product
vector<int> maxProduct(const vector<int>& arr) {
    int arrLen = arr.size();
    if (arrLen < 2) {
        return { 0 };  // If there are less than 2 elements, return {0}
    }

    int x = arr[0];
    int y = arr[1];

    for (int i = 0; i < arrLen; i++) {
        for (int j = i + 1; j < arrLen; j++) {
            if (arr[i] * arr[j] > x * y) {
                x = arr[i];
                y = arr[j];
            }
        }
    }
    return { x, y };```",415,"[assert((maxProduct({ 1, 2, 3, 4, 7, 0, 8, 4 }) == vector<int>{7, 8}));, assert((maxProduct({ 0, -1, -2, -4, 5, 0, -6 }) == vector<int>{-4, -6}));, assert((maxProduct({ 1, 2, 3 }) == vector<int>{2, 3}));]"
415,This is  a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>

using namespace std;

// Function to compute the break sum
long breakSum(int n) {
    vector<long> dp(n + 1, 0);
    dp[0] = 0;
    dp[1] = 1;

    for (int i = 2; i <= n; i++) {
        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4], (long)i);
    }

    return dp[n];
}```",416,"[assert(breakSum(12) == 13);, assert(breakSum(24) == 27);, assert(breakSum(23) == 23);]"
416,This is  a function to find common first element in given list of tuple.,"```
#include <cassert>
#include <vector>
#include <string>
#include <unordered_map>
#include <utility>
#include <tuple>

std::vector<std::vector<std::string>> group_tuples(const std::vector<std::pair<std::string, std::string>>& input) {
    std::unordered_map<std::string, std::vector<std::string>> group_map;

    for (const auto& p : input) {
        group_map[p.first].push_back(p.second);
    }

    std::vector<std::vector<std::string>> result;
    for (const auto& pair : group_map) {
        std::vector<std::string> grouped = { pair.first };
        grouped.insert(grouped.end(), pair.second.begin(), pair.second.end());
        result.push_back(grouped);
    }

    return result;
}```",417,"[assert((group_tuples({ {""x"", ""y""}, {""x"", ""z""}, {""w"", ""t""} }) == std::vector<std::vector<std::string>>{ {""x"", ""y"", ""z""}, { ""w"", ""t"" }}));, assert((group_tuples({ {""a"", ""b""}, {""a"", ""c""}, {""d"", ""e""} }) == std::vector<std::vector<std::string>>{ {""a"", ""b"", ""c""}, { ""d"", ""e"" }}));, assert((group_tuples({ {""f"", ""g""}, {""f"", ""g""}, {""h"", ""i""} }) == std::vector<std::vector<std::string>>{ {""f"", ""g"", ""g""}, { ""h"", ""i"" }}));]"
417,This is  a C++ function to find the sublist having maximum length.,"```
#include <vector>
#include <iostream>
#include <cassert>
#include <algorithm>

template <typename T>
std::vector<T> findMax(const std::vector<std::vector<T>>& arrays) {
    std::vector<T> maxArray = arrays[0];
    for (const auto& array : arrays) {
        if (array.size() > maxArray.size()) {
            maxArray = array;
        }
    }
    return maxArray;
}```",418,"[assert((findMax<std::string>({ {""A""}, {""A"", ""B""}, {""A"", ""B"", ""C""} }) == std::vector<std::string>{""A"", ""B"", ""C""}));, assert((findMax<int>({ {1}, {1, 2}, {1, 2, 3} }) == std::vector<int>{1, 2, 3}));, assert((findMax<int>({ {1, 1}, {1, 2, 3}, {1, 5, 6, 1} }) == std::vector<int>{1, 5, 6, 1}));]"
418,This is  a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"```
#include <vector>
#include <iostream>
#include <cassert>
#include <cmath>

int roundAndSum(const std::vector<double>& list1) {
    int length = list1.size();
    int roundAndSum = 0;
    for (double num : list1) {
        roundAndSum += std::round(num);
    }
    roundAndSum *= length;
    return roundAndSum;
}```",419,"[assert(roundAndSum({ 22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50 }) == 243);, assert(roundAndSum({ 5, 2, 9, 24.3, 29 }) == 345);, assert(roundAndSum({ 25.0, 56.7, 89.2 }) == 513);]"
419,This is  a C++ function to find the cube sum of first n even natural numbers.,"```
#include <iostream>
using namespace std;

int cube_Sum(int n) {
    int sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum += (2 * i) * (2 * i) * (2 * i);
    }
    return sum;
}
```",420,"[assert(cube_Sum(2) == 72);, assert(cube_Sum(3) == 288);, assert(cube_Sum(4) == 800);]"
420,This is  a function to concatenate each element of tuple by the delimiter.,"```
#include <vector>
#include <string>
#include <iostream>
#include <cassert>
#include <sstream>

std::string concatenateTuple(const std::vector<std::string>& test_tup) {
    std::string delim = ""-"";
    std::ostringstream res;

    for (size_t i = 0; i < test_tup.size(); ++i) {
        res << test_tup[i];
        if (i != test_tup.size() - 1) { // Append delimiter except for the last element
            res << delim;
        }
    }

    return res.str();
}```",421,"[assert(concatenateTuple({ ""ID"", ""is"", ""4"", ""UTS"" }) == ""ID-is-4-UTS"");, assert(concatenateTuple({ ""QWE"", ""is"", ""4"", ""RTY"" }) == ""QWE-is-4-RTY"");, assert(concatenateTuple({ ""ZEN"", ""is"", ""4"", ""OP"" }) == ""ZEN-is-4-OP"");]"
421,This is  a C++ function to find the average of cubes of first n natural numbers.,"```
#include <iostream>
#include <cmath>
#include <cassert>

double findAverageOfCube(int n) {
    double sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum += i * i * i;
    }
    return std::round((sum / n) * 1000000.0) / 1000000.0;
}```",422,"[assert(findAverageOfCube(2) == 4.5);, assert(findAverageOfCube(3) == 12);, assert(findAverageOfCube(1) == 1);]"
422,This is  a function to solve gold mine problem.,"```
#include <vector>
#include <algorithm>

int get_maxgold(const std::vector<std::vector<int>>& gold, int m, int n) {
    std::vector<std::vector<int>> goldTable(m, std::vector<int>(n, 0));

    for (int col = n - 1; col >= 0; col--) {
        for (int row = 0; row < m; row++) {
            int right = (col == n - 1) ? 0 : goldTable[row][col + 1];
            int right_up = (row == 0 || col == n - 1) ? 0 : goldTable[row - 1][col + 1];
            int right_down = (row == m - 1 || col == n - 1) ? 0 : goldTable[row + 1][col + 1];
            goldTable[row][col] = gold[row][col] + std::max({ right, right_up, right_down });
        }
    }

    int res = goldTable[0][0];
    for (int i = 1; i < m; i++) {
        res = std::max(res, goldTable[i][0]);
    }

    return res;
}```",423,"[assert(get_maxgold({ {1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2} }, 4, 4) == 16);, assert(get_maxgold({ {10, 20}, {30, 40} }, 2, 2) == 70);, assert(get_maxgold({ {4, 9}, {3, 7} }, 2, 2) == 13);]"
423,This is  a function to extract only the rear index element of each string in the given tuple.,"```
#include <vector>
#include <string>
#include <iostream>
#include <cassert>
#include <algorithm>

std::vector<char> extractRear(const std::vector<std::string>& testTuple) {
    std::vector<char> res;
    for (const std::string& str : testTuple) {
        res.push_back(str.back()); // Add the last character of each string
    }
    return res;
}```",424,"[assert((extractRear({ ""Mers"", ""for"", ""Vers"" }) == std::vector<char>{\s\, \r\, \s\}));, assert((extractRear({ ""Avenge"", ""for"", ""People"" }) == std::vector<char>{\e\, \r\, \e\}));, assert((extractRear({ ""Gotta"", ""get"", ""go"" }) == std::vector<char>{\a\, \t\, \o\}));]"
424,This is  a function to count the number of sublists containing a particular element.,"```
#include <vector>
#include <string>
#include <cassert>
#include <algorithm>



int count_element_in_list(const std::vector<std::vector<std::string>>& list, const std::string& element) {
    int count = 0;
    for (const auto& sublist : list) {
        count += std::count(sublist.begin(), sublist.end(), element);
    }
    return count;
}```",425,"[assert(count_element_in_list({ {""A"", ""B""}, {""A"", ""C""}, {""A"", ""D"", ""E""}, {""B"", ""C"", ""D""} }, ""A"") == 3);, assert(count_element_in_list({ {""A"", ""B""}, {""A"", ""C""}, {""A"", ""D"", ""E""}, {""B"", ""C"", ""D""} }, ""E"") == 1);]"
426,This is  a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"```
#include <regex>
#include <string>

std::string change_date_format(const std::string& dt) {
    std::regex pattern(R""((\d{4})-(\d{1,2})-(\d{1,2}))"");
    return std::regex_replace(dt, pattern, ""$3-$2-$1"");
}
```",427,"[assert(change_date_format(""2026-01-02"") == ""02-01-2026"");, assert(change_date_format(""2020-11-13"") == ""13-11-2020"");, assert(change_date_format(""2021-04-26"") == ""26-04-2021"");]"
427,This is  a function to sort the given array by using shell sort.,"```
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> shell_sort(std::vector<int> arr) {
    int n = arr.size();
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
            }
            arr[j] = temp;
        }
    }
    return arr;
}```",428,"[assert((shell_sort({ 12, 23, 4, 5, 3, 2, 12, 81, 56, 95 }) == std::vector<int>{2, 3, 4, 5, 12, 12, 23, 56, 81, 95}));, assert((shell_sort({ 24, 22, 39, 34, 87, 73, 68 }) == std::vector<int>{22, 24, 34, 39, 68, 73, 87}));, assert((shell_sort({ 32, 30, 16, 96, 82, 83, 74 }) == std::vector<int>{16, 30, 32, 74, 82, 83, 96}));]"
428,This is  a function to extract the elementwise and tuples from the given two tuples.,"```
#include <vector>
#include <cassert>
#include <iostream>
#include <algorithm>

// Function to perform bitwise AND on two arrays
std::vector<int> andTuples(const std::vector<int>& testTup1, const std::vector<int>& testTup2) {
    std::vector<int> res(testTup1.size());
    for (size_t i = 0; i < testTup1.size(); i++) {
        res[i] = testTup1[i] & testTup2[i];
    }
    return res;
}

// Helper function to compare two vectors
bool areEqual(const std::vector<int>& v1, const std::vector<int>& v2) {
    return v1 == v2;
}```",429,"[assert(areEqual(andTuples({ 10, 4, 6, 9 }, { 5, 2, 3, 3 }), { 0, 0, 2, 1 }));, assert(areEqual(andTuples({ 1, 2, 3, 4 }, { 5, 6, 7, 8 }), { 1, 2, 3, 0 }));, assert(areEqual(andTuples({ 8, 9, 11, 12 }, { 7, 13, 14, 17 }), { 0, 9, 10, 0 }));]"
429,This is  a function to find the directrix of a parabola.,"```
#include <cassert>
#include <iostream>

// Function to calculate the directrix of a parabola
int parabolaDirectrix(int a, int b, int c) {
    int directrix = c - ((b * b + 1) * 4 * a);
    return directrix;
}```",430,"[assert(parabola_directrix(5, 3, 2) == -198);, assert(parabola_directrix(9, 8, 4) == -2336);, assert(parabola_directrix(2, 4, 6) == -130);]"
430,This is  a function that takes two lists and returns true if they have at least one common element.,"```
#include <iostream>
#include <vector>
#include <set>
#include <cassert>

bool common_element(const std::vector<int>& a, const std::vector<int>& b) {
    std::set<int> set_a(a.begin(), a.end());
    for (const auto& elem : b) {
        if (set_a.count(elem)) {
            return true;
        }
    }
    return false;
}```",431,"[assert(common_element({1, 2, 3, 4, 5}, {5, 6, 7, 8, 9}) == true);, assert(common_element({1, 2, 3, 4, 5}, {6, 7, 8, 9}) == false);, ""assert(common_element({a, b, c}, {d, b, e}) == true);""]"
431,This is  a function to find the median of a trapezium.,"```
#include <cassert>
#include <cmath>
#include <iostream>

// Function to calculate the median of a trapezium
double medianTrapezium(double base1, double base2, double height) {
    double median = 0.5 * (base1 + base2);
    return median;
}```",432,"[assert(std::abs(medianTrapezium(15, 25, 35) - 20.0) < 1e-9);, assert(std::abs(medianTrapezium(10, 20, 30) - 15.0) < 1e-9);, assert(std::abs(medianTrapezium(6, 9, 4) - 7.5) < 1e-9);]"
432,This is  a function to check whether the entered number is greater than the elements of the given array.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <string>

std::string check_greater(const std::vector<int>& arr, int num) {
    for (int n : arr) {
        if (num <= n) {
            return ""No, entered number is less than those in the array"";
        }
    }
    return ""Yes, the entered number is greater than those in the array"";
}```",433,"[assert(check_greater({1, 2, 3, 4, 5}, 4) == ""No, entered number is less than those in the array"");, assert(check_greater({2, 3, 4, 5, 6}, 8) == ""Yes, the entered number is greater than those in the array"");, assert(check_greater({9, 7, 4, 8, 6, 1}, 11) == ""Yes, the entered number is greater than those in the array"");]"
433,This is  a function that matches a string that has an a followed by one or more bs.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_one(const std::string& text) {
    std::string patterns = ""ab+?"";
    std::regex regex(patterns);
    if (std::regex_search(text, regex)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",434,"[assert(text_match_one(""ac"") == ""Not matched!"");, assert(text_match_one(""dc"") == ""Not matched!"");, assert(text_match_one(""abba"") == ""Found a match!"");]"
434,This is  a C++ function to find the last digit of a given number.,"```
int last_Digit(int n) {
    return n % 10;
}
```",435,"[assert(last_Digit(123) == 3);, assert(last_Digit(25) == 5);, assert(last_Digit(30) == 0);]"
435,This is  a C++ function to print negative numbers in a list.,"```
#include <cassert>
#include <vector>

std::vector<int> neg_nos(const std::vector<int> nums) {
    std::vector<int> result;
    for (int num : nums) {
        if (num < 0) {
            result.push_back(num);
        }
    }
    return result;
}```",436,"[assert(neg_nos({-1, 4, 5, -6}) == std::vector<int>{-1, -6});, assert(neg_nos({-1, -2, 3, 4}) == std::vector<int>{-1, -2});, assert(neg_nos({-7, -6, 8, 9}) == std::vector<int>{-7, -6});]"
436,This is  a function to remove odd characters in a string.,"```
#include <cassert>
#include <string>

std::string remove_odd(const std::string& str) {
    std::string result;
    for (size_t i = 0; i < str.size(); ++i) {
        if (i % 2 != 0) {
            result += str[i];
        }
    }
    return result;
}```",437,"[assert(remove_odd(""python"") == ""yhn"");, assert(remove_odd(""program"") == ""rga"");, assert(remove_odd(""language"") == ""agae"");]"
437,This is  a function to count bidirectional tuple pairs.,"```
#include <iostream>
#include <vector>
#include <string>

int count_bidirectional(const std::vector<std::pair<int, int>>& test_list) {
    int res = 0;
    for (size_t idx = 0; idx < test_list.size(); ++idx) {
        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {
            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {
                res += 1;
            }
        }
    }
    return res;
}```",438,"[assert(count_bidirectional({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}) == 3);, assert(count_bidirectional({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}) == 2);, assert(count_bidirectional({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}) == 4);]"
438,This is  a function to convert a list of multiple integers into a single integer.,"```
#include <vector>
#include <string>
#include <numeric>

int multiple_to_single(const std::vector<int> L) {
    std::string str = std::accumulate(L.begin(), L.end(), std::string(), [](std::string a, int b) {
        return a + std::to_string(b);
    });
    int x = std::stoi(str);
    return x; // Assuming you want to return x twice as the original function returns a tuple
}
```",439,"[assert(multiple_to_single({11, 33, 50}) == 113350);, assert(multiple_to_single({-1, 2, 3, 4, 5, 6}) == -123456);, assert(multiple_to_single({10, 15, 20, 25}) == 10152025);]"
439,This is  a function to find all adverbs and their positions in a given sentence.,"```
#include <iostream>
#include <regex>
#include <string>

std::string findAdverbPosition(const std::string& text) {
    std::regex pattern(R""(\w+ly)"");
    std::smatch match;
    if (std::regex_search(text, match, pattern)) {
        return ""("" + std::to_string(match.position()) + "", "" + std::to_string(match.position() + match.length()) + "", "" + match.str(0) + "")"";
    }
    return """";
}```",440,"[assert(findAdverbPosition(""clearly!! we can see the sky"") == ""(0, 7, clearly)"");, assert(findAdverbPosition(""seriously!! there are many roses"") == ""(0, 9, seriously)"");, assert(findAdverbPosition(""unfortunately!! sita is going to home"") == ""(0, 13, unfortunately)"");]"
440,This is  a function to find the surface area of a cube.,"```
#include <cassert>

int surfacearea_cube(int side) {
    return 6 * side * side;
}```",441,"[assert(surfacearea_cube(5) == 150);, assert(surfacearea_cube(3) == 54);, assert(surfacearea_cube(10) == 600);]"
441,This is  a function to find the ration of positive numbers in an array of integers.,"```
#include <vector>
#include <cassert>
#include <cmath>

double positiveCount(const std::vector<int>& nums) {
    int n = nums.size();
    double n1 = 0;
    for (int x : nums) {
        if (x > 0) {
            n1 += 1;
        }
    }
    return std::round(n1 / n * 100.0) / 100.0;
}```",442,"[assert(positiveCount({ 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }) == 0.54);, assert(positiveCount({ 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }) == 0.69);, assert(positiveCount({ 2, 4, -6, -9, 11, -12, 14, -5, 17 }) == 0.56);]"
442,This is  a C++ function to find the largest negative number from the given list.,"```
#include <cassert>
#include <vector>
#include <algorithm>

int largest_neg(const std::vector<int>& nums) {
    int largest = INT_MIN;
    for (int num : nums) {
        if (num < 0 && num > largest) {
            largest = num;
        }
    }
    return largest;
}```",443,"[assert(largest_neg({1, 2, 3, -4, -6}) == -6);, assert(largest_neg({1, 2, 3, -8, -9}) == -9);, assert(largest_neg({1, 2, 3, 4, -1}) == -1);]"
443,This is  a function to trim each tuple by k in the given tuple list.,"```

#include <vector>
#include <cassert>

std::vector<std::vector<int>> trimTuple(const std::vector<std::vector<int>>& testList, int K) {
    std::vector<std::vector<int>> res;
    for (const auto& ele : testList) {
        std::vector<int> subList;
        for (int i = K; i < ele.size() - K; i++) {
            subList.push_back(ele[i]);
        }
        res.push_back(subList);
    }
    return res;
}```",444,"[assert((trimTuple({ {5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7} }, 2) == std::vector<std::vector<int>>{ {2}, { 9 }, { 2 }, { 2 }}));, assert((trimTuple({ {5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7} }, 1) == std::vector<std::vector<int>>{ {3, 2, 1}, { 4, 9, 2 }, { 1, 2, 3 }, { 8, 2, 1 }}));, assert((trimTuple({ {7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7} }, 1) == std::vector<std::vector<int>>{ {8, 4}, { 8, 12 }, { 1, 7 }, { 6, 9 }}));]"
444,This is  a function to perform index wise multiplication of tuple elements in the given two tuples.,"```
#include <cassert>
#include <vector>
#include <tuple>

std::vector<std::tuple<int, int>> index_multiplication(const std::vector<std::tuple<int, int>>& a, const std::vector<std::tuple<int, int>>& b) {
    std::vector<std::tuple<int, int>> result;
    for (size_t i = 0; i < a.size(); ++i) {
        int x1, y1, x2, y2;
        std::tie(x1, y1) = a[i];
        std::tie(x2, y2) = b[i];
        result.emplace_back(x1 * x2, y1 * y2);
    }
    return result;
}```",445,"[assert((index_multiplication({ {1, 3}, {4, 5}, {2, 9}, {1, 10} }, { {6, 7}, {3, 9}, {1, 1}, {7, 3} }) == std::vector<std::tuple<int, int>>{ {6, 21}, { 12, 45 }, { 2, 9 }, { 7, 30 }}));, assert((index_multiplication({ {2, 4}, {5, 6}, {3, 10}, {2, 11} }, { {7, 8}, {4, 10}, {2, 2}, {8, 4} }) == std::vector<std::tuple<int, int>>{ {14, 32}, { 20, 60 }, { 6, 20 }, { 16, 44 }}));, assert((index_multiplication({ {3, 5}, {6, 7}, {4, 11}, {3, 12} }, { {8, 9}, {5, 11}, {3, 3}, {9, 5} }) == std::vector<std::tuple<int, int>>{ {24, 45}, { 30, 77 }, { 12, 33 }, { 27, 60 }}));]"
445,This is  a C++ function to count the occurence of all elements of list in a tuple.,"```
#include <vector>
#include <unordered_set>
#include <cassert>

int countOccurrence(const std::vector<char>& tup, const std::vector<char>& lst) {
    int count = 0;
    std::unordered_set<char> set(lst.begin(), lst.end());
    for (char item : tup) {
        if (set.find(item) != set.end()) {
            count++;
        }
    }
    return count;
}```",446,"[assert(countOccurrence({ a, a, c, b, d }, { a, b }) == 3);, assert(countOccurrence({ 1, 2, 3, 1, 4, 6, 7, 1, 4 }, { 1, 4, 7 }) == 6);, assert(countOccurrence({ 1, 2, 3, 4, 5, 6 }, { 1, 2 }) == 2);]"
446,This is  a function to find cubes of individual elements in a list using lambda function.,"```
#include <vector>
#include <cassert>

std::vector<int> cube_nums(const std::vector<int> nums) {
    std::vector<int> cubes;
    for (int num : nums) {
        cubes.push_back(num * num * num);
    }
    return cubes;
}```",447,"[assert(cube_nums({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == std::vector<int>({1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}));, assert(cube_nums({10, 20, 30}) == std::vector<int>({1000, 8000, 27000}));, assert(cube_nums({12, 15}) == std::vector<int>({1728, 3375}));]"
447,This is  a function to calculate the sum of perrin numbers.,"```
#include <iostream>
using namespace std;

int cal_sum(int n) {
    int a = 3;
    int b = 0;
    int c = 2;
    if (n == 0) {
        return {3, 0};
    }
    if (n == 1) {
        return {3, 0};
    }
    if (n == 2) {
        return {5, 0};
    }
    int sum = 5;
    while (n > 2) {
        int d = a + b;
        sum = sum + d;
        a = b;
        b = c;
        c = d;
        n = n - 1;
    }
    return sum;
}
```",448,"[assert(cal_sum(9) == 49);, assert(cal_sum(10) == 66);, assert(cal_sum(11) == 88);]"
449,This is  a function to extract specified size of strings from a give list of string values.,"```
#include <vector>
#include <string>
#include <cassert>

std::vector<std::string> extractString(const std::vector<std::string>& str, int l) {
    std::vector<std::string> result;
    for (const std::string& e : str) {
        if (e.length() == l) {
            result.push_back(e);
        }
    }
    return result;
}```",450,"[assert(extractString({ ""Python"", ""list"", ""exercises"", ""practice"", ""solution"" }, 6) == std::vector<std::string>{""Python""});, assert(extractString({ ""Python"", ""list"", ""exercises"", ""practice"", ""solution"" }, 9) == std::vector<std::string>{""exercises""});]"
451,This is  a function that gives loss amount if the given amount has loss else return none.,"```
#include <cassert>

void loss_amount(int a, int b) {
    if (a < b) {
        return b - a;
    }
    return 0;
}```",452,"[assert(loss_amount(1500, 1200) == 0);, assert(loss_amount(100, 200) == 100);, assert(loss_amount(2000, 5000) == 3000);]"
452,This is  a C++ function to find the sum of even factors of a number.,"```
#include <cmath>
#include <utility>

int sumofFactors(int n) {
    if (n % 2 != 0) {
        return 0;
    }
    int res = 1;
    for (int i = 2; i <= static_cast<int>(sqrt(n)); ++i) {
        int count = 0;
        int curr_sum = 1;
        int curr_term = 1;
        while (n % i == 0) {
            count = count + 1;
            n = n / i;
            if (i == 2 && count == 1) {
                curr_sum = 0;
            }
            curr_term = curr_term * i;
            curr_sum = curr_sum + curr_term;
        }
        res = res * curr_sum;
    }
    if (n >= 2) {
        res = res * (1 + n);
    }
    return res;
}
```",453,"[assert(sumofFactors(18) == 26);, assert(sumofFactors(30) == 48);, assert(sumofFactors(6) == 8);]"
453,This is  a function that matches a word containing z.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_wordz(const std::string& text) {
    std::regex patterns(""\\w*z.\\w*"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",454,"[assert(text_match_wordz(""pythonz."") == ""Found a match!"");, assert(text_match_wordz(""xyz."") == ""Found a match!"");, assert(text_match_wordz(""  lang  ."") == ""Not matched!"");]"
454,This is  a function to check whether the given month number contains 31 days or not.,"```
bool check_monthnumb_number(int monthnum2) {
    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {
        return true;
    } else {
        return false;
    }
}
```",455,"[assert(check_monthnumb_number(5) == true);, assert(check_monthnumb_number(2) == false);, assert(check_monthnumb_number(6) == false);]"
455,This is  a function to reverse strings in a given list of string values.,"```
#include <cassert>
#include <vector>
#include <string>
#include <algorithm>

std::vector<std::string> reverse_string_list(const std::vector<std::string>& input) {
    std::vector<std::string> result;
    for (const auto& str : input) {
        std::string reversed_str = str;
        std::reverse(reversed_str.begin(), reversed_str.end());
        result.push_back(reversed_str);
    }
    return result;
}```",456,"[assert((reverse_string_list({ ""Red"", ""Green"", ""Blue"", ""White"", ""Black"" }) == std::vector<std::string>{""deR"", ""neerG"", ""eulB"", ""etihW"", ""kcalB""}));, assert((reverse_string_list({ ""john"",""amal"",""joel"",""george"" }) == std::vector<std::string>{""nhoj"", ""lama"", ""leoj"", ""egroeg""}));, assert((reverse_string_list({ ""jack"",""john"",""mary"" }) == std::vector<std::string>{""kcaj"", ""nhoj"", ""yram""}));]"
456,This is  a C++ function to find the sublist having minimum length.,"```
#include <vector>
#include <algorithm>
#include <string>
#include <cassert>

template <typename T>
std::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {
    std::vector<T> result;
    for (const auto& sublist : lst) {
        T minElement = *std::min_element(sublist.begin(), sublist.end());
        result.push_back(minElement);
    }
    return result;
}```",457,"[assert(Find_Min({{1}, {1, 2}, {1, 2, 3}}) == std::vector<int>{1, 1, 1});, assert(Find_Min({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}) == std::vector<int>{1, 1, 1});, assert(Find_Min({{""x""}, {""x"", ""y""}, {""x"", ""y"", ""z""}}) == std::vector<std::string>{""x"", ""x"", ""x""});]"
457,This is  a function to find the area of a rectangle.,"```
#include <iostream>
using namespace std;

int rectangle_area(int length, int width) {
    return length * width;
}```",458,"[assert(rectangle_area(10, 20) == 200);, assert(rectangle_area(10, 5) == 50);, assert(rectangle_area(4, 2) == 8);]"
458,This is  a function to remove uppercase substrings from a given string by using regex.,"```

#include <cassert>
#include <string>
#include <cctype>

std::string remove_uppercase(const std::string& input) {
    std::string result;
    for (char c : input) {
        if (std::islower(c)) {
            result += c;
        }
    }
    return result;
}```",459,"[assert(remove_uppercase(""cAstyoUrFavoRitETVshoWs"") == ""cstyoravoitshos"");, assert(remove_uppercase(""wAtchTheinTernEtrAdIo"") == ""wtchheinerntrdo"");, assert(remove_uppercase(""VoicESeaRchAndreComMendaTionS"") == ""oiceachndreomendaion"");]"
459,This is  a C++ function to get the first element of each sublist.,"```

#include <cassert>
#include <vector>

std::vector<int> Extract(const std::vector<std::vector<int>>& mat) {
    std::vector<int> result;
    for (size_t i = 0; i < mat.size(); ++i) {
        if (!mat[i].empty()) {
            result.push_back(mat[i][0]);
        }
    }
    return result;
}```",460,"[assert((Extract({ {1, 2}, {3, 4, 5}, {6, 7, 8, 9} }) == std::vector<int>{1, 3, 6}));, assert((Extract({ {1, 2, 3}, {4, 5} }) == std::vector<int>{1, 4}));, assert((Extract({ {9, 8, 1}, {1, 2} }) == std::vector<int>{9, 1}));]"
460,This is  a C++ function to count the upper case characters in a given string.,"```
#include <cassert>
#include <string>

int upper_ctr(const std::string& str) {
    int count = 0;
    for (char c : str) {
        if (isupper(c)) {
            count++;
        }
    }
    return count;
}```",461,"[assert(upper_ctr(""Python"") == 1);, assert(upper_ctr(""BigData"") == 1);, assert(upper_ctr(""program"") == 0);]"
461,This is  a function to find all possible combinations of the elements of a given list.,"```
#include <vector>
#include <string>
#include <cassert>

template <typename T>
std::vector<std::vector<T>> combinationsList(const std::vector<T>& array) {
    std::vector<std::vector<T>> result;
    result.push_back({}); // Add empty list first

    for (const T& element : array) {
        int size = result.size();
        for (int i = 0; i < size; ++i) {
            std::vector<T> newCombination = result[i];
            newCombination.push_back(element);
            result.push_back(newCombination);
        }
    }
    return result;
}```",462,"[assert((combinationsList(std::vector<std::string>{""orange"", ""red"", ""green"", ""blue""}) == std::vector<std::vector<std::string>>{ {}, { ""orange"" }, { ""red"" }, { ""orange"", ""red"" }, { ""green"" }, { ""orange"", ""green"" }, { ""red"", ""green"" }, { ""orange"", ""red"", ""green"" }, { ""blue"" }, { ""orange"", ""blue"" }, { ""red"", ""blue"" }, { ""orange"", ""red"", ""blue"" }, { ""green"", ""blue"" }, { ""orange"", ""green"", ""blue"" }, { ""red"", ""green"", ""blue"" }, { ""orange"", ""red"", ""green"", ""blue"" } }));, assert((combinationsList(std::vector<std::string>{""red"", ""green"", ""blue"", ""white"", ""black"", ""orange""}) == std::vector<std::vector<std::string>>{ {}, { ""red"" }, { ""green"" }, { ""red"", ""green"" }, { ""blue"" }, { ""red"", ""blue"" }, { ""green"", ""blue"" }, { ""red"", ""green"", ""blue"" }, { ""white"" }, { ""red"", ""white"" }, { ""green"", ""white"" }, { ""red"", ""green"", ""white"" }, { ""blue"", ""white"" }, { ""red"", ""blue"", ""white"" }, { ""green"", ""blue"", ""white"" }, { ""red"", ""green"", ""blue"", ""white"" }, { ""black"" }, { ""red"", ""black"" }, { ""green"", ""black"" }, { ""red"", ""green"", ""black"" }, { ""blue"", ""black"" }, { ""red"", ""blue"", ""black"" }, { ""green"", ""blue"", ""black"" }, { ""red"", ""green"", ""blue"", ""black"" }, { ""white"", ""black"" }, { ""red"", ""white"", ""black"" }, { ""green"", ""white"", ""black"" }, { ""red"", ""green"", ""white"", ""black"" }, { ""blue"", ""white"", ""black"" }, { ""red"", ""blue"", ""white"", ""black"" }, { ""green"", ""blue"", ""white"", ""black"" }, { ""red"", ""green"", ""blue"", ""white"", ""black"" }, { ""orange"" }, { ""red"", ""orange"" }, { ""green"", ""orange"" }, { ""red"", ""green"", ""orange"" }, { ""blue"", ""orange"" }, { ""red"", ""blue"", ""orange"" }, { ""green"", ""blue"", ""orange"" }, { ""red"", ""green"", ""blue"", ""orange"" }, { ""white"", ""orange"" }, { ""red"", ""white"", ""orange"" }, { ""green"", ""white"", ""orange"" }, { ""red"", ""green"", ""white"", ""orange"" }, { ""blue"", ""white"", ""orange"" }, { ""red"", ""blue"", ""white"", ""orange"" }, { ""green"", ""blue"", ""white"", ""orange"" }, { ""red"", ""green"", ""blue"", ""white"", ""orange"" }, { ""black"", ""orange"" }, { ""red"", ""black"", ""orange"" }, { ""green"", ""black"", ""orange"" }, { ""red"", ""green"", ""black"", ""orange"" }, { ""blue"", ""black"", ""orange"" }, { ""red"", ""blue"", ""black"", ""orange"" }, { ""green"", ""blue"", ""black"", ""orange"" }, { ""red"", ""green"", ""blue"", ""black"", ""orange"" }, { ""white"", ""black"", ""orange"" }, { ""red"", ""white"", ""black"", ""orange"" }, { ""green"", ""white"", ""black"", ""orange"" }, { ""red"", ""green"", ""white"", ""black"", ""orange"" }, { ""blue"", ""white"", ""black"", ""orange"" }, { ""red"", ""blue"", ""white"", ""black"", ""orange"" }, { ""green"", ""blue"", ""white"", ""black"", ""orange"" }, { ""red"", ""green"", ""blue"", ""white"", ""black"", ""orange"" } }));]"
462,This is  a function to find the maximum product subarray of the given array.,"```
#include <cassert>
#include <vector>
#include <algorithm>

int max_subarray_product(const std::vector<int>& nums) {
    if (nums.empty()) return 0;

    int max_product = nums[0];
    int min_product = nums[0];
    int result = nums[0];

    for (size_t i = 1; i < nums.size(); ++i) {
        if (nums[i] < 0) {
            std::swap(max_product, min_product);
        }
        max_product = std::max(nums[i], max_product * nums[i]);
        min_product = std::min(nums[i], min_product * nums[i]);
        result = std::max(result, max_product);
    }

    return result;
}
```",463,"[assert(max_subarray_product({1, -2, -3, 0, 7, -8, -2}) == 112);, assert(max_subarray_product({6, -3, -10, 0, 2}) == 180);, assert(max_subarray_product({-2, -40, 0, -2, -3}) == 80);]"
463,This is  a function to check if all values are same in a dictionary.,"```
#include <cassert>
#include <map>
#include <string>

bool check_value(const std::map<std::string, int>& values, int target) {
    for (const auto& pair : values) {
        if (pair.second == target) {
            return true;
        }
    }
    return false;
}```",464,"[assert(check_value({{""Cierra Vega"", 12}, {""Alden Cantrell"", 12}, {""Kierra Gentry"", 12}, {""Pierre Cox"", 12}}, 10) == false);, assert(check_value({{""Cierra Vega"", 12}, {""Alden Cantrell"", 12}, {""Kierra Gentry"", 12}, {""Pierre Cox"", 12}}, 12) == true);, assert(check_value({{""Cierra Vega"", 12}, {""Alden Cantrell"", 12}, {""Kierra Gentry"", 12}, {""Pierre Cox"", 12}}, 5) == false);]"
464,This is  a function to drop empty items from a given dictionary.,"```
#include <iostream>
#include <map>
#include <cassert>

template <typename K, typename V>
std::map<K, V> dropEmpty(const std::map<K, V>& dict1) {
    std::map<K, V> result;
    for (const auto& entry : dict1) {
        // Check for empty string instead of nullptr
        if (!entry.second.empty()) {
            result[entry.first] = entry.second;
        }
    }
    return result;
}```",465,"[assert((dropEmpty<std::string, std::string>({ {""c1"", ""Red""}, {""c2"", ""Green""}, {""c3"", """"} }) == std::map<std::string, std::string>{ {""c1"", ""Red""}, { ""c2"", ""Green"" }}));, assert((dropEmpty<std::string, std::string>({ {""c1"", ""Red""}, {""c2"", """"}, {""c3"", """"} }) == std::map<std::string, std::string>{ {""c1"", ""Red""}}));, assert((dropEmpty<std::string, std::string>({ {""c1"", """"}, {""c2"", ""Green""}, {""c3"", """"} }) == std::map<std::string, std::string>{ {""c2"", ""Green""}}));]"
466,This is  a C++ function to convert decimal number to octal number.,"```
#include <iostream>
using namespace std;

int decimal_to_Octal(int deciNum) {
    int octalNum = 0;
    int countval = 1;
    int dNo = deciNum;
    while (deciNum != 0) {
        int remainder = deciNum % 8;
        octalNum += remainder * countval;
        countval = countval * 10;
        deciNum /= 8;
    }
    return octalNum;
}
```",467,"[assert(decimal_to_Octal(10) == 12);, assert(decimal_to_Octal(2) == 2);, assert(decimal_to_Octal(33) == 41);]"
467,This is  a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"```
#include <iostream>
#include <vector>
#include <cassert>

int maxProduct(const std::vector<int>& arr, int n) {
    std::vector<int> mpis(n);

    for (int i = 0; i < n; i++) {
        mpis[i] = arr[i];
    }

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {
                mpis[i] = mpis[j] * arr[i];
            }
        }
    }

    int max = mpis[0];
    for (int i = 1; i < n; i++) {
        if (mpis[i] > max) {
            max = mpis[i];
        }
    }

    ```",468,"[assert(maxProduct({ 3, 100, 4, 5, 150, 6 }, 6) == 45000);, assert(maxProduct({ 4, 42, 55, 68, 80 }, 5) == 50265600);, assert(maxProduct({ 10, 22, 9, 33, 21, 50, 41, 60 }, 8) == 21780000);]"
468,This is  a function to find the maximum profit earned from a maximum of k stock transactions,"```
#include <vector>
#include <algorithm>

int max_profit(std::vector<int>& price, int k) {
    int n = price.size();
    std::vector<std::vector<int>> final_profit(k + 1, std::vector<int>(n, 0));

    for (int i = 1; i <= k; i++) {
        for (int j = 1; j < n; j++) {
            int max_so_far = 0;
            for (int x = 0; x < j; x++) {
                int curr_price = price[j] - price[x] + final_profit[i - 1][x];
                max_so_far = std::max(max_so_far, curr_price);
            }
            final_profit[i][j] = std::max(final_profit[i][j - 1], max_so_far);
        }
    }
    returnfinal_profit[k][n - 1]; // Second value is not used in original C++ code
}
```",469,"[assert(max_profit({1, 5, 2, 3, 7, 6, 4, 5}, 3) == 10);, assert(max_profit({2, 4, 7, 5, 4, 3, 5}, 2) == 7);, assert(max_profit({10, 6, 8, 4, 2}, 2) == 2);]"
469,This is  a function to find the pairwise addition of the elements of the given tuples.,"```

#include <iostream>
#include <vector>
#include <cassert>
#include <tuple>

std::tuple<std::vector<int>> add_pairwise(const std::vector<int>& test_vec) {
    std::vector<int> res;
    for (size_t i = 0; i < test_vec.size() - 1; ++i) {
        res.push_back(test_vec[i] + test_vec[i + 1]);
    }
    return std::make_tuple(res);
}```",470,"[assert(add_pairwise({ 1, 5, 7, 8, 10 }) == std::make_tuple(std::vector<int>{6, 12, 15, 18}));, assert(add_pairwise({ 2, 6, 8, 9, 11 }) == std::make_tuple(std::vector<int>{8, 14, 17, 20}));, assert(add_pairwise({ 3, 7, 9, 10, 12 }) == std::make_tuple(std::vector<int>{10, 16, 19, 22}));]"
470,This is  a C++ function to find remainder of array multiplication divided by n.,"```
#include <vector>

int find_remainder(const std::vector<int>& arr, int lens, int n) {
    int mul = 1;
    for (int i = 0; i < lens; ++i) {
        mul = (mul * (arr[i] % n)) % n;
    }
    return mul % n;; // Assuming the second return value is not needed, since its not used in the C++ code
}
```",471,"[assert(find_remainder({100, 10, 5, 25, 35, 14}, 6, 11) == 9);, assert(find_remainder({1, 1, 1}, 3, 1) == 0);, assert(find_remainder({1, 2, 1}, 3, 2) == 0);]"
471,This is  a C++ function to check whether the given list contains consecutive numbers or not.,"```
#include <cassert>
#include <vector>
#include <algorithm>
#include <set>  // Include this header for std::set

bool check_Consecutive(const std::vector<int>& nums) {
    if (nums.empty()) return false;
    int minVal = *std::min_element(nums.begin(), nums.end());
    int maxVal = *std::max_element(nums.begin(), nums.end());
    
    // Check if the range is equal to the size of the array and if all elements are unique
    return (maxVal - minVal + 1) == nums.size() && std::set<int>(nums.begin(), nums.end()).size() == nums.size();
}```",472,"[assert(check_Consecutive({1, 2, 3, 4, 5}) == true);, assert(check_Consecutive({1, 2, 3, 5, 6}) == false);, assert(check_Consecutive({1, 2, 1}) == false); ]"
472,This is  a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"```
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <cassert>

std::set<std::vector<std::string>> tupleIntersection(const std::vector<std::vector<std::string>>& testList1, const std::vector<std::vector<std::string>>& testList2) {
    std::set<std::vector<std::string>> res;

    for (auto& ele : testList1) {
        std::vector<std::string> sortedEle = ele;
        std::sort(sortedEle.begin(), sortedEle.end());
        res.insert(sortedEle);
    }

    std::set<std::vector<std::string>> secondSet;
    for (auto& ele : testList2) {
        std::vector<std::string> sortedEle = ele;
        std::sort(sortedEle.begin(), sortedEle.end());
        secondSet.insert(sortedEle);
    }

    std::set<std::vector<std::string>> resultSet;
    for (const auto& item : res) {
        if (secondSet.find(item) != secondSet.end()) {
            resultSet.insert(item);
        }
    }

    return resultSet;
}```",473,"[assert((tupleIntersection({ {""3"", ""4""}, {""5"", ""6""}, {""9"", ""10""}, {""4"", ""5""} }, { {""5"", ""4""}, {""3"", ""4""}, {""6"", ""5""}, {""9"", ""11""} }) == std::set<std::vector<std::string>>{ {""3"", ""4""}, { ""4"", ""5"" }, { ""5"", ""6"" }}));, assert((tupleIntersection({ {""4"", ""1""}, {""7"", ""4""}, {""11"", ""13""}, {""17"", ""14""} }, { {""1"", ""4""}, {""7"", ""4""}, {""16"", ""12""}, {""10"", ""13""} }) == std::set<std::vector<std::string>>{ {""1"", ""4""}, { ""7"", ""4"" }}));]"
473,This is  a function to replace characters in a string.,"```
#include <cassert>
#include <string>

std::string replace_char(const std::string& str, char old_char, char new_char) {
    std::string result = str;
    for (char& c : result) {
        if (c == old_char) {
            c = new_char;
        }
    }}```",474,"[assert(replace_char(""polygon"", \y\, \l\) == ""pollgon"");, assert(replace_char(""character"", \c\, \a\) == ""aharaater"");, assert(replace_char(""pythonl"", \l\, \a\) == ""pythona"");]"
474,This is  a function to sort counter by value.,"```

#include <cassert>
#include <map>
#include <vector>
#include <string>
#include <algorithm>

std::vector<std::pair<std::string, int>> sort_counter(const std::map<std::string, int>& counter) {
    std::vector<std::pair<std::string, int>> sorted(counter.begin(), counter.end());
    std::sort(sorted.begin(), sorted.end(), [](const auto& a, const auto& b) {
        return a.second > b.second;
        });
    return sorted;
}```",475,"[assert((sort_counter({ {""Math"", 81}, {""Physics"", 83}, {""Chemistry"", 87} }) == std::vector<std::pair<std::string, int>>{ {""Chemistry"", 87}, { ""Physics"", 83 }, { ""Math"", 81 }}));, assert((sort_counter({ {""Math"", 400}, {""Physics"", 300}, {""Chemistry"", 250} }) == std::vector<std::pair<std::string, int>>{ {""Math"", 400}, { ""Physics"", 300 }, { ""Chemistry"", 250 }}));, assert((sort_counter({ {""Math"", 900}, {""Physics"", 1000}, {""Chemistry"", 1250} }) == std::vector<std::pair<std::string, int>>{ {""Chemistry"", 1250}, { ""Physics"", 1000 }, { ""Math"", 900 }}));]"
475,This is  a C++ function to find the sum of the largest and smallest value in a given array.,"```
#include <cassert>
#include <vector>

int big_sum(const std::vector<int>& nums) {
    int sum = 0;
    for (int num : nums) {
        sum += num;
    }
    return sum;
}```",476,"[assert(big_sum({1, 2, 3}) == 4);, assert(big_sum({-1, 2, 3, 4}) == 3);, assert(big_sum({2, 3, 6}) == 8);]"
476,This is  a C++ function to convert the given string to lower case.,"```
#include <iostream>
#include <string>
#include <cassert>
#include <algorithm>

std::string isLower(const std::string& str) {
    std::string result = str;
    std::transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}```",477,"[assert(isLower(""InValid"") == ""invalid"");, assert(isLower(""TruE"") == ""true"");, assert(isLower(""SenTenCE"") == ""sentence"");]"
477,This is  a function to remove lowercase substrings from a given string.,"```
#include <cassert>
#include <string>
#include <algorithm>

std::string remove_lowercase(const std::string &input) {
    std::string result;
    std::copy_if(input.begin(), input.end(), std::back_inserter(result), [](char c) {
        return !std::islower(c);
    });
    return result;
}```",478,"[assert(remove_lowercase(""PYTHon"") == ""PYTH"");, assert(remove_lowercase(""FInD"") == ""FID"");, assert(remove_lowercase(""STRinG"") == ""STRG"");]"
479,This is  a C++ function to find the maximum occurring character in a given string.,"```
#include <iostream>
#include <string>
using namespace std;

char get_max_occuring_char(const string &str1) {
    const int ASCII_SIZE = 256;
    int ctr[ASCII_SIZE] = {0};
    int max = -1;
    char ch = \0;

    for (char i : str1) {
        ctr[(int)i]++;
    }
    for (char i : str1) {
        if (max < ctr[(int)i]) {
            max = ctr[(int)i];
            ch = i;
        }
    }
    return ch;
}
```",480,"[assert(get_max_occuring_char(""data"") == ""a"");, assert(get_max_occuring_char(""create"") == ""e"");, assert(get_max_occuring_char(""brilliant girl"") == ""i"");]"
480,This is  a function to determine if there is a subset of the given set with sum equal to the given sum.,"```
#include <cassert>
#include <vector>
#include <iostream>

bool is_subset_sum(const std::vector<int>& nums, int n, int sum) {
    // Create a 2D table to store the results of subproblems
    std::vector<std::vector<bool>> dp(n + 1, std::vector<bool>(sum + 1, false));

    // Sum 0 is always achievable (by taking no elements)
    for (int i = 0; i <= n; ++i) {
        dp[i][0] = true;
    }

    // Fill the dp table
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= sum; ++j) {
            // If the current number is greater than the sum, skip it
            if (nums[i - 1] > j) {
                dp[i][j] = dp[i - 1][j];
            }
            else {
                // Otherwise, check if sum is possible by either including or excluding the current number
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
            }
        }
    }

    return dp[n][sum];
}```",481,"[assert(is_subset_sum({ 3, 34, 4, 12, 5, 2 }, 6, 9) == true);, assert(is_subset_sum({ 3, 34, 4, 12, 5, 2 }, 6, 30) == false);, assert(is_subset_sum({ 3, 34, 4, 12, 5, 2 }, 6, 15) == true);]"
481,This is  a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string match(const std::string& text) {
    std::regex pattern(""[A-Z]+[a-z]+$"");
    if (std::regex_search(text, pattern)) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}
```",482,"[assert(match(""Geeks"") == ""Yes"");, assert(match(""geeksforGeeks"") == ""Yes"");, assert(match(""geeks"") == ""No"");]"
482,This is  a C++ function to find the first natural number whose factorial is divisible by x.,"```

#include <iostream>

int first_Factorial_Divisible_Number(int x) {
    int i = 1;
    int fact = 1;
    for (i = 1; i < x; ++i) {
        fact = fact * i;
        if (fact % x == 0) {
            break;
        }
    }
    return i;
}```",483,"[assert(first_Factorial_Divisible_Number(10) == 5);, assert(first_Factorial_Divisible_Number(15) == 5);]"
483,This is  a function to remove the matching tuples from the given two tuples.,"```

#include <cassert>
#include <vector>
#include <tuple>
#include <algorithm>

std::vector<std::tuple<std::string, std::string>> remove_matching_tuple(
    const std::vector<std::tuple<std::string, std::string>>& original,
    const std::vector<std::tuple<std::string, std::string>>& to_remove) {
    std::vector<std::tuple<std::string, std::string>> result;
    for (const auto& item : original) {
        if (std::find(to_remove.begin(), to_remove.end(), item) == to_remove.end()) {
            result.push_back(item);
        }
    }
    return result;
}```",484,"[assert((remove_matching_tuple({ {""Hello"", ""dude""}, {""How"", ""are""}, {""you"", ""?""} }, { {""Hello"", ""dude""}, {""How"", ""are""} }) == std::vector<std::tuple<std::string, std::string>>{ {""you"", ""?""}}));, assert((remove_matching_tuple({ {""Part"", ""of""}, {""the"", ""journey""}, {""is "", ""end""} }, { {""Journey"", ""the""}, {""is"", ""end""} }) == std::vector<std::tuple<std::string, std::string>>{ {""Part"", ""of""}, { ""the"", ""journey"" }, { ""is "", ""end"" }}));, assert((remove_matching_tuple({ {""Its"", ""been""}, {""a"", ""long""}, {""day"", ""without""} }, { {""a"", ""long""}, {""my"", ""friend""} }) == std::vector<std::tuple<std::string, std::string>>{ {""Its"", ""been""}, { ""day"", ""without"" }}));]"
484,This is  a function to find the largest palindromic number in the given array.,"```
#include <vector>
#include <algorithm>

bool is_palindrome(int n) {
    int divisor = 1;
    while (n / divisor >= 10) {
        divisor *= 10;
    }
    while (n != 0) {
        int leading = n / divisor;
        int trailing = n % 10;
        if (leading != trailing) {
            return false;
        }
        n = (n % divisor) / 10;
        divisor = divisor / 100;
    }
    return true;
}

int largest_palindrome(std::vector<int>& A, int n) {
    std::sort(A.begin(), A.end());
    for (int i = n - 1; i >= 0; i--) {
        if (is_palindrome(A[i])) {
            return A[i];
        }
    }
    return -1;
}
```",485,"[assert(largest_palindrome({1, 232, 54545, 999991}, 4) == 54545);, assert(largest_palindrome({1, 2, 3, 4, 5, 50}, 6) == 5);, assert(largest_palindrome({1, 3, 7, 9, 45}, 5) == 9);]"
486,This is  a function to sort a list of tuples in increasing order by the last element in each tuple.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm>

using namespace std;

vector<vector<int>> sortTuple(vector<vector<int>> tup) {
    int lst = tup.size();
    for (int i = 0; i < lst; i++) {
        for (int j = 0; j < lst - i - 1; j++) {
            if (tup[j][1] > tup[j + 1][1]) {
                swap(tup[j], tup[j + 1]);
            }
        }
    }
    return tup;
}```",487,"[assert((sortTuple(vector<vector<int>>{ {1, 3}, { 3, 2 }, { 2, 1 }}) == vector<vector<int>>{ {2, 1}, { 3, 2 }, { 1, 3 }}));, assert((sortTuple(vector<vector<int>>{ {2, 4}, { 3, 3 }, { 1, 1 }}) == vector<vector<int>>{ {1, 1}, { 3, 3 }, { 2, 4 }}));, assert((sortTuple(vector<vector<int>>{ {3, 9}, { 6, 7 }, { 4, 3 }}) == vector<vector<int>>{ {4, 3}, { 6, 7 }, { 3, 9 }}));]"
487,This is  a function to find the area of a pentagon.,"```
#include <iostream>
#include <cmath>
#include <cassert>

using namespace std;

double areaPentagon(double a) {
    return (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;
}```",488,"[assert(fabs(areaPentagon(5) - 43.01193501472417) < 1e-9);, assert(fabs(areaPentagon(10) - 172.0477400588967) < 1e-9);, assert(fabs(areaPentagon(15) - 387.10741513251753) < 1e-9);]"
488,This is  a C++ function to find the frequency of the largest value in a given array.,"```
#include <iostream>
#include <cassert>
#include <vector>
using namespace std;

int frequencyOfLargest(int n, const vector<int>& arr) {
    int mn = arr[0];
    int freq = 1;
    for (int i = 1; i < n; i++) {
        if (arr[i] > mn) {
            mn = arr[i];
            freq = 1;
        }
        else if (arr[i] == mn) {
            freq++;
        }
    }
    return freq;
}```",489,"[assert(frequencyOfLargest(5, { 1, 2, 3, 4, 4 }) == 2);, assert(frequencyOfLargest(3, { 5, 6, 5 }) == 1);, assert(frequencyOfLargest(4, { 2, 7, 7, 7 }) == 3);]"
490,This is  a function to find the sum of geometric progression series.,"```
#include <iostream>
#include <cmath>
#include <cassert>

using namespace std;

double sumGP(double a, int n, double r) {
    double total = (a * (1 - pow(r, n))) / (1 - r);
    return total;
}```",491,"[assert(abs(sumGP(1, 5, 2) - 31) < 1e-6);, assert(abs(sumGP(1, 5, 4) - 341) < 1e-6);, assert(abs(sumGP(2, 6, 3) - 728) < 1e-6);]"
491,This is  a function to search an element in the given array by using binary search.,"```
#include <iostream>
#include <cassert>

bool binarySearch(int itemList[], int size, int item) {
    int first = 0;
    int last = size - 1;
    bool found = false;

    while (first <= last && !found) {
        int mid = (first + last) / 2;
        if (itemList[mid] == item) {
            found = true;
        }
        else {
            if (item < itemList[mid]) {
                last = mid - 1;
            }
            else {
                first = mid + 1;
            }
        }
    }
    return found;
}```",492,"[assert(!binarySearch(new int[] {1, 2, 3, 5, 8}, 5, 6));, assert(binarySearch(new int[] {7, 8, 9, 10, 13}, 5, 10));, assert(!binarySearch(new int[] {11, 13, 14, 19, 22, 36}, 6, 23));]"
492,"This is  a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","```
#include <iostream>
#include <cmath>
#include <cassert>

using namespace std;

double hexagonGrid[100][7][2];

void calculateHexagonGrid(int startX, int startY, int endX, int endY, int radius) {
    double sideLength = (2 * radius) * tan(M_PI / 6);
    double halfHeight = sideLength * 0.5;
    double width = sideLength * cos(M_PI / 6) * 2;
    double height = 2 * sideLength;

    double startXPos = startX - width;
    double startYPos = startY - height;
    double endXPos = endX + width;
    double endYPos = endY + height;

    int hexagonCount = 0;

    double currentY = startYPos;
    int row = 1;

    while (currentY < endYPos) {
        double currentX = (row % 2 == 0) ? startXPos + (width / 2) : startXPos;

        while (currentX < endXPos) {
            hexagonGrid[hexagonCount][0][0] = currentX;
            hexagonGrid[hexagonCount][0][1] = currentY + halfHeight;
            hexagonGrid[hexagonCount][1][0] = currentX;
            hexagonGrid[hexagonCount][1][1] = currentY + (3 * halfHeight);
            hexagonGrid[hexagonCount][2][0] = currentX + width / 2;
            hexagonGrid[hexagonCount][2][1] = currentY + height;
            hexagonGrid[hexagonCount][3][0] = currentX + width;
            hexagonGrid[hexagonCount][3][1] = currentY + (3 * halfHeight);
            hexagonGrid[hexagonCount][4][0] = currentX + width;
            hexagonGrid[hexagonCount][4][1] = currentY + halfHeight;
            hexagonGrid[hexagonCount][5][0] = currentX + width / 2;
            hexagonGrid[hexagonCount][5][1] = currentY;
            hexagonGrid[hexagonCount][6][0] = currentX;
            hexagonGrid[hexagonCount][6][1] = currentY + halfHeight;

            hexagonCount++;
            currentX += width;
        }
        currentY += 3 * halfHeight;
        row++;
    }
}```",493,"[assert(hexagonGrid[0][0][0] == -5.0 && hexagonGrid[0][0][1] == -4.196152422706632);, assert(hexagonGrid[0][1][0] == -5.0 && hexagonGrid[0][1][1] == -0.7320508075688767);, assert(hexagonGrid[0][2][0] == -2.0 && hexagonGrid[0][2][1] == 1.0);, assert(hexagonGrid[0][3][0] == 1.0 && hexagonGrid[0][3][1] == -0.7320508075688767);, assert(hexagonGrid[0][4][0] == 1.0 && hexagonGrid[0][4][1] == -4.196152422706632);, assert(hexagonGrid[0][5][0] == -2.0 && hexagonGrid[0][5][1] == -5.928203230275509);, assert(hexagonGrid[0][6][0] == -5.0 && hexagonGrid[0][6][1] == -4.196152422706632);]"
493,This is  a function to convert the given binary tuple to integer.,"```
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

std::pair<std::string, int> binary_to_integer(const std::vector<int>& test_tup) {
    std::string binary_str;
    for (int ele : test_tup) {
        binary_str += std::to_string(ele);
    }
    int res = std::stoi(binary_str, nullptr, 2);
    return std::make_pair(std::to_string(res), res);
}
```",494,"[assert(binary_to_integer({ 1, 1, 0, 1, 0, 0, 1 }).first == ""105"");, assert(binary_to_integer({ 0, 1, 1, 0, 0, 1, 0, 1 }).first == ""101"");, assert(binary_to_integer({ 1, 1, 0, 1, 0, 1 }).first == ""53"");]"
494,This is  a function to remove lowercase substrings from a given string by using regex.,"```
#include <string>
#include <regex>

std::string remove_lowercase(const std::string& str1) {
    std::regex lower_case_regex(""[a-z]"");
    std::string result = std::regex_replace(str1, lower_case_regex, """");
    return result;
}
```",495,"[assert(remove_lowercase(""KDeoALOklOOHserfLoAJSIskdsf"") == ""KDALOOOHLAJSI"");, assert(remove_lowercase(""ProducTnamEstreAmIngMediAplAYer"") == ""PTEAIMAAY"");, assert(remove_lowercase(""maNufacTuredbYSheZenTechNolOGIes"") == ""NTYSZTNOGI"");]"
495,This is  a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"```

#include <vector>
#include <queue>
#include <algorithm>

std::vector<int> heap_queue_smallest(std::vector<int> nums, int n) {
    std::vector<int> smallest_nums;
    std::priority_queue<int, std::vector<int>, std::greater<int>> min_heap(nums.begin(), nums.end());
    for (int i = 0; i < n && !min_heap.empty(); ++i) {
        smallest_nums.push_back(min_heap.top());
        min_heap.pop();
    }
    return smallest_nums;
}```",496,"[assert((heap_queue_smallest({ 25, 35, 22, 85, 14, 65, 75, 25, 58 }, 3) == std::vector<int>{14, 22, 25}));, assert((heap_queue_smallest({ 25, 35, 22, 85, 14, 65, 75, 25, 58 }, 2) == std::vector<int>{14, 22}));, assert((heap_queue_smallest({ 25, 35, 22, 85, 14, 65, 75, 22, 58 }, 5) == std::vector<int>{14, 22, 22, 25, 35}));]"
496,This is  a function to find the surface area of a cone.,"```
#include <cassert>
#include <cmath>

double surfacearea_cone(double radius, double height) {
    return M_PI * radius * (radius + sqrt(height * height + radius * radius));
}```",497,"[assert(surfacearea_cone(5, 12) == 282.7433388230814);, assert(surfacearea_cone(10, 15) == 880.5179353159282);, assert(surfacearea_cone(19, 17) == 2655.923961165254);]"
497,This is  a C++ function to find gcd of two positive integers.,"```
#include <iostream>

std::pair<int, int> gcd(int x, int y) {
    int gcd = 1;
    if (x % y == 0) {
        return {y, 0};
    }
    for (int k = y / 2; k > 0; --k) {
        if (x % k == 0 && y % k == 0) {
            gcd = k;
            break;  
        }
    }
    return {gcd, 0};
}
```",498,"[assert(gcd(12, 17).first == 1);, assert(gcd(4, 6).first == 2);, assert(gcd(2, 9).first == 1);]"
498,This is  a function to find the diameter of a circle.,"```
double diameter_circle(double r) {
    double diameter = 2 * r;
    return diameter;
}
```",499,"[assert(diameter_circle(10) == 20);, assert(diameter_circle(40) == 80);, assert(diameter_circle(15) == 30);]"
499,This is  a function to concatenate all elements of the given list into a string.,"```
#include <iostream>
#include <vector>
#include <string>

std::string concatenate_elements(const std::vector<std::string>& list) {
    std::string ans;
    for (size_t i = 0; i < list.size(); ++i) {
        if (i > 0) {
            ans += "" "";  // Add space only between words
        }
        ans += list[i];
    }
    return ans; // Close the function properly
}```",500,"[assert(concatenate_elements({ ""hello"", ""there"", ""have"", ""a"", ""rocky"", ""day"" }) == ""hello there have a rocky day"");, assert(concatenate_elements({ ""Hi"", ""there"", ""How"", ""are"", ""you"" }) == ""Hi there How are you"");, assert(concatenate_elements({ ""Part"", ""of"", ""the"", ""journey"", ""is"", ""end"" }) == ""Part of the journey is end"");]"
500,This is  a C++ function to find common divisor between two numbers in a given pair.,"```
#include <iostream>
#include <cmath>

int ngcd(int x, int y) {
    int i = 1;
    int gcd = 1;
    while (i <= x && i <= y) {
        if (x % i == 0 && y % i == 0) {
            gcd = i;
        }
        i++;
    }
    return gcd;
}

std::pair<int, int> num_comm_div(int x, int y) {
    int n = ngcd(x, y);
    int result = 0;
    int z = static_cast<int>(std::sqrt(n));
    int i = 1;
    while (i <= z) {
        if (n % i == 0) {
            result += 2;
            if (i == n / i) {
                result -= 1;
            }
        }
        i++;
    }
    return {result, 0}; // Assuming the second return value is not needed
}
```",501,"[assert(num_comm_div(2, 4).first == 2);, assert(num_comm_div(2, 8).first == 2);, assert(num_comm_div(12, 24).first == 6);]"
501,This is  a C++ function to find remainder of two numbers.,"```
int find(int n, int m) {
    return n % m;
}```",502,"[assert(find(3, 3) == 0);, assert(find(10, 3) == 1);, assert(find(16, 5) == 1);]"
502,This is  a function to add consecutive numbers of a given list.,"```
#include <vector>

std::pair<std::vector<int>, std::vector<int>> add_consecutive_nums(const std::vector<int>& nums) {
    std::vector<int> result;
    for (size_t i = 0; i < nums.size() - 1; ++i) {
        result.push_back(nums[i] + nums[i + 1]);
    }
    return {result};
}
```",503,"[assert((add_consecutive_nums({ 1, 1, 3, 4, 4, 5, 6, 7 }) == std::vector<int> {2, 4, 7, 8, 9, 11, 13}));, assert((add_consecutive_nums({ 4, 5, 8, 9, 6, 10 }) == std::vector<int> {9, 13, 17, 15, 16}));, assert((add_consecutive_nums({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == std::vector<int> {3, 5, 7, 9, 11, 13, 15, 17, 19}));]"
503,This is  a C++ function to find the cube sum of first n natural numbers.,"```
#include <iostream>
using namespace std;

pair<int, int> sum_Of_Series(int n) {
    int sum = 0;
    for (int i = 1; i <= n; ++i) {
        sum += i * i * i;
    }
    return make_pair(sum, 0);
}
```",504,"[assert(sum_Of_Series(5).first == 225);, assert(sum_Of_Series(2).first == 9);, assert(sum_Of_Series(3).first == 36);]"
504,This is  a function to move all zeroes to the end of the given array.,"```
#include <vector>

std::vector<int> re_order(std::vector<int>& A) {
    int k = 0;
    for (int i : A) {
        if (i) {
            A[k] = i;
            k = k + 1;
        }
    }
    for (int i = k; i < A.size(); i++) {
        A[i] = 0;
    }
    return A;
}
```",505,"[assert(re_order({6, 0, 8, 2, 3, 0, 4, 0, 1}) == std::vector<int>{6, 8, 2, 3, 4, 1, 0, 0, 0});, assert(re_order({4, 0, 2, 7, 0, 9, 0, 12, 0}) == std::vector<int>{4, 2, 7, 9, 12, 0, 0, 0, 0});, assert(re_order({3, 11, 0, 74, 14, 0, 1, 0, 2}) == std::vector<int>{3, 11, 74, 14, 1, 2, 0, 0, 0});]"
505,"This is  a function to calculate the permutation coefficient of given p(n, k).","```
#include <vector>

std::pair<int, int> permutation_coefficient(int n, int k) {
    std::vector<std::vector<int>> P(n + 1, std::vector<int>(k + 1, 0));
    
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= std::min(i, k); ++j) {
            if (j == 0) {
                P[i][j] = 1;
            } else {
                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);
            }
            if (j < k) {
                P[i][j + 1] = 0;
            }
        }
    }
    return {P[n][k], 0}; // Returning 0 as second value to match return type
}
```",506,"[assert(permutation_coefficient(10, 2).first == 90);, assert(permutation_coefficient(10, 3).first == 720);, assert(permutation_coefficient(10, 1).first == 10);]"
506,This is  a function to remove specific words from a given list.,"```
#include <vector>
#include <string>
#include <algorithm>

// Function to remove words in `removewords` from `list1`
std::vector<std::string> remove_words(std::vector<std::string> list1, const std::vector<std::string>& removewords) {
    for (const auto& word : removewords) {
        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());
    }
    return list1;
}```",507,"[assert((remove_words({ ""red"", ""green"", ""blue"", ""white"", ""black"", ""orange"" }, { ""white"", ""orange"" }) == std::vector<std::string>{""red"", ""green"", ""blue"", ""black""}));, assert((remove_words({ ""red"", ""green"", ""blue"", ""white"", ""black"", ""orange"" }, { ""black"", ""orange"" }) == std::vector<std::string>{""red"", ""green"", ""blue"", ""white""}));, assert((remove_words({ ""red"", ""green"", ""blue"", ""white"", ""black"", ""orange"" }, { ""blue"", ""white"" }) == std::vector<std::string>{""red"", ""green"", ""black"", ""orange""}));]"
507,This is  a function to check if the common elements between two given lists are in the same order or not.,"```
#include <vector>
#include <set>
#include <algorithm>
#include <iostream>
#include <cassert>

// Function to check if two lists have the same order for their common elements
std::pair<bool, std::vector<int>> same_order(const std::vector<int>& l1, const std::vector<int>& l2) {
    std::set<int> common_elements(l1.begin(), l1.end());
    std::vector<int> filtered_l1, filtered_l2;

    for (int e : l2) {
        if (common_elements.count(e)) {
            filtered_l2.push_back(e);
        }
    }

    for (int e : l1) {
        if (std::find(filtered_l2.begin(), filtered_l2.end(), e) != filtered_l2.end()) {
            filtered_l1.push_back(e);
        }
    }

    return { filtered_l1 == filtered_l2, filtered_l1 };
}```",508,"[assert((same_order({ 1, 2, 3, 4 }, { 1, 5, 2, 6, 3 }).first) == true);, assert((same_order({ 1, 5, 2, 6, 3 }, { 6, 7, 5, 3 }).first) == false);, assert((same_order({ 1, 2, 3, 4 }, { 1, 5, 2, 6, 3 }).first) == true);]"
508,This is  a C++ function to find the average of odd numbers till a given odd number.,"```
#include <iostream>
using namespace std;

pair<int, int> average_Odd(int n) {
    if (n % 2 == 0) {
        cout << ""Invalid Input"" << endl;
        return make_pair(-1, -1);
    }
    int sm = 0;
    int count = 0;
    while (n >= 1) {
        count = count + 1;
        sm = sm + n;
        n = n - 2;
    }
    return make_pair(sm / count, count);
}
```",509,"[assert(average_Odd(9).first == 5);, assert(average_Odd(5).first == 3);, assert(average_Odd(11).first == 6);]"
509,This is  a function to find the number of subsequences having product smaller than k for the given non negative array.,"```
#include <vector>

std::pair<int, int> no_of_subsequences(std::vector<int>& arr, int k) {
    int n = arr.size();
    std::vector<std::vector<int>> dp(k + 1, std::vector<int>(n + 1, 0));

    for (int i = 1; i <= k; ++i) {
        for (int j = 1; j <= n; ++j) {
            dp[i][j] = dp[i][j - 1];
            if (arr[j - 1] <= i && arr[j - 1] > 0) {
                dp[i][j] += dp[i / arr[j - 1]][j - 1] + 1;
            }
        }
    }
    
    return {dp[k][n], 0}; // The second value in the pair is set to 0 as a placeholder.
}
```",510,"[assert(no_of_subsequences({ 1, 2, 3, 4 }, 10).first == 11);, assert(no_of_subsequences({ 4, 8, 7, 2 }, 50).first == 9);, assert(no_of_subsequences({ 5, 6, 7, 8 }, 15).first == 4);]"
511,This is  a function to count the element frequency in the mixed nested tuple.,"```
#include <iostream>
#include <vector>
#include <map>
#include <variant>
#include <any>
#include <cassert>
#include <type_traits>
#include <stdexcept>
#include <functional>

using NestedElement = std::variant<int, std::vector<std::any>>;
using Tuple = std::vector<std::any>;

// Helper function to recursively flatten the nested structure
void flatten(const Tuple& nested, std::vector<int>& flatList) {
    for (const auto& element : nested) {
        if (element.type() == typeid(int)) {
            flatList.push_back(std::any_cast<int>(element));
        } else if (element.type() == typeid(Tuple)) {
            flatten(std::any_cast<Tuple>(element), flatList);
        }
    }
}

// Count element frequencies
std::map<int, int> countElementFreq(const Tuple& testTuple) {
    std::vector<int> flatList;
    flatten(testTuple, flatList);

    std::map<int, int> frequencyMap;
    for (int ele : flatList) {
        frequencyMap[ele]++;
    }
    return frequencyMap;
}```",512,"[ assert((countElementFreq({5, 6, Tuple{5, 6}, 7, Tuple{8, 9}, 9}) == std::map<int, int>{{5, 2}, {6, 2}, {7, 1}, {8, 1}, {9, 2}}));,
    assert((countElementFreq({6, 7, Tuple{6, 7}, 8, Tuple{9, 10}, 10}) == std::map<int, int>{{6, 2}, {7, 2}, {8, 1}, {9, 1}, {10, 2}}));,
    assert((countElementFreq({7, 8, Tuple{7, 8}, 9, Tuple{10, 11}, 11}) == std::map<int, int>{{7, 2}, {8, 2}, {9, 1}, {10, 1}, {11, 2}}));]"
512,This is  a function to convert tuple into list by adding the given string after every element.,"```
#include <iostream>
#include <vector>
#include <tuple>
#include <string>
#include <cassert>

std::vector<std::string> add_str(const std::vector<std::tuple<int>>& test_tup, const std::string& K) {
    std::vector<std::string> res;
    for (const auto& sub : test_tup) {
        res.push_back(std::to_string(std::get<0>(sub))); // Convert int to string
        res.push_back(K);
    }
    return res; // Return only the result vector
}```",513,"[assert((add_str({ std::make_tuple(5), std::make_tuple(6), std::make_tuple(7), std::make_tuple(4), std::make_tuple(9) }, ""FDF"") == std::vector<std::string>{""5"", ""FDF"", ""6"", ""FDF"", ""7"", ""FDF"", ""4"", ""FDF"", ""9"", ""FDF""}));, assert((add_str({ std::make_tuple(7), std::make_tuple(8), std::make_tuple(9), std::make_tuple(10) }, ""PF"") == std::vector<std::string>{""7"", ""PF"", ""8"", ""PF"", ""9"", ""PF"", ""10"", ""PF""}));, assert((add_str({ std::make_tuple(11), std::make_tuple(14), std::make_tuple(12), std::make_tuple(1), std::make_tuple(4) }, ""JH"") == std::vector<std::string>{""11"", ""JH"", ""14"", ""JH"", ""12"", ""JH"", ""1"", ""JH"", ""4"", ""JH""}));]"
513,This is  a function to find the summation of tuple elements in the given tuple list.,"```#include <tuple>
#include <numeric>
#include <cassert>
#include <vector>
#include <initializer_list>

int sum_elements(const std::initializer_list<int>& test_tup) {
    return std::accumulate(test_tup.begin(), test_tup.end(), 0);
}```",514,"[assert(sum_elements({ 7, 8, 9, 1, 10, 7 }) == 42);, assert(sum_elements({ 1, 2, 3, 4, 5, 6 }) == 21);, assert(sum_elements({ 11, 12, 13, 45, 14 }) == 95);]"
514,This is  a function to check if there is a subset with sum divisible by m.,"```
#include <vector>

bool modular_sum(const std::vector<int>& arr, int n, int m) {
    if (n > m) {
        return true;
    }
    
    std::vector<bool> DP(m, false);
    
    for (int i = 0; i < n; i++) {
        if (DP[0]) {
            return true;
        }
        std::vector<bool> temp(m, false);
        
        for (int j = 0; j < m; j++) {
            if (DP[j] == true) {
                if (DP[(j + arr[i]) % m] == false) {
                    temp[(j + arr[i]) % m] = true;
                }
            }
        }
        
        for (int j = 0; j < m; j++) {
            if (temp[j]) {
                DP[j] = true;
            }
        }
        DP[arr[i] % m] = true;
    }
    
    return DP[0];
}
```",515,"[assert(modular_sum({3, 1, 7, 5}, 4, 6) == true);, assert(modular_sum({1, 7}, 2, 5) == false);, assert(modular_sum({1, 6}, 2, 5) == false);]"
515,This is  a function to sort a list of elements using radix sort.,"```


#include <vector>
#include <algorithm>

std::vector<int> radix_sort(std::vector<int> nums) {
    const int RADIX = 10;
    int placement = 1;
    int max_digit = *std::max_element(nums.begin(), nums.end());

    while (placement < max_digit) {
        std::vector<std::vector<int>> buckets(RADIX);
        for (int i : nums) {
            int tmp = (i / placement) % RADIX;
            buckets[tmp].push_back(i);
        }
        int a = 0;
        for (int b = 0; b < RADIX; b++) {
            for (int i : buckets[b]) {
                nums[a] = i;
                a++;
            }
        }
        placement *= RADIX;
    }
    return nums;
}```",516,"[assert(radix_sort({ 15, 79, 25, 68, 37 }) == std::vector<int>({ 15, 25, 37, 68, 79 }));, assert(radix_sort({ 9, 11, 8, 7, 3, 2 }) == std::vector<int>({ 2, 3, 7, 8, 9, 11 }));, assert(radix_sort({ 36, 12, 24, 26, 29 }) == std::vector<int>({ 12, 24, 26, 29, 36 }));]"
516,This is  a C++ function to find the largest postive number from the given list.,"```
#include <vector>

std::pair<int, int> largest_pos(const std::vector<int>& list1) {
    int max = list1[0];
    for (int x : list1) {
        if (x > max) {
            max = x;
        }
    }
    return {max, max};
}
```",517,"[assert(largest_pos({ 1, 2, 3, 4, -1 }).first == 4);, assert(largest_pos({ 0, 1, 2, -5, -1, 6 }).first == 6);, assert(largest_pos({ 0, 0, 1, 0 }).first == 1);]"
517,This is  a function to find the square root of a perfect number.,"```
#include <cmath>

int sqrt_root(double num) {
    double result = pow(num, 0.5);
    return result;
}```",518,"[assert(sqrt(4) == 2);, assert(sqrt(16) == 4);, assert(sqrt(400) == 20);]"
518,This is  a function to calculate volume of a tetrahedron.,"```
#include <cmath>
#include <iomanip>

std::pair<double, double> volume_tetrahedron(double num) {
    double volume = (num * num * num) / (6 * sqrt(2));
    return std::make_pair(std::round(volume * 100) / 100, volume);
}
```",519,"[assert(volume_tetrahedron(10).first == 117.85);, assert(volume_tetrahedron(15).first == 397.75);, assert(volume_tetrahedron(20).first == 942.81);]"
519,This is  a function to find the lcm of the given array elements.,"```
#include <vector>
#include <numeric> // For std::gcd (C++17 and later)

using namespace std;

// Function to calculate the GCD of two numbers
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

// Function to calculate the LCM of two numbers
int lcm(int a, int b) {
    return (a / gcd(a, b)) * b; // Avoid overflow by dividing first
}

// Function to calculate the LCM of an array
int findLCM(const vector<int>& arr) {
    return accumulate(arr.begin(), arr.end(), 1, lcm);
}```",520,"[assert(findLCM({ 2, 7, 3, 9, 4 }) == 252);, assert(findLCM({ 1, 2, 8, 3 }) == 24);, assert(findLCM({ 3, 8, 4, 10, 5 }) == 120);]"
520,This is  a function to print check if the triangle is scalene or not.,"```
bool check_isosceles(int x, int y, int z) {
    if (x != y && y != z && z != x) {
        return true;
    } else {
        return false;
    }
}
```",521,"[assert(check_isosceles(6, 8, 12) == true);, assert(check_isosceles(6, 6, 12) == false);, assert(check_isosceles(6, 15, 20) == true);]"
521,This is  a function to find the longest bitonic subsequence for the given array.,"```
#include <vector>
#include <algorithm>

std::pair<int, int> lbs(const std::vector<int>& arr) {
    int n = arr.size();
    std::vector<int> lis(n + 1, 1);
    
    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {
                lis[i] = lis[j] + 1;
            }
        }
    }

    std::vector<int> lds(n + 1, 1);
    
    for (int i = n - 2; i >= 0; --i) {
        for (int j = n - 1; j > i; --j) {
            if (arr[i] > arr[j] && lds[i] < lds[j] + 1) {
                lds[i] = lds[j] + 1;
            }
        }
    }

    int maximum = lis[0] + lds[0] - 1;
    
    for (int i = 1; i < n; ++i) {
        maximum = std::max(lis[i] + lds[i] - 1, maximum);
    }

    return {maximum, 0};  // Returning a pair, second value is not used
}
```",522,"[assert(lbs({ 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 }).first == 7);, assert(lbs({ 1, 11, 2, 10, 4, 5, 2, 1 }).first == 6);, assert(lbs({ 80, 60, 30, 40, 20, 10 }).first == 5);]"
522,"This is  a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.","```
#include <iostream>
#include <string>
#include <vector>
#include <cctype>
#include <algorithm> // For std::none_of

std::vector<std::string> check_string(const std::string& str1) {
    std::vector<std::string> result;

    if (std::none_of(str1.begin(), str1.end(), [](char x) { return std::isupper(x); })) {
        result.push_back(""String must have 1 upper case character."");
    }
    if (std::none_of(str1.begin(), str1.end(), [](char x) { return std::islower(x); })) {
        result.push_back(""String must have 1 lower case character."");
    }
    if (std::none_of(str1.begin(), str1.end(), [](char x) { return std::isdigit(x); })) {
        result.push_back(""String must have 1 number."");
    }
    if (str1.length() < 8) {
        result.push_back(""String length should be at least 8."");
    }

    if (result.empty()) {
        result.push_back(""Valid string."");
    }

    return result;
}```",523,"[assert((check_string(""C++"") == std::vector<std::string>{""String must have 1 upper case character."", ""String must have 1 number."", ""String length should be at least 8.""}));, assert((check_string(""123C++"") == std::vector<std::string>{""String must have 1 upper case character.""}));, assert((check_string(""123C++"") == std::vector<std::string>{""Valid string.""}));]"
523,This is  a function to find the sum of maximum increasing subsequence of the given array.,"```
#include <vector>
#include <algorithm>

std::pair<int, int> max_sum_increasing_subsequence(const std::vector<int>& arr, int n) {
    int max = 0;
    std::vector<int> msis(n, 0);
    for (int i = 0; i < n; ++i) {
        msis[i] = arr[i];
    }
    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {
                msis[i] = msis[j] + arr[i];
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        if (max < msis[i]) {
            max = msis[i];
        }
    }
    return { max, 0 }; // The second value can be adjusted or removed as needed
}```",524,"[assert(max_sum_increasing_subsequence({ 1, 101, 2, 3, 100, 4, 5 }, 7).first == 106);, assert(max_sum_increasing_subsequence({ 3, 4, 5, 10 }, 4).first == 22);, assert(max_sum_increasing_subsequence({ 10, 5, 4, 3 }, 4).first == 10);]"
525,This is  a C++ function to capitalize first and last letters of each word of a given string.,"```
#include <iostream>
#include <sstream>
#include <cctype>

std::string capitalize_first_last_letters(const std::string& str1) {
    std::string result;
    std::istringstream iss(str1);
    std::string word;

    while (iss >> word) {
        if (!word.empty()) {
            word[0] = std::toupper(word[0]);
            word.back() = std::toupper(word.back());
            result += word + "" "";
        }
    }
    return result.empty() ? result : result.substr(0, result.size() - 1);
}
```",526,"[assert(capitalize_first_last_letters(""C++"") == ""C++"");, assert(capitalize_first_last_letters(""bigdata"") == ""BigdatA"");, assert(capitalize_first_last_letters(""Hadoop"") == ""HadooP"");]"
526,This is  a function to find all pairs in an integer array whose sum is equal to a given number.,"```
#include <vector>

std::pair<int, int> get_pairs_count(const std::vector<int>& arr, int n, int sum) {
    int count = 0; 
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == sum) {
                count++;
            }
        }
    }
    return {count, 0};
}
```",527,"[assert(get_pairs_count({ 1, 5, 7, -1, 5 }, 5, 6).first == 3);, assert(get_pairs_count({ 1, 5, 7, -1 }, 4, 6).first == 2);, assert(get_pairs_count({ 1, 1, 1, 1 }, 4, 2).first == 6);]"
527,This is  a function to find the list of lists with minimum length.,"```
#include <vector>
#include <string>
#include <algorithm>
#include <tuple>

// Function to find the shortest string and its length
std::tuple<int, std::string> min_length(const std::vector<std::string>& list1) {
    if (list1.empty()) {
        return std::make_tuple(0, """"); // Handle empty input
    }

    auto min_it = std::min_element(list1.begin(), list1.end(),
        [](const std::string& a, const std::string& b) {
            return a.length() < b.length();
        });

    return std::make_tuple(min_it->length(), *min_it);
}```",528,"[assert(min_length({ ""a"", ""bc"", ""def"", ""ghij"" }) == std::make_tuple(1, ""a""));, assert(min_length({ ""hello"", ""world"", ""hi"", ""!"" }) == std::make_tuple(1, ""!""));, assert(min_length({ ""abcd"", ""ef"", ""gh"", ""ijkl"" }) == std::make_tuple(2, ""ef""));, assert(min_length({}) == std::make_tuple(0, """"));]"
528,This is  a function to find the nth jacobsthal-lucas number.,"```
#include <vector>

std::pair<int, int> jacobsthal_lucas(int n) {
    std::vector<int> dp(n + 1);
    dp[0] = 2;
    dp[1] = 1;
    for (int i = 2; i <= n; ++i) {
        dp[i] = dp[i - 1] + 2 * dp[i - 2];
    }
    return {dp[n], 0}; // Returning a pair where the second value is a placeholder
}
```",529,"[assert(jacobsthal_lucas(5).first == 31);, assert(jacobsthal_lucas(2).first == 5);, assert(jacobsthal_lucas(4).first == 17);]"
529,This is  a function to find the ration of negative numbers in an array of integers.,"```
#include <iostream>
#include <vector>
#include <iomanip>

std::pair<double, double> negative_count(const std::vector<int>& nums) {
    int n = nums.size();
    int n1 = 0;
    for (int x : nums) {
        if (x < 0) {
            n1 += 1;
        }
    }
    return {std::round(static_cast<double>(n1) / n * 100.0) / 100.0, static_cast<double>(n1) / n};
}
```",530,"[assert(negative_count({ 0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8 }).first == 0.31);, assert(negative_count({ 2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8 }).first == 0.31);, assert(negative_count({ 2, 4, -6, -9, 11, -12, 14, -5, 17 }).first == 0.44);]"
530,This is  a function to find minimum number of coins that make a given value.,"```
#include <iostream>
#include <vector>
#include <limits.h>

using namespace std;

int min_coins(vector<int> coins, int m, int V) {
    if (V == 0) {
        return 0;
    }
    int res = INT_MAX;
    for (int i = 0; i < m; i++) {
        if (coins[i] <= V) {
            int sub_res = min_coins(coins, m, V - coins[i]);
            if (sub_res != INT_MAX && sub_res + 1 < res) {
                res = sub_res + 1;
            }
        }
    }
    return res;
}```",531,"[assert(min_coins({9, 6, 5, 1}, 4, 11) == 2);, assert(min_coins({4, 5, 6, 7, 8, 9}, 6, 9) == 1);, assert(min_coins({1, 2, 3}, 3, 4) == 2);]"
531,This is  a function to check if the two given strings are permutations of each other.,"```
#include <iostream>
#include <algorithm>
#include <string>

bool check_permutation(std::string str1, std::string str2) {
    int n1 = str1.length();
    int n2 = str2.length();
    if (n1 != n2) {
        return false;
    }
    std::sort(str1.begin(), str1.end());
    std::sort(str2.begin(), str2.end());
    for (int i = 0; i < n1; i++) {
        if (str1[i] != str2[i]) {
            return false;
        }
    }
    return true;
}
```",532,"[assert(check_permutation(""abc"", ""cba"") == true);, assert(check_permutation(""test"", ""ttew"") == false);, assert(check_permutation(""xxyz"", ""yxzx"") == true);]"
532,This is  a function to remove particular data type elements from the given tuple.,"```
#include <iostream>
#include <vector>
#include <any>
#include <typeinfo>
#include <cassert>

std::vector<std::any> removeDataType(const std::vector<std::any>& testTuple, const std::type_info& dataType) {
    std::vector<std::any> res;
    for (const auto& ele : testTuple) {
        if (ele.type() != dataType) {
            res.push_back(ele);
        }
    }
    return res;
}

void printVector(const std::vector<std::any>& vec) {
    std::cout << ""["";
    for (size_t i = 0; i < vec.size(); ++i) {
        if (vec[i].type() == typeid(int)) std::cout << std::any_cast<int>(vec[i]);
        else if (vec[i].type() == typeid(double)) std::cout << std::any_cast<double>(vec[i]);
        else if (vec[i].type() == typeid(std::string)) std::cout << "" << std::any_cast<std::string>(vec[i]) << "";
        if (i < vec.size() - 1) std::cout << "", "";
    }
    std::cout << ""]\n"";
}    ```",533," [ assert(removeDataType({4, 5, 4, 7.7, 1.2}, typeid(int)).size() == 2);,
   assert(std::any_cast<double>(removeDataType({4, 5, 4, 7.7, 1.2}, typeid(int))[0]) == 7.7);,
    assert(std::any_cast<double>(removeDataType({4, 5, 4, 7.7, 1.2}, typeid(int))[1]) == 1.2);,

    assert(removeDataType({7, 8, 9, std::string(""SR"")}, typeid(std::string)).size() == 3);]"
533,This is  a function to search a literals string in a string and also find the location within the original string where the pattern occurs.,"```
#include <string>

std::pair<int, int> search_literal(const std::string& pattern, const std::string& text) {
    std::regex r(pattern);
    std::smatch match;
    if (std::regex_search(text, match, r)) {
        return std::make_pair(match.position(), match.position() + match.length());
    }
    else {
        return std::make_pair(-1, -1);
    }
}```",534,"[assert(search_literal(""C++"", ""C++ programming language"") == std::make_pair(0, 6));, assert(search_literal(""programming"", ""C++ programming language"") == std::make_pair(7, 18));, assert(search_literal(""language"", ""C++ programming language"") == std::make_pair(19, 27));]"
534,This is  a function to find the top or bottom surface area of a cylinder.,"```
#include <cmath>
#include<tuple>

double topbottom_surfacearea(double r) {
    double toporbottomarea = 3.1415 * r * r;
    return toporbottomarea;
}```",535,"[assert(topbottom_surfacearea(10) == 314.15000000000003);, assert(topbottom_surfacearea(5) == 78.53750000000001);, assert(topbottom_surfacearea(4) == 50.264);]"
535,This is  a function to select the nth items of a list.,"```
#include <vector>

std::vector<int> nth_items(const std::vector<int>& list, int n) {
    std::vector<int> result;
    for (size_t i = 0; i < list.size(); i += n) {
        result.push_back(list[i]);
    }
    return result ;
}```",536,"[assert((nth_items({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 2) == std::vector<int> {1, 3, 5, 7, 9}));, assert((nth_items({ 10, 15, 19, 17, 16, 18 }, 3) == std::vector<int> {10, 17}));, assert((nth_items({ 14, 16, 19, 15, 17 }, 4) == std::vector<int> {14, 17}));]"
536,This is  a C++ function to find the first repeated word in a given string.,"```
#include <iostream>
#include <set>
#include <sstream>
#include <string>

std::string first_repeated_word(const std::string &str1) {
    std::set<std::string> temp;
    std::istringstream iss(str1);
    std::string word;
    
    while (iss >> word) {
        if (temp.find(word) != temp.end()) {
            return word;
        } else {
            temp.insert(word);
        }
    }
    return ""None"";
}
```",537,"[assert(first_repeated_word(""ab ca bc ab"") == ""ab"");, assert(first_repeated_word(""ab ca bc"") == ""None"");, assert(first_repeated_word(""ab ca bc ca ab bc"") == ""ca"");]"
537,this is  a c++ function to convert a given string  to a tuple.,"```
#include <iostream>
#include <string>
#include <tuple>
#include <vector> 

std::vector<char> string_list_to_tuple(const std::string& str) {
    std::vector<char> result;
    for (char c : str) {
        if (!std::isspace(c)) {
            result.push_back(c);
        }
    }
    return result;
}```",538,"[assert(string_list_to_tuple(""C++ 3.0"") == std::vector<char>({ \p\, \y\, \t\, \h\, \o\, \n\, \3\, \.\, \0\ }));, assert(string_list_to_tuple(""bigdata"") == std::vector<char>({ \b\, \i\, \g\, \d\, \a\, \t\, \a\ }));, assert(string_list_to_tuple(""language"") == std::vector<char>({ \l\, \a\, \n\, \g\, \u\, \a\, \g\, \e\ }));]"
538,This is  a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.,"```
#include <vector>
#include <cmath>

std::vector<long long> basesnum_coresspondingnum(const std::vector<long long> bases_num, const std::vector<long long> index) {
    std::vector<long long> result;
    for (size_t i = 0; i < bases_num.size(); ++i) {
        result.push_back(std::pow(bases_num[i], index[i]));
    }
    return result; // Returning result twice as an example, modify as needed.
}```",539,"[assert((basesnum_coresspondingnum({ 2, 3 }, { 10, 5 }) == std::vector<long long>{1024, 243}));, assert((basesnum_coresspondingnum({ 1, 2, 3 }, { 0, 1, 2 }) == std::vector<long long>{1, 2, 9}));]"
539,This is  a C++ function to find the difference between highest and least frequencies in a given array.,"```
#include <vector>
#include <algorithm>
#include <limits>

int find_Diff(std::vector<int> arr, int n) {
    std::sort(arr.begin(), arr.end());
    int count = 0, max_count = 0, min_count = n;
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] == arr[i + 1]) {
            count++;
            continue;
        }
        else {
            max_count = std::max(max_count, count);
            min_count = std::min(min_count, count);
            count = 0;
        }
    }
    return  max_count - min_count; // Changed return value to fit C++ style
}```",540,"[assert(find_Diff({ 1, 1, 2, 2, 7, 8, 4, 5, 1, 4 }, 10) == 2);, assert(find_Diff({ 1, 7, 9, 2, 3, 3, 1, 3, 3 }, 9) == 3);, assert(find_Diff({ 1, 2, 1, 2 }, 4) == 0);]"
540,This is  a function to find if the given number is abundant or not.,"```
#include <cmath>

bool check_abundant(int n) {
    int sum = 0;
    int i = 1;
    while (i <= std::sqrt(n)) {
        if (n % i == 0) {
            if (n / i == i) {
                sum += i;
            }
            else {
                sum += i;
                sum += (n / i);
            }
        }
        i++;
    }
    sum -= n;
    return sum > n;
   
}```",541,"[assert(check_abundant(12) == true);, assert(check_abundant(15) == false);, assert(check_abundant(18) == true);]"
542,This is  a function to add two numbers and print number of digits of sum.,"```
#include <iostream>

int count_digits(long long num1, long long num2) {
    long long number = num1 + num2; // Use long long to handle large numbers
    int count = 0;
    do {
        count++;
        number /= 10;
    } while (number > 0); // Use do-while to handle the case when number is 0
    return count;
}```",543,"[assert(count_digits(9875, 10) == 4);, assert(count_digits(98759853034, 100) == 11); // Large number handled correctly, assert(count_digits(1234567, 500) == 7);]"
543,This is  a function to flatten the tuple list to a string.,"```
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cassert>

// Function to flatten a vector of vectors into a single space-separated string
std::string flatten_tuple(const std::vector<std::vector<std::string>>& test_list) {
    std::ostringstream oss;
    for (const auto& vec : test_list) {
        for (const auto& str : vec) {
            oss << str <<  ;
        }
    }
    std::string res = oss.str();
    if (!res.empty() && res.back() ==  ) {
        res.pop_back(); // Remove trailing space
    }
    return res;
}```",544,"[assert(flatten_tuple({ {""1"", ""4"", ""6""}, {""5"", ""8""}, {""2"", ""9""}, {""1"", ""10""} }) == ""1 4 6 5 8 2 9 1 10"");, assert(flatten_tuple({ {""2"", ""3"", ""4""}, {""6"", ""9""}, {""3"", ""2""}, {""2"", ""11""} }) == ""2 3 4 6 9 3 2 2 11"");, assert(flatten_tuple({ {""14"", ""21"", ""9""}, {""24"", ""19""}, {""12"", ""29""}, {""23"", ""17""} }) == ""14 21 9 24 19 12 29 23 17"");]"
544,This is  a C++ function to toggle only first and last bits of a given number.,"```
#include <iostream>
using namespace std;

int take_L_and_F_set_bits(int n) {
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    n = n | (n >> 16);
    return ((n + 1) >> 1) + 1;
}

int toggle_F_and_L_bits(int n) {
    if (n == 1) {
        return 0;
    }
    return n ^ take_L_and_F_set_bits(n);
}
```",545,"[assert(toggle_F_and_L_bits(10) == 3);, assert(toggle_F_and_L_bits(15) == 6);, assert(toggle_F_and_L_bits(20) == 5);]"
546,This is  a C++ function to find the sum of hamming distances of all consecutive numbers from o to n.,"```
#include <iostream>
using namespace std;

int Total_Hamming_Distance(int n) {
    int i = 1;
    int sum = 0;
    while (n / i > 0) {
        sum = sum + n / i;
        i = i * 2;
    }
    return sum; // Note: Returning 0 as a placeholder for the second value
}```",547,"[assert(Total_Hamming_Distance(4) == 7);, assert(Total_Hamming_Distance(2) == 3);, assert(Total_Hamming_Distance(5) == 8);]"
547,This is  a function to find the length of the longest increasing subsequence of the given sequence.,"```
#include <vector>
#include <algorithm>
using namespace std;

int longest_increasing_subsequence(vector<int> arr) {
    int n = arr.size();
    vector<int> longest_increasing_subsequence(n, 1);

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[i] > arr[j] && longest_increasing_subsequence[i] < longest_increasing_subsequence[j] + 1) {
                longest_increasing_subsequence[i] = longest_increasing_subsequence[j] + 1;
            }
        }
    }

    int maximum = 0;
    for (int i = 0; i < n; i++) {
        maximum = max(maximum, longest_increasing_subsequence[i]);
    }

    return maximum;
}```",548,"[assert(longest_increasing_subsequence({ 10, 22, 9, 33, 21, 50, 41, 60 }) == 5);, assert(longest_increasing_subsequence({ 3, 10, 2, 1, 20 }) == 3);, assert(longest_increasing_subsequence({ 50, 3, 10, 7, 40, 80 }) == 4);]"
548,This is  a C++ function to find the sum of fifth power of first n odd natural numbers.,"```
#include <iostream>
using namespace std;

pair<long long, long long> odd_Num_Sum(int n) {
    long long j = 0;
    long long sm = 0;
    for (int i = 1; i <= n; ++i) {
        j = (2 * i - 1);
        sm = sm + (j * j * j * j * j);
    }
    return make_pair(sm, 0);
}```",549,"[assert(odd_Num_Sum(1).first == 1);, assert(odd_Num_Sum(2).first == 244);, assert(odd_Num_Sum(3).first == 3369);]"
549,This is  a C++ function to find the maximum element in a sorted and rotated array.,"```
#include <vector>
using namespace std;

int find_Max(const vector<int>& arr, int low, int high) {
    if (high < low) 
        return arr[0];
    if (high == low) 
        return arr[low];
    int mid = low + (high - low) / 2;
    if (mid < high && arr[mid + 1] < arr[mid]) 
        return arr[mid];
    if (mid > low && arr[mid] < arr[mid - 1]) 
        return arr[mid - 1];
    if (arr[low] > arr[mid]) 
        return find_Max(arr, low, mid - 1);
    else 
        return find_Max(arr, mid + 1, high);
}
```",550,"[assert(find_Max({2, 3, 5, 6, 9}, 0, 4) == 9);, assert(find_Max({3, 4, 5, 2, 1}, 0, 4) == 5);, assert(find_Max({1, 2, 3}, 0, 2) == 3);]"
550,This is  a function to extract a specified column from a given nested list.,"```
#include <vector>
#include <cassert>

std::vector<int> extract_column(const std::vector<std::vector<int>>& matrix, int column) {
    std::vector<int> result;
    for (const auto& row : matrix) {
        if (column < row.size()) {
            result.push_back(row[column]);
        }
    }
    return result;
}```",551,"[assert((extract_column({ {1, 2, 3}, {2, 4, 5}, {1, 1, 1} }, 0) == std::vector<int>{1, 2, 1}));, assert((extract_column({ {1, 2, 3}, {-2, 4, -5}, {1, -1, 1} }, 2) == std::vector<int>{3, -5, 1}));, assert((extract_column({ {1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11} }, 0) == std::vector<int>{1, 5, 1, 13, 5, 9}));]"
551,This is  a C++ function to check whether a given sequence is linear or not.,"```
#include <vector>
#include <set>
#include <string>

std::string Seq_Linear(std::vector<int> seq_nums) {
    for (size_t x = 1; x < seq_nums.size(); ++x) {
        seq_nums[x] = seq_nums[x] - seq_nums[x - 1];
    }

    std::set<int> unique_diff(seq_nums.begin() + 1, seq_nums.end());
    if (unique_diff.size() == 1) {
        return ""Linear Sequence"";
    }
    else {
        return ""Non Linear Sequence"";
    }
}```",552,"[assert(Seq_Linear({ 0, 2, 4, 6, 8, 10 }) == ""Linear Sequence"");, assert(Seq_Linear({ 1, 2, 3 }) == ""Linear Sequence"");, assert(Seq_Linear({ 1, 5, 2 }) == ""Non Linear Sequence"");]"
552,This is  a function to convert the given tuple to a floating-point number.,"```
#include <iostream>
#include <sstream>
#include <string>
#include <tuple>
#include <cassert>

// Corrected function to return a single double
double tuple_to_float(const std::tuple<int, int>& test_tup) {
    std::ostringstream oss;
    oss << std::get<0>(test_tup) << . << std::get<1>(test_tup);
    return std::stod(oss.str());
}```",553,"[assert(tuple_to_float(std::make_tuple(4, 56)) == 4.56);, assert(tuple_to_float(std::make_tuple(7, 256)) == 7.256);, assert(tuple_to_float(std::make_tuple(8, 123)) == 8.123);]"
553,This is  a C++ function to find odd numbers from a mixed list.,"```
#include <vector>

std::vector<int> Split(const std::vector<int>& list) {
    std::vector<int> od_li;
    for (int i : list) {
        if (i % 2 != 0) {
            od_li.push_back(i);
        }
    }
    return od_li ;
}```",554,"[assert(Split({ 1, 2, 3, 4, 5, 6 }) == std::vector<int>({ 1, 3, 5 }));, assert(Split({ 10, 11, 12, 13 }) == std::vector<int>({ 11, 13 }));, assert(Split({ 7, 8, 9, 1 }) == std::vector<int>({ 7, 9, 1 }));]"
554,This is  a C++ function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.,"```
int difference(int n) {
    int S = (n * (n + 1)) / 2;
    int res = S * (S - 1);
    return res;
}
```",555,"[assert(difference(3) == 30);, assert(difference(5) == 210);, assert(difference(2) == 6);]"
555,This is  a C++ function to count the pairs with xor as an odd number.,"```
#include <vector>
using namespace std;

int  find_Odd_Pair(vector<int> A, int N) {
    int oddPair = 0;
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            if (((A[i] ^ A[j]) % 2) != 0) {
                oddPair++;
            }
        }
    }
    return oddPair;
}```",556,"[assert(find_Odd_Pair({ 5, 4, 7, 2, 1 }, 5) == 6);, assert(find_Odd_Pair({ 7, 2, 8, 1, 0, 5, 11 }, 7) == 12);, assert(find_Odd_Pair({ 1, 2, 3 }, 3) == 2);]"
556,This is  a function to toggle characters case in a string.,"```
#include <iostream>
#include <string>
#include <algorithm>

std::string toggle_string(const std::string& str) {
    std::string string1 = str;
    std::transform(string1.begin(), string1.end(), string1.begin(), [](unsigned char c) {
        return std::islower(c) ? std::toupper(c) : std::tolower(c);
        });
    return string1;
}```",557,"[assert(toggle_string(""C++"") == ""C++"");, assert(toggle_string(""Pangram"") == ""pANGRAM"");, assert(toggle_string(""LIttLE"") == ""liTTle"");]"
557,This is  a C++ function to find the digit distance between two integers.,"```
#include <iostream>
#include <string>
#include <cmath>

int digit_distance_nums(int n1, int n2) {
    int distance = std::abs(n1 - n2);
    std::string distance_str = std::to_string(distance);
    int sum = 0;
    for (char c : distance_str) {
        sum += c - 0;
    }
    return sum;
}
```",558,"[assert(digit_distance_nums(1, 2) == 1);, assert(digit_distance_nums(23, 56) == 6);, assert(digit_distance_nums(123, 256) == 7);]"
558,This is  a function to find the largest sum of contiguous subarray in the given array.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int max_sub_array_sum(const std::vector<int>& a, int size) {
    int max_so_far = 0;
    int max_ending_here = 0;
    for (int i = 0; i < size; i++) {
        max_ending_here = max_ending_here + a[i];
        if (max_ending_here < 0) {
            max_ending_here = 0;
        }
        else if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
        }
    }
    return max_so_far;
}```",559,"[assert(max_sub_array_sum({ -2, -3, 4, -1, -2, 1, 5, -3 }, 8) == 7);, assert(max_sub_array_sum({ -3, -4, 5, -2, -3, 2, 6, -4 }, 8) == 8);, assert(max_sub_array_sum({ -4, -5, 6, -3, -4, 3, 7, -5 }, 8) == 10);]"
559,This is  a function to find the union of elements of the given tuples.,"```
#include <vector>
#include <set>
#include <tuple>

std::vector<int> union_elements(const std::tuple<int, int, int, int>& a, const std::tuple<int, int, int, int>& b) {
    std::set<int> result_set;
    int a1, a2, a3, a4;
    int b1, b2, b3, b4;
    std::tie(a1, a2, a3, a4) = a;
    std::tie(b1, b2, b3, b4) = b;

    result_set.insert(a1);
    result_set.insert(a2);
    result_set.insert(a3);
    result_set.insert(a4);
    result_set.insert(b1);
    result_set.insert(b2);
    result_set.insert(b3);
    result_set.insert(b4);

    return std::vector<int>(result_set.begin(), result_set.end());
}```",560,"[assert((union_elements(std::make_tuple(3, 4, 5, 6), std::make_tuple(5, 7, 4, 10)) == std::vector<int>{3, 4, 5, 6, 7, 10}));, assert((union_elements(std::make_tuple(1, 2, 3, 4), std::make_tuple(3, 4, 5, 6)) == std::vector<int>{1, 2, 3, 4, 5, 6}));, assert((union_elements(std::make_tuple(11, 12, 13, 14), std::make_tuple(13, 15, 16, 17)) == std::vector<int>{11, 12, 13, 14, 15, 16, 17}));]"
560,"This is  a function to assign with each element, its pair elements from other similar pairs in the given tuple.","```
#include <map>
#include <vector>
#include <utility>
#include <initializer_list>

std::map<int, std::vector<int>> assign_elements(const std::vector<std::pair<int, int>>& test_list) {
    std::map<int, std::vector<int>> res;
    for (const auto& p : test_list) {
        int key = p.first;
        int val = p.second;
        res[val]; // Ensure the key val exists in the map with an empty vector
        res[key].push_back(val);
    }
    return res;
}```",561,"[assert(assign_elements({ {5, 3}, {7, 5}, {2, 7}, {3, 8}, {8, 4} }) == (std::map<int, std::vector<int>>{ {3, { 8 }}, { 5, {3} }, { 7, {5} }, { 2, {7} }, { 8, {4} }, { 4, {} } }));, assert(assign_elements({ {6, 4}, {9, 4}, {3, 8}, {4, 9}, {9, 5} }) == (std::map<int, std::vector<int>>{ {4, { 9 }}, { 6, {4} }, { 9, {4, 5} }, { 8, {} }, { 3, {8} }, { 5, {} } }));, assert(assign_elements({ {6, 2}, {6, 8}, {4, 9}, {4, 9}, {3, 7} }) == (std::map<int, std::vector<int>>{ {2, {}}, { 6, {2, 8} }, { 8, {} }, { 9, {} }, { 4, {9, 9} }, { 7, {} }, { 3, {7} } }));]"
561,This is  a C++ function to find the maximum length of sublist.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int Find_Max_Length(const std::vector<std::string>& lst) {
    int maxLength = 0;
    for (const auto& x : lst) {
        maxLength = std::max(maxLength, static_cast<int>(x.length()));
    }
    return maxLength ;
}```",562,"[assert(Find_Max_Length({ {1}, {1, 4}, {5, 6, 7, 8} }) == 4);, assert(Find_Max_Length({ {0, 1}, {2, 2}, {3, 2, 1} }) == 3);, assert(Find_Max_Length({ {7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50} }) == 5);]"
562,This is  a function to extract values between quotation marks of a string.,"```
#include <cassert>
#include <string>
#include <vector>
#include <regex>

std::vector<std::string> extract_values(const std::string& text) {
    std::regex pattern(R""""(""([^""]*)"")""""); 
        std::vector<std::string> results;

    // Iterate over all matches
    for (std::sregex_iterator it = std::sregex_iterator(text.begin(), text.end(), pattern);
        it != std::sregex_iterator(); ++it) {
        results.push_back((*it)[1].str()); // Extract the first capture group
    }
    return results;
}```",563,"[assert((extract_values(""\\""C++\\"", \\""PHP\\"", \\""Java\\"""") == std::vector<std::string>{""C++"", ""PHP"", ""Java""}));, assert((extract_values(""\\""C++\\"",\\""program\\"",\\""language\\"""") == std::vector<std::string>{""C++"", ""program"", ""language""}));, assert((extract_values(""\\""red\\"",\\""blue\\"",\\""green\\"",\\""yellow\\"""") == std::vector<std::string>{""red"", ""blue"", ""green"", ""yellow""}));]"
563,This is  a C++ function to count unequal element pairs from the given array.,"```
#include <vector>

int count_Pairs(std::vector<int> arr, int n) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] != arr[j]) {
                cnt++;
            }
        }
    }
    return cnt;
}```",564,"[assert(count_Pairs({ 1, 2, 1 }, 3) == 2);, assert(count_Pairs({ 1, 1, 1, 1 }, 4) == 0);, assert(count_Pairs({ 1, 2, 3, 4, 5 }, 5) == 10);]"
564,This is  a C++ function to split a string into characters.,"```
#include <vector>
#include <string>

std::vector<char> split(const std::string& word) {
    std::vector<char> chars;
    for (char c : word) {
        chars.push_back(c);
    }
    return chars;
}```",565,"[assert((split(""C++"") == std::vector<char>{\p\, \y\, \t\, \h\, \o\, \n\}));, assert((split(""Name"") == std::vector<char>{\N\, \a\, \m\, \e\}));, assert((split(""program"") == std::vector<char>{\p\, \r\, \o\, \g\, \r\, \a\, \m\}));]"
566,This is  a function to check whether a specified list is sorted or not.,"```
#include <vector>

bool issort_list(const std::vector<int> list1) {
    bool result = true;
    for (size_t i = 0; i < list1.size() - 1; ++i) {
        if (list1[i] > list1[i + 1]) {
            result = false;
            break;
        }
    }
    return result; // Return both values as in your C++ code
}```",567,"[assert(issort_list({ 1, 2, 4, 6, 8, 10, 12, 14, 16, 17 }) == true);, assert(issort_list({ 1, 2, 4, 6, 8, 10, 12, 14, 20, 17 }) == false);, assert(issort_list({ 1, 2, 4, 6, 8, 10, 15, 14, 20 }) == false);]"
567,This is  a function to create a list of empty dictionaries.,"```
#include <vector>
#include<string>
#include <unordered_map>

// Function to create a vector of empty maps
std::vector<std::unordered_map<std::string, int>> empty_list(int length) {
    return std::vector<std::unordered_map<std::string, int>>(length);
}```",568,"[assert((empty_list(5) == std::vector<std::unordered_map<std::string, int>>(5)));, assert((empty_list(6) == std::vector<std::unordered_map<std::string, int>>(6)));, assert((empty_list(7) == std::vector<std::unordered_map<std::string, int>>(7)));]"
569,This is  a function to remove words from a given list of strings containing a character or string.,"```
#include <iostream>
#include <sstream>
#include <vector>
#include <string>

std::vector<std::string > remove_words(const std::vector<std::string>& list1, const std::vector<std::string>& charlist) {
    std::vector<std::string> new_list;

    for (const auto& line : list1) {
        std::istringstream iss(line);
        std::string word;
        std::string new_words;

        while (iss >> word) {
            bool found = false;
            for (const auto& phrase : charlist) {
                if (word.find(phrase) != std::string::npos) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                if (!new_words.empty()) {
                    new_words += "" "";
                }
                new_words += word;
            }
        }

        new_list.push_back(new_words);
    }

    return new_list;
}```",570,"[assert((remove_words({ ""Red color"", ""Orange#"", ""Green"", ""Orange @"", ""White"" }, { ""#"", ""color"", ""@"" }) == std::vector<std::string>{""Red"", """", ""Green"", ""Orange"", ""White""}));, assert((remove_words({ ""Red &"", ""Orange+"", ""Green"", ""Orange @"", ""White"" }, { ""&"", ""+"", ""@"" }) == std::vector<std::string>{""Red"", """", ""Green"", ""Orange"", ""White""}));, assert((remove_words({ ""Red &"", ""Orange+"", ""Green"", ""Orange @"", ""White"" }, { ""@"" }) == std::vector<std::string>{""Red &"", ""Orange+"", ""Green"", ""Orange"", ""White""}));]"
571,This is  a C++ function to remove two duplicate numbers from a given number of lists.,"```
#include <vector>
#include <unordered_map>

std::vector<int> two_unique_nums(const std::vector<int>& nums) {
    std::unordered_map<int, int> count_map;
    for (int num : nums) {
        count_map[num]++;
    }
    
    std::vector<int> unique_nums;
    for (const auto& pair : count_map) {
        if (pair.second == 1) {
            unique_nums.push_back(pair.first);
        }
    }
    
    return unique_nums;
}
```",572,"[assert(two_unique_nums({1, 2, 3, 2, 3, 4, 5}) == std::vector<int>({1, 4, 5}));, assert(two_unique_nums({1, 2, 3, 2, 4, 5}) == std::vector<int>({1, 3, 4, 5}));, assert(two_unique_nums({1, 2, 3, 4, 5}) == std::vector<int>({1, 2, 3, 4, 5}));]"
572,This is  a C++ function to calculate the product of the unique numbers of a given list.,"```
#include <vector>
#include <set>

long long unique_product(const std::vector<int>& list_data) {
    std::set<int> unique_set(list_data.begin(), list_data.end());
    long long p = 1;
    for (int i : unique_set) {
        p *= i;
    }
    return p;
}```",573,"[assert(unique_product({ 10, 20, 30, 40, 20, 50, 60, 40 }) == 720000000);, assert(unique_product({ 1, 2, 3, 1 }) == 6);, assert(unique_product({ 7, 8, 9, 0, 1, 1 }) == 0);]"
573,This is  a function to find the surface area of a cylinder.,"```
#include <cassert>
#include <cmath>

double surfacearea_cylinder(double r, double h) {
    double surfacearea = (2 * M_PI * r * r) + (2 * M_PI * r * h);
    return surfacearea;
}```",574,"[assert(std::abs(surfacearea_cylinder(10, 5) - 942.477) < 1e-3);, assert(std::abs(surfacearea_cylinder(4, 5) - 226.195) < 1e-3);, assert(std::abs(surfacearea_cylinder(4, 10) - 351.858) < 1e-3);]"
574,This is  a C++ function to find nth number in a sequence which is not a multiple of a given number.,"```
#include <iostream>
using namespace std;

int count_no(int A, int N, int L, int R) {
    int count = 0;
    int i;
    for (i = L; i <= R; i++) {
        if (i % A != 0) {
            count++;
        }
        if (count == N) {
            break;
        }
    }
    return i;
}```",575,"[assert(count_no(2, 3, 1, 10) == 5);, assert(count_no(3, 6, 4, 20) == 11);, assert(count_no(5, 10, 4, 20) == 16);]"
575,This is  a C++ function to check whether an array is subarray of another or not.,"```
#include <vector>

bool is_Sub_Array(const std::vector<int>& A, const std::vector<int>& B, int n, int m) {
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (A[i] == B[j]) {
            i++;
            j++;
            if (j == m) {
                return true;
            }
        }
        else {
            i = i - j + 1;
            j = 0;
        }
    }
    return false;
}```",576,"[assert(is_Sub_Array({ 1, 4, 3, 5 }, { 1, 2 }, 4, 2) == false);, assert(is_Sub_Array({ 1, 2, 1 }, { 1, 2, 1 }, 3, 3) == true);, assert(is_Sub_Array({ 1, 0, 2, 2 }, { 2, 2, 0 }, 4, 3) == false);]"
576,This is  a C++ function to find the last digit in factorial of a given number.,"```
int last_Digit_Factorial(int n) { 
    if (n == 0) return 1; 
    else if (n <= 2) return n; 
    else if (n == 3) return 6; 
    else if (n == 4) return 4; 
    else return 0; 
}
```",577,"[assert(last_Digit_Factorial(4) == 4);, assert(last_Digit_Factorial(21) == 0);, assert(last_Digit_Factorial(30) == 0);]"
577,This is  a function to interleave lists of the same length.,"```
#include <vector>
#include <tuple>

std::vector<int> interleave_lists(const std::vector<int>& list1, const std::vector<int> list2, const std::vector<int> list3) {
    std::vector<int> result;
    auto size = std::min({ list1.size(), list2.size(), list3.size() });
    for (size_t i = 0; i < size; ++i) {
        result.push_back(list1[i]);
        result.push_back(list2[i]);
        result.push_back(list3[i]);
    }
    return result;
}```",578,"[assert((interleave_lists({ 1,2,3,4,5,6,7 }, { 10,20,30,40,50,60,70 }, { 100,200,300,400,500,600,700 }) == std::vector<int>{1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700}));, assert((interleave_lists({ 10,20 }, { 15,2 }, { 5,10 }) == std::vector<int>{10, 15, 5, 20, 2, 10}));, assert((interleave_lists({ 11,44 }, { 10,15 }, { 20,5 }) == std::vector<int>{11, 10, 20, 44, 15, 5}));]"
578,This is  a function to find the dissimilar elements in the given two tuples.,"```
#include <cassert>
#include <iostream>
#include <set>
#include <vector>

// Function to find dissimilar elements
std::vector<int> find_dissimilar(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    std::set<int> set1(test_tup1.begin(), test_tup1.end());
    std::set<int> set2(test_tup2.begin(), test_tup2.end());
    std::vector<int> res;

    // Add elements from set1 not in set2
    for (const auto& elem : set1) {
        if (set2.find(elem) == set2.end()) {
            res.push_back(elem);
        }
    }

    // Add elements from set2 not in set1
    for (const auto& elem : set2) {
        if (set1.find(elem) == set1.end()) {
            res.push_back(elem);
        }
    }

    return res;
}```",579,"[assert((find_dissimilar({ 3, 4, 5, 6 }, { 5, 7, 4, 10 }) == std::vector<int>{3, 6, 7, 10}));, assert((find_dissimilar({ 1, 2, 3, 4 }, { 7, 2, 3, 9 }) == std::vector<int>{1, 4, 7, 9}));, assert((find_dissimilar({ 21, 11, 25, 26 }, { 26, 34, 21, 36 }) == std::vector<int>{11, 25, 34, 36}));]"
579,This is  a function to extract the even elements in the nested mixed tuple.,"```
#include <iostream>
#include <vector>
#include <any>
#include <typeinfo>
#include <cassert>

std::vector<std::any> evenEle(const std::vector<std::any>& testTuple, auto evenFnc) {
    std::vector<std::any> res;
    for (const auto& ele : testTuple) {
        if (ele.type() == typeid(std::vector<std::any>)) {
            res.push_back(evenEle(std::any_cast<std::vector<std::any>>(ele), evenFnc));
        } else if (ele.type() == typeid(int) && evenFnc(std::any_cast<int>(ele))) {
            res.push_back(ele);
        }
    }
    return res;
}

std::vector<std::any> extractEven(const std::vector<std::any>& testTuple) {
    return evenEle(testTuple, [](int x) { return x % 2 == 0; });
}

bool deepEquals(const std::vector<std::any>& a, const std::vector<std::any>& b) {
    if (a.size() != b.size()) return false;
    for (size_t i = 0; i < a.size(); ++i) {
        if (a[i].type() != b[i].type()) return false;
        if (a[i].type() == typeid(int)) {
            if (std::any_cast<int>(a[i]) != std::any_cast<int>(b[i])) return false;
        } else if (a[i].type() == typeid(std::vector<std::any>)) {
            if (!deepEquals(std::any_cast<std::vector<std::any>>(a[i]), std::any_cast<std::vector<std::any>>(b[i]))) return false;
        } else {
            return false; // Unexpected type
        }
    }
    return true;
}```",580," [  assert(deepEquals(
        extractEven({4, 5, std::vector<std::any>{7, 6, std::vector<std::any>{2, 4}}, 6, 8}),
        {4, std::vector<std::any>{6, std::vector<std::any>{2, 4}}, 6, 8}
    ));,

    assert(deepEquals(
        extractEven({5, 6, std::vector<std::any>{8, 7, std::vector<std::any>{4, 8}}, 7, 9}),
        {6, std::vector<std::any>{8, std::vector<std::any>{4, 8}}}
    ));,

    assert(deepEquals(
        extractEven({5, 6, std::vector<std::any>{9, 8, std::vector<std::any>{4, 6}}, 8, 10}),
        {6, std::vector<std::any>{8, std::vector<std::any>{4, 6}}, 8, 10}
    ));]"
580,This is  a C++ function to find the surface area of the square pyramid.,"```
#include <cmath>

double surface_Area(double b, double s) {
    return 2 * b * s + pow(b, 2);
}
```",581,"[assert(surface_Area(3, 4) == 33);, assert(surface_Area(4, 5) == 56);, assert(surface_Area(1, 2) == 5);]"
581,This is  a function to check if a dictionary is empty or not.,"```
#include <map>

bool my_dict(const std::map<int, int>& dict1) {
    if (!dict1.empty()) {
        return false;
    }
    else {
        return true;
    }
}```",582,"[assert(my_dict({ {10, 100} }) == false);, assert(my_dict({ {11, 200} }) == false);, assert(my_dict({}) == true);]"
582,This is  a function for nth catalan number.,"```
#include <iostream>

int catalan_number(int num) {
    if (num <= 1) {
        return 1;
    }
    int res_num = 0;
    for (int i = 0; i < num; i++) {
        res_num += catalan_number(i) * catalan_number(num - i - 1);
    }
    return res_num;
}
```",583,"[assert(catalan_number(10) == 16796);, assert(catalan_number(9) == 4862);, assert(catalan_number(7) == 429);]"
583,This is  a function to find all adverbs and their positions in a given sentence by using regex.,"```
#include <iostream>
#include <string>
#include <regex>

std::string find_adverbs(const std::string& text) {
    std::regex pattern(R""(\b\w+ly\b)""); // Match words ending in ""ly"" (boundaries included)
    std::smatch match;
    if (std::regex_search(text, match, pattern)) {
        // Get the position and length of the match
        std::size_t start_pos = match.position();
        std::size_t end_pos = start_pos + match.length();
        return std::to_string(start_pos) + ""-"" + std::to_string(end_pos) + "": "" + match.str();
    }
    return """"; // Return empty string if no match is found
}```",584,"[assert(find_adverbs(""Clearly, he has no excuse for such behavior."") == ""0-7: Clearly"");, assert(find_adverbs(""Please handle the situation carefuly"") == ""28-36: carefuly"");, assert(find_adverbs(""Complete the task quickly"") == ""18-25: quickly"");]"
584,This is  a function to find the n - expensive price items from a given dataset using heap queue algorithm.,"```
#include <vector>
#include <algorithm>
#include <string>

struct Item {
    std::string name;
    double price;

    bool operator==(const Item& other) const {
        return name == other.name && price == other.price;
    }
};

std::vector<Item> expensive_items(const std::vector<Item>& items, size_t n) {
    if (n > items.size()) {
        n = items.size(); // Adjust `n` to not exceed the number of available items
    }

    std::vector<Item> expensive_items = items;
    std::partial_sort(
        expensive_items.begin(),
        expensive_items.begin() + n,
        expensive_items.end(),
        [](const Item& a, const Item& b) {
            return a.price > b.price;
        }
    );

    expensive_items.resize(n);
    return expensive_items;
}```",585,"[assert( (expensive_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22} }, 1) == std::vector<Item>{ {""Item-2"", 555.22} }) );, assert( (expensive_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22}, {""Item-3"", 45.09} }, 2) == std::vector<Item>{ {""Item-2"", 555.22}, { ""Item-1"", 101.1 } }) );, assert( (expensive_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22}, {""Item-3"", 45.09}, {""Item-4"", 22.75} }, 1) == std::vector<Item>{ {""Item-2"", 555.22} }) );]"
585,This is  a C++ function to split the array and add the first part to the end.,"```
#include <vector>

 std::vector<int> split_Arr(const std::vector<int> a, int n, int k) {
    std::vector<int> b(a.begin(), a.begin() + k);
    std::vector<int> result(a.begin() + k, a.end());
    result.insert(result.end(), b.begin(), b.end());
    return result;
}```",586,"[assert((split_Arr({ 12,10,5,6,52,36 }, 6, 2) == std::vector<int>{5, 6, 52, 36, 12, 10}));, assert((split_Arr({ 1,2,3,4 }, 4, 1) == std::vector<int>{2, 3, 4, 1}));, assert((split_Arr({ 0,1,2,3,4,5,6,7 }, 8, 3) == std::vector<int>{3, 4, 5, 6, 7, 0, 1, 2}));]"
586,This is  a function to convert a list to a tuple.,"```
#include <iostream>
#include <cassert>
#include <vector>

std::vector<int> listTuple(const std::vector<int>& listx) {
    std::vector<int> tuplex = listx;
    return tuplex;
}```",587," [assert(listTuple({5, 10, 7, 4, 15, 3}) == std::vector<int>({5, 10, 7, 4, 15, 3}));,
    assert(listTuple({2, 4, 5, 6, 2, 3, 4, 4, 7}) == std::vector<int>({2, 4, 5, 6, 2, 3, 4, 4, 7}));,
    assert(listTuple({58, 44, 56}) == std::vector<int>({58, 44, 56}));]"
587,This is  a C++ function to find the difference between largest and smallest value in a given array.,"```
#include <vector>
#include <algorithm>

int big_diff(const std::vector<int>& nums) {
    int diff = *std::max_element(nums.begin(), nums.end()) - *std::min_element(nums.begin(), nums.end());
    return diff;
}```",588,"[assert(big_diff({ 1, 2, 3, 4 }) == 3);, assert(big_diff({ 4, 5, 12 }) == 8);, assert(big_diff({ 9, 2, 3 }) == 7);]"
588,This is  a function to find perfect squares between two given numbers.,"```
#include <vector>

 std::vector<int> perfect_squares(int a, int b) {
    std::vector<int> lists;
    for (int i = a; i <= b; i++) {
        int j = 1;
        while (j * j <= i) {
            if (j * j == i) {
                lists.push_back(i);
            }
            j++;
        }
    }
    return lists;
}```",589,"[assert(perfect_squares(1, 30) == std::vector<int>({ 1, 4, 9, 16, 25 }));, assert(perfect_squares(50, 100) == std::vector<int>({ 64, 81, 100 }));, assert(perfect_squares(100, 200) == std::vector<int>({ 100, 121, 144, 169, 196 }));]"
589,This is  a function to convert polar coordinates to rectangular coordinates.,"```
#include <iostream>
#include <cassert>
#include <cmath>
#include <vector>

struct Point2D {
    double x, y;
    Point2D(double x_val, double y_val) : x(x_val), y(y_val) {}
    bool operator==(const Point2D& other) const {
        return std::fabs(x - other.x) < 1e-9 && std::fabs(y - other.y) < 1e-9;
    }
};

std::vector<Point2D> polarRect(double x, double y) {
    double r = std::sqrt(x * x + y * y);
    double theta = std::atan2(y, x);
    Point2D cn(r, theta);
    Point2D cn1(2, M_PI);
    return {cn, cn1}; // Return a vector of Point2D
}```",590," [ assert(polarRect(3, 4)[0] == Point2D(5.0, 0.9272952180016122));,
    assert(polarRect(4, 7)[0] == Point2D(8.06225774829855, 1.0516502125483738));,
    assert(polarRect(15, 17)[0] == Point2D(22.67156809750927, 0.8478169733934057));]"
590,This is  a C++ function to interchange the first and last elements in a list.,"```
#include <vector>

std::vector<int> swap_List(std::vector<int>& newList) {
    int size = newList.size();
    int temp = newList[0];
    newList[0] = newList[size - 1];
    newList[size - 1] = temp;
    return newList;
}
```",591,"[assert(swap_List({ 12, 35, 9, 56, 24 }) == std::vector<int>({ 24, 35, 9, 56, 12 }));, assert(swap_List({ 1, 2, 3 }) == std::vector<int>({ 3, 2, 1 }));, assert(swap_List({ 4, 5, 6 }) == std::vector<int>({ 6, 5, 4 }));]"
591,This is  a C++ function to find sum of product of binomial co-efficients.,"```
#include <vector>
using namespace std;

int binomial_Coeff(int n, int k) {
    vector<int> C(k + 1, 0);
    C[0] = 1; // nC0 is 1
    for (int i = 1; i <= n; ++i) {
        for (int j = min(i, k); j > 0; --j) {
            C[j] = C[j] + C[j - 1];
        }
    }
    return C[k];
}

int sum_Of_product(int n) {
    return binomial_Coeff(2 * n, n - 1);
}
```",592,"[assert(sum_Of_product(3) == 15);, assert(sum_Of_product(4) == 56);, assert(sum_Of_product(1) == 1);]"
592,This is  a function to remove leading zeroes from an ip address.,"```
#include <iostream>
#include <regex>
#include <string>

std::string removezero_ip(const std::string& ip) {
    std::regex pattern(""\\.[0]*"");
    return std::regex_replace(ip, pattern, ""."");
}
```",593,"[assert(removezero_ip(""216.08.094.196"") == ""216.8.94.196"");, assert(removezero_ip(""12.01.024"") == ""12.1.24"");, assert(removezero_ip(""216.08.094.0196"") == ""216.8.94.196"");]"
593,This is  a function to find the difference of first even and odd number of a given list.,"```
#include <vector>
#include <iostream>

int diff_even_odd(const std::vector<int>& list1) {
    int first_even = -1;
    int first_odd = -1;

    for (int el : list1) {
        if (first_even == -1 && el % 2 == 0) {
            first_even = el;
        }
        if (first_odd == -1 && el % 2 != 0) {
            first_odd = el;
        }
        if (first_even != -1 && first_odd != -1) {
            break;
        }
    }

    return  first_even - first_odd; // Returning second value as a placeholder
}```",594,"[assert(diff_even_odd({ 1, 3, 5, 7, 4, 1, 6, 8 }) == 3);, assert(diff_even_odd({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 1);, assert(diff_even_odd({ 1, 5, 7, 9, 10 }) == 9);]"
594,This is  a C++ function to count minimum number of swaps required to convert one binary string to another.,"```
#include <string>

std::string min_Swaps(const std::string str1, const std::string str2) {
    int count = 0;
    for (size_t i = 0; i < str1.length(); i++) {
        if (str1[i] != str2[i]) {
            count++;
        }
    }
    if (count % 2 == 0) {
        return std::to_string(count / 2);
    }
    else {
        return ""Not Possible"";
    }
}```",595,"[assert(min_Swaps(""1101"", ""1110"") == ""1"");, assert(min_Swaps(""111"", ""000"") == ""Not Possible"");, assert(min_Swaps(""111"", ""110"") == ""Not Possible"");]"
596,This is  a function to find kth element from the given two sorted arrays.,"```
#include <vector>
using namespace std;
int find_kth(vector<int> arr1, vector<int> arr2, int m, int n, int k) {
    vector<int> sorted1(m + n);
    int i = 0, j = 0, d = 0;

    while (i < m && j < n) {
        if (arr1[i] < arr2[j]) {
            sorted1[d] = arr1[i];
            i++;
        }
        else {
            sorted1[d] = arr2[j];
            j++;
        }
        d++;
    }
    while (i < m) {
        sorted1[d] = arr1[i];
        d++;
        i++;
    }
    while (j < n) {
        sorted1[d] = arr2[j];
        d++;
        j++;
    }
    return sorted1[k - 1];
}```",597,"[assert(find_kth({ 2, 3, 6, 7, 9 }, { 1, 4, 8, 10 }, 5, 4, 5) == 6);, assert(find_kth({ 100, 112, 256, 349, 770 }, { 72, 86, 113, 119, 265, 445, 892 }, 5, 7, 7) == 256);, assert(find_kth({ 3, 4, 7, 8, 10 }, { 2, 5, 9, 11 }, 5, 4, 6) == 8);]"
597,This is  a function to check whether the given number is armstrong or not.,"```
#include <iostream>
#include <cmath>

bool armstrong_number(int number) {
    int sum = 0;
    int times = 0;
    int temp = number;

    while (temp > 0) {
        times++;
        temp /= 10;
    }

    temp = number;
    while (temp > 0) {
        int reminder = temp % 10;
        sum += pow(reminder, times);
        temp /= 10;
    }

    return number == sum;
}```",598,"[assert(armstrong_number(153) == true);, assert(armstrong_number(259) == false);, assert(armstrong_number(4458) == false);]"
598,This is  a function to find sum and average of first n natural numbers.,"```
#include <iostream>
#include <utility>

std::pair<std::pair<int, double>, double> sum_average(int number) {
    int total = 0;
    for (int value = 1; value <= number; ++value) {
        total += value;
    }
    double average = static_cast<double>(total) / number;
    return { {total, average}, average };
}```",599,"[assert(sum_average(10).first == std::make_pair(55, 5.5));, assert(sum_average(15).first == std::make_pair(120, 8.0));, assert(sum_average(20).first == std::make_pair(210, 10.5));]"
600,This is  a function to find the longest chain which can be formed from the given set of pairs.,"```
#include <vector>
#include <algorithm>

class Pair {
public:
    int a, b;
    Pair(int a, int b) : a(a), b(b) {}
};

std::pair<int, int> max_chain_length(std::vector<Pair> arr, int n) {
    int max = 0;
    std::vector<int> mcl(n, 1);
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[i].a > arr[j].b && mcl[i] < mcl[j] + 1) {
                mcl[i] = mcl[j] + 1;
            }
        }
    }
    for (int i = 0; i < n; i++) {
        if (max < mcl[i]) {
            max = mcl[i];
        }
    }
    return { max, 0 }; // The second value is a placeholder, adjust as necessary
}```",601,"[assert(max_chain_length({ Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60) }, 4).first == 3);, assert(max_chain_length({ Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8) }, 4).first == 4);, assert(max_chain_length({ Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54) }, 5).first == 5);]"
602,This is  a function to get a lucid number smaller than or equal to n.,"```
#include <iostream>
#include <vector>

std::vector<int > get_ludic(int n) {
    std::vector<int> ludics;
    for (int i = 1; i <= n; ++i) {
        ludics.push_back(i);
    }
    int index = 1;
    while (index != ludics.size()) {
        int first_ludic = ludics[index];
        int remove_index = index + first_ludic;
        while (remove_index < ludics.size()) {
            ludics.erase(ludics.begin() + remove_index);
            remove_index += first_ludic - 1;
        }
        index++;
    }
    return  ludics;
}```",603,"[assert((get_ludic(10) == std::vector<int>{1, 2, 3, 5, 7}));, assert((get_ludic(25) == std::vector<int>{1, 2, 3, 5, 7, 11, 13, 17, 23, 25}));, assert((get_ludic(45) == std::vector<int>{1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43}));]"
604,This is  a function to check if the given integer is a prime number.,"```
bool prime_num(int num) {
    if (num >= 1) {
        for (int i = 2; i <= num / 2; i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
```",605,"[assert(prime_num(13) == true);, assert(prime_num(7) == true);, assert(prime_num(-1010) == false);]"
605,This is  a function to convert degrees to radians.,"```
#include <cmath>

double radian_degree(double degree) {
    double radian = degree * (M_PI / 180);
    return radian ;
}
```",606,"[assert(fabs(radian_degree(90) - 1.5707963267948966) < 1e-10);, assert(fabs(radian_degree(60) - 1.0471975511965976) < 1e-10);, assert(fabs(radian_degree(120) - 2.0943951023931953) < 1e-10);]"
606,This is  a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.,"```
#include <cassert>
#include <string>
#include <tuple>

std::tuple<std::string, int, int> find_literals(const std::string& sentence, const std::string& word) {
    int start = sentence.find(word);
    if (start != std::string::npos) {
        return std::make_tuple(word, start, start + word.length());
    }
    return std::make_tuple("""", -1, -1); // or other handling as needed
}```",607,"[assert(find_literals(""The quick brown fox jumps over the lazy dog."", ""fox"") == std::make_tuple(""fox"", 16, 19));, assert(find_literals(""Its been a very crazy procedure right"", ""crazy"") == std::make_tuple(""crazy"", 16, 21));, assert(find_literals(""Hardest choices required strongest will"", ""will"") == std::make_tuple(""will"", 35, 39));]"
607,This is  a C++ function to find nth bell number.,"```
#include <vector>

int bell_Number(int n) {
    std::vector<std::vector<int>> bell(n + 1, std::vector<int>(n + 1, 0));
    bell[0][0] = 1;
    for (int i = 1; i <= n; i++) {
        bell[i][0] = bell[i - 1][i - 1];
        for (int j = 1; j <= i; j++) {
            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];
        }
    }
    return  bell[n][0]; 
}
```",608,"[assert(bell_Number(2) == 2);, assert(bell_Number(3) == 5);, assert(bell_Number(4) == 15);]"
609,This is  a C++ function to remove the kth element from a given list.,"```
#include <vector>

std::vector<int> remove_kth_element(const std::vector<int>& list1, int L) {
    std::vector<int> result;
    result.insert(result.end(), list1.begin(), list1.begin() + L - 1);
    result.insert(result.end(), list1.begin() + L, list1.end());
    return result;
}
```",610,"[assert((remove_kth_element({ 1, 1, 2, 3, 4, 4, 5, 1 }, 3) == std::vector<int>{1, 1, 3, 4, 4, 5, 1}));, assert((remove_kth_element({ 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }, 4) == std::vector<int>{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}));, assert((remove_kth_element({ 10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10 }, 5) == std::vector<int>{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10}));]"
610,This is  a function to find the maximum of nth column from the given tuple list.,"```
#include <vector>
#include <algorithm>

int max_of_nth(const std::vector<std::vector<int>>& test_list, int N) {
    std::vector<int> values;
    for (const auto& sub : test_list) {
        values.push_back(sub[N]);
    }
    int res = *std::max_element(values.begin(), values.end());
    return res;
}```",611,"[assert(max_of_nth({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2) == 19);, assert(max_of_nth({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1) == 10);, assert(max_of_nth({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1) == 11);]"
612,This is  a function to find the maximum value in record list as tuple attribute in the given tuple list.,"```
#include <vector>
#include <algorithm>
#include <utility>
#include <string>


std::vector<std::pair<std::string, int>> maximum_value(const std::vector<std::pair<std::string, std::vector<int>>>& test_list) {
    std::vector<std::pair<std::string, int>> res;
    for (const auto& item : test_list) {
        const std::string& key = item.first;
        const std::vector<int>& lst = item.second;
        if (!lst.empty()) { // Ensure the list is not empty to avoid errors with std::max_element
            int max_value = *std::max_element(lst.begin(), lst.end());
            res.emplace_back(key, max_value);
        }
    }
    return res;
}}```",613,"[assert((maximum_value({ {""key1"", {3, 4, 5}}, {""key2"", {1, 4, 2}}, {""key3"", {9, 3}} }) == std::vector<std::pair<std::string, int>>{ {""key1"", 5}, { ""key2"", 4 }, { ""key3"", 9 } }));, assert((maximum_value({ {""key1"", {4, 5, 6}}, {""key2"", {2, 5, 3}}, {""key3"", {10, 4}} }) == std::vector<std::pair<std::string, int>>{ {""key1"", 6}, { ""key2"", 5 }, { ""key3"", 10 } }));, assert((maximum_value({ {""key1"", {5, 6, 7}}, {""key2"", {3, 6, 4}}, {""key3"", {11, 5}} }) == std::vector<std::pair<std::string, int>>{ {""key1"", 7}, { ""key2"", 6 }, { ""key3"", 11 } }));]"
613,This is  a function to find the cumulative sum of all the values that are present in the given tuple list.,"```
#include <vector>
#include <numeric>

int cumulative_sum(const std::vector<std::vector<int>>& test_list) {
    int res = 0;
    for (const auto& sublist : test_list) {
        res += std::accumulate(sublist.begin(), sublist.end(), 0);
    }
    return res;
}```",614,"[assert(cumulative_sum({ {1, 3, 0}, {5, 6, 7}, {2, 6, 0} }) == 30);, assert(cumulative_sum({ {2, 4, 0}, {6, 7, 8}, {3, 7, 0} }) == 37);, assert(cumulative_sum({ {3, 5, 0}, {7, 8, 9}, {4, 8, 0} }) == 44);]"
614,This is  a function to find average value of the numbers in a given tuple of tuples.,"```
#include <vector>

#include <numeric>
#include <tuple>

std::vector<double> average_tuple(const std::vector<std::vector<double>>& nums) {
    std::vector<double> result;
    size_t n = nums.size();
    if (n == 0) return result;

    size_t m = nums[0].size();
    result.resize(m, 0.0);

    for (const auto& vec : nums) {
        for (size_t j = 0; j < m; ++j) {
            result[j] += vec[j];
        }
    }

    for (size_t j = 0; j < m; ++j) {
        result[j] /= n;
    }

    return result;
}```",615,"[assert((average_tuple({ {10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4} }) == std::vector<double>{30.5, 34.25, 27.0, 23.25}));, assert((average_tuple({ {1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3} }) == std::vector<double>{25.5, -18.0, 3.75}));, assert((average_tuple({ {100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40} }) == std::vector<double>{305.0, 342.5, 270.0, 232.5}));]"
615,This is  a function to perfom the modulo of tuple elements in the given two tuples.,"```
#include <tuple>
#include <vector>
#include <stdexcept>


std::tuple<std::vector<int>> tuple_modulo(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    if (test_tup1.size() != test_tup2.size()) {
        throw std::invalid_argument(""Vectors must have the same size"");
    }

    std::vector<int> res;
    for (size_t i = 0; i < test_tup1.size(); ++i) {
        res.push_back(test_tup1[i] % test_tup2[i]);
    }
    return std::make_tuple(res);
}```",616,"[assert((tuple_modulo({ 10, 4, 5, 6 }, { 5, 6, 7, 5 }) == std::make_tuple(std::vector<int>{0, 4, 5, 1})));, assert((tuple_modulo({ 11, 5, 6, 7 }, { 6, 7, 8, 6 }) == std::make_tuple(std::vector<int>{5, 5, 6, 1})));, assert((tuple_modulo({ 12, 6, 7, 8 }, { 7, 8, 9, 7 }) == std::make_tuple(std::vector<int>{5, 6, 7, 1})));]"
616,"This is  a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","```
#include <algorithm>
#include <cmath>
using namespace std;

int min_Jumps(int a, int b, int d) {
    // Ensure a is the smaller number and b is the larger number
    a = min(a, b);
    b = max(a, b);

    if (d == 0) {
        return 0; // No jumps needed if distance is zero
    }
    if (d <= a) {
        return 1; // Single jump suffices if distance is <= the smaller step
    }

    // Calculate the minimum number of jumps
    return (d + b - 1) / b; // Ceiling of d / b using integer math
}```",617,"[assert(min_Jumps(3, 4, 11) == 3);, assert(min_Jumps(3, 4, 0) == 0);, assert(min_Jumps(11, 14, 11) == 1);]"
617,This is  a function to divide two lists using map and lambda function.,"```
#include <vector>
#include <functional>

std::vector<double> div_list(const std::vector<double>&nums1, const std::vector<double> nums2) {
    std::vector<double> result;
    for (size_t i = 0; i < nums1.size(); ++i) {
        result.push_back(nums1[i] / nums2[i]);
    }
    return result;
}```",618,"[assert((div_list({ 4,5,6 }, { 1, 2, 3 }) == std::vector<double>{4.0, 2.5, 2.0}));, assert((div_list({ 3,2 }, { 1,4 }) == std::vector<double>{3.0, 0.5}));, assert((div_list({ 90,120 }, { 50,70 }) == std::vector<double>{1.8, 1.7142857142857142}));]"
618,This is  a function to move all the numbers in it to the given string.,"```
#include <string>
#include <utility>

std::string move_num(const std::string test_str) {
    std::string res;
    std::string dig;
    for (char ele : test_str) {
        if (isdigit(ele)) {
            dig += ele;
        }
        else {
            res += ele;
        }
    }
    res += dig; // Append digits at the end of the non-digit characters
    return res;
}```",619,"[assert(move_num(""I1love143you55three3000thousand"") == ""Iloveyouthreethousand1143553000"");, assert(move_num(""Avengers124Assemble"") == ""AvengersAssemble124"");, assert(move_num(""Its11our12path13to14see15things16do17things"") == ""Itsourpathtoseethingsdothings11121314151617"");]"
619,This is  a function to find the largest subset where each pair is divisible.,"```
#include <vector>
#include <algorithm>
using namespace std;

int largest_subset(vector<int> a, int n) {
    vector<int> dp(n, 0);
    dp[n - 1] = 1;
    for (int i = n - 2; i >= 0; i--) {
        int mxm = 0;
        for (int j = i + 1; j < n; j++) {
            if (a[j] % a[i] == 0 || a[i] % a[j] == 0) {
                mxm = max(mxm, dp[j]);
            }
        }
        dp[i] = 1 + mxm;
    }
    return  max(dp[0], 1); // Max subset size, second return value is not specified in original C++
}```",620,"[assert(largest_subset({ 1, 3, 6, 13, 17, 18 }, 6) == 4);, assert(largest_subset({ 10, 5, 3, 15, 20 }, 5) == 3);, assert(largest_subset({ 18, 1, 3, 6, 13, 17 }, 6) == 4);]"
620,This is  a function to increment the numeric values in the given strings by k.,"```
#include <vector>
#include <string>
#include <algorithm>

std::vector<std::string> increment_numerics(const std::vector<std::string> test_list, int K) {
    std::vector<std::string> res;
    for (const auto& ele : test_list) {
        if (std::all_of(ele.begin(), ele.end(), ::isdigit)) {
            int num = std::stoi(ele) + K;
            res.push_back(std::to_string(num));
        }
        else {
            res.push_back(ele);
        }
    }
    return res;
}```",621,"[assert((increment_numerics({ ""MSM"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4"" }, 6) == std::vector<std::string>{""MSM"", ""240"", ""is"", ""104"", ""129"", ""best"", ""10""}));, assert((increment_numerics({ ""Dart"", ""356"", ""is"", ""88"", ""169"", ""Super"", ""6"" }, 12) == std::vector<std::string>{""Dart"", ""368"", ""is"", ""100"", ""181"", ""Super"", ""18""}));, assert((increment_numerics({ ""Flutter"", ""451"", ""is"", ""44"", ""96"", ""Magnificent"", ""12"" }, 33) == std::vector<std::string>{""Flutter"", ""484"", ""is"", ""77"", ""129"", ""Magnificent"", ""45""}));]"
621,This is  a function to find the median of two sorted arrays of same size.,"```
#include <iostream>
#include <vector>

double get_median(const std::vector<int>& arr1, const std::vector<int>& arr2, int n) {
    int i = 0;
    int j = 0;
    int m1 = -1;
    int m2 = -1;
    int count = 0;

    while (count < n + 1) {
        count++;
        if (i == n) {
            m1 = m2;
            m2 = arr2[j];
            break;
        }
        else if (j == n) {
            m1 = m2;
            m2 = arr1[i];
            break;
        }
        if (arr1[i] <= arr2[j]) {
            m1 = m2;
            m2 = arr1[i];
            i++;
        }
        else {
            m1 = m2;
            m2 = arr2[j];
            j++;
        }
    }
    return (m1 + m2) / 2.0; // Return the first value and a placeholder for the second
}```",622,"[assert(get_median({ 1, 12, 15, 26, 38 }, { 2, 13, 17, 30, 45 }, 5) == 16.0);, assert(get_median({ 2, 4, 8, 9 }, { 7, 13, 19, 28 }, 4) == 8.5);, assert(get_median({ 3, 6, 14, 23, 36, 42 }, { 2, 18, 27, 39, 49, 55 }, 6) == 25.0);]"
622,This is  a function to find the n-th power of individual elements in a list using lambda function.,"```
#include <vector>
#include <cmath>

std::vector<int> nth_nums(const std::vector<int> nums, int n) {
    std::vector<int> nth_nums;
    for (int x : nums) {
        nth_nums.push_back(pow(x, n));
    }
    return  nth_nums ;
}```",623,"[assert(nth_nums({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2) == std::vector<int>({ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 }));, assert(nth_nums({ 10, 20, 30 }, 3) == std::vector<int>({ 1000, 8000, 27000 }));, assert(nth_nums({ 12, 15 }, 5) == std::vector<int>({ 248832, 759375 }));]"
623,This is  a C++ function to convert the given string to upper case.,"```

#include <algorithm>
#include<string>

std::string is_upper(const std::string& str) {
    std::string result = str;
    std::transform(result.begin(), result.end(), result.begin(), ::toupper);
    return result;
}```",624,"[assert(is_upper(""person"") == ""PERSON"");, assert(is_upper(""final"") == ""FINAL"");, assert(is_upper(""Valid"") == ""VALID"");]"
624,This is  a C++ function to interchange first and last elements in a given list.,"```
#include <vector>

std::vector<int> swap_List(std::vector<int> newList) {
    int size = newList.size();
    int temp = newList[0];
    newList[0] = newList[size - 1];
    newList[size - 1] = temp;
    return newList;
}```",625,"[assert((swap_List({ 1, 2, 3 }) == std::vector<int>{3, 2, 1}));, assert((swap_List({ 1, 2, 3, 4, 4 }) == std::vector<int>{4, 2, 3, 4, 1}));, assert((swap_List({ 4, 5, 6 }) == std::vector<int>{6, 5, 4}));]"
625,This is  a C++ function to find the largest triangle that can be inscribed in the semicircle.,"```
double triangle_area(double r) {
    if (r < 0) {
        return -1;
    }
    return r * r;
}
```",626,"[assert(triangle_area(0) == 0);, assert(triangle_area(-1) == -1);, assert(triangle_area(2) == 4);]"
626,This is  a C++ function to find the smallest missing number from the given array.,"```
#include <vector>

int find_First_Missing(std::vector<int> array, int start, int end) {
    if (start > end) {
        return end + 1;
    }
    if (start != array[start]) {
        return start;
    }
    int mid = (start + end) / 2;
    if (array[mid] == mid) {
        return find_First_Missing(array, mid + 1, end);
    }
    return find_First_Missing(array, start, mid);
}```",627,"[assert(find_First_Missing({ 0, 1, 2, 3 }, 0, 3) == 4);, assert(find_First_Missing({ 0, 1, 2, 6, 9 }, 0, 4) == 3);, assert(find_First_Missing({ 2, 3, 5, 8, 9 }, 0, 4) == 0);]"
627,This is  a function to replace all spaces in the given string with character * list item * list item * list item * list item %20.,"```
#include <iostream>
#include <string>
#include <algorithm>

const int MAX = 1000;

std::string replace_spaces(std::string str) {
    // Trim the string (left and right)
    str.erase(0, str.find_first_not_of("" \n\r\t"")); // Trim left
    str.erase(str.find_last_not_of("" \n\r\t"") + 1); // Trim right

    int space_count = std::count(str.begin(), str.end(),  );
    int original_length = str.length();
    int new_length = original_length + space_count * 2;

    if (new_length > MAX) {
        return ""-1""; // Exceeded max length
    }

    // Resize string to accommodate %20 replacements
    str.resize(new_length);

    int index = new_length - 1;

    // Replace spaces from the end
    for (int i = original_length - 1; i >= 0; --i) {
        if (str[i] ==  ) {
            str[index] = 0;
            str[index - 1] = 2;
            str[index - 2] = %;
            index -= 3;
        }
        else {
            str[index] = str[i];
            --index;
        }
    }

    return str;
}```",628,"[assert(replace_spaces(""My Name is Dawood"") == ""My%20Name%20is%20Dawood"");, assert(replace_spaces(""I am a Programmer"") == ""I%20am%20a%20Programmer"");, assert(replace_spaces(""I love Coding"") == ""I%20love%20Coding"");]"
628,This is  a C++ function to find even numbers from a mixed list.,"```
#include <vector>
std::vector<int> Split(const std::vector<int>& list) {
    std::vector<int> ev_li;
    for (int i : list) {
        if (i % 2 == 0) {
            ev_li.push_back(i);
        }
    }
    return ev_li;
}```",629,"[assert((Split({ 1,2,3,4,5 }) == std::vector<int>{2, 4}));, assert((Split({ 4,5,6,7,8,0,1 }) == std::vector<int>{4, 6, 8, 0}));, assert((Split({ 8,12,15,19 }) == std::vector<int>{8, 12}));]"
629,This is  a function to extract all the adjacent coordinates of the given coordinate tuple.,"```
#include <vector>

std::vector<std::vector<int>> get_coordinates(const std::vector<int>& ele) {
    std::vector<std::vector<int>> result = { {} };

    for (int value : ele) {
        std::vector<std::vector<int>> temp;
        for (const auto& sub : result) {
            for (int j = value - 1; j <= value + 1; ++j) {
                auto new_sub = sub;
                new_sub.push_back(j);
                temp.push_back(new_sub);
            }
        }
        result = std::move(temp);
    }

    return result;
}```",630,"[assert((get_coordinates({ 3, 4 }) == std::vector<std::vector<int>>{ {2, 3}, { 2, 4 }, { 2, 5 }, { 3, 3 }, { 3, 4 }, { 3, 5 }, { 4, 3 }, { 4, 4 }, { 4, 5 } }));, assert((get_coordinates({ 4, 5 }) == std::vector<std::vector<int>>{ {3, 4}, { 3, 5 }, { 3, 6 }, { 4, 4 }, { 4, 5 }, { 4, 6 }, { 5, 4 }, { 5, 5 }, { 5, 6 } }));, assert((get_coordinates({ 5, 6 }) == std::vector<std::vector<int>>{ {4, 5}, { 4, 6 }, { 4, 7 }, { 5, 5 }, { 5, 6 }, { 5, 7 }, { 6, 5 }, { 6, 6 }, { 6, 7 } }));]"
630,This is  a function to replace whitespaces with an underscore and vice versa in a given string by using regex.,"```
#include <iostream>
#include <string>
#include <algorithm>

std::string replace_spaces(std::string text) {
    std::replace(text.begin(), text.end(),  , _);
    return text;
}
```",631,"[assert(replace_spaces(""Jumanji The Jungle"") == ""Jumanji_The_Jungle"");, assert(replace_spaces(""The Avengers"") == ""The_Avengers"");, assert(replace_spaces(""Fast and Furious"") == ""Fast_and_Furious"");]"
631,This is  a C++ function to move all zeroes to the end of the given list.,"```
#include <vector>
#include <algorithm>

std::vector<int> move_zero(const std::vector<int>& num_list) {
    std::vector<int> result;
    int zero_count = 0;

    // Separate non-zero elements and count zeros
    for (int num : num_list) {
        if (num != 0) {
            result.push_back(num);
        }
        else {
            ++zero_count;
        }
    }

    // Append the zeros to the end
    result.insert(result.end(), zero_count, 0);
    return result;
}```",632,"[assert(move_zero({ 1, 0, 2, 0, 3, 4 }) == std::vector<int>({ 1, 2, 3, 4, 0, 0 }));, assert(move_zero({ 2, 3, 2, 0, 0, 4, 0, 5, 0 }) == std::vector<int>({ 2, 3, 2, 4, 5, 0, 0, 0, 0 }));, assert(move_zero({ 0, 1, 0, 1, 1 }) == std::vector<int>({ 1, 1, 1, 0, 0 }));]"
632,This is  a C++ function to find the sum of xor of all pairs of numbers in the given array.,"```
#include <iostream>
#include <vector>

int pair_OR_Sum(std::vector<int> arr, int n) {
    int ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            ans = ans + (arr[i] ^ arr[j]);
        }
    }
    return ans;
}```",633,"[assert(pair_OR_Sum({ 5, 9, 7, 6 }, 4) == 47);, assert(pair_OR_Sum({ 7, 3, 5 }, 3) == 12);, assert(pair_OR_Sum({ 7, 3 }, 2) == 4);]"
633,This is  a C++ function to find the sum of fourth power of first n even natural numbers.,"```
#include <iostream>
using namespace std;

long long even_Power_Sum(int n) {
    long long sum = 0;
    for (int i = 1; i <= n; ++i) {
        int j = 2 * i;
        sum += (j * j * j * j);
    }
    return sum;
}
```",634,"[assert(even_Power_Sum(2) == 272);, assert(even_Power_Sum(3) == 1568);, assert(even_Power_Sum(4) == 5664);]"
634,This is  a function to push all values into a heap and then pop off the smallest values one at a time.,"```
#include <vector>
#include <queue>

std::vector<int> heap_sort(const std::vector<int>& iterable) {
    std::priority_queue<int, std::vector<int>, std::greater<int>> h;
    for (int value : iterable) {
        h.push(value);
    }
    std::vector<int> sorted;
    while (!h.empty()) {
        sorted.push_back(h.top());
        h.pop();
    }
    return sorted;
}
```",635,"[assert(heap_sort({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}) == std::vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));, assert(heap_sort({25, 35, 22, 85, 14, 65, 75, 25, 58}) == std::vector<int>({14, 22, 25, 25, 35, 58, 65, 75, 85}));, assert(heap_sort({7, 1, 9, 5}) == std::vector<int>({1, 5, 7, 9}));]"
635,This is  a C++ function to check if roots of a quadratic equation are reciprocal of each other or not.,"```
#include <string>

std::string Check_Solution(int a, int b, int c) {
    if (a == c) {
        return ""Yes"";
    } else {
        return ""No"";
    }
}
```",636,"[assert(Check_Solution(2,0,2) == ""Yes"");, assert(Check_Solution(2,-5,2) == ""Yes"");, assert(Check_Solution(1,2,3) == ""No"");]"
636,This is  a function to check whether the given amount has no profit and no loss,"```
bool noprofit_noloss(double actual_cost, double sale_amount) { 
    if (sale_amount == actual_cost) {
        return true;
    } else {
        return false;
    }
}
```",637,"[assert(noprofit_noloss(1500, 1200) == false);, assert(noprofit_noloss(100, 100) == true);, assert(noprofit_noloss(2000, 5000) == false);]"
637,This is  a function to calculate wind chill index.,"```
#include <cmath>

int wind_chill(double v, double t) {
    double windchill = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16);
    return static_cast<int>(round(windchill));
}```",638,"[assert(wind_chill(120, 35) == 40);, assert(wind_chill(40, 70) == 86);, assert(wind_chill(10, 100) == 116);]"
639,This is  a function to remove the parenthesis area in a string.,"```
#include <iostream>
#include <vector>
#include <string>
#include <regex>

std::string remove_parenthesis(const std::vector<std::string>& items) {
    std::regex pattern("" ?\\([^)]+\\)""); // Regex pattern to match parentheses and the text inside them
    std::string result;

    for (const auto& item : items) {
        // Replace parentheses and the text inside them with an empty string
        result += std::regex_replace(item, pattern, """");
    }

    return result;
}```",640,"[assert(remove_parenthesis({ ""C++ (chrome)"" }) == ""C++"");, assert(remove_parenthesis({ ""string(.abc)"" }) == ""string"");, assert(remove_parenthesis({ ""alpha(num)"" }) == ""alpha"");]"
641,This is  a function to remove similar rows from the given tuple matrix.,"```
#include <iostream>
#include <set>
#include <vector>
#include <cassert>
#include <algorithm>

std::set<std::set<std::string>> removeSimilarRow(const std::vector<std::set<std::string>>& testList) {
    std::set<std::set<std::string>> res;

    for (const auto& sub : testList) {
        std::set<std::string> sortedSub(sub.begin(), sub.end());  // Create a sorted set from the current set
        res.insert(sortedSub);  // Insert the sorted set into the result
    }

    return res;
}```",642,"[assert(removeSimilarRow({ {""4"", ""5"", ""3"", ""2""}, {""2"", ""2"", ""4"", ""6""}, {""3"", ""2"", ""4"", ""5""} }) == std::set<std::set<std::string>>({ {""2"", ""4"", ""6""}, {""2"", ""3"", ""4"", ""5""} }));, assert(removeSimilarRow({ {""5"", ""6"", ""4"", ""3""}, {""3"", ""3"", ""5"", ""7""}, {""4"", ""3"", ""5"", ""6""} }) == std::set<std::set<std::string>>({ {""3"", ""5"", ""7""}, {""3"", ""4"", ""5"", ""6""} }));, assert(removeSimilarRow({ {""6"", ""7"", ""5"", ""4""}, {""4"", ""4"", ""6"", ""8""}, {""5"", ""4"", ""6"", ""7""} }) == std::set<std::set<std::string>>({ {""4"", ""6"", ""8""}, {""4"", ""5"", ""6"", ""7""} }));]"
642,"This is  a function that matches a word containing z, not at the start or end of the word.","```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_wordz_middle(const std::string& text) {
    std::regex patterns(""\\Bz\\B"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",643,"[assert(text_match_wordz_middle(""C++zabc."") == ""Found a match!"");, assert(text_match_wordz_middle(""xyzabc."") == ""Found a match!"");, assert(text_match_wordz_middle(""  lang  ."") == ""Not matched!"");]"
643,This is  a C++ function to reverse an array upto a given position.,"```
#include <vector>
#include <algorithm>

std::vector<int> reverse_Array_Upto_K(std::vector<int> input, int k) {
    std::vector<int> reversed(input.begin(), input.begin() + k);
    std::reverse(reversed.begin(), reversed.end());
    std::vector<int> remaining(input.begin() + k, input.end());
    reversed.insert(reversed.end(), remaining.begin(), remaining.end());
    return reversed;
}```",644,"[assert((reverse_Array_Upto_K({ 1, 2, 3, 4, 5, 6 }, 4) == std::vector<int>{4, 3, 2, 1, 5, 6}));, assert((reverse_Array_Upto_K({ 4, 5, 6, 7 }, 2) == std::vector<int>{5, 4, 6, 7}));, assert((reverse_Array_Upto_K({ 9, 8, 7, 6, 5 }, 3) == std::vector<int>{7, 8, 9, 6, 5}));]"
645,This is  a C++ function to count number of cubes of size k in a cube of size n.,"```
#include <cmath>

long long No_of_cubes(long long N, long long K) {
    long long No = 0;
    No = (N - K + 1);
    No = pow(No, 3);
    return No;
}```",646,"[assert(No_of_cubes(2, 1) == 8);, assert(No_of_cubes(5, 2) == 64);, assert(No_of_cubes(1, 1) == 1);]"
646,This is  a function to split a string at uppercase letters.,"```
#include <iostream>
#include <regex>
#include <vector>
#include <string>

std::vector<std::string> split_upperstring(const std::string text) {
    std::regex re(""[A-Z][^A-Z]*"");
    std::sregex_iterator it(text.begin(), text.end(), re);
    std::sregex_iterator end;
    std::vector<std::string> result;

    while (it != end) {
        result.push_back(it->str());
        ++it;
    }
    return result;
}```",647,"[assert((split_upperstring(""C++ProgramLanguage"") == std::vector<std::string>{""C++"", ""Program"", ""Language""}));, assert((split_upperstring(""C++Program"") == std::vector<std::string>{""C++"", ""Program""}));, assert((split_upperstring(""ProgrammingLanguage"") == std::vector<std::string>{""Programming"", ""Language""}));]"
647,This is  a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.,"```
#include <vector>
#include <algorithm>

std::vector<int> exchange_elements(const std::vector<int> lst) {
    std::vector<int> result;
    for (size_t i = 0; i < lst.size(); i += 2) {
        if (i + 1 < lst.size()) {
            result.push_back(lst[i + 1]); // Add second element first
        }
        result.push_back(lst[i]); // Add first element second
    }
    return result;
}```",648,"[assert((exchange_elements({ 0, 1, 2, 3, 4, 5 }) == std::vector<int>{1, 0, 3, 2, 5, 4}));, assert((exchange_elements({ 5, 6, 7, 8, 9, 10 }) == std::vector<int>{6, 5, 8, 7, 10, 9}));, assert((exchange_elements({ 25, 35, 45, 55, 75, 95 }) == std::vector<int>{35, 25, 55, 45, 95, 75}));]"
649,This is  a C++ function to check whether the given two arrays are equal or not.,"```
#include <vector>
#include <algorithm>

bool are_Equal(std::vector<int> arr1, std::vector<int> arr2, int n, int m) {
    if (n != m) {
        return false;
    }
    std::sort(arr1.begin(), arr1.end());
    std::sort(arr2.begin(), arr2.end());
    for (int i = 0; i < n; i++) {
        if (arr1[i] != arr2[i]) {
            return false;
        }
    }
    return true;
}```",650,"[assert(are_Equal({1,2,3}, {3,2,1}, 3, 3) == true);, assert(are_Equal({1,1,1}, {2,2,2}, 3, 3) == false);, assert(are_Equal({8,9}, {4,5,6}, 2, 3) == false);]"
650,This is  a function to check if one tuple is a subset of another tuple.,"```
#include <iostream>
#include <unordered_set>
#include <vector>
#include <cassert>

bool checkSubset(const std::vector<int>& testTup1, const std::vector<int>& testTup2) {
    std::unordered_set<int> set1;
    
    // Add elements of testTup1 to set1
    for (int num : testTup1) {
        set1.insert(num);
    }
    
    // Check if each element of testTup2 is in set1
    for (int num : testTup2) {
        if (set1.find(num) == set1.end()) {
            return false;
        }
    }
    
    return true;
}```",651," [
    assert(checkSubset(std::vector<int>{10, 4, 5, 6}, std::vector<int>{5, 10}) == true);,

    
    assert(checkSubset(std::vector<int>{1, 2, 3, 4}, std::vector<int>{5, 6}) == false);,

  
    assert(checkSubset(std::vector<int>{7, 8, 9, 10}, std::vector<int>{10, 8}) == true);]"
651,This is  a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <sstream>

std::string matrixToList(const std::vector<std::vector<int>>& testList) {
    std::vector<int> temp;

    // Flatten the matrix into a single list
    for (const auto& sub : testList) {
        temp.insert(temp.end(), sub.begin(), sub.end());
    }

    // Create the final result with each element in its own sublist
    std::vector<std::vector<int>> res;
    for (const auto& val : temp) {
        res.push_back({ val });  // Add each element as a single-item sublist
    }

    // Convert the result to a string representation
    std::ostringstream oss;
    oss << ""["";
    for (size_t i = 0; i < res.size(); ++i) {
        oss << ""["" << res[i][0] << ""]"";
        if (i != res.size() - 1) oss << "", "";
    }
    oss << ""]"";

    return oss.str();
}```",652,"[assert(matrixToList({ {4, 5}, {7, 8}, {10, 13}, {18, 17}, {0, 4}, {10, 1} }) == ""[[4], [5], [7], [8], [10], [13], [18], [17], [0], [4], [10], [1]]"");, assert(matrixToList({ {5, 6}, {8, 9}, {11, 14}, {19, 18}, {1, 5}, {11, 2} }) == ""[[5], [6], [8], [9], [11], [14], [19], [18], [1], [5], [11], [2]]"");, assert(matrixToList({ {6, 7}, {9, 10}, {12, 15}, {20, 21}, {23, 7}, {15, 8} }) == ""[[6], [7], [9], [10], [12], [15], [20], [21], [23], [7], [15], [8]]"");]"
652,This is  a function to group a sequence of key-value pairs into a dictionary of lists using collections module.,"```
#include <iostream>
#include <vector>
#include <map>

std::map<std::string, std::vector<int>> grouping_dictionary(const std::vector<std::pair<std::string, int>>& l) {
    std::map<std::string, std::vector<int>> d;
    for (const auto& p : l) {
        d[p.first].push_back(p.second);
    }
    return d;
}```",653,"[assert(grouping_dictionary({ {""yellow"", 1}, {""blue"", 2}, {""yellow"", 3}, {""blue"", 4}, {""red"", 1} }) == (std::map<std::string, std::vector<int>>{ {""yellow"", { 1, 3 }}, { ""blue"", {2, 4} }, { ""red"", {1} }}));, assert(grouping_dictionary({ {""yellow"", 10}, {""blue"", 20}, {""yellow"", 30}, {""blue"", 40}, {""red"", 10} }) == (std::map<std::string, std::vector<int>>{ {""yellow"", { 10, 30 }}, { ""blue"", {20, 40} }, { ""red"", {10} }}));, assert(grouping_dictionary({ {""yellow"", 15}, {""blue"", 25}, {""yellow"", 35}, {""blue"", 45}, {""red"", 15} }) == (std::map<std::string, std::vector<int>>{ {""yellow"", { 15, 35 }}, { ""blue"", {25, 45} }, { ""red"", {15} }}));]"
653,This is  a function to find the perimeter of a rectangle.,"```
#include <utility>

int rectangle_perimeter(int l, int b) {
    int perimeter = 2 * (l + b);
    return perimeter; // Assuming you want to return the perimeter twice as in the original function
}```",654,"[assert(rectangle_perimeter(10, 20) == 60);, assert(rectangle_perimeter(10, 5) == 30);, assert(rectangle_perimeter(4, 2) == 12);]"
654,This is  a C++ function to find the sum of fifth power of n natural numbers.,"```
#include <iostream>
using namespace std;

int fifth_Power_Sum(int n) {
    int sm = 0;
    for (int i = 1; i <= n; ++i) {
        sm += (i * i * i * i * i);
    }
    return sm; // Returning 0 as a placeholder for the second value
}```",655,"[assert(fifth_Power_Sum(2) == 33);, assert(fifth_Power_Sum(4) == 1300);, assert(fifth_Power_Sum(3) == 276);]"
655,This is  a C++ function to find the minimum sum of absolute differences of two arrays.,"```
#include <vector>
#include <algorithm>
#include <cmath>

int find_Min_Sum(std::vector<int> a, std::vector<int> b, int n) {
    std::sort(a.begin(), a.end());
    std::sort(b.begin(), b.end());
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += std::abs(a[i] - b[i]);
    }
    return sum; // assuming the second value is a placeholder
}```",656,"[assert(find_Min_Sum({3, 2, 1}, {2, 1, 3}, 3) == 0);, assert(find_Min_Sum({1, 2, 3}, {4, 5, 6}, 3) == 9);, assert(find_Min_Sum({4, 1, 8, 7}, {2, 3, 6, 5}, 4) == 6);]"
656,This is  a C++ function to find the first digit in factorial of a given number.,"```
#include <iostream>
#include <cmath>

int first_Digit(int n) {
    long long fact = 1;
    for (int i = 2; i <= n; i++) {
        fact = fact * i;
        while (fact % 10 == 0) {
            fact = fact / 10;
        }
    }
    while (fact >= 10) {
        fact = fact / 10;
    }
    return static_cast<int>(fact);
}```",657,"[assert(first_Digit(5) == 1);, assert(first_Digit(10) == 3);, assert(first_Digit(7) == 5);]"
657,This is  a function to find the item with maximum occurrences in a given list.,"```
#include <iostream>
#include <vector>
#include <unordered_map>

int max_occurrences(const std::vector<int>& list1) {
    int max_val = 0;
    int result = list1[0];
    std::unordered_map<int, int> count;

    for (int i : list1) {
        count[i]++;
    }

    for (const auto& pair : count) {
        if (pair.second > max_val) {
            max_val = pair.second;
            result = pair.first;
        }
    }

    return result;
}```",658,"[assert(max_occurrences({ 2,3,8,4,7,9,8,2,6,5,1,6,1,2 }) == 2);, assert(max_occurrences({ 1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11 }) == 1);, assert(max_occurrences({ 1, 2, 3, 2, 4, 5, 1, 1, 1 }) == 1);]"
659,This is  a C++ function to choose points from two ranges such that no point lies in both the ranges.,"```
#include <tuple>
#include <algorithm>

std::pair<int, int> find_Points(int l1, int r1, int l2, int r2) {
    int x = (l1 != l2) ? std::min(l1, l2) : -1;
    int y = (r1 != r2) ? std::max(r1, r2) : -1;
    return { x, y };  // Return a pair instead of a tuple
}```",660,"[assert(find_Points(5, 10, 1, 5) == std::make_pair(1, 10));, assert(find_Points(3, 5, 7, 9) == std::make_pair(3, 9));, assert(find_Points(1, 5, 2, 8) == std::make_pair(1, 8));]"
660,This is  a function to find the maximum sum that can be formed which has no three consecutive elements present.,"```
#include <vector>
#include <algorithm>
using namespace std;

int max_sum_of_three_consecutive(vector<int> arr, int n) {
    vector<int> sum(n, 0);
    if (n >= 1) {
        sum[0] = arr[0];
    }
    if (n >= 2) {
        sum[1] = arr[0] + arr[1];
    }
    if (n > 2) {
        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]));
    }
    for (int i = 3; i < n; i++) {
        sum[i] = max(max(sum[i - 1], sum[i - 2] + arr[i]), arr[i] + arr[i - 1] + sum[i - 3]);
    }
    return sum[n - 1];
}```",661,"[assert(max_sum_of_three_consecutive({ 100, 1000, 100, 1000, 1 }, 5) == 2101);, assert(max_sum_of_three_consecutive({ 3000, 2000, 1000, 3, 10 }, 5) == 5013);, assert(max_sum_of_three_consecutive({ 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == 27);]"
661,This is  a function to sort a list in a dictionary.,"```
#include <map>
#include <vector>
#include <algorithm>
#include<string>

std::map<std::string, std::vector<int>> sorted_dict(const std::map<std::string, std::vector<int>> dict1) {
    std::map<std::string, std::vector<int>> sorted_dict;
    for (const auto& pair : dict1) {
        std::vector<int> sorted_vector = pair.second;
        std::sort(sorted_vector.begin(), sorted_vector.end());
        sorted_dict[pair.first] = sorted_vector;
    }
    return sorted_dict;
}```",662,"[assert((sorted_dict({ {""n1"", {2, 3, 1}}, {""n2"", {5, 1, 2}}, {""n3"", {3, 2, 4}} }) == std::map<std::string, std::vector<int>>{ {""n1"", { 1, 2, 3 }}, { ""n2"", {1, 2, 5} }, { ""n3"", {2, 3, 4} }}));, assert((sorted_dict({ {""n1"", {25, 37, 41}}, {""n2"", {41, 54, 63}}, {""n3"", {29, 38, 93}} }) == std::map<std::string, std::vector<int>>{ {""n1"", { 25, 37, 41 }}, { ""n2"", {41, 54, 63} }, { ""n3"", {29, 38, 93} }}));, assert((sorted_dict({ {""n1"", {58, 44, 56}}, {""n2"", {91, 34, 58}}, {""n3"", {100, 200, 300}} }) == std::map<std::string, std::vector<int>>{ {""n1"", { 44, 56, 58 }}, { ""n2"", {34, 58, 91} }, { ""n3"", {100, 200, 300} }}));]"
662,This is  a function to find the largest possible value of k such that k modulo x is y.,"```
#include <iostream>
#include <limits>

int find_max_val(int n, int x, int y) {
    int ans = -std::numeric_limits<int>::max();
    for (int k = n; k >= 0; --k) {  // Start from n and go downwards
        if (k % x == y) {
            ans = k;
            break;  // No need to continue if we found the largest k
        }
    }
    return (ans >= 0 && ans <= n) ? ans : -1;
}```",663,"[assert(find_max_val(15, 10, 5) == 15);, assert(find_max_val(187, 10, 5) == 185);, assert(find_max_val(16, 11, 1) == 12);  ]"
663,This is  a C++ function to find the average of even numbers till a given even number.,"```
#include <iostream>
using namespace std;

int average_Even(int n) {
    if (n % 2 != 0) {
        cout << ""Invalid Input"" << endl;
        return -1;
    }
    int sm = 0;
    int count = 0;
    while (n >= 2) {
        count = count + 1;
        sm = sm + n;
        n = n - 2;
    }
    return sm / count;
}```",664,"[assert(average_Even(2) == 2);, assert(average_Even(4) == 3);, assert(average_Even(100) == 51);]"
664,This is  a C++ function to shift first element to the end of given list.,"```
#include <vector>
#include <algorithm>

std::vector<int> move_last(std::vector<int> num_list) {
    int count = std::count(num_list.begin(), num_list.end(), num_list[0]);
    std::vector<int> a(count, num_list[0]);
    std::vector<int> x;

    for (const auto& i : num_list) {
        if (i != num_list[0]) {
            x.push_back(i);
        }
    }
    x.insert(x.end(), a.begin(), a.end());
    return x;
}
```",665,"[assert((move_last({ 1, 2, 3, 4 }) == std::vector<int>{2, 3, 4, 1}));, assert((move_last({ 2, 3, 4, 1, 5, 0 }) == std::vector<int>{3, 4, 1, 5, 0, 2}));, assert((move_last({ 5, 4, 3, 2, 1 }) == std::vector<int>{4, 3, 2, 1, 5}));]"
665,This is  a function to count occurrence of a character in a string.,"```
#include <string>

int count_char(const std::string& str, char ch) {
    int count = 0;
    for (size_t i = 0; i < str.length(); ++i) {
        if (str[i] == ch) {
            count++;
        }
    }
    return count;
}```",666,"[assert(count_char(""C++"", \o\) == 1);, assert(count_char(""little"", \t\) == 2);, assert(count_char(""assert"", \s\) == 2);]"
666,This is  a C++ function to count number of vowels in the string.,"```
#include <string>
#include <vector>

int Check_Vow(const std::string& str, const std::string& vowels) {
    std::vector<char> final;
    for (char each : str) {
        if (vowels.find(each) != std::string::npos) {
            final.push_back(each);
        }
    }
    return final.size();
}
```",667,"[assert(Check_Vow(""corner"", ""AaEeIiOoUu"") == 2);, assert(Check_Vow(""valid"", ""AaEeIiOoUu"") == 2);, assert(Check_Vow(""true"", ""AaEeIiOoUu"") == 2);]"
667,This is  a C++ function to replace multiple occurence of character by single.,"```
#include <iostream>
#include <regex>
#include <string>

std::string replace(const std::string& str, char ch) {
    std::string pattern = std::string(1, ch) + ""{2,}"";
    std::regex re(pattern);
    std::string result = std::regex_replace(str, re, std::string(1, ch));
    return result;
}```",668,"[assert(replace(""peep"", \e\) == ""pep"");, assert(replace(""Greek"", \e\) == ""Grek"");, assert(replace(""Moon"", \o\) == ""Mon"");]"
668,This is  a function to check whether the given ip address is valid or not using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string check_IP(const std::string& Ip) {
    std::regex regex(R""(^((25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$)"");
    if (std::regex_match(Ip, regex)) {
        return ""Valid IP address"";
    } else {
        return ""Invalid IP address"";
    }
}
```",669,"[assert(check_IP(""192.168.0.1"") == ""Valid IP address"");, assert(check_IP(""110.234.52.124"") == ""Valid IP address"");, assert(check_IP(""366.1.2.2"") == ""Invalid IP address"");]"
669,This is  a C++ function to check whether a sequence of numbers has a decreasing trend or not.,"```
#include <vector>
#include <algorithm>

bool decreasing_trend(const std::vector<int>& nums) {
    return std::is_sorted(nums.begin(), nums.end(), std::greater<int>());
}```",670,"[assert(decreasing_trend(std::vector<int>{-4, -3, -2, -1}) == false);, assert(decreasing_trend(std::vector<int>{1, 2, 3}) == false);, assert(decreasing_trend(std::vector<int>{3, 2, 1}) == true);  ]"
671,This is  a function to find maximum of three numbers.,"```
#include <iostream>
using namespace std;

int max_of_three(int num1, int num2, int num3) {
    int lnum;
    if ((num1 >= num2) && (num1 >= num3)) {
        lnum = num1;
    }
    else if ((num2 >= num1) && (num2 >= num3)) {
        lnum = num2;
    }
    else {
        lnum = num3;
    }
    return lnum; // Assuming the second return value is not needed.
}```",672,"[assert(max_of_three(10, 20, 30) == 30);, assert(max_of_three(55, 47, 39) == 55);, assert(max_of_three(10, 49, 30) == 49);]"
672,This is  a C++ function to convert a list of multiple integers into a single integer.,"```
#include <vector>
#include <string>
#include <iostream>

int convert(const std::vector<int> list) {
    std::string s;
    for (int i : list) {
        s += std::to_string(i);
    }
    int res = std::stoi(s);
    return res;
}```",673,"[assert(convert({ 1, 2, 3 }) == 123);, assert(convert({ 4, 5, 6 }) == 456);, assert(convert({ 7, 8, 9 }) == 789);]"
674,"This is  a function to add two integers. however, if the sum is between the given range it will return 20.","```
#include <iostream>
using namespace std;

int sum_nums(int x, int y, int m, int n) {
    int sum_nums = x + y;
    if (sum_nums >= m && sum_nums < n) {
        return 20;
    } else {
        return sum_nums;
    }
}
```",675,"[assert(sum_nums(2, 10, 11, 20) == 20);, assert(sum_nums(15, 17, 1, 10) == 32);, assert(sum_nums(10, 15, 5, 30) == 20);]"
675,This is  a function to remove everything except alphanumeric characters from the given string by using regex.,"```
#include <string>
#include <regex>

std::string remove_extra_char(const std::string& text1) {
    std::regex pattern(""[\\W_]+"");
    return std::regex_replace(text1, pattern, """");  // Replace non-alphanumeric characters with an empty string
}```",676,"[assert(remove_extra_char(""**//Google Android// - 12. "") == ""GoogleAndroid12"");, assert(remove_extra_char(""****//Google Flutter//*** - 36. "") == ""GoogleFlutter36"");, assert(remove_extra_char(""**//Google Firebase// - 478. "") == ""GoogleFirebase478"");]"
676,This is  a function to check if the triangle is valid or not.,"```
bool validity_triangle(int a, int b, int c) {
    int total = a + b + c;
    return total == 180;
}
```",677,"[assert(validity_triangle(60, 50, 90) == false);, assert(validity_triangle(45, 75, 60) == true);, assert(validity_triangle(30, 50, 100) == true);]"
677,This is  a C++ function to remove spaces from a given string.,"```
#include <string>

std::string remove_spaces(const std::string str1) {
    std::string result = str1;
    result.erase(std::remove(result.begin(), result.end(),  ), result.end());
    return result;
}```",678,"[assert(remove_spaces(""a b c"") == ""abc"");, assert(remove_spaces(""1 2 3"") == ""123"");, assert(remove_spaces("" b c"") == ""bc"");]"
678,This is  a function to access dictionary key’s element by index.,"```
#include <map>
#include <vector>
#include <string>

std::string access_key(const std::map<std::string, int>& dictionary, int key) {
    // Create a vector of keys from the map
    std::vector<std::string> keys;
    for (const auto& pair : dictionary) {
        keys.push_back(pair.first);
    }
    return keys[key];  // Return the key at the specified index
}```",679,"[assert(access_key({ {""physics"", 80}, {""math"", 90}, {""chemistry"", 86} }, 0) == ""chemistry"");, assert(access_key({ {""C++"", 10}, {""java"", 20}, {""C++"", 30} }, 2) == ""C++"");, assert(access_key({ {""program"", 15}, {""computer"", 45} }, 1) == ""program"");]"
679,This is  a C++ function to check whether a sequence of numbers has an increasing trend or not.,"```
#include <vector>
#include <algorithm>

bool increasing_trend(const std::vector<int>& nums) {
    return std::is_sorted(nums.begin(), nums.end());
}
```",680,"[assert(increasing_trend({1, 2, 3, 4}) == true);, assert(increasing_trend({4, 3, 2, 1}) == false);, assert(increasing_trend({0, 1, 4, 9}) == true);]"
680,This is  a C++ function to find the smallest prime divisor of a number.,"```
int smallest_Divisor(int n) { 
    if (n % 2 == 0) { 
        return 2; 
    } 
    int i = 3;  
    while (i * i <= n) { 
        if (n % i == 0) { 
            return i; 
        } 
        i += 2; 
    } 
    return n; 
}
```",681,"[assert(smallest_Divisor(10) == 2);, assert(smallest_Divisor(25) == 5);, assert(smallest_Divisor(31) == 31);]"
682,This is  a C++ function to check whether the given number can be represented by sum of two squares or not.,"```
#include <iostream>
using namespace std;

bool sum_Square(int n) {
    int i = 1;
    while (i * i <= n) {
        int j = 1;
        while (j * j <= n) {
            if (i * i + j * j == n) {
                return true;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    return false;
}
```",683,"[assert(sum_Square(25) == true);, assert(sum_Square(24) == false);, assert(sum_Square(17) == true);]"
683,This is  a C++ function to count occurences of a character in a repeated string.,"```
#include <iostream>
#include <string>

int count_Char(const std::string& str, char x) {
    int count = 0;
    for (size_t i = 0; i < str.length(); ++i) {
        if (str[i] == x) {
            count += 1;
        }
    }
    int n = 10;
    int repititions = n / str.length();
    count *= repititions;
    int l = n % str.length();
    for (int i = 0; i < l; ++i) {
        if (str[i] == x) {
            count += 1;
        }
    }
    return count; // Assuming the second return value is not needed
}```",684,"[assert(count_Char(""abcac"", \a\) == 4);, assert(count_Char(""abca"", \c\) == 2);, assert(count_Char(""aba"", \a\) == 7);]"
684,This is  a C++ function to find sum of prime numbers between 1 to n.,"```
#include <vector>

int sum_Of_Primes(int n) {
    std::vector<bool> prime(n + 1, true);
    int p = 2;
    while (p * p <= n) {
        if (prime[p] == true) {
            for (int i = p * 2; i <= n; i += p) {
                prime[i] = false;
            }
        }
        p++;
    }
    int sum = 0;
    for (int i = 2; i <= n; i++) {
        if (prime[i]) {
            sum += i;
        }
    }
    return sum; // Returning a pair, second value is set to 0 as in original code.
}```",685,"[assert(sum_Of_Primes(10) == 17);, assert(sum_Of_Primes(20) == 77);, assert(sum_Of_Primes(5) == 10);]"
685,This is  a function to find the frequency of each element in the given list.,"```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>

std::pair<std::string, std::unordered_map<int, int>> freq_element(const std::vector<int>& test_tup) {
    std::unordered_map<int, int> res;
    for (int ele : test_tup) {
        res[ele] += 1;
    }

    std::string result = ""{"";
    for (auto it = res.begin(); it != res.end(); ++it) {
        result += std::to_string(it->first) + "": "" + std::to_string(it->second);
        if (std::next(it) != res.end()) {
            result += "", "";
        }
    }
    result += ""}"";

    return { result, res };
}```",686,"[assert(freq_element({ 4, 5, 4, 5, 6, 6, 5, 5, 4 }).first == ""{4: 3, 5: 4, 6: 2}"");, assert(freq_element({ 7, 8, 8, 9, 4, 7, 6, 5, 4 }).first == ""{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}"");, assert(freq_element({ 1, 4, 3, 1, 4, 5, 2, 6, 2, 7 }).first == ""{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}"");]"
687,This is  a function to get the length of a complex number.,"```

#include <iostream>
#include <complex>
#include <cmath>

double len_complex(double a, double b) {
    std::complex<double> cn(a, b);
    double length = std::abs(cn);
    return length; // Just to match the return type, the second value is placeholder.
}```",688,"[assert(len_complex(3, 4) == 5.0);, assert(len_complex(9, 10) == 13.45362404707371);, assert(len_complex(7, 9) == 11.40175425099138);]"
688,## This is  a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block,"```
#include <vector>
#include <algorithm>
#include <limits>

int min_jumps(const std::vector<int>& arr, int n) {
    std::vector<int> jumps(n, 0);
    if (n == 0 || arr[0] == 0) {
        return std::numeric_limits<int>::max();
    }
    jumps[0] = 0;
    for (int i = 1; i < n; ++i) {
        jumps[i] = std::numeric_limits<int>::max();
        for (int j = 0; j < i; ++j) {
            if (i <= j + arr[j] && jumps[j] != std::numeric_limits<int>::max()) {
                jumps[i] = std::min(jumps[i], jumps[j] + 1);
                break;
            }
        }
    }
    return jumps[n - 1];
}```",689,"[assert((min_jumps({ 1, 3, 6, 1, 0, 9 }, 6) == 3));, assert((min_jumps({ 1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9 }, 11) == 3));, assert((min_jumps({ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }, 11) == 10));]"
689,This is  a function to multiply consecutive numbers of a given list.,"```
#include <vector>
#include <utility>

std::vector<int> mul_consecutive_nums(const std::vector<int>& nums) {
    std::vector<int> result;
    for (size_t i = 0; i < nums.size() - 1; ++i) {
        result.push_back(nums[i] * nums[i + 1]);
    }
    return result;
}```",690,"[assert((mul_consecutive_nums({ 1, 1, 3, 4, 4, 5, 6, 7 }) == std::vector<int>{1, 3, 12, 16, 20, 30, 42}));, assert((mul_consecutive_nums({ 4, 5, 8, 9, 6, 10 }) == std::vector<int>{20, 40, 72, 54, 60}));, assert((mul_consecutive_nums({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == std::vector<int>{2, 6, 12, 20, 30, 42, 56, 72, 90}));]"
690,This is  a function to group the 1st elements on the basis of 2nd elements in the given tuple list.,"```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

std::unordered_map<int, std::vector<int>> group_element(const std::vector<std::pair<int, int>>& test_list) {
    std::unordered_map<int, std::vector<int>> res;
    std::vector<std::pair<int, int>> sorted_list = test_list;

    std::sort(sorted_list.begin(), sorted_list.end(), [](const auto& a, const auto& b) {
        return a.second < b.second;
        });

    for (const auto& key_val : sorted_list) {
        res[key_val.second].push_back(key_val.first);
    }

    return res;
}

bool operator==(const std::unordered_map<int, std::vector<int>>& lhs, const std::unordered_map<int, std::vector<int>>& rhs) {
    return lhs.size() == rhs.size() && std::equal(lhs.begin(), lhs.end(), rhs.begin());
}```",691,"[assert((group_element({ {6, 5}, {2, 7}, {2, 5}, {8, 7}, {9, 8}, {3, 7} }) == std::unordered_map<int, std::vector<int>>{ {5, { 6, 2 }}, { 7, {2, 8, 3} }, { 8, {9} }}));, assert((group_element({ {7, 6}, {3, 8}, {3, 6}, {9, 8}, {10, 9}, {4, 8} }) == std::unordered_map<int, std::vector<int>>{ {6, { 7, 3 }}, { 8, {3, 9, 4} }, { 9, {10} } }));, assert((group_element({ {8, 7}, {4, 9}, {4, 7}, {10, 9}, {11, 10}, {5, 9} }) == std::unordered_map<int, std::vector<int>>{ {7, { 8, 4 }}, { 9, {4, 10, 5} }, { 10, {11} } }));]"
691,This is  a C++ function to find the last two digits in factorial of a given number.,"```
#include <iostream>
using namespace std;

int last_Two_Digits(int N) {
    if (N >= 10) {
        return 0;
    }
    int fac = 1;
    for (int i = 1; i <= N; i++) {
        fac = (fac * i) % 100;
    }
    return fac;
}```",692,"[assert(last_Two_Digits(7) == 40);, assert(last_Two_Digits(5) == 20);, assert(last_Two_Digits(2) == 2);]"
692,This is  a function to remove multiple spaces in a string by using regex.,"```
#include <string>
#include <regex>

std::string remove_multiple_spaces(const std::string& text1) {
    return std::regex_replace(text1, std::regex("" +""), "" "");
}
```",693,"[assert(remove_multiple_spaces(""Google      Assistant"") == ""Google Assistant"");, assert(remove_multiple_spaces(""Quad      Core"") == ""Quad Core"");, assert(remove_multiple_spaces(""ChromeCast      Built-in"") == ""ChromeCast Built-in"");]"
693,This is  a function to extract unique values from the given dictionary values.,"```
#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>

std::vector<int> extract_unique(const std::map<std::string, std::vector<int>>& test_dict) {
    std::set<int> unique_elems;
    for (const auto& pair : test_dict) {
        unique_elems.insert(pair.second.begin(), pair.second.end());
    }
    std::vector<int> res(unique_elems.begin(), unique_elems.end());
    std::sort(res.begin(), res.end());
    return res;
}```",694,"[assert((extract_unique({ {""msm"", {5, 6, 7, 8}}, {""is"", {10, 11, 7, 5}}, {""best"", {6, 12, 10, 8}}, {""for"", {1, 2, 5}} }) == std::vector<int>{1, 2, 5, 6, 7, 8, 10, 11, 12}));, assert((extract_unique({ {""Built"", {7, 1, 9, 4}}, {""for"", {11, 21, 36, 14, 9}}, {""ISP"", {4, 1, 21, 39, 47}}, {""TV"", {1, 32, 38}} }) == std::vector<int>{1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47}));, assert((extract_unique({ {""F"", {11, 13, 14, 17}}, {""A"", {12, 11, 15, 18}}, {""N"", {19, 21, 15, 36}}, {""G"", {37, 36, 35}} }) == std::vector<int>{11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37}));]"
694,This is  a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.,"```
#include <cassert>
#include <vector>

bool check_greater(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    bool res = true;
    for (size_t i = 0; i < test_tup1.size(); ++i) {
        if (!(test_tup1[i] < test_tup2[i])) {
            res = false;
            break;
        }
    }
    return res;
}```",695,"[assert(check_greater({ 10, 4, 5 }, { 13, 5, 18 }) == true);, assert(check_greater({ 1, 2, 3 }, { 2, 1, 4 }) == false);, assert(check_greater({ 4, 5, 6 }, { 5, 6, 7 }) == true);]"
695,This is  a function to zip two given lists of lists.,"```
#include <vector>
#include <string>

std::vector<std::string> zip_list(const std::vector<std::string>& list1, const std::vector<std::string>& list2) {
    std::vector<std::string> result;
    for (size_t i = 0; i < list1.size() && i < list2.size(); ++i) {
        result.push_back(list1[i] + list2[i]);
    }
    return result;
}
```",696,"[assert((zip_list({ ""1"", ""3"", ""5"" }, { ""2"", ""4"", ""6"" }) == std::vector<std::string>{""12"", ""34"", ""56""}));, assert((zip_list({ ""a"", ""b"", ""c"" }, { ""d"", ""e"", ""f"" }) == std::vector<std::string>{""ad"", ""be"", ""cf""}));, assert((zip_list({ ""hello"", ""world"" }, { ""there"", ""!"" }) == std::vector<std::string>{""hellothere"", ""world!""}));]"
696,This is  a function to find number of even elements in the given list using lambda function.,"```
#include <vector>
#include <algorithm>

int count_even(const std::vector<int> array_nums) {
    int count_even = std::count_if(array_nums.begin(), array_nums.end(), [](int x) { return x % 2 == 0; });
    return count_even;
}```",697,"[assert(count_even({1, 2, 3, 5, 7, 8, 9, 10}) == 3);, assert(count_even({10, 15, 14, 13, -18, 12, -20}) == 5);, assert(count_even({1, 2, 4, 8, 9}) == 3);]"
697,This is  a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.,"```
#include <iostream>
#include <map>
#include <vector>
#include <algorithm>
#include <tuple>

std::map<std::tuple<int, int>, int> sort_dict_item(const std::map<std::tuple<int, int>, int> test_dict) {
    // Convert the map to a vector of pairs
    std::vector<std::pair<std::tuple<int, int>, int>> items(test_dict.begin(), test_dict.end());

    // Sort the vector based on the product of the first and second elements in the tuple and the second element
    std::sort(items.begin(), items.end(), [](const auto& a, const auto& b) {
        return (std::get<0>(a.first) * std::get<1>(a.first) * a.second) < (std::get<0>(b.first) * std::get<1>(b.first) * b.second);
        });

    // Rebuild the map from the sorted vector
    std::map<std::tuple<int, int>, int> res;
    for (const auto& item : items) {
        res[item.first] = item.second;
    }

  ```",698,"[assert(sort_dict_item({ {{5, 6}, 3}, {{2, 3}, 9}, {{8, 4}, 10}, {{6, 4}, 12} }) == (std::map<std::tuple<int, int>, int>{ { {2, 3}, 9}, { {6, 4}, 12 }, { {5, 6}, 3 }, { {8, 4}, 10 }}));, assert(sort_dict_item({ {{6, 7}, 4}, {{3, 4}, 10}, {{9, 5}, 11}, {{7, 5}, 13} }) == (std::map<std::tuple<int, int>, int>{ { {3, 4}, 10}, { {7, 5}, 13 }, { {6, 7}, 4 }, { {9, 5}, 11 }}));, assert(sort_dict_item({ {{7, 8}, 5}, {{4, 5}, 11}, {{10, 6}, 12}, {{8, 6}, 14} }) == (std::map<std::tuple<int, int>, int>{ { {4, 5}, 11}, { {8, 6}, 14 }, { {7, 8}, 5 }, { {10, 6}, 12 }}));]"
698,This is  a C++ function to find the minimum number of swaps required to convert one binary string to another.,"```
#include <string>

std::string min_Swaps(std::string str1, std::string str2) {
    int count = 0;
    for (size_t i = 0; i < str1.length(); ++i) {
        if (str1[i] != str2[i]) {
            count++;
        }
    }
    if (count % 2 == 0) {
        return std::to_string(count / 2);
    } else {
        return ""Not Possible"";
    }
}
```",699,"[assert(min_Swaps(""1101"", ""1110"") == ""1"");, assert(min_Swaps(""1111"", ""0100"") == ""Not Possible"");, assert(min_Swaps(""1110000"", ""0001101"") == ""3"");]"
699,This is  a function to count the number of elements in a list which are within a specific range.,"```
#include <vector>

std::pair<int, int> count_range_in_list(const std::vector<int>& li, int min, int max) {
    int ctr = 0;
    for (int x : li) {
        if (min <= x && x <= max) {
            ctr++;
        }
    }
    return {ctr, 0}; // returning 0 as a placeholder for the second value
}
```",700,"[assert(count_range_in_list({ 10, 20, 30, 40, 40, 40, 70, 80, 99 }, 40, 100) == 6);, assert(count_range_in_list({ 7, 8, 9, 15, 17, 19, 45 }, 15, 20) == 3);]"
700,This is  a function to find the equilibrium index of the given array.,"```
#include <vector>

int equilibrium_index(const std::vector<int>& arr) {
    int total_sum = 0;
    for (int num : arr) {
        total_sum += num;
    }
    int left_sum = 0;
    for (size_t i = 0; i < arr.size(); ++i) {
        total_sum -= arr[i];
        if (left_sum == total_sum) {
            return i;
        }
        left_sum += arr[i];
    }
    return -1;
}
```",701,"[assert(equilibrium_index({1, 2, 3, 4, 1, 2, 3}) == 3);, assert(equilibrium_index({-7, 1, 5, 2, -4, 3, 0}) == 3);, assert(equilibrium_index({1, 2, 3}) == -1);]"
701,This is  a function to find the minimum number of elements that should be removed such that amax-amin<=k.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int find_ind(int key, int i, int n, int k, const std::vector<int>& arr) {
    int ind = -1;
    int start = i + 1;
    int end = n - 1;

    while (start <= end) { // Adjusted binary search condition
        int mid = start + (end - start) / 2;
        if (arr[mid] - key <= k) {
            ind = mid;
            start = mid + 1;
        }
        else {
            end = mid - 1;
        }
    }
    return ind;
}

int removals(std::vector<int> arr, int n, int k) {
    int ans = n - 1;
    std::sort(arr.begin(), arr.end());
    for (int i = 0; i < n; i++) {
        int j = find_ind(arr[i], i, n, k, arr);
        if (j != -1) {
            ans = std::min(ans, n - (j - i + 1));
        }
    }
    return ans;
}```",702,"[assert(removals({ 1, 3, 4, 9, 10, 11, 12, 17, 20 }, 9, 4) == 5);, assert(removals({ 1, 5, 6, 2, 8 }, 5, 2) == 3);, assert(removals({ 1, 2, 3, 4, 5, 6 }, 6, 3) == 2);]"
702,This is  a function to check whether the given key is present in the dictionary or not.,"```
#include <unordered_map>

bool is_key_present(const std::unordered_map<int, int>& d, int x) {
    return d.find(x) != d.end();
}
```",703,"[assert(is_key_present({{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 5) == true);, assert(is_key_present({{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 6) == true);, assert(is_key_present({{1, 10}, {2, 20}, {3, 30}, {4, 40}, {5, 50}, {6, 60}}, 10) == false);]"
703,This is  a function to calculate the harmonic sum of n-1.,"```
double harmonic_sum(int n) {
    if (n < 2) {
        return 1;
    } else {
        return 1.0 / n + harmonic_sum(n - 1);
    }
}
```",704,"[assert(harmonic_sum(10) == 2.9289682539682538);, assert(harmonic_sum(4) == 2.083333333333333);, assert(harmonic_sum(7) == 2.5928571428571425);]"
704,This is  a function to sort a list of lists by length and value.,"```
#include <algorithm>
#include <vector>
#include <string>

// Function to sort a vector of vectors of integers
std::vector<std::vector<int>> sort_sublists(std::vector<std::vector<int>> list1) {
    // Sort by values within each sublist
    for (auto& sublist : list1) {
        std::sort(sublist.begin(), sublist.end());
    }
    // Sort the outer list by sublist size, and then by lexicographical order
    std::sort(list1.begin(), list1.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
        if (a.size() != b.size()) return a.size() < b.size();
        return a < b;
        });
    return list1;
}```",705,"[assert((sort_sublists({ {2}, {0}, {1, 3}, {0, 7}, {9, 11}, {13, 15, 17} }) == std::vector<std::vector<int>>{ {0}, { 2 }, { 0, 7 }, { 1, 3 }, { 9, 11 }, { 13, 15, 17 } }));, assert((sort_sublists({ {1}, {2, 3}, {4, 5, 6}, {7}, {10, 11} }) == std::vector<std::vector<int>>{ {1}, { 7 }, { 2, 3 }, { 10, 11 }, { 4, 5, 6 } }));]"
705,This is  a function to find whether an array is subset of another array.,"```
#include <unordered_set>
#include <vector>

bool is_subset(const std::vector<int>& arr1, int m, const std::vector<int>& arr2, int n) {
    std::unordered_set<int> hashset;
    for (int i = 0; i < m; i++) {
        hashset.insert(arr1[i]);
    }
    for (int i = 0; i < n; i++) {
        if (hashset.find(arr2[i]) != hashset.end()) {
            continue;
        }
        else {
            return false;
        }
    }
    return true;
}```",706,"[assert(is_subset({ 11, 1, 13, 21, 3, 7 }, 6, { 11, 3, 7, 1 }, 4) == true);, assert(is_subset({ 1, 2, 3, 4, 5, 6 }, 6, { 1, 2, 4 }, 3) == true);, assert(is_subset({ 10, 5, 2, 23, 19 }, 5, { 19, 5, 3 }, 3) == false);]"
706,This is  a C++ function to count the total set bits from 1 to n.,"```
#include <iostream>

int count_Set_Bits(int n) {
    n += 1;
    int powerOf2 = 2;
    int cnt = n / 2;
    while (powerOf2 <= n) {
        int totalPairs = n / powerOf2;
        cnt += (totalPairs / 2) * powerOf2;
        if (totalPairs & 1) {
            cnt += (n % powerOf2);
        } else {
            cnt += 0;
        }
        powerOf2 <<= 1;
    }
    return cnt;
}
```",707,"[assert(count_Set_Bits(16) == 33);, assert(count_Set_Bits(2) == 2);, assert(count_Set_Bits(14) == 28);]"
707,This is  a C++ function to convert a string to a list.,"```
#include <iostream>
#include <vector>
#include <sstream>
#include <iterator>

// Function to convert a string into a vector of words
std::vector<std::string> Convert(const std::string& str) {
    std::istringstream iss(str);
    std::vector<std::string> li((std::istream_iterator<std::string>(iss)), std::istream_iterator<std::string>());
    return li;
}```",708,"[assert((Convert(""C++ program"") == std::vector<std::string>{""C++"", ""program""}));, assert((Convert(""Data Analysis"") == std::vector<std::string>{""Data"", ""Analysis""}));, assert((Convert(""Hadoop Training"") == std::vector<std::string>{""Hadoop"", ""Training""})); ]"
709,This is  a function to access the initial and last data of the given tuple record.,"```
#include <tuple>
#include <iostream>
#include <vector>

// Function to return the front and rear elements as a tuple
std::tuple<int, int> front_and_rear(const std::vector<int>& test_tup) {
    return std::make_tuple(test_tup.front(), test_tup.back());
}```",710,"[assert(front_and_rear({ 10, 4, 5, 6, 7 }) == std::make_tuple(10, 7));, assert(front_and_rear({ 1, 2, 3, 4, 5 }) == std::make_tuple(1, 5));, assert(front_and_rear({ 6, 7, 8, 9, 10 }) == std::make_tuple(6, 10));]"
712,This is  a function to check if the given tuple contains all valid values or not.,"```
#include <tuple>
#include <algorithm>

// Function to check if all elements in a tuple are true
template <typename... Args>
bool check_valid(const std::tuple<Args...>& test_tup) {
    return std::apply([](const Args&... args) {
        return (... && args); // Fold expression to check all are true
        }, test_tup);
}```",713,"[assert(check_valid(std::make_tuple(true, true, true, true)) == true);, assert(check_valid(std::make_tuple(true, false, true, true)) == false);, assert(check_valid(std::make_tuple(true, true, true, true)) == true);]"
713,This is  a C++ function to count the number of distinct power of prime factor of given number.,"```

#include <iostream>
using namespace std;

int count_Fac(int n) {
    int m = n;
    int count = 0;
    int i = 2;
    while ((i * i) <= m) {
        int total = 0;
        while (n % i == 0) {
            n /= i;
            total += 1;
        }
        int temp = 0;
        int j = 1;
        while ((temp + j) <= total) {
            temp += j;
            count += 1;
            j += 1;
        }
        i += 1;
    }
    if (n != 1) {
        count += 1;
    }
    return count; // Returning 0 as the second value as the original C++ function returns two values.
}```",714,"[assert(count_Fac(24) == 3);, assert(count_Fac(12) == 2);, assert(count_Fac(4) == 1);]"
714,This is  a function to convert the given string of integers into a tuple.,"```
#include <tuple>
#include <sstream>
#include <vector>
#include <string>
#include <iostream>
#include <cassert>

// Function to convert a comma-separated string into a tuple of integers
std::tuple<int, int, int, int, int> str_to_tuple(const std::string& test_str) {
    std::stringstream ss(test_str);
    std::string temp;
    std::vector<int> res;

    while (std::getline(ss, temp, ,)) {
        res.push_back(std::stoi(temp));
    }

    // Ensure the result matches the expected tuple size
    if (res.size() != 5) {
        throw std::invalid_argument(""Input string does not contain exactly 5 integers."");
    }

    return std::make_tuple(res[0], res[1], res[2], res[3], res[4]);
}```",715,"[assert(str_to_tuple(""1, -5, 4, 6, 7"") == std::make_tuple(1, -5, 4, 6, 7));, assert(str_to_tuple(""1, 2, 3, 4, 5"") == std::make_tuple(1, 2, 3, 4, 5));, assert(str_to_tuple(""4, 6, 9, 11, 13"") == std::make_tuple(4, 6, 9, 11, 13));]"
715,This is  a function to find the perimeter of a rombus.,"```
int rombus_perimeter(int a) {
    int perimeter = 4 * a;
    return perimeter;
}
```",716,"[assert(rombus_perimeter(10) == 40);, assert(rombus_perimeter(5) == 20);, assert(rombus_perimeter(4) == 16);]"
716,This is  a function to calculate the standard deviation.,"```
#include <iostream>
#include <vector>
#include <cmath>

double avg_calc(const std::vector<double>& ls) {
    size_t n = ls.size();
    double mean = 0.0;
    if (n <= 1) {
        return ls[0];
    }
    for (const auto& el : ls) {
        mean += el;
    }
    mean /= n;
    return mean;
}

double sd_calc(const std::vector<double>& data) {
    size_t n = data.size();
    if (n <= 1) {
        return 0.0;
    }
    double mean = avg_calc(data);
    double sd = 0.0;
    for (const auto& el : data) {
        sd += (el - mean) * (el - mean);
    }
    sd = std::sqrt(sd / (n - 1));
    return sd;
}```",717,"[assert(sd_calc({ 4, 2, 5, 8, 6 }) == 2.23606797749979);, assert(sd_calc({ 1, 2, 3, 4, 5, 6, 7 }) == 2.160246899469287);, assert(sd_calc({ 5, 9, 10, 15, 6, 4 }) == 4.070217029430577);]"
717,This is  a function to create a list taking alternate elements from another given list.,"```
#include <vector>

std::vector<int> alternate_elements(const std::vector<int>& list1) {
    std::vector<int> result;
    for (size_t i = 0; i < list1.size(); i += 2) {
        result.push_back(list1[i]);
    }
    return result ;
}```",718,"[assert((alternate_elements(std::vector<int>{2, 0, 3, 4, 0, 2, 8, 3, 4, 2}) == std::vector<int>{2, 3, 0, 8, 4}));, assert((alternate_elements(std::vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == std::vector<int>{1, 3, 5, 7, 9}));]"
718,This is  a function that matches a string that has an a followed by zero or more bs.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match(const std::string& text) {
    std::regex patterns(""ab*?"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",719,"[assert(text_match(""ac"") == ""Found a match!"");, assert(text_match(""dc"") == ""Not matched!"");, assert(text_match(""abba"") == ""Found a match!"");]"
719,This is  a function to add a dictionary to the tuple.,"```
#include <cassert>
#include <tuple>
#include <map>
#include <string>

std::tuple<int, int, int, std::map<std::string, int>> add_dict_to_tuple(std::tuple<int, int, int> t, std::map<std::string, int> d) {
    return std::make_tuple(std::get<0>(t), std::get<1>(t), std::get<2>(t), d);
}```",720,"[assert(add_dict_to_tuple(std::make_tuple(4, 5, 6), {{""MSAM"", 1}, {""is"", 2}, {""best"", 3}}) == std::make_tuple(4, 5, 6, std::map<std::string, int>{{""MSAM"", 1}, {""is"", 2}, {""best"", 3}}));, assert(add_dict_to_tuple(std::make_tuple(1, 2, 3), {{""UTS"", 2}, {""is"", 3}, {""Worst"", 4}}) == std::make_tuple(1, 2, 3, std::map<std::string, int>{{""UTS"", 2}, {""is"", 3}, {""Worst"", 4}}));, assert(add_dict_to_tuple(std::make_tuple(8, 9, 10), {{""POS"", 3}, {""is"", 4}, {""Okay"", 5}}) == std::make_tuple(8, 9, 10, std::map<std::string, int>{{""POS"", 3}, {""is"", 4}, {""Okay"", 5}}));]"
720,This is  a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.,"```
#include <vector>
#include <algorithm>

using namespace std;

const int M = 100;

double maxAverageOfPath(vector<vector<int>> cost, int N) {
    vector<vector<int>> dp(N + 1, vector<int>(N + 1, 0));
    dp[0][0] = cost[0][0];
    for (int i = 1; i < N; ++i) {
        dp[i][0] = dp[i - 1][0] + cost[i][0];
    }
    for (int j = 1; j < N; ++j) {
        dp[0][j] = dp[0][j - 1] + cost[0][j];
    }
    for (int i = 1; i < N; ++i) {
        for (int j = 1; j < N; ++j) {
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];
        }
    }
    return static_cast<double>(dp[N - 1][N - 1]) / (2 * N - 1);
}```",721,"[assert(maxAverageOfPath({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}, 3) == 5.2);, assert(maxAverageOfPath({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}, 3) == 6.2);, assert(maxAverageOfPath({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}, 3) == 7.2);]"
721,This is  a function to filter the height and width of students which are stored in a dictionary.,"```
#include <iostream>
#include <map>
#include <utility>

std::map<std::string, std::pair<double, int>> filter_data(const std::map<std::string, std::pair<double, int>>& data, double height, int weight) {
    std::map<std::string, std::pair<double, int>> filtered;
    for (const auto& entry : data) {
        if (entry.second.first >= height && entry.second.second >= weight) {
            filtered.insert(entry);
        }
    }
    return filtered;
}```",722,"[assert((filter_data({ {""Cierra Vega"", {6.2, 70}}, {""Alden Cantrell"", {5.9, 65}}, {""Kierra Gentry"", {6.0, 68}}, {""Pierre Cox"", {5.8, 66}} }, 6.0, 70) == std::map<std::string, std::pair<double, int>>{ {""Cierra Vega"", { 6.2, 70 }}}));, assert((filter_data({ {""Cierra Vega"", {6.2, 70}}, {""Alden Cantrell"", {5.9, 65}}, {""Kierra Gentry"", {6.0, 68}}, {""Pierre Cox"", {5.8, 66}} }, 5.9, 67) == std::map<std::string, std::pair<double, int>>{ {""Cierra Vega"", { 6.2, 70 }}, { ""Kierra Gentry"", {6.0, 68} }}));, assert((filter_data({ {""Cierra Vega"", {6.2, 70}}, {""Alden Cantrell"", {5.9, 65}}, {""Kierra Gentry"", {6.0, 68}}, {""Pierre Cox"", {5.8, 66}} }, 5.7, 64) == std::map<std::string, std::pair<double, int>>{ {""Cierra Vega"", { 6.2, 70 }}, { ""Alden Cantrell"", {5.9, 65} }, { ""Kierra Gentry"", {6.0, 68} }, { ""Pierre Cox"", {5.8, 66} }}));]"
722,This is  a function to count the same pair in two given lists using map function.,"```
#include <vector>
#include <algorithm>

int count_same_pair(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    int result = std::count_if(nums1.begin(), nums1.end(), [&nums2, index = 0](int num) mutable {
        return num == nums2[index++];
        });
    return result;
}```",723,"[assert(count_same_pair({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}) == 4);, assert(count_same_pair({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 11);, assert(count_same_pair({2, 4, -6, -9, 11, -12, 14, -5, 17}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 1);]"
723,This is  a function to calculate the sum of all digits of the base to the specified power.,"```
#include <cassert>
#include <iostream>
#include <string>

int power_base_sum(int base, int power) {
    // Start with the base as a string for big number handling
    std::string result = ""1"";  // Initialize result as 1

    // Multiply result by base, power times
    for (int i = 0; i < power; ++i) {
        int carry = 0;
        for (int j = result.size() - 1; j >= 0; --j) {
            int digit = result[j] - 0;  // Convert char to int
            int product = digit * base + carry;
            result[j] = (product % 10) + 0;  // Store single digit in current place
            carry = product / 10;  // Carry over the rest
        }
        
        // If there is any carry left, append it to the result
        while (carry) {
            result = char(carry % 10 + 0) + result;
            carry /= 10;
        }
    }

    // Sum the digits of the result
    int sum = 0;
    for (char digit : result) {
        sum += digit - 0;  // Convert char to int
    }

    return sum;
}```",724,"[assert(power_base_sum(8, 10) == 37);]"
724,This is  a function to extract values between quotation marks of the given string by using regex.,"```
#include <iostream>
#include <string>
#include <vector>
#include <regex>
#include <cassert>

std::vector<std::string> extract_quotation(const std::string& text) {
    std::regex pattern(R""""(""(?:[^""\\]|\\.)*"")"""");
    std::smatch matches;
    std::vector<std::string> results;
    std::string::const_iterator searchStart(text.cbegin());

    while (std::regex_search(searchStart, text.cend(), matches, pattern)) {
        // Access the matched string directly
        std::string matched_str = matches[0].str();
        results.push_back(matched_str.substr(1, matched_str.length() - 2));
        searchStart = matches.suffix().first;
    }

    return results;
}```",725,"[assert((extract_quotation(""Cortex \\""A53\\"" Based \\""multi\\"" tasking \\""Processor\\"""") == std::vector<std::string>{""A53"", ""multi"", ""Processor""}));, assert((extract_quotation(""Cast your \\""favorite\\"" entertainment \\""apps\\"""") == std::vector<std::string>{""favorite"", ""apps""}));, assert((extract_quotation(""Watch content \\""4k Ultra HD\\"" resolution with \\""HDR 10\\"" Support"") == std::vector<std::string>{""4k Ultra HD"", ""HDR 10""}));]"
725,This is  a function to multiply the adjacent elements of the given tuple.,"```
#include <vector>
#include <tuple>

// Function to multiply adjacent elements in the vector
std::vector<int> multiply_elements(const std::vector<int> test_vec) {
    std::vector<int> res;
    for (size_t i = 0; i < test_vec.size() - 1; ++i) {
        res.push_back(test_vec[i] * test_vec[i + 1]);
    }
    return res;
}```",726,"[assert((multiply_elements({ 1, 5, 7, 8, 10 }) == std::vector<int>{5, 35, 56, 80}));, assert((multiply_elements({ 2, 4, 5, 6, 7 }) == std::vector<int>{8, 20, 30, 42}));, assert((multiply_elements({ 12, 13, 14, 9, 15 }) == std::vector<int>{156, 182, 126, 135}));]"
726,This is  a function to remove all characters except letters and numbers using regex,"```

#include <regex>
#include <string>

std::string remove_char(const std::string& S) {
    std::regex re(""[\\W_]+"");
    std::string result = std::regex_replace(S, re, """");
    return result; // returning an empty string as the second value
}```",727,"[assert(remove_char(""123abcjw:, .@! eiw"") == ""123abcjweiw"");, assert(remove_char(""Hello1234:, ! Howare33u"") == ""Hello1234Howare33u"");, assert(remove_char(""Cool543Triks@:, Make@987Trips"") == ""Cool543TriksMake987Trips"");]"
727,This is  a function to sum elements in two lists.,"```
#include <vector>

std::vector<int> sum_list(const std::vector<int> lst1, const std::vector<int> lst2) {
    std::vector<int> res_list(lst1.size());
    for (size_t i = 0; i < lst1.size(); ++i) {
        res_list[i] = lst1[i] + lst2[i];
    }
    return res_list;
}```",728,"[assert(sum_list({10,20,30}, {15,25,35}) == std::vector<int>{25,45,65});, assert(sum_list({1,2,3}, {5,6,7}) == std::vector<int>{6,8,10});, assert(sum_list({15,20,30}, {15,45,75}) == std::vector<int>{30,65,105});]"
728,This is  a function to add two lists using map and lambda function.,"```
#include <vector>
#include <algorithm>

std::vector<int> add_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    std::vector<int> result(nums1.size());
    std::transform(nums1.begin(), nums1.end(), nums2.begin(), result.begin(), std::plus<int>());
    return result;
}
```",729,"[assert(add_list({1, 2, 3}, {4, 5, 6}) == std::vector<int>({5, 7, 9}));, assert(add_list({1, 2}, {3, 4}) == std::vector<int>({4, 6}));, assert(add_list({10, 20}, {50, 70}) == std::vector<int>({60, 90}));]"
729,This is  a function to remove consecutive duplicates of a given list.,"```

#include <vector>
#include <algorithm>

std::vector<int> consecutive_duplicates(const std::vector<int> nums) {
    std::vector<int> result;
    if (nums.empty()) return result;

    result.push_back(nums[0]);
    for (size_t i = 1; i < nums.size(); ++i) {
        if (nums[i] != nums[i - 1]) {
            result.push_back(nums[i]);
        }
    }
    return result;
}```",730,"[assert(consecutive_duplicates({ 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }) == std::vector<int>({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4 }));, assert(consecutive_duplicates({ 10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10 }) == std::vector<int>({ 10, 15, 19, 18, 17, 26, 17, 18, 10 }));, assert(consecutive_duplicates({ 5,5,5}) == std::vector<int>({5}));]"
730,This is  a function to find the lateral surface area of a cone.,"```
#include <cmath>
#include<cassert>

double lateralsurface_cone(double radius, double height) {
    return M_PI * radius * sqrt(radius * radius + height * height);
}```",731,"[assert(lateralsurface_cone(5, 12) == 204.20352248333654);, assert(lateralsurface_cone(10, 15) == 566.3586699569488);, assert(lateralsurface_cone(19, 17) == 1521.8090132193388);]"
731,"This is  a function to replace all occurrences of spaces, commas, or dots with a colon.","```
#include <cassert>
#include <string>
#include <sstream>

std::string replace_specialchar(const std::string &input) {
    std::string output;
    for (char c : input) {
        if (c ==   || c == ,) {
            output += :;
        } else {
            output += c;
        }
    }
    return output;
}
```",732,"[assert(replace_specialchar(""a b c,d e f"") == ""a:b:c:d:e:f"");, assert(replace_specialchar(""ram reshma,ram rahim"") == ""ram:reshma:ram:rahim"");]"
732,This is  a function to find the index of the first occurrence of a given number in a sorted array.,"```
#include <cassert>
#include <vector>

int find_first_occurrence(const std::vector<int>& arr, int target) {
    for (int i = 0; i < arr.size(); ++i) {
        if (arr[i] == target) {
            return i;
        }
    }
    return -1; // Return -1 if not found
}```",733,"[assert(find_first_occurrence({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 1);, assert(find_first_occurrence({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 2);, assert(find_first_occurrence({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6) == 4);]"
733,This is  a C++ function to find sum of products of all possible subarrays.,"```
#include <vector>

long long sum_Of_Subarray_Prod(std::vector<int> arr, int n) {
    long long ans = 0;
    long long res = 0;
    int i = n - 1;
    while (i >= 0) {
        long long incr = arr[i] * (1 + res);
        ans += incr;
        res = incr;
        i--;
    }
    return ans;// Assuming the second return value is not needed, returning 0 instead
}```",734,"[assert(sum_Of_Subarray_Prod({1, 2, 3}, 3) == 20);, assert(sum_Of_Subarray_Prod({1, 2}, 2) == 5);, assert(sum_Of_Subarray_Prod({1, 2, 3, 4}, 4) == 84);]"
734,This is  a C++ function to toggle bits of the number except the first and the last bit.,"```
#include <iostream>
using namespace std;

unsigned int set_middle_bits(unsigned int n) {
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1;
}

unsigned int toggle_middle_bits(unsigned int n) {
    if (n == 1) {
        return 1;
    }
    return n ^ set_middle_bits(n);
}
```",735,"[assert(toggle_middle_bits(9) == 15);, assert(toggle_middle_bits(10) == 12);, assert(toggle_middle_bits(11) == 13);]"
735,This is  a function to locate the left insertion point for a specified value in sorted order.,"```
#include <vector>

int left_insertion(const std::vector<int>& nums, int target) {
    int left = 0, right = nums.size();
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
}```",736,"[assert(left_insertion({1, 2, 4, 5}, 6) == 4);, assert(left_insertion({1, 2, 4, 5}, 3) == 2);, assert(left_insertion({1, 2, 4, 5}, 7) == 4);]"
737,This is  a function to calculate the geometric sum of n-1.,"```
#include <cmath>

double geometric_sum(int n) {
    if (n < 0) {
        return 0;
    } else {
        return 1 / pow(2, n) + geometric_sum(n - 1);
    }
}
```",738,"[assert(geometric_sum(7) == 1.9921875);, assert(geometric_sum(4) == 1.9375);, assert(geometric_sum(8) == 1.99609375);]"
738,This is  a C++ function to find the index of smallest triangular number with n digits.,"```
#include <cmath>

int find_Index(int n) {
    double x = sqrt(2 * pow(10, (n - 1)));
    return round(x);
}
```",739,"[assert(find_Index(2) == 4);, assert(find_Index(3) == 14);, assert(find_Index(4) == 45);]"
739,This is  a function to convert the given tuple to a key-value dictionary using adjacent elements.,"```
#include <iostream>
#include <map>
#include <tuple>
#include <vector>

std::map<std::string, std::string> tuple_to_dict(const std::vector<std::string>& test_tup) {
    std::map<std::string, std::string> res;
    for (size_t idx = 0; idx < test_tup.size(); idx += 2) {
        if (idx + 1 < test_tup.size()) {
            res[test_tup[idx]] = test_tup[idx + 1];
        }
    }
    return res;
}```",740,"[assert((tuple_to_dict({ ""1"", ""5"", ""7"", ""10"", ""13"", ""5"" }) == std::map<std::string, std::string>{ {""1"", ""5""}, { ""7"", ""10"" }, { ""13"", ""5"" }}));, assert((tuple_to_dict({ ""1"", ""2"", ""3"", ""4"", ""5"", ""6"" }) == std::map<std::string, std::string>{ {""1"", ""2""}, { ""3"", ""4"" }, { ""5"", ""6"" }}));, assert((tuple_to_dict({ ""7"", ""8"", ""9"", ""10"", ""11"", ""12"" }) == std::map<std::string, std::string>{ {""7"", ""8""}, { ""9"", ""10"" }, { ""11"", ""12"" }}));]"
740,This is  a C++ function to check whether all the characters are same or not.,"```
#include <string>

bool all_Characters_Same(const std::string& s) {
    int n = s.length();
    for (int i = 1; i < n; i++) {
        if (s[i] != s[0]) {
            return false;
        }
    }
    return true;
}
```",741,"[assert(all_Characters_Same(""C++"") == false);, assert(all_Characters_Same(""aaa"") == true);, assert(all_Characters_Same(""data"") == false);]"
741,This is  a function to caluclate the area of a tetrahedron.,"```
#include <cmath>

double area_tetrahedron(double side) {
    double area = sqrt(3) * (side * side);
    return area;
}```",742,"[assert(area_tetrahedron(3) == 15.588457268119894);, assert(area_tetrahedron(20) == 692.8203230275509);, assert(area_tetrahedron(10) == 173.20508075688772);]"
742,This is  a function to rotate a given list by specified number of items to the right direction.,"```
#include <vector>
#include <cassert>
#include <algorithm>

std::vector<int> rotate_right(const std::vector<int>& arr, int k) {
    std::vector<int> result(arr);
    int length = arr.size();
    k = k % length; // Normalize k

    // Perform the rotation using std::rotate
    std::rotate(result.rbegin(), result.rbegin() + k, result.rend());

    return result;
}```",743,"[assert(rotate_right({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 4) == std::vector<int>({ 7, 8, 9, 10, 1, 2, 3, 4, 5, 6 }));, assert(rotate_right({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 2) == std::vector<int>({ 9, 10, 1, 2, 3, 4, 5, 6, 7, 8 }));, assert(rotate_right({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, 5) == std::vector<int>({ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5 }));]"
743,This is  a function to check if the given tuple has any none value or not.,"```
#include <cassert>
#include <iostream>

bool checkNone(int integers[], int size) {
    for (int i = 0; i < size; ++i) {
        if (integers[i] == -1) {  // Use -1 to simulate a ""null"" value
            return true;
        }
    }
    return false;
}```",744,"[assert(checkNone((int[]){10, 4, 5, 6, -1}, 5) == true);  // Use -1 as the sentinel value, assert(checkNone((int[]){7, 8, 9, 11, 14}, 5) == false);, assert(checkNone((int[]){1, 2, 3, 4, -1}, 5) == true);  // Use -1 as the sentinel value]"
744,This is  a function to find numbers within a given range where every number is divisible by every digit it contains.,"```
#include <vector>
#include <string>

std::vector<int> divisible_by_digits(int startnum, int endnum) {
    std::vector<int> result;
    for (int n = startnum; n <= endnum; ++n) {
        std::string str_n = std::to_string(n);
        bool divisible = true;
        for (char x : str_n) {
            int digit = x - 0;
            if (digit == 0 || n % digit != 0) {
                divisible = false;
                break;
            }
        }
        if (divisible) {
            result.push_back(n);
        }
    }
    return result;
}
```",745,"[assert((divisible_by_digits(1, 22) == std::vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}));, assert((divisible_by_digits(1, 15) == std::vector<int>{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15}));, assert((divisible_by_digits(20, 25) == std::vector<int>{22, 24}));]"
745,This is  a function to find area of a sector.,"```
#include <cassert>
#include<cmath>

int sector_area(double radius, double angle) {
    if (angle == 360) {
        return 0; // or appropriate value
    }
    return 0.5 * radius * radius * (angle * M_PI / 180);
}```",746,"[assert(sector_area(4, 45) == 6);, assert(sector_area(9, 45) == 31);, assert(sector_area(9, 360) == 0);]"
746,This is  a function to find the longest common subsequence for the given three string sequence.,"```
#include <iostream>
#include <vector>
using namespace std;

int lcs_of_three(string X, string Y, string Z, int m, int n, int o) {
    vector<vector<vector<int>>> L(m + 1, vector<vector<int>>(n + 1, vector<int>(o + 1, 0)));

    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            for (int k = 1; k <= o; k++) {
                if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {
                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;
                }
                else {
                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));
                }
            }
        }
    }
    return L[m][n][o];
}```",747,"[assert(lcs_of_three(""AGGT12"", ""12TXAYB"", ""12XBA"", 6, 7, 5) == 2);, assert(lcs_of_three(""Reels"", ""Reelsfor"", ""ReelsforReels"", 5, 8, 13) == 5);, assert(lcs_of_three(""abcd1e2"", ""bc12ea"", ""bd1ea"", 7, 6, 5) == 3);urn 0;]"
747,This is  a function to put spaces between words starting with capital letters in a given string by using regex.,"```
#include <string>
#include <regex>

std::string capital_words_spaces(const std::string &str1) {
    return std::regex_replace(str1, std::regex(R""((\w)([A-Z]))""), ""$1 $2"");
}
```",748,"[assert(capital_words_spaces(""C++"") == ""C++"");, assert(capital_words_spaces(""C++ProgrammingExamples"") == ""C++ Programming Examples"");, assert(capital_words_spaces(""GetReadyToBeCodingFreak"") == ""Get Ready To Be Coding Freak"");]"
748,This is  a function to sort a given list of strings of numbers numerically.,"```
#include <vector>
#include <string>
#include <algorithm>

std::pair<std::vector<int>, std::vector<int>> sort_numeric_strings(const std::vector<std::string>& nums_str) {
    std::vector<int> result;
    for (const auto& x : nums_str) {
        result.push_back(std::stoi(x));
    }
    std::sort(result.begin(), result.end());
    return {result, {}};
}
```",749,"[assert((sort_numeric_strings({ ""4"",""12"",""45"",""7"",""0"",""100"",""200"",""-12"",""-500"" }) == std::vector<int>{-500, -12, 0, 4, 7, 12, 45, 100, 200}));, assert((sort_numeric_strings({ ""2"",""3"",""8"",""4"",""7"",""9"",""8"",""2"",""6"",""5"",""1"",""6"",""1"",""2"",""3"",""4"",""6"",""9"",""1"",""2"" }) == std::vector<int>{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9}));, assert((sort_numeric_strings({ ""1"",""3"",""5"",""7"",""1"", ""3"",""13"", ""15"", ""17"",""5"", ""7 "",""9"",""1"", ""11"" }) == std::vector<int>{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17}));]"
749,This is  a function to add the given tuple to the given list.,"```
#include <tuple>
#include <vector>

std::pair<std::vector<int>, std::vector<int>> add_tuple(std::vector<int> test_list, std::vector<int> test_tup) {
    test_list.insert(test_list.end(), test_tup.begin(), test_tup.end());
    return std::make_pair(test_list, test_tup);
}```",750,"[assert(add_tuple({ 5, 6, 7 }, { 9, 10 }) == std::make_pair(std::vector<int>({ 5, 6, 7, 9, 10 }), std::vector<int>({ 9, 10 })));, assert(add_tuple({ 6, 7, 8 }, { 10, 11 }) == std::make_pair(std::vector<int>({ 6, 7, 8, 10, 11 }), std::vector<int>({ 10, 11 })));, assert(add_tuple({ 7, 8, 9 }, { 11, 12 }) == std::make_pair(std::vector<int>({ 7, 8, 9, 11, 12 }), std::vector<int>({ 11, 12 })));]"
750,This is  a function to check if the given array represents min heap or not.,"```
#include <vector>

bool check_min_heap(std::vector<int> arr, int i) {
    // If we are at a leaf node, it is always a valid min-heap
    if (2 * i + 1 >= arr.size()) {
        return true;
    }

    bool left_child = (arr[i] <= arr[2 * i + 1]) && check_min_heap(arr, 2 * i + 1);

    bool right_child = (2 * i + 2 >= arr.size()) || (arr[i] <= arr[2 * i + 2] && check_min_heap(arr, 2 * i + 2));

    return left_child && right_child;
}```",751,"[assert(check_min_heap({ 1, 2, 3, 4, 5, 6 }, 0) == true);, assert(check_min_heap({ 2, 3, 4, 5, 10, 15 }, 0) == true);, assert(check_min_heap({ 2, 10, 4, 5, 3, 15 }, 0) == false);]"
751,This is  a function to find the nth jacobsthal number.,"```
#include <vector>

int jacobsthal_num(int n) {
    std::vector<int> dp(n + 1);
    dp[0] = 0;
    dp[1] = 1;
    for (int i = 2; i <= n; ++i) {
        dp[i] = dp[i - 1] + 2 * dp[i - 2];
    }
    return dp[n];
}```",752,"[assert(jacobsthal_num(5) == 11);, assert(jacobsthal_num(2) == 1);, assert(jacobsthal_num(4) == 5);]"
753,This is  a function to find common index elements from three lists.,"```
#include <vector>
#include <tuple>

std::vector<int> extract_index_list(const std::vector<int>& l1, const std::vector<int>& l2, const std::vector<int>& l3) {
    std::vector<int> result;
    for (size_t i = 0; i < l1.size() && i < l2.size() && i < l3.size(); ++i) {
        if (l1[i] == l2[i] && l2[i] == l3[i]) {
            result.push_back(l1[i]);
        }
    }
    return result;
}```",754,"[assert((extract_index_list({ 1, 1, 3, 4, 5, 6, 7 }, { 0, 1, 2, 3, 4, 5, 7 }, { 0, 1, 2, 3, 4, 5, 7 }) == std::vector<int> {1, 7}));, assert((extract_index_list({ 1, 1, 3, 4, 5, 6, 7 }, { 0, 1, 2, 3, 4, 6, 5 }, { 0, 1, 2, 3, 4, 6, 7 }) == std::vector<int> {1, 6}));, assert((extract_index_list({ 1, 1, 3, 4, 6, 5, 6 }, { 0, 1, 2, 3, 4, 5, 7 }, { 0, 1, 2, 3, 4, 5, 7 }) == std::vector<int> {1, 5}));]"
754,This is  a function to find the second smallest number in a list.,"```
#include <vector>
#include <set>
#include <algorithm>

int second_smallest(const std::vector<int>& numbers) {
    if (numbers.size() < 2) {
        return -1;  // Not enough elements to find a second smallest
    }
    std::set<int> unique_items(numbers.begin(), numbers.end());
    if (unique_items.size() < 2) {
        return -1;  // Not enough distinct elements
    }

    auto it = unique_items.begin();
    ++it;  // Move to the second smallest element
    return *it;
}```",755,"[assert(second_smallest({ 1, 2, -8, -2, 0, -2 }) == -2);, assert(second_smallest({ 1, 1, -1, 0, 2, -2, -2 }) == -1);, assert(second_smallest({ 2, 2 }) == -1);  ]"
755,This is  a function that matches a string that has an a followed by zero or one b.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match_zero_one(const std::string& text) {
    std::regex patterns(""ab?"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",756,"[assert(text_match_zero_one(""ac"") == ""Found a match!"");, assert(text_match_zero_one(""dc"") == ""Not matched!"");, assert(text_match_zero_one(""abbbba"") == ""Found a match!"");]"
756,This is  a function to count the pairs of reverse strings in the given string list.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int count_reverse_pairs(const std::vector<std::string> test_list) {
    int res = 0;
    for (size_t idx = 0; idx < test_list.size(); ++idx) {
        for (size_t idxn = idx; idxn < test_list.size(); ++idxn) {
            std::string reversed_str = std::string(test_list[idx].rbegin(), test_list[idx].rend());
            if (test_list[idxn] == reversed_str) {
                res++;
            }
        }
    }
    return res;
}```",757,"[assert(count_reverse_pairs({""julia"", ""best"", ""tseb"", ""for"", ""ailuj""}) == 2);, assert(count_reverse_pairs({""geeks"", ""best"", ""for"", ""skeeg""}) == 1);, assert(count_reverse_pairs({""makes"", ""best"", ""sekam"", ""for"", ""rof""}) == 2);]"
757,This is  a function to count number of unique lists within a list.,"```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>
#include <variant>
#include <cassert>
#include <functional>
#include <string> // Make sure to include string

// Define the types you want to support in your lists
using MyVariant = std::variant<int, std::string>; // Add other types as needed

// Custom hash function for std::list<MyVariant>
struct MyVariantListHash {
    std::size_t operator()(const std::list<MyVariant>& lst) const {
        std::hash<int> int_hasher;
        std::hash<std::string> string_hasher;
        std::size_t hash_code = 0;
        for (const auto& element : lst) {
            std::visit(
                [&](const auto& value) {
                    hash_code ^= std::hash<decltype(value)>{}(value) + 0x9e3779b9 + (hash_code << 6) + (hash_code >> 2);
                },
                element);
        }
        return hash_code;
    }
};

// Custom equality operator for std::list<MyVariant>
struct MyVariantListEqual {
    bool operator()(const std::list<MyVariant>& a, const std::list<MyVariant>& b) const {
        if (a.size() != b.size()) return false;
        auto it1 = a.begin();
        auto it2 = b.begin();
        while (it1 != a.end()) {
            if (it1->index() != it2->index()) return false; // Check if variants hold the same type

            bool equal = std::visit(
                [](const auto& val1, const auto& val2) {
                    return val1 == val2;
                }, *it1, *it2);

            if (!equal) return false;

            ++it1;
            ++it2;
        }
        return true;
    }
};

using SublistKey = std::list<MyVariant>;
using CountMap = std::unordered_map<SublistKey, int, MyVariantListHash, MyVariantListEqual>;

CountMap unique_sublists(const std::vector<std::list<MyVariant>>& lists) {
    CountMap frequencyMap;
    for (const auto& sublist : lists) {
        frequencyMap[sublist]++;
    }
    return frequencyMap;
}```",758,"[assert(unique_sublists({ {1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11} }) == CountMap{ {{1, 3}, 2}, {{5, 7}, 2}, {{13, 15, 17}, 1}, {{9, 11}, 1} });, assert(unique_sublists({ {""green""s, ""orange""s}, {""black""s}, {""green""s, ""orange""s}, {""white""s} }) == CountMap{ {{""green""s, ""orange""s}, 2}, {{""black""s}, 1}, {{""white""s}, 1} });]"
758,This is  a function to check a decimal with a precision of 2.,"```
#include <regex>
#include <string>

bool is_decimal(const std::string num) {
    std::regex dnumre(R""(^[0-9]+(\.[0-9]{1,2})?$)"");
    std::smatch result;
    bool match = std::regex_search(num, result, dnumre);
    return match;
}```",759,"[assert(is_decimal(""123.11"") == true);, assert(is_decimal(""e666.86"") == false);, assert(is_decimal(""3.124587"") == false);]"
759,This is  a C++ function to check whether an array contains only one distinct element or not.,"```
#include <set>
#include <vector>
#include <string>

std::string unique_Element(std::vector<int> arr, int n) {
    std::set<int> s(arr.begin(), arr.end());
    if (s.size() == 1) {
        return ""YES"";
    } else {
        return ""NO"";
    }
}
```",760,"[assert(unique_Element({1, 1, 1}, 3) == ""YES"");, assert(unique_Element({1, 2, 1, 2}, 4) == ""NO"");, assert(unique_Element({1, 2, 3, 4, 5}, 5) == ""NO"");]"
760,This is  a function to caluclate arc length of an angle.,"```
#include <iostream>
using namespace std;

double arc_length(double d, double a) {
    double pi = 22.0 / 7.0;
    if (a >= 360) {
        return 0.0; // Equivalent to returning None in C++
    }
    double arclength = (pi * d) * (a / 360);
    return arclength; // Second value can be set to 0 or any other default
}```",761,"[assert(arc_length(9, 45) == 3.5357142857142856);, assert(arc_length(5, 270) == 11.785714285714285);]"
761,This is  a function to check whether the given month number contains 30 days or not.,"```
bool check_monthnumber_number(int monthnum3) {
    if (monthnum3 == 4 || monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11) {
        return true;
    } else {
        return false;
    }
}
```",762,"[assert(check_monthnumber_number(6) == true);, assert(check_monthnumber_number(2) == false);, assert(check_monthnumber_number(12) == false);]"
762,This is  a C++ function to find the minimum difference between any two elements in a given array.,"```
#include <algorithm>
#include <vector>
#include <limits>

long long find_Min_Diff(std::vector<long long> arr, int n) {
    std::sort(arr.begin(), arr.end());
    long long diff = std::numeric_limits<long long>::max();
    for (int i = 0; i < n - 1; i++) {
        if (arr[i + 1] - arr[i] < diff) {
            diff = arr[i + 1] - arr[i];
        }
    }
    return diff;
}```",763,"[assert(find_Min_Diff({1, 5, 3, 19, 18, 25}, 6) == 1);, assert(find_Min_Diff({4, 3, 2, 6}, 4) == 1);, assert(find_Min_Diff({30, 5, 20, 9}, 4) == 4);]"
763,This is  a C++ function to count numeric values in a given string.,"```
#include <string>

int number_ctr(const std::string str) {
    int number_ctr = 0;
    for (size_t i = 0; i < str.length(); ++i) {
        if (str[i] >= 0 && str[i] <= 9) number_ctr += 1;
    }
    return number_ctr;
}```",764,"[assert(number_ctr(""program2bedone"") == 1);, assert(number_ctr(""3wonders"") == 1);, assert(number_ctr(""123"") == 3);]"
764,This is  a function to find nth polite number.,"```
#include <cmath>

int is_polite(int n) {
    n = n + 1;
    return n + static_cast<int>(log2(n + log2(n)));
}```",765,"[assert(is_polite(7) == 11);, assert(is_polite(4) == 7);, assert(is_polite(9) == 13);]"
765,This is  a function to iterate over all pairs of consecutive items in a given list.,"```
#include <iostream>
#include <vector>
#include <utility>

std::vector<std::pair<int, int>> pair_wise(const std::vector<int>& arr) {
    std::vector<std::pair<int, int>> result;
    for (size_t i = 0; i < arr.size() - 1; ++i) {
        result.emplace_back(arr[i], arr[i + 1]);
    }
    return result;
}```",766,"[assert((pair_wise({ 1,1,2,3,3,4,4,5 }) == std::vector<std::pair<int, int>>{ {1, 1}, { 1, 2 }, { 2, 3 }, { 3, 3 }, { 3, 4 }, { 4, 4 }, { 4, 5 }}));, assert((pair_wise({ 1,5,7,9,10 }) == std::vector<std::pair<int, int>>{ {1, 5}, { 5, 7 }, { 7, 9 }, { 9, 10 }}));, assert((pair_wise({ 1,2,3,4,5,6,7,8,9,10 }) == std::vector<std::pair<int, int>>{ {1, 2}, { 2, 3 }, { 3, 4 }, { 4, 5 }, { 5, 6 }, { 6, 7 }, { 7, 8 }, { 8, 9 }, { 9, 10 }}));]"
766,This is  a C++ function to count the number of pairs whose sum is equal to ‘sum’.,"```
#include <iostream>
#include <vector>

int get_Pairs_Count(std::vector<int> arr, int n, int sum) {
    int count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == sum) {
                count++;
            }
        }
    }
    return count;// Returning 0 as a placeholder for the second value
}```",767,"[assert(get_Pairs_Count({ 1,1,1,1 }, 4, 2) == 6);, assert(get_Pairs_Count({ 1,5,7,-1,5 }, 5, 6) == 3);, assert(get_Pairs_Count({ 1,-2,3 }, 3, 1) == 1);]"
767,This is  a C++ function to check for odd parity of a given number.,"```
bool check_Odd_Parity(int x) { 
    int parity = 0; 
    while (x != 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    if (parity % 2 == 1) { 
        return true; 
    } else { 
        return false; 
    } 
}
```",768,"[assert(check_Odd_Parity(13) == true);, assert(check_Odd_Parity(21) == true);, assert(check_Odd_Parity(18) == false);]"
768,This is  a C++ function to get the difference between two lists.,"```
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> Diff(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> result;
    for (int num : a) {
        if (std::find(b.begin(), b.end(), num) == b.end()) {
            result.push_back(num);
        }
    }
    for (int num : b) {
        if (std::find(a.begin(), a.end(), num) == a.end()) {
            result.push_back(num);
        }
    }
    return result;
}```",769,"[assert((Diff({ 10, 15, 20, 25, 30, 35, 40 }, { 25, 40, 35 }) == std::vector<int>{10, 15, 20, 30}));, assert((Diff({ 1, 2, 3, 4, 5 }, { 6, 7, 1 }) == std::vector<int>{2, 3, 4, 5, 6, 7}));, assert((Diff({ 1, 2, 3 }, { 6, 7, 1 }) == std::vector<int>{2, 3, 6, 7}));]"
769,This is  a C++ function to find the sum of fourth power of first n odd natural numbers.,"```
#include <iostream>
using namespace std;

int odd_Num_Sum(int n) {
    int j = 0;
    int sm = 0;
    for (int i = 1; i <= n; ++i) {
        j = (2 * i - 1);
        sm += (j * j * j * j);
    }
    return sm; // Returning a pair, second value can be adjusted as needed
}```",770,"[assert(odd_Num_Sum(2) == 82);, assert(odd_Num_Sum(3) == 707);, assert(odd_Num_Sum(4) == 3108);]"
770,This is  a function to check if the given expression is balanced or not.,"```
#include <iostream>
#include <stack>
#include <string>

bool check_expression(const std::string& exp) {
    if (exp.length() % 2 != 0) {
        return false;
    }
    std::stack<char> stack;
    for (char ch : exp) {
        if (ch == ( || ch == { || ch == [) {
            stack.push(ch);
        }
        if (ch == ) || ch == } || ch == ]) {
            if (stack.empty()) {
                return false;
            }
            char top = stack.top();
            stack.pop();
            if ((top == ( && ch != )) || (top == { && ch != }) || (top == [ && ch != ])) {
                return false;
            }
        }
    }
    return stack.empty();
}
```",771,"[assert(check_expression(""{()}[{}]"") == true);, assert(check_expression(""{()}[{]"") == false);, assert(check_expression(""{()}[{}][]({})"") == true);]"
771,This is  a function to remove all the words with k length in the given string.,"```
#include <iostream>
#include <sstream>
#include <vector>

std::string remove_length(const std::string& input, int length) {
    std::istringstream iss(input);
    std::string word;
    std::vector<std::string> result;

    while (iss >> word) {
        if (word.length() != length) {
            result.push_back(word);
        }
    }

    std::string output;
    for (const auto& w : result) {
        output += w + "" "";
    }

    if (!output.empty()) {
        output.pop_back(); // Remove the trailing space
    }

    return output;
}```",772,"[assert(remove_length(""The person is most value tet"", 3) == ""person is most value"");, assert(remove_length(""If you told me about this ok"", 4) == ""If you me about ok"");, assert(remove_length(""Forces of darkeness is come into the play"", 4) == ""Forces of darkeness is the"");]"
773,This is  a function to check if the string is a valid email address or not using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string check_email(const std::string& email) {
    std::regex pattern(""^[a-z0-9]+[\\._]?[a-z0-9]+@[\\w]+[\\.]\\w{2,3}$"");
    if (std::regex_match(email, pattern)) {
        return ""Valid Email"";
    } else {
        return ""Invalid Email"";
    }
}
```",774,"[assert(check_email(""ankitrai326@gmail.com"") == ""Valid Email"");, assert(check_email(""my.ownsite@ourearth.org"") == ""Valid Email"");, assert(check_email(""ankitaoie326.com"") == ""Invalid Email"");]"
774,This is  a C++ function to check whether every odd index contains odd numbers of a given list.,"```
#include <cassert>
#include <vector>

bool odd_position(const std::vector<int>& nums) {
    for (size_t i = 1; i < nums.size(); i += 2) {
        if (nums[i] % 2 == 0) {
            return false;
        }
    }
    return true;
}```",775,"[assert(odd_position({ 2, 1, 4, 3, 6, 7, 6, 3 }) == true);, assert(odd_position({ 4, 1, 2 }) == true);, assert(odd_position({ 1, 2, 3 }) == false);]"
775,This is  a function to count those characters which have vowels as their neighbors in the given string.,"```
#include <iostream>
#include <string>

int count_vowels(const std::string& str) {
    int count = 0;
    for (char c : str) {
        if (c == a || c == e || c == i || c == o || c == u ||
            c == A || c == E || c == I || c == O || c == U) {
            count++;
        }
    }
    return count;
}```",776,"[assert(count_vowels(""bestinstareels"") == 5);, assert(count_vowels(""partofthejourneyistheend"") == 9);, assert(count_vowels(""amazonprime"") == 5);  ]"
776,This is  a C++ function to find the sum of non-repeated elements in a given array.,"```
#include <algorithm>
#include <vector>

int find_Sum(std::vector<int> arr, int n) {
    std::sort(arr.begin(), arr.end());
    int sum = arr[0];
    for (int i = 0; i < n - 1; ++i) {
        if (arr[i] != arr[i + 1]) {
            sum += arr[i + 1];
        }
    }
    return sum; // Returning 0 as a placeholder for the second value, to match the original return type.
}```",777,"[assert(find_Sum({ 1, 2, 3, 1, 1, 4, 5, 6 }, 8) == 21);, assert(find_Sum({ 1, 10, 9, 4, 2, 10, 10, 45, 4 }, 9) == 71);, assert(find_Sum({ 12, 10, 9, 45, 2, 10, 10, 45, 10 }, 9) == 78);]"
777,This is  a function to pack consecutive duplicates of a given list elements into sublists.,"```
#include <vector>
#include <list>
#include <algorithm>

std::vector<std::vector<int>> pack_consecutive_duplicates(const std::vector<int>& list1) {
    std::vector<std::vector<int>> result;
    if (list1.empty()) return result;

    std::vector<int> current_group;
    current_group.push_back(list1[0]);

    for (size_t i = 1; i < list1.size(); ++i) {
        if (list1[i] == list1[i - 1]) {
            current_group.push_back(list1[i]);
        }
        else {
            result.push_back(current_group);
            current_group.clear();
            current_group.push_back(list1[i]);
        }
    }
    result.push_back(current_group);

    return result;
}```",778,"[assert((pack_consecutive_duplicates({ 0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 }) == std::vector<std::vector<int>>{ {0, 0}, { 1 }, { 2 }, { 3 }, { 4, 4 }, { 5 }, { 6, 6, 6 }, { 7 }, { 8 }, { 9 }, { 4, 4 }}));, assert((pack_consecutive_duplicates({ 10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10 }) == std::vector<std::vector<int>>{ {10, 10}, { 15 }, { 19 }, { 18, 18 }, { 17 }, { 26, 26 }, { 17 }, { 18 }, { 10 }}));]"
778,This is  a function to count the number of unique lists within a list.,"```
#include <iostream>
#include <vector>
#include <map>
#include <tuple>
#include <variant>
#include <cassert>
#include <string>
#include <algorithm> // Make sure to include algorithm for std::lexicographical_compare

// Define the types you want to support (add more as needed)
using MyVariant = std::variant<int, std::string>;

// Comparison function for std::vector<MyVariant> (required for std::map)
struct MyVariantVectorComparator {
    bool operator()(const std::vector<MyVariant>& a, const std::vector<MyVariant>& b) const {
        if (a.size() != b.size()) {
            return a.size() < b.size(); // Compare sizes first
        }
        return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end(), 
            [](const MyVariant& v1, const MyVariant& v2) {
                return std::visit(
                    [](const auto& val1, const auto& val2) {
                        using T1 = std::decay_t<decltype(val1)>;
                        using T2 = std::decay_t<decltype(val2)>;

                        if constexpr (std::is_same_v<T1, T2>) {
                            return val1 < val2; // Compare if types are the same
                        } else {
                            // Compare based on type order if types are different
                            if (std::is_same_v<T1, int>) return true; // int comes before string (adjust as needed)
                            if (std::is_same_v<T1, std::string>) return false;
                            return false; // Should not happen with current types, but good to have.
                        }
                    }, v1, v2);
            });
    }
};



using SublistKey = std::vector<MyVariant>;
using CountMap = std::map<SublistKey, int, MyVariantVectorComparator>;

CountMap unique_sublists(const std::vector<std::vector<MyVariant>>& lists) {
    CountMap count;

    for (const auto& sublist : lists) {
        count[sublist]++;
    }

    return count;
}```",779,"[assert((unique_sublists({ {1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11} }) == CountMap{ {{1, 3}, 2}, {{5, 7}, 2}, {{13, 15, 17}, 1}, {{9, 11}, 1} }));, assert((unique_sublists({ {MyVariant(""green""), MyVariant(""orange"")}, {MyVariant(""black"")}, {MyVariant(""green""), MyVariant(""orange"")}, {MyVariant(""white"")} }) == CountMap{ {{MyVariant(""green""), MyVariant(""orange"")}, 2}, {{MyVariant(""black"")}, 1}, {{MyVariant(""white"")}, 1} }));, assert((unique_sublists({ {1, 2}, {3, 4}, {4, 5}, {6, 7} }) == CountMap{ {{1, 2}, 1}, {{3, 4}, 1}, {{4, 5}, 1}, {{6, 7}, 1} }));]"
779,This is  a function to find the combinations of sums with tuples in the given tuple list.,"```
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>

std::vector<std::pair<int, int>> find_combinations(const std::vector<std::pair<int, int>>& test_list) {
    std::vector<std::pair<int, int>> res;
    for (size_t i = 0; i < test_list.size(); ++i) {
        for (size_t j = i + 1; j < test_list.size(); ++j) {
            res.push_back(std::make_pair(test_list[i].first + test_list[j].first, test_list[i].second + test_list[j].second));
        }
    }
    return res;
}```",780,"[assert((find_combinations({ {2, 4}, {6, 7}, {5, 1}, {6, 10} }) == std::vector<std::pair<int, int>>{ {8, 11}, { 7, 5 }, { 8, 14 }, { 11, 8 }, { 12, 17 }, { 11, 11 }}));, assert((find_combinations({ {3, 5}, {7, 8}, {6, 2}, {7, 11} }) == std::vector<std::pair<int, int>>{ {10, 13}, { 9, 7 }, { 10, 16 }, { 13, 10 }, { 14, 19 }, { 13, 13 }}));, assert((find_combinations({ {4, 6}, {8, 9}, {7, 3}, {8, 12} }) == std::vector<std::pair<int, int>>{ {12, 15}, { 11, 9 }, { 12, 18 }, { 15, 12 }, { 16, 21 }, { 15, 15 }}));]"
780,This is  a C++ function to check whether the count of divisors is even or odd.,"```
#include <cmath>
#include <string>

std::string count_Divisors(int n) {
    int count = 0;
    for (int i = 1; i <= (int)(sqrt(n)) + 1; i++) {
        if (n % i == 0) {
            if (n / i == i) {
                count = count + 1;
            } else {
                count = count + 2;
            }
        }
    }
    if (count % 2 == 0) {
        return ""Even"";
    } else {
        return ""Odd"";
    }
}
```",781,"[assert(count_Divisors(10) == ""Even"");, assert(count_Divisors(100) == ""Odd"");, assert(count_Divisors(125) == ""Even"");]"
781,This is  a C++ function to find the sum of all odd length subarrays.,"#include <vector>

int Odd_Length_Sum(const std::vector<int>& arr) {
    int Sum = 0;
    int l = arr.size();
    for (int i = 0; i < l; ++i) {
        // Calculate the number of subarrays containing arr[i] with odd length
        int odd_count = ((i + 1) * (l - i) + 1) / 2;
        Sum += odd_count * arr[i];
    }
    return Sum;
}",782,"[assert(Odd_Length_Sum({ 1, 2, 4 }) == 14);, assert(Odd_Length_Sum({ 1, 2, 1, 2 }) == 15);, assert(Odd_Length_Sum({ 1, 7 }) == 8);]"
783,This is  a function to find the product of first even and odd number of a given list.,int Odd_Length_Sum(const std::vector<int>& arr) {,784,"[assert(mul_even_odd({1, 3, 5, 7, 4, 1, 6, 8}) == 4);, assert(mul_even_odd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 2);, assert(mul_even_odd({1, 5, 7, 9, 10}) == 10);]"
784,This is  a function to convert tuple string to integer tuple.,    int Sum = 0;,785,"[assert(tuple_str_int(""(7, 8, 9)"") == std::make_tuple(7, 8, 9));, assert(tuple_str_int(""(1, 2, 3)"") == std::make_tuple(1, 2, 3));, assert(tuple_str_int(""(4, 5, 6)"") == std::make_tuple(4, 5, 6));]"
785,This is  a function to locate the right insertion point for a specified value in sorted order.,    int l = arr.size();,786,"[assert(right_insertion({1, 2, 4, 5}, 6) == 4);, assert(right_insertion({1, 2, 4, 5}, 3) == 2);, assert(right_insertion({1, 2, 4, 5}, 7) == 4);]"
786,This is  a function that matches a string that has an a followed by three b.,    for (int i = 0; i < l; ++i) {,787,"[assert(text_match_three(""ac"") == ""Not matched!"");, assert(text_match_three(""dc"") == ""Not matched!"");, assert(text_match_three(""abbbba"") == ""Found a match!"");]"
787,This is  a function to create a new tuple from the given string and list.,        // Calculate the number of subarrays containing arr[i] with odd length,788,"[assert(new_tuple({ ""WEB"", ""is"" }, ""best"") == std::make_tuple(std::vector<std::string>{""WEB"", ""is"", ""best""}));, assert(new_tuple({ ""We"", ""are"" }, ""Developers"") == std::make_tuple(std::vector<std::string>{""We"", ""are"", ""Developers""}));, assert(new_tuple({ ""Part"", ""is"" }, ""Wrong"") == std::make_tuple(std::vector<std::string>{""Part"", ""is"", ""Wrong""}));]"
788,This is  a function to calculate the perimeter of a regular polygon.,        int odd_count = ((i + 1) * (l - i) + 1) / 2;,789,"[assert(perimeter_polygon(4, 20) == 80);, assert(perimeter_polygon(10, 15) == 150);, assert(perimeter_polygon(9, 7) == 63);]"
789,This is  a C++ function to check whether every even index contains even numbers of a given list.,        Sum += odd_count * arr[i];,790,"[assert(even_position({3, 2, 1}) == false);, assert(even_position({1, 2, 3}) == false);, assert(even_position({2, 1, 4}) == true);]"
790,This is  a function to remove the nested record from the given tuple.,"#include <iostream>
#include <vector>
#include <any>
#include <algorithm>
#include <cassert>
#include <type_traits> // For std::is_same_v

// Custom equality comparison function for std::any
bool any_equal(const std::any& a, const std::any& b) {
    if (a.type() != b.type()) {
        return false; // Not equal if types are different
    }

    if (a.type() == typeid(int)) {
        return std::any_cast<int>(a) == std::any_cast<int>(b);
    } else if (a.type() == typeid(std::string)) {
        return std::any_cast<std::string>(a) == std::any_cast<std::string>(b);
    } else if (a.type() == typeid(std::vector<std::any>)) {
        const std::vector<std::any>& vec1 = std::any_cast<std::vector<std::any>>(a);
        const std::vector<std::any>& vec2 = std::any_cast<std::vector<std::any>>(b);
        if (vec1.size() != vec2.size()) {
            return false;
        }
        for (size_t i = 0; i < vec1.size(); ++i) {
            if (!any_equal(vec1[i], vec2[i])) { // Recursive call
                return false;
            }
        }
        return true;
    }

    return false; // Handle other types as needed
}


// Recursive function to remove nested arrays
std::vector<std::any> removeNested(const std::vector<std::any>& testTup) {
    std::vector<std::any> res;
    for (const auto& ele : testTup) {
        if (ele.type() == typeid(std::vector<std::any>)) {
            // Recursively call removeNested on the nested vector
            std::vector<std::any> nested = std::any_cast<std::vector<std::any>>(ele);
            std::vector<std::any> flattened = removeNested(nested); // Recursive call
            res.insert(res.end(), flattened.begin(), flattened.end()); // Add flattened elements
        } else {
            res.push_back(ele);
        }
    }
    return res;
}

",791,"[assert((removeNested({1, 5, 7, std::vector<std::any>{4, 6}, 10}) == std::vector<std::any>{1, 5, 7, 10}));, assert((removeNested({2, 6, 8, std::vector<std::any>{5, 7}, 11}) == std::vector<std::any>{2, 6, 8, 11}));, assert((removeNested({3, 7, 9, std::vector<std::any>{6, 8}, 12}) == std::vector<std::any>{3, 7, 9, 12}));, assert((removeNested({1, std::vector<std::any>{2, std::vector<std::any>{3, 4}}, 5}) == std::vector<std::any>{1, 2, 3, 4, 5}));, assert((removeNested({1, std::vector<std::any>{2, std::vector<std::any>{3, std::vector<std::any>{4, 5}}}}, 6}) == std::vector<std::any>{1, 2, 3, 4, 5, 6}));]"
791,This is  a C++ function to count the number of lists in a given number of lists.,    return Sum;,792,"[assert(count_list({ {1, 3}, {5, 7}, {9, 11}, {13, 15, 17} }) == 4);, assert(count_list({ {1, 2}, {2, 3}, {4, 5} }) == 3);, assert(count_list({ {1, 0}, {2, 0} }) == 2);    ]"
792,This is  a C++ function to find the last position of an element in a sorted array.,},793,"[assert(last({1,2,3}, 1, 3) == 0);, assert(last({1,1,1,2,3,4}, 1, 6) == 2);, assert(last({2,3,2,3,6,8,9}, 3, 8) == 3);]"
793,"This is  a function that matches a string that has an a followed by anything, ending in b.","```
#include <iostream>
#include <regex>
#include <string>

std::string text_starta_endb(const std::string& text) {
    std::regex patterns(""a.*?b$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",794,"[assert(text_starta_endb(""aabbbb"") == ""Found a match!"");, assert(text_starta_endb(""aabAbbbc"") == ""Not matched!"");, assert(text_starta_endb(""accddbbjjj"") == ""Not matched!"");]"
794,This is  a function to find the n - cheap price items from a given dataset using heap queue algorithm.,"```
#include <cassert>
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>

struct Item {
    std::string name;
    double price;

    // Equality operator for Item struct
    bool operator==(const Item& other) const {
        return name == other.name && price == other.price;
    }
};

std::vector<Item> cheap_items(const std::vector<Item>& items, int n) {
    std::vector<Item> result = items;
    std::sort(result.begin(), result.end(), [](const Item& a, const Item& b) {
        return a.price < b.price;
        });
    if (n < result.size()) {
        result.resize(n);
    }
    return result;
}
```",795,"[assert((cheap_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22} }, 1) == std::vector<Item>{ {""Item-1"", 101.1}}));, assert((cheap_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22} }, 2) == std::vector<Item>{ {""Item-1"", 101.1}, { ""Item-2"", 555.22 }}));, assert((cheap_items({ {""Item-1"", 101.1}, {""Item-2"", 555.22}, {""Item-3"", 45.09}, {""Item-4"", 22.75} }, 1) == std::vector<Item>{ {""Item-4"", 22.75}}));]"
795,This is  function to find the sum of all items in the given dictionary.,"```
#include <map>

int return_sum(const std::map<char, int>& input) {
    int sum = 0;
    for (const auto& pair : input) {
        sum += pair.second;
    }
    return sum;
}```",796,"[""assert(return_sum({{a, 100}, {b, 200}, {c, 300}}) == 600);"", ""assert(return_sum({{a, 25}, {b, 18}, {c, 45}}) == 88);"", ""assert(return_sum({{a, 36}, {b, 39}, {c, 49}}) == 124);""]"
796,This is  a C++ function to find the sum of all odd natural numbers within the range l and r.,"```
#include <iostream>
using namespace std;

int sum_Odd(int n) {
    // Returns the sum of the first n odd numbers
    int terms = (n + 1) / 2;   // Number of odd terms up to n
    int sum1 = terms * terms;  // Sum of first terms odd numbers
    return sum1;
}

int sum_in_Range(int l, int r) {
    // Sum odd numbers between l and r inclusive
    return sum_Odd(r) - sum_Odd(l - 1);
}```",797,"[assert(sum_in_Range(2, 5) == 8);, assert(sum_in_Range(5, 7) == 12);, assert(sum_in_Range(7, 13) == 40);]"
797,This is  a C++ function to find the sum of an array.,"```
#include <vector>

int _sum(const std::vector<int>& numbers) {
    int total = 0;
    for (int number : numbers) {
        total += number;
    }
    return total;
}```",798,"[assert(_sum({1, 2, 3}) == 6);, assert(_sum({15, 12, 13, 10}) == 50);, assert(_sum({0, 1, 2}) == 3);]"
798,This is  a C++ function to left rotate the bits of a given number.,"```
#include <iostream>
using namespace std;

const int INT_BITS = 32;

unsigned int left_Rotate(unsigned int n, unsigned int d) {
    return (n << d) | (n >> (INT_BITS - d));
}
```",799,"[assert(left_Rotate(16, 2) == 64);, assert(left_Rotate(10, 2) == 40);, assert(left_Rotate(99, 3) == 792);]"
799,This is  a function to remove all whitespaces from a string.,"```
#include <iostream>
#include <string>
#include <algorithm>

std::string remove_all_spaces(const std::string& text) {
    std::string result = text;
    result.erase(std::remove_if(result.begin(), result.end(), ::isspace), result.end());
    return result;
}
```",800,"[assert(remove_all_spaces(""C++  program"") == ""C++program"");, assert(remove_all_spaces(""C++   programming    language"") == ""C++programminglanguage"");, assert(remove_all_spaces(""C++                     program"") == ""C++program"");]"
800,This is  a C++ function to count the number of equal numbers from three given integers.,"```
#include <set>

int test_three_equal(int x, int y, int z) {
    std::set<int> result = {x, y, z};
    if (result.size() == 3) {
        return 0;
    } else {
        return 4 - result.size();
    }
}
```",801,"[assert(test_three_equal(1, 1, 1) == 3);, assert(test_three_equal(-1, -2, -3) == 0);, assert(test_three_equal(1, 2, 2) == 2);]"
801,This is  a C++ function to count the number of rotations required to generate a sorted array.,"```
#include<vector>
int count_Rotation(std::vector<int> arr, int n) {
    for (int i = 1; i < n; i++) {
        if (arr[i] < arr[i - 1]) {
            return i;
        }
    }
    return 0;
}```",802,"[assert(count_Rotation({3,2,1}, 3) == 1);, assert(count_Rotation({4,5,1,2,3}, 5) == 2);, assert(count_Rotation({7,8,9,1,2,3}, 6) == 3);]"
802,This is  a C++ function to check whether the given number is a perfect square or not.,"```
#include <iostream>
using namespace std;

bool is_Perfect_Square(int n) {
    int i = 1;
    while (i * i <= n) {
        if ((n % i == 0) && (n / i == i)) {
            return true;     
        }
        i = i + 1;
    }
    return false;
}
```",803,"[assert(is_Perfect_Square(10) == false);, assert(is_Perfect_Square(36) == true);, assert(is_Perfect_Square(14) == false);]"
803,This is  a C++ function to check whether the product of numbers is even or not.,"```
#include<vector>


bool is_Product_Even(const std::vector<int>&nums, int size) {
    int product = 1;
    for (int i = 0; i < size; ++i) {
        product *= nums[i];
    }
    return product % 2 == 0;
}```",804,"[assert(is_Product_Even({1, 2, 3}, 3) == true);, assert(is_Product_Even({1, 2, 1, 4}, 4) == true);, assert(is_Product_Even({1, 1}, 2) == false);]"
804,This is  a function to find the list in a list of lists whose sum of elements is the highest.,"```
#include <vector>
#include <numeric>
#include <algorithm>

std::vector<int> max_sum_list(const std::vector<std::vector<int>>& lists) {
    return *std::max_element(lists.begin(), lists.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
        return std::accumulate(a.begin(), a.end(), 0) < std::accumulate(b.begin(), b.end(), 0);
    });
}
```",805,"[assert((max_sum_list({ {1,2,3}, {4,5,6}, {10,11,12}, {7,8,9} }) == std::vector<int>{10, 11, 12}));, assert((max_sum_list({ {3,2,1}, {6,5,4}, {12,11,10} }) == std::vector<int>{12, 11, 10}));, assert((max_sum_list({ {2,3,1} }) == std::vector<int>{2, 3, 1}));]"
806,This is  a C++ function to find the first odd number in a given list of numbers.,"```
#include <vector>

int first_odd(const std::vector<int>& nums) {
    for (int el : nums) {
        if (el % 2 != 0) {
            return el;
        }
    }
    return -1;
}
```",807,"[assert(first_odd({1, 3, 5}) == 1);, assert(first_odd({2, 4, 1, 3}) == 1);, assert(first_odd({8, 9, 1}) == 9);]"
807,This is  a function to check if the given tuples contain the k or not.,"```
#include <tuple>

bool check_K(const std::tuple<int>& test_tup, int K) {
    bool res = false;
    for (const auto& ele : test_tup) {
        if (ele == K) {
            res = true;
            break;
        }
    }
    return res;
}
```",808,"[assert(check_K(std::make_tuple(10, 4, 5, 6, 8), 6) == true);, assert(check_K(std::make_tuple(1, 2, 3, 4, 5, 6), 7) == false);, assert(check_K(std::make_tuple(7, 8, 9, 44, 11, 12), 11) == true);]"
808,This is  a function to check if each element of second tuple is smaller than its corresponding index in first tuple.,"```
#include <tuple>
#include <vector>

bool check_smaller(const std::vector<int>& test_tup1, const std::vector<int>& test_tup2) {
    bool res = true;
    for(size_t i = 0; i < test_tup1.size(); ++i) {
        if (test_tup1[i] <= test_tup2[i]) {
            res = false;
            break;
        }
    }
    return res;
}
```",809,"[assert(check_smaller(std::make_tuple(1, 2, 3), std::make_tuple(2, 3, 4)) == false);, assert(check_smaller(std::make_tuple(4, 5, 6), std::make_tuple(3, 4, 5)) == true);, assert(check_smaller(std::make_tuple(11, 12, 13), std::make_tuple(10, 11, 12)) == true);]"
809,This is  a function to iterate over elements repeating each as many times as its count.,"```
#include <vector>
#include <map>

std::vector<int> count_variable(int a, int b, int c, int d) {
    std::map<int, int> counter;
    counter[a]++;
    counter[b]++;
    counter[c]++;
    counter[d]++;

    std::vector<int> elements;
    for (const auto& pair : counter) {
        for (int i = 0; i < pair.second; ++i) {
            elements.push_back(pair.first);
        }
    }
    
    return elements;
}
```",810,"[""assert(count_variable(4, 2, 0, -2) == std::vector<char>{p, p, p, p, q, q});"", ""assert(count_variable(0, 1, 2, 3) == std::vector<char>{q, r, r, s, s, s});"", ""assert(count_variable(11, 15, 12, 23) == std::vector<char>{ p, p, p, p, p, p, p, p, p, p, p, q, q, q, q, q, q, q, q, q, q, q, q, q, q, q, r, r, r, r, r, r, r, r, r, r, r, r, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s, s});""]"
810,This is  a function to check if two lists of tuples are identical or not.,"```
#include <vector>
#include <utility>



bool check_identical(const std::vector<std::pair<int, int>>&a, const std::vector<std::pair<int, int>>&b) {
    return a == b;
}```",811,"[assert(check_identical({{10, 4}, {2, 5}}, {{10, 4}, {2, 5}}) == true);, assert(check_identical({{1, 2}, {3, 7}}, {{12, 14}, {12, 45}}) == false);, assert(check_identical({{2, 14}, {12, 25}}, {{2, 14}, {12, 25}}) == true);]"
811,This is  a function to abbreviate road as rd. in a given string.,"```
#include <string>
#include <regex>

std::string road_rd(const std::string& street) {
    return std::regex_replace(street, std::regex(""Road$""), ""Rd."");
}
```",812,"[assert(road_rd(""ravipadu Road"") == ""ravipadu Rd."");, assert(road_rd(""palnadu Road"") == ""palnadu Rd."");, assert(road_rd(""eshwar enclave Road"") == ""eshwar enclave Rd."");]"
814,"This is  a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.","```

#include <vector>
#include <cassert>

std::vector<int> sort_by_dnf(std::vector<int> arr, int n) {
    int low = 0, mid = 0, high = n - 1;
    while (mid <= high) {
        if (arr[mid] == 0) {
            std::swap(arr[low], arr[mid]);
            low++;
            mid++;
        }
        else if (arr[mid] == 1) {
            mid++;
        }
        else {
            std::swap(arr[mid], arr[high]);
            high--;
        }
    }
    return arr;
}```",815,"[assert(sort_by_dnf({1, 2, 0, 1, 0, 1, 2, 1, 1}, 9) == std::vector<int>({0, 0, 1, 1, 1, 1, 1, 2, 2}));, assert(sort_by_dnf({1, 0, 0, 1, 2, 1, 2, 2, 1, 0}, 10) == std::vector<int>({0, 0, 0, 1, 1, 1, 1, 2, 2, 2}));, assert(sort_by_dnf({2, 2, 1, 0, 0, 0, 1, 1, 2, 1}, 10) == std::vector<int>({0, 0, 0, 1, 1, 1, 1, 2, 2, 2}));]"
815,This is  a function to clear the values of the given tuples.,"```
#include <tuple>
#include <vector>
#include <algorithm>
#include <cassert>

// Function to clear the tuple and return an empty tuple
template <typename... Args>
std::tuple<> clear_tuple(const std::tuple<Args...>&) {
    return std::tuple<>();
}```",816,"[assert(clear_tuple(std::make_tuple(1, 5, 3, 6, 8)) == std::make_tuple());, assert(clear_tuple(std::make_tuple(2, 1, 4, 5, 6)) == std::make_tuple());, assert(clear_tuple(std::make_tuple(3, 2, 5, 6, 8)) == std::make_tuple());]"
816,This is  a function to find numbers divisible by m or n from a list of numbers using lambda function.,"```
#include <vector>
#include <cassert>

std::vector<int> div_of_nums(const std::vector<int>& nums, int a, int b) {
    std::vector<int> result;
    for (int num : nums) {
        if (num % a == 0 || num % b == 0) {
            result.push_back(num);
        }
    }
    return result;
}```",817,"[assert(div_of_nums({19, 65, 57, 39, 152, 639, 121, 44, 90, 190}, 19, 13) == std::vector<int>({19, 65, 57, 39, 152, 190}));, assert(div_of_nums({1, 2, 3, 5, 7, 8, 10}, 2, 5) == std::vector<int>({2, 5, 8, 10}));, assert(div_of_nums({10, 15, 14, 13, 18, 12, 20}, 10, 5) == std::vector<int>({10, 15, 20}));]"
817,This is  a C++ function to count lower case letters in a given string.,"```
#include <cctype>
#include <string>

int lower_ctr(const std::string& str) {
    int count = 0;
    for (char ch : str) {
        if (std::islower(ch)) {
            count++;
        }
    }
    return count;
}```",818,"[assert(lower_ctr(""abc"") == 3);, assert(lower_ctr(""string"") == 6);, assert(lower_ctr(""C++"") == 0);]"
818,This is  a function to count the frequency of consecutive duplicate elements in a given list of numbers.,"```
#include <vector>
#include <unordered_map>
#include <utility>

std::pair<std::vector<int>, std::vector<int>> count_duplic(const std::vector<int>& nums) {
    std::vector<int> unique;
    std::vector<int> counts;
    std::unordered_map<int, int> count_map;

    // Count occurrences of each number
    for (int num : nums) {
        count_map[num]++;
    }

    // Maintain the order of first appearances
    for (int num : nums) {
        if (count_map.find(num) != count_map.end()) {
            unique.push_back(num);
            counts.push_back(count_map[num]);
            count_map.erase(num); // Remove processed number to avoid duplicates
        }
    }

    return { unique, counts };
}```",819,"[assert(count_duplic({ 1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5 }) == std::make_pair( std::vector<int>({ 1, 2, 4, 5 }), std::vector<int>({ 1, 3, 3, 4 }) ));, assert(count_duplic({ 2, 2, 3, 1, 2, 6, 7, 9 }) == std::make_pair( std::vector<int>({ 2, 3, 1, 6, 7, 9 }), std::vector<int>({ 3, 1, 1, 1, 1, 1 }) ));, assert(count_duplic({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12 }) == std::make_pair( std::vector<int>({ 2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 12 }), std::vector<int>({ 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1 }) ));]"
819,This is  a function to check whether the given month number contains 28 days or not.,"```
bool check_monthnum_number(int monthnum1) {
    if (monthnum1 == 2) {
        return true;
    } else {
        return false;
    }
}
```",820,"[assert(check_monthnum_number(2) == true);, assert(check_monthnum_number(1) == false);, assert(check_monthnum_number(3) == false);]"
821,This is  a function to return true if the password is valid.,"```
#include <iostream>
#include <string>
#include <regex>

bool pass_validity(const std::string& p) {
    bool x = true;
    while (x) {  
        if (p.length() < 6 || p.length() > 12) {
            break;
        } else if (!std::regex_search(p, std::regex(""[a-z]""))) {
            break;
        } else if (!std::regex_search(p, std::regex(""[0-9]""))) {
            break;
        } else if (!std::regex_search(p, std::regex(""[A-Z]""))) {
            break;
        } else if (!std::regex_search(p, std::regex(""[$#@]""))) {
            break;
        } else if (std::regex_search(p, std::regex(""\\s""))) {
            break;
        } else {
            return true;
            x = false;
            break;
        }
    }

    return false;
}
```",822,"[assert(pass_validity(""password"") == false);, assert(pass_validity(""Password@10"") == true);, assert(pass_validity(""password@10"") == false);]"
822,This is  a function to check if the given string starts with a substring using regex.,"```
#include <cassert>
#include <string>

std::string check_substring(const std::string& str, const std::string& substr) {
    if (str.find(substr) == 0) {
        return ""string starts with the given substring"";
    } else {
        return ""string doesnt start with the given substring"";
    }
}```",823,"[assert(check_substring(""dreams for dreams makes life fun"", ""makes"") == ""string doesnt start with the given substring"");, assert(check_substring(""Hi there how are you Hi alex"", ""Hi"") == ""string starts with the given substring"");, assert(check_substring(""Its been a long day"", ""been"") == ""string doesnt start with the given substring"");]"
823,This is  a C++ function to remove even numbers from a given list.,"```
#include <vector>

std::vector<int> remove_even(const std::vector<int>& input) {
    std::vector<int> result;
    for (int num : input) {
        if (num % 2 != 0) {
            result.push_back(num);
        }
    }
    return result;
}```",824,"[assert(remove_even({1, 3, 5, 2}) == std::vector<int>({1, 3, 5}));, assert(remove_even({5, 6, 7}) == std::vector<int>({5, 7}));, assert(remove_even({1, 2, 3, 4}) == std::vector<int>({1, 3}));]"
824,This is  a C++ function to access multiple elements of specified index from a given list.,"```
#include <vector>
#include <cassert>

std::vector<int> access_elements(const std::vector<int>& arr, const std::vector<int>& indices) {
    std::vector<int> result;
    for (int index : indices) {
        result.push_back(arr[index]);
    }
    return result;
}```",825,"[assert(access_elements({2, 3, 8, 4, 7, 9}, {0, 3}) == std::vector<int> {2, 4});, assert(access_elements({1, 2, 3, 4, 5}, {1, 2}) == std::vector<int> {2, 3});, assert(access_elements({1, 0, 2, 3}, {0, 1}) == std::vector<int> {1, 0});]"
825,This is  a C++ function to find the type of triangle from the given sides.,"```
#include <cmath>
#include <string>

std::string check_Type_Of_Triangle(double a, double b, double c) {
    double sqa = pow(a, 2);
    double sqb = pow(b, 2);
    double sqc = pow(c, 2);

    if (sqa == sqb + sqc || sqb == sqa + sqc || sqc == sqa + sqb) {
        return ""Right-angled Triangle"";
    } else if (sqa > sqb + sqc || sqb > sqa + sqc || sqc > sqa + sqb) {
        return ""Obtuse-angled Triangle"";
    } else {
        return ""Acute-angled Triangle"";
    }
}
```",826,"[assert(check_Type_Of_Triangle(1, 2, 3) == ""Obtuse-angled Triangle"");, assert(check_Type_Of_Triangle(2, 2, 2) == ""Acute-angled Triangle"");, assert(check_Type_Of_Triangle(1, 0, 1) == ""Right-angled Triangle"");]"
826,This is  a function to sum a specific column of a list in a given list of lists.,"```
#include <iostream>
#include <vector>
#include <cassert>

int sum_column(const std::vector<std::vector<int>>& matrix, int column) {
    int sum = 0;
    for (const auto& row : matrix) {
        sum += row[column];
    }
    return sum;
}```",827,"[assert(sum_column({{1,2,3,2},{4,5,6,2},{7,8,9,5}}, 0) == 12);, assert(sum_column({{1,2,3,2},{4,5,6,2},{7,8,9,5}}, 1) == 15);, assert(sum_column({{1,2,3,2},{4,5,6,2},{7,8,9,5}}, 3) == 9);]"
827,"This is  a function to count alphabets,digits and special charactes in a given string.","```
#include <iostream>
#include <string>
#include <tuple>

std::tuple<int, int, int> count_alpha_dig_spl(const std::string& str) {
    int alphabets = 0, digits = 0, special = 0;
    for (size_t i = 0; i < str.length(); i++) {
        if (isalpha(str[i])) {
            alphabets++;
        }
        else if (isdigit(str[i])) {
            digits++;
        }
        else {
            special++;
        }
    }
    return std::make_tuple(alphabets, digits, special);
}```",828,"[assert(count_alpha_dig_spl(""abc!@#123"") == std::make_tuple(3, 3, 3));, assert(count_alpha_dig_spl(""dgsuy@#$%&1255"") == std::make_tuple(5, 4, 5));, assert(count_alpha_dig_spl(""fjdsif627348#%$^&"") == std::make_tuple(6, 6, 5));]"
828,This is  a function to find out the second most repeated (or frequent) string in the given sequence.,"```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

std::string second_frequent(const std::vector<std::string>& arr) {
    std::unordered_map<std::string, int> count;
    for (const auto& str : arr) {
        count[str]++;
    }

    std::vector<std::pair<std::string, int>> freq(count.begin(), count.end());
    std::sort(freq.begin(), freq.end(), [](const auto& a, const auto& b) {
        return a.second > b.second;
        });

    return (freq.size() > 1) ? freq[1].first : """";
}```",829,"[assert(second_frequent({""aaa"", ""bbb"", ""ccc"", ""bbb"", ""aaa"", ""aaa""}) == ""bbb"");, assert(second_frequent({""abc"", ""bcd"", ""abc"", ""bcd"", ""bcd"", ""bcd""}) == ""abc"");, assert(second_frequent({""cdma"", ""gsm"", ""hspa"", ""gsm"", ""cdma"", ""cdma""}) == ""gsm"");]"
829,This is  a function to round up a number to specific digits.,"```
#include <cassert>
#include <cmath>

double round_up(double value, int decimals) {
    double factor = std::pow(10, decimals);
    return std::ceil(value * factor) / factor;
}```",830,"[assert(round_up(123.01247, 0) == 124);, assert(round_up(123.01247, 1) == 123.1);, assert(round_up(123.01247, 2) == 123.02);]"
830,This is  a C++ function to count equal element pairs from the given array.,"```
#include <vector>

int count_Pairs(std::vector<int>arr, int n) {
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                cnt++;
            }
        }
    }
    return cnt;
}```",831,"[assert(count_Pairs({1,1,1,1}, 4) == 6);, assert(count_Pairs({1,5,1}, 3) == 1);, assert(count_Pairs({3,2,1,7,8,9}, 6) == 0);]"
831,This is  a function to extract the maximum numeric value from a string by using regex.,"```
#include <cassert>
#include <string>
#include <regex>
#include <algorithm>

int extract_max(const std::string& str) {
    std::regex rgx(""\\d+""); // Corrected regex to match sequences of digits
    std::sregex_iterator iter(str.begin(), str.end(), rgx);
    std::sregex_iterator end;
    int max_num = 0;

    // Iterate through all matches and find the maximum number
    while (iter != end) {
        max_num = std::max(max_num, std::stoi(iter->str()));
        iter++;
    }

    return max_num;
}}
```",832,"[assert(extract_max(""100klh564abc365bg"") == 564);, assert(extract_max(""hello300how546mer231"") == 546);, assert(extract_max(""its233beenalong343journey234"") == 343);]"
832,This is  a function to get dictionary keys as a list.,"```
#include <vector>
#include<string>
#include <map>

std::vector<int> get_key(const std::map<int, std::string>input) {
    std::vector<int> keys;
    for (const auto& pair : input) {
        keys.push_back(pair.first);
    }
    return keys;
}```",833,"[assert((get_key({ {1, ""C++""}, {2, ""java""} }) == std::vector<int>{1, 2}));, assert((get_key({ {10, ""red""}, {20, ""blue""}, {30, ""black""} }) == std::vector<int>{10, 20, 30}));, assert((get_key({ {27, ""language""}, {39, ""java""}, {44, ""little""} }) == std::vector<int>{27, 39, 44}));]"
833,This is  a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.,"```
#include <vector>
#include <cassert>

std::vector<std::vector<int>> generate_matrix(int n) {
    std::vector<std::vector<int>> matrix(n, std::vector<int>(n, 0));
    int left = 0, right = n - 1, top = 0, bottom = n - 1;
    int num = 1;

    while (left <= right && top <= bottom) {
        for (int i = left; i <= right; i++) {
            matrix[top][i] = num++;
        }
        top++;

        for (int i = top; i <= bottom; i++) {
            matrix[i][right] = num++;
        }
        right--;

        if (top <= bottom) {
            for (int i = right; i >= left; i--) {
                matrix[bottom][i] = num++;
            }
            bottom--;
        }

        if (left <= right) {
            for (int i = bottom; i >= top; i--) {
                matrix[i][left] = num++;
            }
            left++;
        }
    }

    return matrix;
}```",834,"[assert(generate_matrix(3) == std::vector<std::vector<int>>{{1, 2, 3}, {8, 9, 4}, {7, 6, 5}});, assert(generate_matrix(2) == std::vector<std::vector<int>>{{1, 2}, {4, 3}});, assert(generate_matrix(7) == std::vector<std::vector<int>>{{1, 2, 3, 4, 5, 6, 7}, {24, 25, 26, 27, 28, 29, 8}, {23, 40, 41, 42, 43, 30, 9}, {22, 39, 48, 49, 44, 31, 10}, {21, 38, 47, 46, 45, 32, 11}, {20, 37, 36, 35, 34, 33, 12}, {19, 18, 17, 16, 15, 14, 13}});]"
834,This is  a C++ function to find the slope of a line.,"```
double slope(double x1, double y1, double x2, double y2) {
    return (y2 - y1) / (x2 - x1);
}```",835,"[assert(slope(4, 2, 2, 5) == -1.5);, assert(slope(2, 4, 4, 6) == 1);, assert(slope(1, 2, 4, 2) == 0);]"
835,This is  a function to find length of the subarray having maximum sum.,"```
#include <vector>
#include <cassert>
#include <algorithm> // For std::max

int max_sub_array_sum(const std::vector<int>& nums) {
    int max_sum = nums[0], current_sum = nums[0];
    for (size_t i = 1; i < nums.size(); i++) {
        current_sum = std::max(nums[i], current_sum + nums[i]);
        max_sum = std::max(max_sum, current_sum);
    }
    return max_sum;
}```",836,"[assert(max_sub_array_sum({ -2, -3, 4, -1, -2, 1, 5, -3 }) == 7);, assert(max_sub_array_sum({ 1, -2, 1, 1, -2, 1 }) == 2);, assert(max_sub_array_sum({ -1, -2, 3, 4, 5 }) == 12);     ]"
836,This is  a C++ function to find the cube sum of first n odd natural numbers.,"```
#include <iostream>
using namespace std;

int cube_Sum(int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1);
    }
    return sum; 
}```",837,"[assert(cube_Sum(2) == 28);, assert(cube_Sum(3) == 153);, assert(cube_Sum(4) == 496);]"
837,This is  a C++ function to find minimum number swaps required to make two binary strings equal.,"```
#include <string>

int min_Swaps(const std::string& s1, const std::string& s2) {
    int c0 = 0, c1 = 0;
    for (size_t i = 0; i < s1.length(); ++i) {
        if (s1[i] == 0 && s2[i] == 1) {
            c0++;
        } else if (s1[i] == 1 && s2[i] == 0) {
            c1++;
        }
    }
    int result = c0 / 2 + c1 / 2;
    if (c0 % 2 == 0 && c1 % 2 == 0) {
        return result;
    } else if ((c0 + c1) % 2 == 0) {
        return result + 2;
    } else {
        return -1;
    }
}
```",838,"[assert(min_Swaps(""0011"", ""1111"") == 1);, assert(min_Swaps(""00011"", ""01001"") == 2);, assert(min_Swaps(""111"", ""111"") == 0);]"
838,This is  a function to sort the tuples alphabetically by the first item of each tuple.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <string>

std::vector<std::pair<std::string, std::string>> sortTuple(std::vector<std::pair<std::string, std::string>> tup) {
    std::sort(tup.begin(), tup.end(), [](const std::pair<std::string, std::string>& a, const std::pair<std::string, std::string>& b) {
        if (a.first == b.first) {
            return a.second < b.second;
        }
        return a.first < b.first;
    });
    return tup;
}

bool compareVectors(const std::vector<std::pair<std::string, std::string>>& a, const std::vector<std::pair<std::string, std::string>>& b) {
    return a == b;
}```",839,"[assert(compareVectors({{""Amana"", ""28""}, {""Zenat"", ""30""}, {""Abhishek"", ""29""}, {""Nikhil"", ""21""}, {""B"", ""C""}}, {{""Abhishek"", ""29""}, {""Amana"", ""28""}, {""B"", ""C""}, {""Nikhil"", ""21""}, {""Zenat"", ""30""}}));, assert(compareVectors({{""aaaa"", ""28""}, {""aa"", ""30""}, {""bab"", ""29""}, {""bb"", ""21""}, {""csa"", ""C""}}, {{""aa"", ""30""}, {""aaaa"", ""28""}, {""bab"", ""29""}, {""bb"", ""21""}, {""csa"", ""C""}}));, assert(compareVectors({{""Sarala"", ""28""}, {""Ayesha"", ""30""}, {""Suman"", ""29""}, {""Sai"", ""21""}, {""G"", ""H""}}, {{""Ayesha"", ""30""}, {""G"", ""H""}, {""Sai"", ""21""}, {""Sarala"", ""28""}, {""Suman"", ""29""}}));]"
839,This is  a C++ function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"```
#include <string>

std::string Check_Solution(int a, int b, int c) {  
    if (b == 0) {  
        return ""Yes"";  
    } else { 
        return ""No"";  
    } 
}
```",840,"[assert(Check_Solution(2, 0, -1) == ""Yes"");, assert(Check_Solution(1, -5, 6) == ""No"");, assert(Check_Solution(2, 0, 2) == ""Yes"");]"
840,This is  a function to count the number of inversions in the given array.,"```
#include <iostream>
#include<vector>
using namespace std;

int get_inv_count(std::vector<int> arr, int n) {
    int inv_count = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] > arr[j]) {
                inv_count++;
            }
        }
    }
    return inv_count;
}```",841,"[assert(get_inv_count({1, 20, 6, 4, 5}, 5) == 5);, assert(get_inv_count({8, 4, 2, 1}, 4) == 6);, assert(get_inv_count({3, 1, 2}, 3) == 2);]"
841,This is  a function to find the number which occurs for odd number of times in the given array.,"```
#include <vector>

int get_odd_occurence(const std::vector<int>& arr, int size) {
    int result = 0;
    for (int i = 0; i < size; ++i) {
        result ^= arr[i];
    }
    return result;
}```",842,"[assert(get_odd_occurence({2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13) == 5);, assert(get_odd_occurence({1, 2, 3, 2, 3, 1, 3}, 7) == 3);, assert(get_odd_occurence({5, 7, 2, 7, 5, 2, 5}, 7) == 5);]"
842,This is  a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.,"```
#include <cassert>
#include <vector>
#include <queue>
#include <set>
#include <functional>
#include <algorithm>

using namespace std;

class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int> primes) {
        vector<int> uglies(n); // To store the ugly numbers
        uglies[0] = 1;         // First ugly number is 1
        int k = primes.size();

        vector<int> indices(k, 0);       // Indices for each prime
        vector<int> next(k);             // Next potential ugly number for each prime

        for (int i = 0; i < k; i++) {
            next[i] = primes[i];         // Initialize with primes
        }

        for (int i = 1; i < n; i++) {
            int nextUgly = *min_element(next.begin(), next.end());
            uglies[i] = nextUgly;

            for (int j = 0; j < k; j++) {
                if (nextUgly == next[j]) {
                    indices[j]++;
                    next[j] = uglies[indices[j]] * primes[j];
                }
            }
        }
        return uglies[n - 1];
    }
};```",843,"[assert(sol.nthSuperUglyNumber(12, { 2, 7, 13, 19 }) == 32);, assert(sol.nthSuperUglyNumber(10, { 2, 7, 13, 19 }) == 26);, assert(sol.nthSuperUglyNumber(100, { 2, 7, 13, 19 }) == 5408);]"
843,This is  a C++ function to find the kth element in an array containing odd elements first and then even elements.,"```
#include <vector>

int get_Number(int n, int k) {
    std::vector<int> arr(n);
    int i = 0;
    int odd = 1;
    while (odd <= n) {
        arr[i] = odd;
        i += 1;
        odd += 2;
    }
    int even = 2;
    while (even <= n) {
        arr[i] = even;
        i += 1;
        even += 2;
    }
    return arr[k - 1];
}
```",844,"[assert(get_Number(8, 5) == 2);, assert(get_Number(7, 2) == 3);, assert(get_Number(5, 2) == 3);]"
844,This is  a C++ function to count the number of digits in factorial of a given number.,"```
#include <cmath>

int find_Digits(int n) {
    if (n < 0) {
        return 0;
    }
    if (n <= 1) {
        return 1;
    }
    double x = (n * log10(n / exp(1)) + log10(2 * M_PI * n) / 2.0);
    return floor(x) + 1;
}
```",845,"[assert(find_Digits(7) == 4);, assert(find_Digits(5) == 3);, assert(find_Digits(4) == 2);]"
845,This is  a function to find the minimum number of platforms required for a railway/bus station.,"```
#include <vector>
#include <algorithm>

int find_platform(std::vector<int> arr, std::vector<int> dep, int n) {
    std::sort(arr.begin(), arr.end());
    std::sort(dep.begin(), dep.end());

    int plat_needed = 1;
    int result = 1;
    int i = 1;
    int j = 0;

    while (i < n && j < n) {
        if (arr[i] <= dep[j]) {
            plat_needed++;
            i++;
        }
        else {
            plat_needed--;
            j++;
        }
        if (plat_needed > result) {
            result = plat_needed;
        }
    }

    return result; // Returning second value as zero, since it is not used in the original code.
}```",846,"[assert(find_platform({900, 940, 950, 1100, 1500, 1800}, {910, 1200, 1120, 1130, 1900, 2000}, 6) == 3);, assert(find_platform({100, 200, 300, 400}, {700, 800, 900, 1000}, 4) == 4);, assert(find_platform({5, 6, 7, 8}, {4, 3, 2, 1}, 4) == 1);]"
846,This is  a C++ function to copy a list from a singleton tuple.,"```
#include <vector>

std::vector<int> lcopy(const std::vector<int>& xs) {
    return xs;
}
```",847,"[assert(lcopy({1, 2, 3}) == std::vector<int>({1, 2, 3}));, assert(lcopy({4, 8, 2, 10, 15, 18}) == std::vector<int>({4, 8, 2, 10, 15, 18}));, assert(lcopy({4, 5, 6}) == std::vector<int>({4, 5, 6}));]"
847,This is  a function to find the area of a trapezium.,"```
double area_trapezium(double base1, double base2, double height) {
    double area = 0.5 * (base1 + base2) * height;
    return area;
}
```",848,"[assert(area_trapezium(6, 9, 4) == 30);, assert(area_trapezium(10, 20, 30) == 450);, assert(area_trapezium(15, 25, 35) == 700);]"
848,This is  a C++ function to find sum of all prime divisors of a given number.,"```
#include <vector>

int Sum(int N) {
    std::vector<int> SumOfPrimeDivisors(N + 1, 0);
    for (int i = 2; i <= N; ++i) {
        if (SumOfPrimeDivisors[i] == 0) {
            for (int j = i; j <= N; j += i) {
                SumOfPrimeDivisors[j] += i;
            }
        }
    }
    return SumOfPrimeDivisors[N]; // Returning a pair, second value is placeholder
}```",849,"[assert(Sum(60) == 10);, assert(Sum(39) == 16);, assert(Sum(40) == 7);]"
849,This is  a function to check if a triangle of positive area is possible with the given angles.,"```
bool is_triangleexists(int a, int b, int c) { 
    if (a != 0 && b != 0 && c != 0 && (a + b + c) == 180) { 
        if ((a + b) >= c || (b + c) >= a || (a + c) >= b) { 
            return true; 
        } else { 
            return false; 
        } 
    } else { 
        return false; 
    } 
}
```",850,"[assert(is_triangleexists(50, 60, 70) == true);, assert(is_triangleexists(90, 45, 45) == true);, assert(is_triangleexists(150, 30, 70) == false);]"
850,This is  a C++ function to find sum of inverse of divisors.,"```
#include <iostream>
#include <cmath>

double Sum_of_Inverse_Divisors(int N, double Sum) {
    double ans = Sum / N;
    return round(ans * 100.0) / 100.0;
}
```",851,"[assert(Sum_of_Inverse_Divisors(6, 12) == 2);, assert(Sum_of_Inverse_Divisors(9, 13) == 1.44);, assert(Sum_of_Inverse_Divisors(1, 4) == 4);]"
851,This is  a C++ function to remove negative numbers from a list.,"```
#include <assert.h>
#include <vector>

std::vector<int> remove_negs(const std::vector<int>& nums) {
    std::vector<int> result;
    for (int num : nums) {
        if (num >= 0) {
            result.push_back(num);
        }
    }
    return result;
}```",852,"[assert(remove_negs({1, -2, 3, -4}) == std::vector<int>({1, 3}));, assert(remove_negs({1, 2, 3, -4}) == std::vector<int>({1, 2, 3}));, assert(remove_negs({4, 5, -6, 7, -8}) == std::vector<int>({4, 5, 7}));]"
852,This is  a C++ function to find sum of odd factors of a number.,"```
int sum_of_odd_Factors(int n) {
    int sum = 0;
    for (int i = 1; i <= n; i += 2) {
        if (n % i == 0) {
            sum += i;
        }
    }
    return sum;
}```",853,"[assert(sum_of_odd_Factors(30) == 24);, assert(sum_of_odd_Factors(18) == 13);, assert(sum_of_odd_Factors(2) == 1);]"
853,This is  a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.,"```
#include <vector>
#include <algorithm>

std::vector<int> raw_heap(std::vector<int> arr) {
    std::sort(arr.begin(), arr.end());
    return arr; // Assuming a simple sort for demonstration purposes, adjust as necessary for heap behavior
}```",854,"[assert(raw_heap({25, 44, 68, 21, 39, 23, 89}) == std::vector<int>{21, 23, 25, 39, 44, 68, 89});, assert(raw_heap({25, 35, 22, 85, 14, 65, 75, 25, 58}) == std::vector<int>{14, 22, 25, 25, 35, 58, 65, 75, 85});, assert(raw_heap({4, 5, 6, 2}) == std::vector<int>{2, 4, 5, 6});]"
854,This is  a C++ function to check for even parity of a given number.,"```
bool check_Even_Parity(int x) { 
    int parity = 0; 
    while (x != 0) { 
        x = x & (x - 1); 
        parity += 1; 
    } 
    return (parity % 2 == 0); 
}
```",855,"[assert(check_Even_Parity(10) == true);, assert(check_Even_Parity(11) == false);, assert(check_Even_Parity(18) == true);]"
855,This is  a C++ function to find minimum adjacent swaps required to sort binary array.,"```
#include <vector>
using namespace std;

int find_Min_Swaps(vector<int> arr, int n) {
    vector<int> noOfZeroes(n, 0);
    int count = 0;
    noOfZeroes[n - 1] = 1 - arr[n - 1];
    for (int i = n - 2; i >= 0; i--) {
        noOfZeroes[i] = noOfZeroes[i + 1];
        if (arr[i] == 0) {
            noOfZeroes[i] += 1;
        }
    }
    for (int i = 0; i < n; i++) {
        if (arr[i] == 1) {
            count += noOfZeroes[i];
        }
    }
    return count; // Returning 0 as the second value since the original function had an unused value
}```",856,"[assert(find_Min_Swaps(std::vector<int>{1,0,1,0}, 4) == 3);, assert(find_Min_Swaps(std::vector<int>{0,1,0}, 3) == 1);, assert(find_Min_Swaps(std::vector<int>{0,0,1,1,0}, 5) == 2);]"
857,This is  a function to count number of lists in a given list of lists and square the count.,"```
#include <vector>

std::pair<int, int> count_list(const std::vector<int>& input_list) {
    return {static_cast<int>(input_list.size()) * static_cast<int>(input_list.size()), 0}; // 0 is a placeholder to match the tuple structure
}
```",858,"[assert(count_list({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == 25);, assert(count_list({{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == 16);, assert(count_list({{2, 4}, {{6, 8}, {4, 5, 8}}, {10, 12, 14}}) == 9);]"
858,This is  a function to generate all sublists of a given list.,"```
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> sub_lists(const std::vector<int>& my_list) {
    std::vector<std::vector<int>> subs;
    int n = my_list.size();

    for (int i = 0; i <= n; ++i) {
        std::vector<bool> v(n);
        std::fill(v.begin(), v.begin() + i, true);
        do {
            std::vector<int> temp;
            for (int j = 0; j < n; ++j) {
                if (v[j]) {
                    temp.push_back(my_list[j]);
                }
            }
            subs.push_back(temp);
        } while (std::prev_permutation(v.begin(), v.end()));
    }

    return subs;
}```",859,"[assert((sub_lists({ 10, 20, 30, 40 }) == std::vector<std::vector<int>>{ {}, { 10 }, { 20 }, { 30 }, { 40 }, { 10, 20 }, { 10, 30 }, { 10, 40 }, { 20, 30 }, { 20, 40 }, { 30, 40 }, { 10, 20, 30 }, { 10, 20, 40 }, { 10, 30, 40 }, { 20, 30, 40 }, { 10, 20, 30, 40 }}));, assert((sub_lists({ 1, 2, 3 }) == std::vector<std::vector<int>>{ {}, { 1 }, { 2 }, { 3 }, { 1, 2 }, { 1, 3 }, { 2, 3 }, { 1, 2, 3 }}));]"
859,This is  a function to check whether the given string is ending with only alphanumeric characters or not using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string check_alphanumeric(const std::string& str) {
    std::regex regex(""[a-zA-Z0-9]$"");
    if (std::regex_search(str, regex)) {
        return ""Accept"";
    } else {
        return ""Discard"";
    }
}
```",860,"[assert(check_alphanumeric(""dawood@"") == ""Discard"");, assert(check_alphanumeric(""skdmsam326"") == ""Accept"");, assert(check_alphanumeric(""cooltricks@"") == ""Discard"");]"
860,This is  a function to find all anagrams of a string in a given list of strings using lambda function.,"```
#include <vector>
#include <string>
#include <algorithm>
#include <map>

std::vector<std::string> anagram_lambda(const std::vector<std::string>& texts, const std::string& str) {
    std::map<char, int> countStr;
    for (char c : str) {
        countStr[c]++;
    }

    std::vector<std::string> result;
    for (const std::string& x : texts) {
        std::map<char, int> countX;
        for (char c : x) {
            countX[c]++;
        }
        if (countStr == countX) {
            result.push_back(x);
        }
    }
    return result;
}
```",861,"[assert((anagram_lambda({ ""bcda"", ""abce"", ""cbda"", ""cbea"", ""adcb"" }, ""abcd"") == std::vector<std::string>{""bcda"", ""cbda"", ""adcb""}));, assert(anagram_lambda({ ""recitals"", "" C++"" }, ""articles"") == std::vector<std::string>{""recitals""});, assert(anagram_lambda({ "" keep"", "" abcdef"", "" xyz"" }, "" peek"") == std::vector<std::string>{"" keep""});]"
861,This is  a function to find the occurrences of n most common words in a given text.,"```
#include <string>
#include <vector>
#include <unordered_map>
#include <sstream>
#include <algorithm>

std::vector<std::pair<std::string, int>> n_common_words(const std::string& text, int n) {
    if (n <= 0) return {}; // Handle invalid `n`

    std::unordered_map<std::string, int> word_count;
    std::string word;
    std::istringstream stream(text);

    // Count word frequencies
    while (stream >> word) {
        word_count[word]++;
    }

    // Move to a vector and sort by frequency, then lexicographically for ties
    std::vector<std::pair<std::string, int>> common_words(word_count.begin(), word_count.end());
    std::sort(common_words.begin(), common_words.end(), [](const auto& a, const auto& b) {
        return (a.second > b.second) || (a.second == b.second && a.first < b.first);
        });

    // Resize to `n` elements if necessary
    if (common_words.size() > static_cast<size_t>(n)) {
        common_words.resize(n);
    }

    return common_words;
}```",862,"[assert((n_common_words(""C++ is a programming language"", 1) == std::vector<std::pair<std::string, int>>{ {""C++"", 1} }));, assert((n_common_words(""C++ is a programming language"", 5) == std::vector<std::pair<std::string, int>>{ {""C++"", 1}, { ""is"", 1 }, { ""a"", 1 }, { ""programming"", 1 }, { ""language"", 1 } }));, assert((n_common_words(""this is a test this is only a test"", 2) == std::vector<std::pair<std::string, int>>{ {""this"", 2}, { ""is"", 2 } }));, assert((n_common_words(""hello world hello"", 3) == std::vector<std::pair<std::string, int>>{ {""hello"", 2}, { ""world"", 1 } }));, assert(n_common_words("""", 3).empty()); // Empty input, assert(n_common_words(""hello world hello"", 0).empty()); // `n` <= 0]"
862,This is  a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.,"```
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int find_longest_conseq_subseq(vector<int> arr, int n) {
    int ans = 0;
    int count = 0;
    sort(arr.begin(), arr.end());
    vector<int> v;
    v.push_back(arr[0]);
    for (int i = 1; i < n; i++) {
        if (arr[i] != arr[i - 1]) {
            v.push_back(arr[i]);
        }
    }
    for (int i = 0; i < v.size(); i++) {
        if (i > 0 && v[i] == v[i - 1] + 1) {
            count += 1;
        }
        else {
            count = 1;
        }
        ans = max(ans, count);
    }
    return ans; // Returning a pair. The second value is 0 as in original code.
}```",863,"[assert(find_longest_conseq_subseq({ 1, 2, 2, 3 }, 4) == 3);, assert(find_longest_conseq_subseq({ 1, 9, 3, 10, 4, 20, 2 }, 7) == 4);, assert(find_longest_conseq_subseq({ 36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42 }, 11) == 5);]"
863,This is  a function to find palindromes in a given list of strings using lambda function.,"```
#include <vector>
#include <string>
#include <algorithm>

std::vector<std::string> palindrome_lambda(const std::vector<std::string>& texts) {
    std::vector<std::string> result;
    for (const auto& x : texts) {
        if (x == std::string(x.rbegin(), x.rend())) {
            result.push_back(x);
        }
    }
    return result;
}```",864,"[assert((palindrome_lambda({ ""php"", ""res"", ""C++"", ""abcd"", ""Java"", ""aaa"" }) == std::vector<std::string>{""php"", ""aaa""}));, assert((palindrome_lambda({ ""abcd"", ""C++"", ""abba"", ""aba"" }) == std::vector<std::string>{""abba"", ""aba""}));, assert((palindrome_lambda({ ""abcd"", ""abbccbba"", ""abba"", ""aba"" }) == std::vector<std::string>{""abbccbba"", ""abba"", ""aba""}));]"
864,This is  a function to print n-times a list using map function.,"```
#include <cassert>
#include <vector>

std::vector<int> ntimes_list(const std::vector<int>& input, int n) {
    std::vector<int> result;
    for (int i : input) {
        result.push_back(i * n);
    }
    return result;
}```",865,"[assert(ntimes_list({1, 2, 3, 4, 5, 6, 7}, 3) == std::vector<int>({3, 6, 9, 12, 15, 18, 21}));, assert(ntimes_list({1, 2, 3, 4, 5, 6, 7}, 4) == std::vector<int>({4, 8, 12, 16, 20, 24, 28}));, assert(ntimes_list({1, 2, 3, 4, 5, 6, 7}, 10) == std::vector<int>({10, 20, 30, 40, 50, 60, 70}));]"
865,This is  a function to check whether the given month name contains 31 days or not.,"```
#include <string>

bool check_monthnumb(std::string monthname2) {
    if (monthname2 == ""January"" || monthname2 == ""March"" || monthname2 == ""May"" || 
        monthname2 == ""July"" || monthname2 == ""August"" || monthname2 == ""October"" || 
        monthname2 == ""December"") {
        return true;
    } else {
        return false;
    }
}
```",866,"[assert(check_monthnumb(""February"") == false);, assert(check_monthnumb(""January"") == true);, assert(check_monthnumb(""March"") == true);]"
866,This is  a C++ function to add a minimum number such that the sum of array becomes even.,"```
#include <vector>
#include <iostream>

// Function to count numbers less than `n` in the given vector
int count_less_than(const std::vector<int>& nums, int n) {
    int count = 0;
    for (int num : nums) {
        if (num < n) {
            count++;
        }
    }
    return count;
}```",867,"[assert(count_less_than({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 9) == 8);, assert(count_less_than({ 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == 7);, assert(count_less_than({ 1, 2, 3 }, 3) == 2);     ]"
867,This is  a C++ function to find the length of the last word in a given string.,"```
#include <cassert>
#include <string>
#include <iostream>

int length_Of_Last_Word(const std::string& s) {
    int length = 0;
    bool found = false;
    for (int i = s.size() - 1; i >= 0; --i) {
        if (s[i] !=  ) {
            found = true;
            length++;
        }
        else if (found) {
            break;
        }
    }
    return length;
}```",868,"[assert(length_Of_Last_Word(""C++ language"") == 8);, assert(length_Of_Last_Word(""PHP"") == 3);, assert(length_Of_Last_Word("""") == 0);]"
868,"This is  a function to remove sublists from a given list of lists, which are outside a given range.","```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

std::pair<std::vector<std::vector<int>>, std::vector<int>> remove_list_range(const std::vector<std::vector<int>>& list1, int leftrange, int rigthrange) {
    std::vector<std::vector<int>> result;
    for (const auto& i : list1) {
        // Checking if the minimum and maximum values fall within the range
        if (*std::min_element(i.begin(), i.end()) >= leftrange && *std::max_element(i.begin(), i.end()) <= rigthrange) {
            result.push_back(i);
        }
    }
    return {result, {}}; // Returning the result with an empty second vector
}```",869," [ assert((remove_list_range({ {2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17} }, 13, 17).first == std::vector<std::vector<int>>{ {13, 14, 15, 17}}));,
    assert((remove_list_range({ {2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17} }, 1, 3).first == std::vector<std::vector<int>>{ {2}, { 1, 2, 3 }}));,
    assert((remove_list_range({ {2}, {0}, {1, 2, 3}, {0, 1, 2, 3, 6, 7}, {9, 11}, {13, 14, 15, 17} }, 0, 7).first == std::vector<std::vector<int>>{ {2}, { 0 }, { 1, 2, 3 }, { 0, 1, 2, 3, 6, 7 }}));]"
869,This is  a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"```
#include <vector>
#include <cassert>

int sum_positivenum(const std::vector<int>& nums) {
    int sum = 0;
    for (int num : nums) {
        if (num > 0) {
            sum += num;
        }
    }
    return sum;
}```",870,"[assert(sum_positivenum({2, 4, -6, -9, 11, -12, 14, -5, 17}) == 48);, assert(sum_positivenum({10, 15, -14, 13, -18, 12, -20}) == 50);, assert(sum_positivenum({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}) == 522);]"
870,This is  a C++ function to check whether the given strings are rotations of each other or not.,"```
#include <string>

bool are_Rotations(const std::string& string1, const std::string& string2) {
    size_t size1 = string1.size();
    size_t size2 = string2.size();

    if (size1 != size2) {
        return false;
    }

    std::string temp = string1 + string1;

    return temp.find(string2) != std::string::npos;
}
```",871,"[assert(are_Rotations(""abc"", ""cba"") == false);, assert(are_Rotations(""abcd"", ""cdba"") == false);, assert(are_Rotations(""abacd"", ""cdaba"") == true);]"
871,This is  a function to check if a nested list is a subset of another nested list.,"```
#include <vector>
#include <cassert>

bool check_subset(const std::vector<std::vector<int>>& superset, const std::vector<std::vector<int>>& subset) {
    // Implementation of the function based on required logic
    // Example implementation: Check if all elements in subset are in superset
    for (const auto& s : subset) {
        if (std::find(superset.begin(), superset.end(), s) == superset.end()) {
            return false;
        }
    }
    return true;
}```",872,"[assert(check_subset({ {1, 3}, {5, 7}, {9, 11}, {13, 15, 17} }, { {1, 3}, {13, 15, 17} }) == true);, assert(check_subset({ {1, 2}, {2, 3}, {3, 4}, {5, 6} }, { {3, 4}, {5, 6} }) == true);]"
872,This is  a function to solve the fibonacci sequence using recursion.,"```
int fibonacci(int n) {
    if (n == 1 || n == 2) {
        return 1;
    } else {
        return (fibonacci(n - 1) + fibonacci(n - 2));
    }
}
```",873,"[assert(fibonacci(7) == 13);, assert(fibonacci(8) == 21);, assert(fibonacci(9) == 34);]"
873,This is  a C++ function to check if the string is a concatenation of another string.,"```
#include <string>

bool check_Concat(const std::string& str1, const std::string& str2) {
    int N = str1.length();
    int M = str2.length();
    if (N % M != 0) {
        return false;
    }
    for (int i = 0; i < N; ++i) {
        if (str1[i] != str2[i % M]) {
            return false;
        }
    }
    return  true;
}```",874,"[assert(check_Concat(""abcabcabc"", ""abc"") == true);, assert(check_Concat(""abcab"", ""abc"") == false);, assert(check_Concat(""aba"", ""ab"") == false);]"
874,This is  a function to find the minimum difference in the tuple pairs of given tuples.,"```
#include <cassert>
#include <vector>
#include <algorithm>
#include <cmath>

int min_difference(const std::vector<std::pair<int, int>>&pairs) {
    std::vector<int> differences;
    for (const auto& p : pairs) {
        differences.push_back(std::abs(p.first - p.second));
    }
    return *std::min_element(differences.begin(), differences.end());
}```",875,"[assert(min_difference({{3, 5}, {1, 7}, {10, 3}, {1, 2}}) == 1);, assert(min_difference({{4, 6}, {12, 8}, {11, 4}, {2, 13}}) == 2);, assert(min_difference({{5, 17}, {3, 9}, {12, 5}, {3, 24}}) == 6);]"
875,This is  a C++ function to find lcm of two positive integers.,"```
#include <iostream>
using namespace std;

int lcm(int x, int y) {
    int z;
    if (x > y) {
        z = x;
    }
    else {
        z = y;
    }
    while (true) {
        if ((z % x == 0) && (z % y == 0)) {
            return z;
        }
        z += 1;
    }
}```",876,"[assert(lcm(4, 6) == 12);, assert(lcm(15, 17) == 255);, assert(lcm(2, 6) == 6);]"
876,This is  a C++ function to sort the given string.,"```
#include <algorithm>
#include <string>

std::string sort_String(std::string str) {
    std::sort(str.begin(), str.end());
    return str;
}
```",877,"[assert(sort_String(""cba"") == ""abc"");, assert(sort_String(""data"") == ""aadt"");, assert(sort_String(""zxy"") == ""xyz"");]"
877,This is  a function to check if the given tuple contains only k elements.,"```
#include <tuple>
#include <vector>
#include <algorithm>

bool check_tuples(std::tuple<int, int, int, int, int, int> t, std::vector<int> vec) {
    std::vector<int> tuple_elements = { std::get<0>(t), std::get<1>(t), std::get<2>(t),
                                        std::get<3>(t), std::get<4>(t), std::get<5>(t) };
    for (int v : vec) {
        if (std::count(tuple_elements.begin(), tuple_elements.end(), v) == 0) {
            return false;
        }
    }
    return true;
}```",878,"[assert(check_tuples(std::make_tuple(3, 5, 6, 5, 3, 6), { 3, 6, 5 }) == true);, assert(check_tuples(std::make_tuple(4, 5, 6, 4, 6, 5), { 4, 5, 6 }) == true);, assert(check_tuples(std::make_tuple(9, 8, 7, 6, 8, 9), { 9, 8, 1 }) == false);]"
878,"This is  a function that matches a string that has an a followed by anything, ending in b by using regex.","```
#include <iostream>
#include <regex>
#include <string>

std::string text_match(const std::string& text) {
    std::regex patterns(""a.*?b$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",879,"[assert(text_match(""aabbbbd"") == ""Not matched!"");, assert(text_match(""aabAbbbc"") == ""Not matched!"");, assert(text_match(""accddbbjjjb"") == ""Found a match!"");]"
879,This is  a C++ function to find number of solutions in quadratic equation.,"```
#include <string>

std::string Check_Solution(int a, int b, int c) { 
    if ((b * b) - (4 * a * c) > 0) { 
        return ""2 solutions""; 
    } else if ((b * b) - (4 * a * c) == 0) { 
        return ""1 solution""; 
    } else { 
        return ""No solutions""; 
    } 
}
```",880,"[assert(Check_Solution(2, 5, 2) == ""2 solutions"");, assert(Check_Solution(1, 1, 1) == ""No solutions"");, assert(Check_Solution(1, 2, 1) == ""1 solution"");]"
880,This is  a function to find the sum of first even and odd number of a given list.,"```
#include <iostream>
#include <vector>

int sum_even_odd(const std::vector<int> list1) {
    int first_even = -1;
    int first_odd = -1;

    for (int el : list1) {
        if (el % 2 == 0 && first_even == -1) {
            first_even = el;
        }
        if (el % 2 != 0 && first_odd == -1) {
            first_odd = el;
        }
        if (first_even != -1 && first_odd != -1) {
            break;
        }
    }

    return first_even + first_odd;
}```",881,"[assert(sum_even_odd({ 1, 3, 5, 7, 4, 1, 6, 8 }) == 5);, assert(sum_even_odd({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }) == 3);, assert(sum_even_odd({ 1, 5, 7, 9, 10 }) == 11);]"
881,This is  a function to caluclate perimeter of a parallelogram.,"```
#include <utility>

int parallelogram_perimeter(int b, int h) {
    int perimeter = 2 * (b + h);
    return perimeter; // Return perimeter as a pair
}```",882,"[assert(parallelogram_perimeter(10, 20) == 60);, assert(parallelogram_perimeter(15, 20) == 70);, assert(parallelogram_perimeter(8, 9) == 34);]"
882,This is  a function to find numbers divisible by m and n from a list of numbers using lambda function.,"```
#include <vector>
#include <algorithm>

std::pair<std::vector<int>, std::vector<int>> div_of_nums(const std::vector<int>& nums, int m, int n) {
    std::vector<int> result;
    std::copy_if(nums.begin(), nums.end(), std::back_inserter(result), [m, n](int x) {
        return (x % m == 0 && x % n == 0);
    });
    return {result};
}
```",883,"[assert((div_of_nums({ 19, 65, 57, 39, 152, 639, 121, 44, 90, 190 }, 2, 4) == std::vector<int>{152, 44}));, assert(div_of_nums({ 1, 2, 3, 5, 7, 8, 10 }, 2, 5) == std::vector<int>{10});, assert((div_of_nums({ 10, 15, 14, 13, 18, 12, 20 }, 10, 5) == std::vector<int>{10, 20}));]"
883,This is  a C++ function to check whether all the bits are within a given range or not.,"```
bool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {
    int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1);
    int new_num = n & num;
    return (num == new_num);
}
```",884,"[assert(all_Bits_Set_In_The_Given_Range(10, 2, 1) == true);, assert(all_Bits_Set_In_The_Given_Range(5, 2, 4) == false);, assert(all_Bits_Set_In_The_Given_Range(22, 2, 3) == true);]"
884,This is  a C++ function to check whether the two given strings are isomorphic to each other or not.,"```
#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>

bool is_Isomorphic(const std::string& str1, const std::string& str2) {
    std::unordered_map<char, std::vector<int>> dict_str1;
    std::unordered_map<char, std::vector<int>> dict_str2;

    for (size_t i = 0; i < str1.size(); ++i) {
        dict_str1[str1[i]].push_back(i);
    }
    for (size_t j = 0; j < str2.size(); ++j) {
        dict_str2[str2[j]].push_back(j);
    }

    std::vector<std::vector<int>> values1, values2;
    for (const auto& pair : dict_str1) {
        values1.push_back(pair.second);
    }
    for (const auto& pair : dict_str2) {
        values2.push_back(pair.second);
    }

    std::sort(values1.begin(), values1.end());
    std::sort(values2.begin(), values2.end());

    return values1 == values2;
}
```",885,"[assert(is_Isomorphic(""paper"", ""title"") == true);, assert(is_Isomorphic(""ab"", ""ba"") == true);, assert(is_Isomorphic(""ab"", ""aa"") == false);]"
885,This is  a function to add all the numbers in a list and divide it with the length of the list.,"```
#include <vector>
#include <cassert>
#include <iostream>

double sum_num(const std::vector<int>& numbers) {
    double total = 0;
    for (int x : numbers) {
        total += x;
    }
    return total / numbers.size();
}
```",886,"[assert(sum_num({ 8, 2, 3, 0, 7 }) == 4.0);, assert(sum_num({ -10, -20, -30 }) == -20.0);, assert(sum_num({ 19, 15, 18 }) == 17.333333333333332);]"
886,This is  a C++ function to check whether the given number is odd or not using bitwise operator.,"```
bool is_odd(int n) {
    if ((n ^ 1) == (n - 1)) {
        return true;
    } else {
        return false;
    }
}
```",887,"[assert(is_odd(5) == true);, assert(is_odd(6) == false);, assert(is_odd(7) == true);]"
887,This is  a function to substract the elements of the given nested tuples.,"```
#include <tuple>
#include <vector>
#include <iostream>

std::vector<std::tuple<int, int>> subtract_elements(const std::vector<std::tuple<int, int>>& test_tup1, const std::vector<std::tuple<int, int>>& test_tup2) {
    std::vector<std::tuple<int, int>> res;

    for (size_t i = 0; i < test_tup1.size(); ++i) {
        int a = std::get<0>(test_tup1[i]) - std::get<0>(test_tup2[i]);
        int b = std::get<1>(test_tup1[i]) - std::get<1>(test_tup2[i]);
        res.emplace_back(a, b);
    }

    return res;
}
```",888,"[assert(substract_elements({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}) == std::vector<std::tuple<int, int>>{{-5, -4}, {1, -4}, {1, 8}, {-6, 7}});, assert(substract_elements({{13, 4}, {14, 6}, {13, 10}, {12, 11}}, {{19, 8}, {14, 10}, {12, 2}, {18, 4}}) == std::vector<std::tuple<int, int>>{{-6, -4}, {0, -4}, {1, 8}, {-6, 7}});, assert(substract_elements({{19, 5}, {18, 7}, {19, 11}, {17, 12}}, {{12, 9}, {17, 11}, {13, 3}, {19, 5}}) == std::vector<std::tuple<int, int>>{{7, -4}, {1, -4}, {6, 8}, {-2, 7}});]"
889,This is  a C++ function to find the index of an extra element present in one sorted array.,"```
#include <vector>

int find_Extra(std::vector<int> arr1, std::vector<int> arr2, int n) {
    for (int i = 0; i < n; i++) {
        if (arr1[i] != arr2[i]) {
            return i;
        }
    }
    return n;
}```",890,"[assert(find_Extra({ 1, 2, 3, 4 }, { 1, 2, 3 }, 3) == 3);, assert(find_Extra({ 2, 4, 6, 8, 10 }, { 2, 4, 6, 8 }, 4) == 4);, assert(find_Extra({ 1, 3, 5, 7, 9, 11 }, { 1, 3, 5, 7, 9 }, 5) == 5);]"
890,This is  a C++ function to check whether the given two numbers have same number of digits or not.,"```
bool same_Length(int A, int B) { 
    while (A > 0 && B > 0) { 
        A = A / 10; 
        B = B / 10; 
    } 
    if (A == 0 && B == 0) { 
        return true; 
    } 
    return false; 
}
```",891,"[assert(same_Length(12, 1) == false);, assert(same_Length(2, 2) == true);, assert(same_Length(10, 20) == true);]"
891,This is  a function to remove multiple spaces in a string.,"```
#include <regex>
#include <string>

std::string remove_spaces(const std::string& text) {
    std::regex ws_re(""\\s+"");
    return std::regex_replace(text, ws_re, "" "");
}
```",892,"[assert(remove_spaces(""C++  program"") == ""C++ program"");, assert(remove_spaces(""C++   programming    language"") == ""C++ programming language"");, assert(remove_spaces(""C++                     program"") == ""C++ program"");]"
893,This is  a function to convert the given string of float type into tuple.,"```
#include <iostream>
#include <sstream>
#include <vector>
#include <tuple>

std::tuple<double, double> float_to_tuple(const std::string& test_str) {
    std::stringstream ss(test_str);
    std::string item;
    std::vector<double> values;

    while (std::getline(ss, item, , )) {
        values.push_back(std::stod(item));
    }

    return std::make_tuple(values[0], values[1]);
}
```",894,"[assert(float_to_tuple(""1.2, 1.3, 2.3, 2.4, 6.5"") == std::make_tuple(1.2f, 1.3f, 2.3f, 2.4f, 6.5f));, assert(float_to_tuple(""2.3, 2.4, 5.6, 5.4, 8.9"") == std::make_tuple(2.3f, 2.4f, 5.6f, 5.4f, 8.9f));, assert(float_to_tuple(""0.3, 0.5, 7.8, 9.4"") == std::make_tuple(0.3f, 0.5f, 7.8f, 9.4f));]"
894,This is  a function to find the maximum sum of subsequences of given array with no adjacent elements.,"```
#include <vector>
#include <algorithm>

std::pair<int, int> max_sum_subseq(const std::vector<int>& A) {
    int n = A.size();
    if (n == 1) {
        return {A[0], 0};
    }
    std::vector<int> look_up(n);
    look_up[0] = A[0];
    look_up[1] = std::max(A[0], A[1]);
    for (int i = 2; i < n; ++i) {
        look_up[i] = std::max(look_up[i - 1], look_up[i - 2] + A[i]);
        look_up[i] = std::max(look_up[i], A[i]);
    }
    return {look_up[n - 1], 0}; // Returning second value as 0 since its not used
}
```",895,"[assert(max_sum_subseq({1, 2, 9, 4, 5, 0, 4, 11, 6}) == 26);, assert(max_sum_subseq({1, 2, 9, 5, 6, 0, 5, 12, 7}) == 28);, assert(max_sum_subseq({1, 3, 10, 5, 6, 0, 6, 14, 21}) == 44);]"
895,This is  a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<std::pair<int, int>> sort_list_last(std::vector<std::pair<int, int>> &pairs) {
    std::sort(pairs.begin(), pairs.end(), [](const std::pair<int, int> &a, const std::pair<int, int> &b) {
        return a.second < b.second;
    });
    return pairs;
}```",896,"[assert(sort_list_last({{2, 5}, {1, 2}, {4, 4}, {2, 3}, {2, 1}}) == std::vector<std::pair<int, int>>{{2, 1}, {1, 2}, {2, 3}, {4, 4}, {2, 5}});, assert(sort_list_last({{9, 8}, {4, 7}, {3, 5}, {7, 9}, {1, 2}}) == std::vector<std::pair<int, int>>{{1, 2}, {3, 5}, {4, 7}, {9, 8}, {7, 9}});, assert(sort_list_last({{20, 50}, {10, 20}, {40, 40}}) == std::vector<std::pair<int, int>>{{10, 20}, {40, 40}, {20, 50}});]"
896,This is  a C++ function to check whether the word is present in a given sentence or not.,"```
#include <string>
#include <vector>
#include <sstream>

bool is_Word_Present(const std::string& sentence, const std::string& word) {
    std::istringstream iss(sentence);
    std::string token;
    while (iss >> token) {
        if (token == word) {
            return true;
        }
    }
    return false;
}
```",897,"[assert(is_Word_Present(""machine learning"", ""machine"") == true);, assert(is_Word_Present(""easy"", ""fun"") == false);, assert(is_Word_Present(""C++ language"", ""code"") == false);]"
897,"This is  a function to extract specified number of elements from a given list, which follow each other continuously.","```
#include <vector>

std::vector<int> extract_elements(const std::vector<int>& arr, int n) {
    std::vector<int> result;
    for (const auto& element : arr) {
        if (element == n) {
            result.push_back(element);
        }
    }
    return result;
}```",898,"[assert((extract_elements({ 1, 1, 3, 4, 4, 5, 6, 7 }, 4) == std::vector<int>{4, 4}));, assert((extract_elements({ 0, 1, 2, 3, 4, 4, 4, 4, 5, 7 }, 4) == std::vector<int>{4, 4, 4, 4}));, assert((extract_elements({ 0, 0, 0, 0, 0 }, 0) == std::vector<int>{0, 0, 0, 0, 0}));]"
898,This is  a C++ function to check whether an array can be sorted or not by picking only the corner elements.,"```
#include <vector>

bool check(const std::vector<int>& arr, int n) {
    int g = 0;
    for (int i = 1; i < n; i++) {
        if (arr[i] - arr[i - 1] > 0 && g == 1) {
            return false;
        }
        if (arr[i] - arr[i] < 0) {
            g = 1;
        }
    }
    return true;
}```",899,"[assert(check({3, 2, 1, 2, 3, 4}, 6) == true);, assert(check({2, 1, 4, 5, 1}, 5) == true);, assert(check({1, 2, 2, 1, 2, 3}, 6) == true);]"
899,This is  a function where a string will start with a specific number.,"```
#include <regex>
#include <string>

bool match_num(const std::string& num) {
    std::regex pattern(""^\\d-[\\d]{7}$"");
    return std::regex_match(num, pattern);
}```",900,"[assert(match_num(""5-2345861"") == true);, assert(match_num(""6-2345861"") == true);, assert(match_num(""78910"") == false);]"
901,This is  a function to combine two dictionaries by adding values for common keys.,"```
#include <iostream>
#include <map>
#include <cassert>

std::map<std::string, int> add_dict(const std::map<std::string, int>& dict1, const std::map<std::string, int>& dict2) {
    std::map<std::string, int> result = dict1;

    for (const auto& pair : dict2) {
        result[pair.first] += pair.second;
    }

    return result;
}```",902,"[assert(add_dict({{""a"", 100}, {""b"", 200}, {""c"", 300}}, {{""a"", 300}, {""b"", 200}, {""d"", 400}}) == (std::map<std::string, int>{{""b"", 400}, {""d"", 400}, {""a"", 400}, {""c"", 300}}));, assert(add_dict({{""a"", 500}, {""b"", 700}, {""c"", 900}}, {{""a"", 500}, {""b"", 600}, {""d"", 900}}) == (std::map<std::string, int>{{""b"", 1300}, {""d"", 900}, {""a"", 1000}, {""c"", 900}}));, assert(add_dict({{""a"", 900}, {""b"", 900}, {""d"", 900}}, {{""a"", 900}, {""b"", 900}, {""d"", 900}}) == (std::map<std::string, int>{{""b"", 1800}, {""d"", 1800}, {""a"", 1800}}));]"
903,This is  a function to return true if the given number is even else return false.,"```
bool even_num(int x) {
    if (x % 2 == 0) {
        return true;
    } else {
        return false;
    }
}
```",904,"[assert(even_num(13.5) == false);, assert(even_num(0) == true);, assert(even_num(-9) == false);]"
904,This is  a C++ function to find the sum of squares of binomial co-efficients.,"```
#include <iostream>
#include <cassert>

long factorial(int start, int end) {
    long res = 1;
    for (int i = start; i <= end; i++) {
        res *= i;
    }
    return res;
}

int sumOfSquare(int n) {
    return static_cast<int>(factorial(n + 1, 2 * n) / factorial(1, n));
}```",905,"[assert(sumOfSquare(4) == 70);, assert(sumOfSquare(5) == 252);, assert(sumOfSquare(2) == 6);]"
905,"This is  a function to extract year, month and date from a url by using regex.","```
#include <iostream>
#include <regex>
#include <string>
#include <array>


std::array<std::string, 3> extractDate(const std::string& url) {
    std::regex pattern(""/(\\d{4})/(\\d{1,2})/(\\d{1,2})/"");
    std::smatch matcher;

    std::array<std::string, 3> dates = { """", """", """" };
    if (std::regex_search(url, matcher, pattern)) {
        dates[0] = matcher[1].str();
        dates[1] = (matcher[2].str().length() == 1) ? ""0"" + matcher[2].str() : matcher[2].str();
        dates[2] = (matcher[3].str().length() == 1) ? ""0"" + matcher[3].str() : matcher[3].str();
    }
    return dates;
}```",906,"[assert((extractDate(""https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/"") == std::array<std::string, 3>{""2016"", ""09"", ""02""}));, assert((extractDate(""https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/"") == std::array<std::string, 3>{""2020"", ""11"", ""03""}));, assert((extractDate(""https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms"") == std::array<std::string, 3>{""2020"", ""12"", ""29""}));]"
906,This is  a function to print the first n lucky numbers.,"```
std::vector<int> luckyNum(int n) {
    std::vector<int> list(n * n + 9);
    for (int i = 0; i < list.size(); i++) {
        list[i] = -1 + 2 * i;
    }

    int i = 2;
    while (i < list.size()) {
        std::unordered_set<int> set(list.begin(), list.end());

        int step = list[i];
        for (int j = i; j < list.size(); j++) {
            if (list[j] % step == 0) {
                set.erase(list[j]);
            }
        }

        list.assign(set.begin(), set.end());
        std::sort(list.begin(), list.end());
        i++;
    }

    return std::vector<int>(list.begin() + 1, list.begin() + n + 1);
}```",907,"[assert((luckyNum(10) == std::vector<int>{1, 5, 11, 17, 23, 29, 37, 43, 53, 59}));, assert((luckyNum(5) == std::vector<int>{1, 5, 11, 17, 23}));, assert((luckyNum(8) == std::vector<int>{1, 5, 11, 17, 23, 29, 37, 43}));]"
907,This is  a function to find the fixed point in the given array.,"```
#include <iostream>
#include <cassert>
#include <vector>

int findFixedPoint(const std::vector<int>& arr, int n) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == i) {
            return i;
        }
    }
    return -1;
}```",908,"[assert(findFixedPoint({ -10, -1, 0, 3, 10, 11, 30, 50, 100 }, 9) == 3);, assert(findFixedPoint({ 1, 2, 3, 4, 5, 6, 7, 8 }, 8) == -1);, assert(findFixedPoint({ 0, 2, 5, 8, 17 }, 5) == 0);]"
908,This is  a function to find the previous palindrome of a specified number.,"```
#include <iostream>
#include <string>

std::pair<int, int> previous_palindrome(int num) {
    for (int x = num - 1; x > 0; --x) {
        std::string str_x = std::to_string(x);
        std::string rev_str_x = std::string(str_x.rbegin(), str_x.rend());
        if (str_x == rev_str_x) {
            return {x, 0}; // Assuming we want to match the return type
        }
    }
    return {0, 0}; // If no palindrome is found
}
```",909,"[assert(previous_palindrome(99) == 88);, assert(previous_palindrome(1221) == 1111);, assert(previous_palindrome(120) == 111);]"
909,This is  a function to validate a gregorian date.,"```
#include <iostream>
#include <stdexcept>

bool check_date(int m, int d, int y) {
    try {
        // Check if the month, day, and year are valid
        if (m < 1 || m > 12) throw std::invalid_argument(""Invalid month"");
        if (d < 1 || d > 31) throw std::invalid_argument(""Invalid day"");
        if (y < 1) throw std::invalid_argument(""Invalid year"");

        // Check for days in month
        if ((m == 4 || m == 6 || m == 9 || m == 11) && d > 30) throw std::invalid_argument(""Invalid day"");
        if (m == 2) {
            if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0)) {
                // Leap year
                if (d > 29) throw std::invalid_argument(""Invalid day"");
            } else {
                if (d > 28) throw std::invalid_argument(""Invalid day"");
            }
        }

        return true;
    } catch (const std::invalid_argument&) {
        return false;
    }
}
```",910,"[assert(check_date(11, 11, 2002) == true);, assert(check_date(13, 11, 2002) == false);, assert(check_date(""11"", ""11"", ""2002"") == true);]"
910,This is  a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"```
#include <vector>
#include <algorithm>
#include <queue>

int maximum_product(std::vector<int>& nums) {
    std::vector<int> a(nums);
    std::vector<int> b(nums);
    std::sort(a.begin(), a.end(), std::greater<int>());
    std::sort(b.begin(), b.end());
    
    return std::max(a[0] * a[1] * a[2], a[0] * b[0] * b[1]);
}
```",911,"[assert(maximum_product({12, 74, 9, 50, 61, 41}) == 225700);, assert(maximum_product({25, 35, 22, 85, 14, 65, 75, 25, 58}) == 414375);, assert(maximum_product({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}) == 2520);]"
911,"This is  a function to find ln, m lobb number.","```
#include <vector>

int binomial_coeff(int n, int k) {
    std::vector<std::vector<int>> C(n + 1, std::vector<int>(k + 1, 0));
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= std::min(i, k); j++) {
            if (j == 0 || j == i) {
                C[i][j] = 1;
            } else {
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
            }
        }
    }
    return C[n][k];
}

double lobb_num(int n, int m) {
    return static_cast<double>((2 * m + 1) * binomial_coeff(2 * n, m + n)) / (m + n + 1);
}
```",912,"[assert(int(lobb_num(5, 3)) == 35);, assert(int(lobb_num(3, 2)) == 5);, assert(int(lobb_num(4, 2)) == 20);]"
912,This is  a function to check for a number at the end of a string.,"```
#include <regex>
#include <string>

bool end_num(const std::string& str) {
    std::regex text("".*[0-9]$"");
    return std::regex_match(str, text);
}
```",913,"[assert(end_num(""abcdef"") == false);, assert(end_num(""abcdef7"") == true);, assert(end_num(""abc"") == false);]"
913,This is  a C++ function to check whether the given string is made up of two alternating characters or not.,"```
#include <string>

bool is_Two_Alter(const std::string& s) {
    for (size_t i = 0; i < s.length() - 2; ++i) {
        if (s[i] != s[i + 2]) {
            return false;
        }
    }
    if (s[0] == s[1]) {
        return false;
    }
    return true;
}
```",914,"[assert(is_Two_Alter(""abab"") == true);, assert(is_Two_Alter(""aaaa"") == false);, assert(is_Two_Alter(""xyz"") == false);]"
915,This is  a function to find if there is a triplet in the array whose sum is equal to a given value.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> findTripletArray(const std::vector<int>& A, int arrSize, int sum) {
    for (int i = 0; i < arrSize - 2; i++) {
        for (int j = i + 1; j < arrSize - 1; j++) {
            for (int k = j + 1; k < arrSize; k++) {
                if (A[i] + A[j] + A[k] == sum) {
                    return { A[i], A[j], A[k] };
                }
            }
        }
    }
    return {};  // Return an empty vector if no triplet is found
}```",916,"[assert((findTripletArray({ 1, 4, 45, 6, 10, 8 }, 6, 22) == std::vector<int>{4, 10, 8}));, assert((findTripletArray({ 12, 3, 5, 2, 6, 9 }, 6, 24) == std::vector<int>{12, 3, 9}));, assert((findTripletArray({ 1, 2, 3, 4, 5 }, 5, 9) == std::vector<int>{1, 3, 5}));]"
916,This is  a function to find the sequences of one upper case letter followed by lower case letters.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_uppercase_lowercase(const std::string& text) {
    std::regex patterns(""[A-Z]+[a-z]+$"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",917,"[assert(text_uppercase_lowercase(""AaBbGg"") == ""Found a match!"");, assert(text_uppercase_lowercase(""aA"") == ""Not matched!"");, assert(text_uppercase_lowercase(""C++"") == ""Not matched!"");]"
918,This is  a C++ function to multiply all items in the list.,"```
#include <vector>

int multiply_list(const std::vector<int> items) {
    int tot = 1;
    for (int x : items) {
        tot *= x;
    }
    return tot;}
```",919,"[assert(multiply_list({1, -2, 3}) == -6);, assert(multiply_list({1, 2, 3, 4}) == 24);, assert(multiply_list({3, 1, 2, 3}) == 18);]"
919,This is  a function to remove all tuples with all none values in the given tuple list.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <sstream>

std::string removeTuple(const std::vector<std::vector<int>>& objects) {
    std::vector<std::vector<int>> res;
    
    for (const auto& sub : objects) {
        bool allNull = true;
        
        for (const auto& ele : sub) {
            if (ele != 0) {  // Assuming 0 as the representation of null
                allNull = false;
                break;
            }
        }
        
        if (!allNull) {
            res.push_back(sub);
        }
    }
    
    // Convert result to string for comparison
    std::stringstream ss;
    ss << ""["";
    for (size_t i = 0; i < res.size(); ++i) {
        ss << ""["";
        for (size_t j = 0; j < res[i].size(); ++j) {
            ss << res[i][j];
            if (j != res[i].size() - 1) ss << "", "";
        }
        ss << ""]"";
        if (i != res.size() - 1) ss << "", "";
    }
    ss << ""]"";
    
    return ss.str();
}```",920,"[ assert(removeTuple({{0, 2}, {0, 0}, {3, 4}, {12, 3}, {0}}) == ""[[0, 2], [3, 4], [12, 3]]"");,

   
    assert(removeTuple({{0, 0}, {0, 0}, {3, 6}, {17, 3}, {0, 1}}) == ""[[3, 6], [17, 3], [0, 1]]"");,

    
    assert(removeTuple({{1, 2}, {2, 0}, {3, 0}, {24, 3}, {0, 0}}) == ""[[1, 2], [2, 0], [3, 0], [24, 3]]"");]"
920,This is  a function to perform chunking of tuples each of size n.,"```
#include <iostream>
#include <vector>
#include <tuple>

std::vector<std::vector<int>> chunk_tuples(const std::vector<int>& input, int chunk_size) {
    std::vector<std::vector<int>> result;
    for (size_t i = 0; i < input.size(); i += chunk_size) {
        std::vector<int> chunk(input.begin() + i, input.begin() + std::min(i + chunk_size, input.size()));
        result.push_back(chunk);
    }
    return result;
}```",921,"[assert((chunk_tuples({ 10, 4, 5, 6, 7, 6, 8, 3, 4 }, 3) == std::vector<std::vector<int>>{ {10, 4, 5}, { 6, 7, 6 }, { 8, 3, 4 }}));, assert((chunk_tuples({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 2) == std::vector<std::vector<int>>{ {1, 2}, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9 }}));, assert((chunk_tuples({ 11, 14, 16, 17, 19, 21, 22, 25 }, 4) == std::vector<std::vector<int>>{ {11, 14, 16, 17}, { 19, 21, 22, 25 }}));]"
921,This is  a function to find a pair with the highest product from a given array of integers.,"```
#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> maxProduct(const std::vector<int>& arr) {
    int arrLen = arr.size();
    if (arrLen < 2) {
        return {};
    }

    int x = arr[0], y = arr[1];
    for (int i = 0; i < arrLen; i++) {
        for (int j = i + 1; j < arrLen; j++) {
            if (arr[i] * arr[j] > x * y) {
                x = arr[i];
                y = arr[j];
            }
        }
    }

    return { x, y };
}```",922,"[assert((maxProduct({ 1, 2, 3, 4, 7, 0, 8, 4 }) == std::vector<int>{7, 8}));, assert((maxProduct({ 0, -1, -2, -4, 5, 0, -6 }) == std::vector<int>{-4, -6}));, assert((maxProduct({ 1, 3, 5, 6, 8, 9 }) == std::vector<int>{8, 9}));]"
922,This is  a function to find the length of the shortest string that has both str1 and str2 as subsequences.,"```
#include <string>
#include <algorithm>

int super_seq(const std::string& X, const std::string& Y, int m, int n) {
    if (m == 0)
        return n;
    if (n == 0)
        return m;
    if (X[m - 1] == Y[n - 1])
        return 1 + super_seq(X, Y, m - 1, n - 1);
    return 1 + std::min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1));
}```",923,"[assert(super_seq(""AGGTAB"", ""GXTXAYB"", 6, 7) == 9);, assert(super_seq(""feek"", ""eke"", 4, 3) == 5);, assert(super_seq(""PARRT"", ""RTA"", 5, 3) == 6);]"
923,This is  a function to find maximum of two numbers.,"```
int max_of_two(int x, int y) {
    if (x > y) {
        return x;
    }
    return y;
}
```",924,"[assert(max_of_two(10, 20) == 20);, assert(max_of_two(19, 15) == 19);, assert(max_of_two(-10, -20) == -10);]"
924,This is  a C++ function to calculate the product of all the numbers of a given tuple.,"```

#include <iostream>
#include <vector>
#include <cassert>

// Function to calculate the product of numbers in a vector
int multiple_tuple(const std::vector<int>& nums) {
    int product = 1;
    for (int x : nums) {
        product *= x;
    }
    return product;
}```",925,"[assert(multiple_tuple({ 4, 3, 2, 2, -1, 18 }) == -864);, assert(multiple_tuple({ 1, 2, 3 }) == 6);, assert(multiple_tuple({ -2, -4, -6 }) == -48);]"
925,This is  a function to find n-th rencontres number.,"```
#include <iostream>
using namespace std;

int binomial_coeffi(int n, int k) {
    if (k == 0 || k == n) 
        return 1;
    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k);
}

int rencontres_number(int n, int m) {
    if (n == 0 && m == 0) 
        return 1;
    if (n == 1 && m == 0) 
        return 0;
    if (m == 0) 
        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0));
    return binomial_coeffi(n, m) * rencontres_number(n - m, 0);
}
```",926,"[assert(rencontres_number(7, 2) == 924);, assert(rencontres_number(3, 0) == 2);, assert(rencontres_number(3, 1) == 3);]"
926,This is  a function to calculate the height of the given binary tree.,"```
#include <algorithm>

int calculateHeight(const int* arr, int index, int arrLength) {
    if (index >= arrLength || arr[index] == 0) {
        return 0;
    }
    return std::max(calculateHeight(arr, 2 * index + 1, arrLength), calculateHeight(arr, 2 * index + 2, arrLength)) + 1;
}```",927,"[assert(calculateHeight(new int[7] {1, 2, 3, 4, 0, 0, 0}, 0, 7) == 3);, assert(calculateHeight(new int[31] {1, 2, 3, 4, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8}, 0, 31) == 5);, assert(calculateHeight(new int[15] {1, 2, 3, 4, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7}, 0, 15) == 4);]"
928,This is  a function to count repeated items of a tuple.,"```
#include <iostream>
#include <tuple>
#include <cassert>
#include <unordered_map>

// Helper function to count occurrences of items in the tuple
template <typename T>
void countHelper(const T& item, std::unordered_map<T, int>& counts) {
    counts[item]++;
}

// Recursive function to count occurrences of items in the tuple
template <typename Tuple, std::size_t Index = 0>
void countOccurrencesImpl(const Tuple& t, std::unordered_map<int, int>& counts) {
    if constexpr (Index < std::tuple_size<Tuple>::value) {
        countHelper(std::get<Index>(t), counts);
        countOccurrencesImpl<Tuple, Index + 1>(t, counts);
    }
}

// Main function to count the repeated items in the tuple
template <typename... Args>
int countRepeatedItems(const std::tuple<Args...>& t) {
    std::unordered_map<int, int> counts;
    countOccurrencesImpl(t, counts);

    int maxCount = 0;
    for (const auto& pair : counts) {
        if (pair.second > maxCount) {
            maxCount = pair.second;
        }
    }
    return maxCount;
}```",929," [
    assert(countRepeatedItems(std::tuple<int, int, int, int>{1, 2, 2, 3}) == 2);  ,
    assert(countRepeatedItems(std::tuple<int, int, int, int, int>{5, 5, 5, 6, 7}) == 3);  ,
    assert(countRepeatedItems(std::tuple<int, int, int>{8, 9, 10}) == 1);  ]"
929,This is  a function that matches a string that has an a followed by zero or more bs by using regex.,"```
#include <iostream>
#include <regex>
#include <string>

std::string text_match(const std::string& text) {
    std::regex patterns(""ab*?"");
    if (std::regex_search(text, patterns)) {
        return ""Found a match!"";
    } else {
        return ""Not matched!"";
    }
}
```",930,"[assert(text_match(""msb"") == ""Not matched!"");, assert(text_match(""a0c"") == ""Found a match!"");, assert(text_match(""abbc"") == ""Found a match!"");]"
930,This is  a function to calculate the sum of series 1³+2³+3³+….+n³.,"```
#include <cmath>

double sum_series(double number) {
    double total = 0;
    total = pow((number * (number + 1)) / 2, 2);
    return total; // returning total twice as a pair
}```",931,"[assert(sum_series(7) == 784);, assert(sum_series(5) == 225);, assert(sum_series(15) == 14400);]"
931,This is  a function to remove duplicate words from a given list of strings.,"```
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> removeDuplicList(const std::vector<int>& l) {
    std::vector<int> temp;
    for (int x : l) {
        if (std::find(temp.begin(), temp.end(), x) == temp.end()) {
            temp.push_back(x);
        }
    }
    return temp;
}```",932,"[assert(removeDuplicList({ 1, 2, 3, 4, 2 }) == std::vector<int>({ 1, 2, 3, 4 }));, assert(removeDuplicList({ 1, 2, 3, 4, 2, 5 }) == std::vector<int>({ 1, 2, 3, 4, 5 }));, assert(removeDuplicList({ 1, 2, 3, 4, 2, 5, 6, 6 }) == std::vector<int>({ 1, 2, 3, 4, 5, 6 }));]"
932,This is  a function to convert camel case string to snake case string by using regex.,"```
#include <iostream>
#include <regex>
#include <string>
#include <cctype>

std::string camel_to_snake(const std::string& text) {
    std::string str1 = std::regex_replace(text, std::regex(""(.)([A-Z][a-z]+)""), ""$1_$2"");
    return std::regex_replace(str1, std::regex(""([a-z0-9])([A-Z])""), ""$1_$2"");
}

int main() {
    std::string text = ""ExampleCamelCaseString"";
    std::cout << camel_to_snake(text) << std::endl;
    return 0;
}
```",933,"[assert(camel_to_snake(""GoogleAssistant"") == ""google_assistant"");, assert(camel_to_snake(""ChromeCast"") == ""chrome_cast"");, assert(camel_to_snake(""QuadCore"") == ""quad_core"");]"
933,This is  a function to find the nth delannoy number.,"```
#include <string>
#include <regex>
#include <cassert>

std::string camelToSnake(const std::string& text) {
    std::string str1 = std::regex_replace(text, std::regex(""(.)([A-Z][a-z]+)""), ""$1_$2"");
    str1 = std::regex_replace(str1, std::regex(""([a-z0-9])([A-Z])""), ""$1_$2"");
    for (char& ch : str1) {
        ch = std::tolower(ch);
    }
    return str1;
}```",934,"[assert(camelToSnake(""GoogleAssistant"") == ""google_assistant"");, assert(camelToSnake(""ChromeCast"") == ""chrome_cast"");, assert(camelToSnake(""QuadCore"") == ""quad_core"");]"
934,This is  a function to calculate the sum of series 1²+2²+3²+….+n².,"```
#include <iostream>
using namespace std;

double series_sum(int number) {
    double total = 0;
    total = (number * (number + 1) * (2 * number + 1)) / 6.0;
    return total;
}```",935,"[assert(series_sum(6) == 91);, assert(series_sum(7) == 140);, assert(series_sum(12) == 650);]"
935,This is  a function to re-arrange the given tuples based on the given ordered list.,"```
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <cassert>
#include <utility> // For std::pair

using namespace std;

// Function to rearrange tuples based on the order list
vector<pair<string, int>> reArrangeTuples(const vector<pair<string, int>>& testList, const vector<string>& ordList) {
    map<string, int> temp;
    for (const auto& entry : testList) {
        temp[entry.first] = entry.second;
    }

    vector<pair<string, int>> res;
    for (const auto& key : ordList) {
        if (temp.find(key) != temp.end()) {
            res.emplace_back(key, temp[key]);
        }
    }

    return res;
}

// Function to convert a 2D array to a list of pairs
vector<pair<string, int>> intArrayToList(const vector<vector<int>>& array) {
    vector<pair<string, int>> list;
    for (const auto& pair : array) {
        list.emplace_back(to_string(pair[0]), pair[1]);
    }
    return list;
}

// Test helper function to check equality of two vectors of pairs
bool areEqual(const vector<pair<string, int>>& a, const vector<pair<string, int>>& b) {
    return a == b;
}```",936,"[assert(areEqual( reArrangeTuples( intArrayToList({ {4, 3}, {1, 9}, {2, 10}, {3, 2} }), { ""1"", ""4"", ""2"", ""3"" } ), intArrayToList({ {1, 9}, {4, 3}, {2, 10}, {3, 2} }) ));, assert(areEqual( reArrangeTuples( intArrayToList({ {5, 4}, {2, 10}, {3, 11}, {4, 3} }), { ""3"", ""4"", ""2"", ""3"" } ), intArrayToList({ {3, 11}, {4, 3}, {2, 10}, {3, 11} }) ));, assert(areEqual( reArrangeTuples( intArrayToList({ {6, 3}, {3, 8}, {5, 7}, {2, 4} }), { ""2"", ""5"", ""3"", ""6"" } ), intArrayToList({ {2, 4}, {5, 7}, {3, 8}, {6, 3} }) ));]"
936,This is  a function to count the most common character in a given string.,"```
#include <iostream>
#include <unordered_map>
#include <string>


using namespace std;

char maxChar(const string& str) {
    unordered_map<char, int> temp;

    // Count frequency of each character
    for (char ch : str) {
        temp[ch]++;
    }

    // Find the character with the maximum frequency
    char maxChar = str[0];
    for (const auto& pair : temp) {
        if (pair.second > temp[maxChar]) {
            maxChar = pair.first;
        }
    }

    return maxChar;
}```",937,"[assert(maxChar(""hello world"") == \l\ && ""Expected \l\ but got something else"");, assert(maxChar(""hello "") == \l\ && ""Expected \l\ but got something else"");, assert(maxChar(""python pr"") == \p\ && ""Expected \p\ but got something else"");]"
937,This is  a function to find three closest elements from three sorted arrays.,"```
#include <iostream>
#include <vector>
#include <limits>

std::tuple<int, int, int> find_closet(const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C, int p, int q, int r) {
    int diff = std::numeric_limits<int>::max();
    int res_i = 0, res_j = 0, res_k = 0;
    int i = 0, j = 0, k = 0;

    while (i < p && j < q && k < r) {
        int minimum = std::min(A[i], std::min(B[j], C[k]));
        int maximum = std::max(A[i], std::max(B[j], C[k]));
        
        if (maximum - minimum < diff) {
            res_i = i;
            res_j = j;
            res_k = k;
            diff = maximum - minimum;
        }
        if (diff == 0) {
            break;
        }
        if (A[i] == minimum) {
            i++;
        } else if (B[j] == minimum) {
            j++;
        } else {
            k++;
        }
    }
    
    return std::make_tuple(A[res_i], B[res_j], C[res_k]);
}
```",938,"[assert((findClosest({ 1, 4, 10 }, { 2, 15, 20 }, { 10, 12 }) == vector<int>{10, 15, 10}));, assert((findClosest({ 20, 24, 100 }, { 2, 19, 22, 79, 800 }, { 10, 12, 23, 24, 119 }) == vector<int>{24, 22, 23}));, assert((findClosest({ 2, 5, 11 }, { 3, 16, 21 }, { 11, 13 }) == vector<int>{11, 16, 11}));]"
938,This is  a function to sort a list of dictionaries using lambda function.,"```
// Helper function to convert a string to lowercase
string toLower(const string& str) {
    string result = str;
    transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}

// Function to sort models by the ""color"" field (case-insensitive)
vector<map<string, string>> sortedModels(const vector<map<string, string>>& models) {
    // Create a copy of the input list to avoid modifying it
    vector<map<string, string>> sortedList = models;

    // Sort the list based on the ""color"" field
    sort(sortedList.begin(), sortedList.end(), [](const map<string, string>& a, const map<string, string>& b) {
        return toLower(a.at(""color"")) < toLower(b.at(""color""));
    });

    return sortedList;
}```",939,"[assert((sortedModels({ {{""make"", ""Nokia""}, {""model"", ""216""}, {""color"", ""Black""}}, {{""make"", ""Mi Max""}, {""model"", ""2""}, {""color"", ""Gold""}}, {{""make"", ""Samsung""}, {""model"", ""7""}, {""color"", ""Blue""}} }) == vector<map<string, string>>{ { {""make"", ""Nokia""}, { ""model"", ""216"" }, { ""color"", ""Black"" }}, { {""make"", ""Samsung""}, {""model"", ""7""}, {""color"", ""Blue""} }, { {""make"", ""Mi Max""}, {""model"", ""2""}, {""color"", ""Gold""} } }));, assert((sortedModels({ {{""make"", ""Vivo""}, {""model"", ""20""}, {""color"", ""Blue""}}, {{""make"", ""oppo""}, {""model"", ""17""}, {""color"", ""Gold""}}, {{""make"", ""Apple""}, {""model"", ""11""}, {""color"", ""red""}} }) == vector<map<string, string>>{ { {""make"", ""Vivo""}, { ""model"", ""20"" }, { ""color"", ""Blue"" }}, { {""make"", ""oppo""}, {""model"", ""17""}, {""color"", ""Gold""} }, { {""make"", ""Apple""}, {""model"", ""11""}, {""color"", ""red""} } }));, assert((sortedModels({ {{""make"", ""micromax""}, {""model"", ""40""}, {""color"", ""grey""}}, {{""make"", ""poco""}, {""model"", ""60""}, {""color"", ""blue""}} }) == vector<map<string, string>>{ { {""make"", ""poco""}, { ""model"", ""60"" }, { ""color"", ""blue"" }}, { {""make"", ""micromax""}, {""model"", ""40""}, {""color"", ""grey""} } }));]"
939,This is  a function to sort the given array by using heap sort.,"```
#include <iostream>
#include <vector>
#include <cassert>
#include <algorithm> // for std::equal

using namespace std;

// Function prototypes
vector<int> heapSort(vector<int> arr);
void heapify(vector<int> arr);
void shiftDown(vector<int> arr, int start, int end);
void swap(vector<int> arr, int i, int j);

vector<int> heapSort(vector<int> arr) {
    heapify(arr);
    int end = arr.size() - 1;
    while (end > 0) {
        swap(arr, end, 0);
        shiftDown(arr, 0, end - 1);
        end--;
    }
    return arr;
}

void heapify(vector<int> arr) {
    int start = arr.size() / 2 - 1;
    while (start >= 0) {
        shiftDown(arr, start, arr.size() - 1);
        start--;
    }
}

void shiftDown(vector<int> arr, int start, int end) {
    int root = start;
    while (root * 2 + 1 <= end) {
        int child = root * 2 + 1;
        if (child + 1 <= end && arr[child] < arr[child + 1]) {
            child++;
        }
        if (arr[root] < arr[child]) {
            swap(arr, root, child);
            root = child;
        }
        else {
            return;
        }
    }
}

void swap(vector<int> arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}```",940,"[assert((heapSort(vector<int>{12, 2, 4, 5, 2, 3}) == vector<int>{2, 2, 3, 4, 5, 12}));, assert((heapSort(vector<int>{32, 14, 5, 6, 7, 19}) == vector<int>{5, 6, 7, 14, 19, 32}));, assert((heapSort(vector<int>{21, 15, 29, 78, 65}) == vector<int>{15, 21, 29, 65, 78}));]"
941,This is  a function to check if any list element is present in the given list.,"```
#include <vector>
#include <tuple>
#include <algorithm>

bool check_element(const std::tuple<int, int, int, int, int>& elems, const std::vector<int>& checks) {
    // Convert tuple to a vector for easy searching
    std::vector<int> elems_vec = { std::get<0>(elems), std::get<1>(elems), std::get<2>(elems), std::get<3>(elems), std::get<4>(elems) };

    for (int check : checks) {
        if (std::count(elems_vec.begin(), elems_vec.end(), check) > 0) {
            return true;
        }
    }
    return false;
}```",942,"[assert(check_element(std::make_tuple(4, 5, 7, 9, 3), { 6, 7, 10, 11 }) == true);, assert(check_element(std::make_tuple(3, 2, 1, 4, 5), { 9, 8, 7, 6 }) == false);]"
942,This is  a function to combine two given sorted lists using heapq module.,"```
#include <vector>

std::vector<int> combine_lists(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> result;
    size_t i = 0, j = 0;

    while (i < a.size() && j < b.size()) {
        if (a[i] < b[j]) {
            result.push_back(a[i++]);
        }
        else {
            result.push_back(b[j++]);
        }
    }

    while (i < a.size()) {
        result.push_back(a[i++]);
    }

    while (j < b.size()) {
        result.push_back(b[j++]);
    }

    return result;
}
```",943,"[assert(combine_lists({ 1, 3, 5, 7, 9, 11 }, { 0, 2, 4, 6, 8, 10 }) == std::vector<int>({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }));, assert(combine_lists({ 1, 3, 5, 6, 8, 9 }, { 2, 5, 7, 11 }) == std::vector<int>({ 1, 2, 3, 5, 5, 6, 7, 8, 9, 11 }));, assert(combine_lists({ 1, 3, 7 }, { 2, 4, 6 }) == std::vector<int>({ 1, 2, 3, 4, 6, 7 }));]"
943,This is  a function to separate and print the numbers and their position of a given string.,"```

#include <cassert>
#include <iostream>
#include <regex>
#include <string>
#include <vector>

std::vector<int> numPosition(const std::string& text) {
    std::regex pattern(R""(\d+)"");  // Matches a sequence of digits
    std::smatch match;
    std::vector<int> positions;

    // Find all occurrences of numbers and store their positions
    auto begin = text.cbegin();
    while (std::regex_search(begin, text.cend(), match, pattern)) {
        positions.push_back(match.position());
        begin = match[0].second; // Move the search start after the current match
    }

    return positions;
}

void assertEqual(const std::vector<int>& result, const std::vector<int>& expected) {
    assert(result == expected && ""Test failed!"");
}```",944,"[""assertEqual(numPosition(""there are 70 flats in this apartment""), {10});"",
    ""assertEqual(numPosition(""every adult have 32 teeth""), {17});"",
    ""assertEqual(numPosition(""isha has 79 chocolates in her bag""), {9});""]"
944,This is  a function to convert the given tuples into set.,"```
#include <iostream>
#include <set>
#include <vector>
#include <algorithm>

std::set<std::string> tupleToSet(const std::vector<std::string>& t) {
    std::set<std::string> s;
    for (const auto& element : t) {
        s.insert(element);
    }
    return s;
}

void assertEqual(const std::set<std::string>& result, const std::set<std::string>& expected) {
    assert(result == expected && ""Test failed!"");
}```",945,"[""assertEqual(tupleToSet({ ""x"", ""y"", ""z"" }), { ""y"", ""x"", ""z"" });"",

    
    ""assertEqual(tupleToSet({ ""a"", ""b"", ""c"" }), { ""c"", ""a"", ""b"" });"",

   
    ""assertEqual(tupleToSet({ ""z"", ""d"", ""e"" }), { ""d"", ""e"", ""z"" });""]"
945,This is  a function to find the most common elements and their counts of a specified text.,"```
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <algorithm>

std::vector<std::pair<char, int>> most_common_elem(const std::string& str, int n) {
    std::unordered_map<char, int> counts;
    for (char c : str) {
        counts[c]++;
    }

    std::vector<std::pair<char, int>> sorted_counts(counts.begin(), counts.end());
    std::sort(sorted_counts.begin(), sorted_counts.end(), [](const auto& a, const auto& b) {
        return a.second > b.second;
        });

    if (n > sorted_counts.size()) n = sorted_counts.size();
    return std::vector<std::pair<char, int>>(sorted_counts.begin(), sorted_counts.begin() + n);
}

bool operator==(const std::vector<std::pair<char, int>>& v1, const std::vector<std::pair<char, int>>& v2) {
    if (v1.size() != v2.size()) return false;
    for (size_t i = 0; i < v1.size(); ++i) {
        if (v1[i] != v2[i]) return false;
    }
    return true;
}```",946,"[assert((most_common_elem(""lkseropewdssafsdfafkpwe"", 2) == std::vector<std::pair<char, int>>{ {\s\, 4}, { \e\, 3 } }));]"
946,This is  a C++ function to find the length of the shortest word.,"```
#include <vector>
#include <string>

int len_log(const std::vector<std::string>& logs) {
    int count = 0;
    for (const auto& log : logs) {
        if (log.length() >= 3) {
            count++;
        }
    }
    return count;
}```",947,"[assert(len_log({""win"", ""lose"", ""great""}) == 3);, assert(len_log({""a"", ""ab"", ""abc""}) == 1);, assert(len_log({""12"", ""12"", ""1234""}) == 2);]"
947,This is  a function to get an item of a tuple.,"```
#include <vector>
#include <string>
#include <cassert>

template <typename T>
T getItem(const std::vector<T>& tup1, int index) {
    if (index < 0) {
        index = tup1.size() + index; // Adjust negative index to work like in Java
    }
    return tup1[index];
}```",948,"[assert(getItem(std::vector<std::string>{""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""}, 3) == ""e"");, assert(getItem(std::vector<std::string>{""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""}, -4) == ""u"");, assert(getItem(std::vector<std::string>{""w"", ""3"", ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""}, -3) == ""r"");]"
948,This is  a function to sort the given tuple list basis the total digits in tuple.,"```
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

int count_digs(const std::vector<int>& tup) {
    int total_length = 0;
    for (int ele : tup) {
        total_length += std::to_string(ele).length();
    }
    return total_length;
}

std::string sort_list(std::vector<int>& test_list) {
    std::sort(test_list.begin(), test_list.end(), [](int a, int b) {
        return count_digs(std::vector<int>{a}) < count_digs(std::vector<int>{b});
    });
    std::string result = ""["";
    for (size_t i = 0; i < test_list.size(); ++i) {
        result += std::to_string(test_list[i]);
        if (i < test_list.size() - 1) {
            result += "", "";
        }
    }
    result += ""]"";
    return result;
}
```",949,"[assert(sort_list({std::make_tuple(3, 4, 6, 723), std::make_tuple(1, 2), std::make_tuple(12345), std::make_tuple(134, 234, 34)}) == ""[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]"");, assert(sort_list({std::make_tuple(3, 4, 8), std::make_tuple(1, 2), std::make_tuple(1234335), std::make_tuple(1345, 234, 334)}) == ""[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]"");, assert(sort_list({std::make_tuple(34, 4, 61, 723), std::make_tuple(1, 2), std::make_tuple(145), std::make_tuple(134, 23)}) == ""[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]"");]"
949,This is  a function to display sign of the chinese zodiac for given year.,"```
#include <iostream>
#include <string>

std::string chineseZodiac(int year) {
    std::string sign;
    if ((year - 4) % 12 == 0) {
        sign = ""Rat"";
    }
    else if ((year - 4) % 12 == 1) {
        sign = ""Ox"";
    }
    else if ((year - 4) % 12 == 2) {
        sign = ""Tiger"";
    }
    else if ((year - 4) % 12 == 3) {
        sign = ""Rabbit"";  // Changed from ""Hare"" to ""Rabbit""
    }
    else if ((year - 4) % 12 == 4) {
        sign = ""Dragon"";
    }
    else if ((year - 4) % 12 == 5) {
        sign = ""Snake"";
    }
    else if ((year - 4) % 12 == 6) {
        sign = ""Horse"";
    }
    else if ((year - 4) % 12 == 7) {
        sign = ""Sheep"";
    }
    else if ((year - 4) % 12 == 8) {
        sign = ""Monkey"";
    }
    else if ((year - 4) % 12 == 9) {
        sign = ""Rooster"";
    }
    else if ((year - 4) % 12 == 10) {
        sign = ""Dog"";
    }
    else {
        sign = ""Pig"";
    }
    return sign;
}```",950,"[assert(chineseZodiac(1997) == ""Ox"");, assert(chineseZodiac(1998) == ""Tiger"");, assert(chineseZodiac(1994) == ""Dog"");]"
950,This is  a function to find the maximum of similar indices in two lists of tuples.,"```
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> maxSimilarIndices(
    const std::vector<std::vector<int>>& testList1,
    const std::vector<std::vector<int>>& testList2)
{
    std::vector<std::vector<int>> res;
    for (size_t i = 0; i < testList1.size(); i++) {
        const std::vector<int>& x = testList1[i];
        const std::vector<int>& y = testList2[i];
        res.push_back({ std::max(x[0], y[0]), std::max(x[1], y[1]) });
    }
    return res;
}```",951,"[assert((maxSimilarIndices({ {2, 4}, {6, 7}, {5, 1} }, { {5, 4}, {8, 10}, {8, 14} }) == std::vector<std::vector<int>>{ {5, 4}, { 8, 10 }, { 8, 14 }}));, assert((maxSimilarIndices({ {3, 5}, {7, 8}, {6, 2} }, { {6, 5}, {9, 11}, {9, 15} }) == std::vector<std::vector<int>>{ {6, 5}, { 9, 11 }, { 9, 15 }}));, assert((maxSimilarIndices({ {4, 6}, {8, 9}, {7, 3} }, { {7, 6}, {10, 12}, {10, 16} }) == std::vector<std::vector<int>>{ {7, 6}, { 10, 12 }, { 10, 16 }}));]"
951,This is  a function to compute the value of ncr mod p.,"```
#include <iostream>
#include <vector>
#include <algorithm>

int nCr_mod_p(int n, int r, int p) {
    if (r > n - r) {
        r = n - r;
    }
    std::vector<int> C(r + 1, 0);
    C[0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = std::min(i, r); j > 0; j--) {
            C[j] = (C[j] + C[j - 1]) % p;
        }
    }
    return C[r];
}```",952,"[assert(nCr_mod_p(10, 2, 13) == 6);, assert(nCr_mod_p(11, 3, 14) == 11);, assert(nCr_mod_p(18, 14, 19) == 1);]"
952,This is  a C++ function to find the minimun number of subsets with distinct elements.,"```
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> subset(const std::vector<int>& ar, int n) {
    int res = 0;
    std::vector<int> sorted_ar = ar;
    std::sort(sorted_ar.begin(), sorted_ar.end());
    for (int i = 0; i < n; i++) {
        int count = 1;
        for (int j = i; j < n - 1; j++) {
            if (sorted_ar[j] == sorted_ar[j + 1]) {
                count++;
            }
            else {
                break;
            }
        }
        res = std::max(res, count);
    }
    return { res };
}}
```",953,"[assert(subset({ 1, 2, 3, 4 }, 4) == std::vector<int>{1});, assert(subset({ 5, 6, 9, 3, 4, 3, 4 }, 7) == std::vector<int>{2});, assert(subset({ 1, 2, 3 }, 3) == std::vector<int>{1});]"
953,This is  a function that gives profit amount if the given amount has profit else return none.,"```
#include <cassert>
#include <iostream>
#include <optional>

int profitAmount(double actualCost, double saleAmount) {
    if (actualCost > saleAmount) {
        double amount = actualCost - saleAmount;
        return static_cast<int>(amount);
    }
    else {
        return NULL;
    }
}```",954,"[assert(profitAmount(1500, 1200) == 300);, assert(profitAmount(100, 200) == NULL);, assert(profitAmount(2000, 5000) == NULL);]"
954,"This is  a function to find out, if the given number is abundant.","```
#include <iostream>

bool is_abundant(int n) {
    int fctrsum = 0;
    for (int fctr = 1; fctr < n; ++fctr) {
        if (n % fctr == 0) {
            fctrsum += fctr;
        }
    }
    return fctrsum > n;
}
```",955,"[assert(is_abundant(12) == true);, assert(is_abundant(13) == false);, assert(is_abundant(9) == false);]"
955,This is  a function to split the given string at uppercase letters by using regex.,"```
#include <string>
#include <vector>
#include <regex>

std::vector<std::string> split_list(const std::string& text) {
    std::regex re(""([A-Z][^A-Z]*)"");
    std::sregex_iterator it(text.begin(), text.end(), re);
    std::sregex_iterator end;
    std::vector<std::string> result;

    while (it != end) {
        result.push_back(it->str());
        ++it;
    }

    return result;
}```",956,"[assert((split_list(""LearnToBuildAnythingWithGoogle"") == std::vector<std::string>{""Learn"", ""To"", ""Build"", ""Anything"", ""With"", ""Google""}));, assert((split_list(""ApmlifyingTheBlack+DeveloperCommunity"") == std::vector<std::string>{""Apmlifying"", ""The"", ""Black+"", ""Developer"", ""Community""}));, assert((split_list(""UpdateInTheGoEcoSystem"") == std::vector<std::string>{""Update"", ""In"", ""The"", ""Go"", ""Eco"", ""System""}));]"
957,This is  a function to convert an integer into a roman numeral.,"```
#include <string>
#include <vector>

std::string int_to_roman(int num) {
    std::vector<int> val = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    std::vector<std::string> syb = {""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""};
    std::string roman_num = """";
    int i = 0;
    while (num > 0) {
        for (int j = 0; j < num / val[i]; j++) {
            roman_num += syb[i];
            num -= val[i];
        }
        i++;
    }
    return roman_num;
}
```",958,"[assert(int_to_roman(4) == ""IV"");]"
958,This is  a C++ function to find the average of a list.,"```
#include <vector>

double Average(const std::vector<double>& lst) {
    double sum = 0;
    for (double num : lst) {
        sum += num;
    }
    return sum / lst.size();
}
```",959,"[assert(Average({15, 9, 55, 41, 35, 20, 62, 49}) == 35.75);, assert(Average({4, 5, 1, 2, 9, 7, 10, 8}) == 5.75);, assert(Average({1, 2, 3}) == 2);]"
959,This is  a function to solve tiling problem.,"```
int get_noOfways(int n) {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    return get_noOfways(n - 1) + get_noOfways(n - 2);
}
```",960,"[assert(get_noOfways(4) == 3);, assert(get_noOfways(3) == 2);, assert(get_noOfways(5) == 5);]"
960,This is  a function to convert a roman numeral to an integer.,"```
#include <unordered_map>
#include <string>

int roman_to_int(const std::string& s) {
    std::unordered_map<char, int> rom_val = {
        {I, 1}, {V, 5}, {X, 10}, {L, 50}, {C, 100}, {D, 500}, {M, 1000}
    };
    int int_val = 0;
    for (size_t i = 0; i < s.length(); ++i) {
        if (i > 0 && rom_val[s[i]] > rom_val[s[i - 1]]) {
            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]];
        } else {
            int_val += rom_val[s[i]];
        }
    }
    return int_val;
}
```",961,"[assert(roman_to_int(""MMMCMLXXXVI"") == 3986);, assert(roman_to_int(""MMMM"") == 4000);, assert(roman_to_int(""C"") == 100);]"
961,This is  a C++ function to find the sum of all even natural numbers within the range l and r.,"```
int sum_Even(int a, int b) {
    int sum = 0;
    for (int i = a; i <= b; ++i) {
        if (i % 2 == 0) {
            sum += i;
        }
    }
    return sum;
}```",962,"[assert(sum_Even(2, 5) == 6);, assert(sum_Even(3, 8) == 18);, assert(sum_Even(4, 6) == 10);]"
962,This is  a function to calculate the discriminant value.,"```
#include <tuple>
#include <string>

std::tuple<std::string, double> discriminant_value(double x, double y, double z) {
    double discriminant = (y * y) - (4 * x * z);
    if (discriminant > 0) {
        return std::make_tuple(""Two solutions"", discriminant);
    }
    else if (discriminant == 0) {
        return std::make_tuple(""one solution"", discriminant);
    }
    else {
        return std::make_tuple(""no real solution"", discriminant);
    }
}```",963,"[assert(discriminant_value(4, 8, 2) == std::make_tuple(""Two solutions"", 32));, assert(discriminant_value(5, 7, 9) == std::make_tuple(""no real solution"", -131));, assert(discriminant_value(0, 0, 9) == std::make_tuple(""one solution"", 0));]"
963,This is  a C++ function to check whether the length of the word is even or not.,"```
#include <string>
#include <sstream>
#include <vector>

bool word_len(const std::string& s) { 
    std::istringstream iss(s); 
    std::string word; 
    while (iss >> word) { 
        if (word.length() % 2 == 0) 
            return true; 
        else 
            return false; 
    } 
    return false; 
}
```",964,"[assert(word_len(""program"") == false);, assert(word_len(""solution"") == true);, assert(word_len(""data"") == true);]"
964,This is  a function to convert camel case string to snake case string.,"```
#include <iostream>
#include <string>
#include <cassert>
#include <cctype>

// Function to convert camel case string to snake case
std::string camelToSnake(const std::string& camel) {
    std::string snake = """";
    
    for (char c : camel) {
        if (std::isupper(c)) {
            // If the character is uppercase, add an underscore before it
            if (!snake.empty()) {
                snake += _;
            }
            snake += std::tolower(c);  // Convert the character to lowercase
        } else {
            snake += c;  // If its already lowercase, just append it
        }
    }
    
    return snake;
}```",965,"[assert(camelToSnake(""camelCaseString"") == ""camel_case_string"");,
   assert(camelToSnake(""ThisIsCamelCase"") == ""this_is_camel_case"");,
    assert(camelToSnake(""simple"") == ""simple"");  ,
    assert(camelToSnake(""Singleword"") == ""singleword"");  ]"
965,This is  a function to remove an empty tuple from a list of tuples.,"```
#include <vector>
#include <string>

std::vector<std::vector<std::string>> removeEmpty(const std::vector<std::vector<std::string>>& tuple1) {
    std::vector<std::vector<std::string>> result;
    for (const auto& item : tuple1) {
        if (!item.empty()) {
            result.push_back(item);
        }
    }
    return result;
}```",966,"[assert((removeEmpty({ {}, {}, {""""}, {""a"", ""b""}, {""a"", ""b"", ""c""}, {""d""} }) == std::vector<std::vector<std::string>>{ {""""}, { ""a"", ""b"" }, { ""a"", ""b"", ""c"" }, { ""d"" }}));, assert((removeEmpty({ {}, {}, {""""}, {""python""}, {""program""} }) == std::vector<std::vector<std::string>>{ {""""}, { ""python"" }, { ""program"" }}));, assert((removeEmpty({ {}, {}, {""""}, {""java""} }) == std::vector<std::vector<std::string>>{ {""""}, { ""java"" }}));]"
966,This is  a C++ function to accept the strings which contains all vowels.,"```
#include <set>
#include <string>

std::string check(const std::string& str) {
    std::set<char> vowels = {A, E, I, O, U, a, e, i, o, u};
    std::set<char> found;
    
    for (char ch : str) {
        if (vowels.count(ch) > 0) {
            found.insert(ch);
        }
    }
    
    if (found.size() >= 5) {
        return ""accepted"";
    } else {
        return ""not accepted"";
    }
}
```",967,"[assert(check(""SEEquoiaL"") == ""accepted"");, assert(check(""program"") == ""not accepted"");, assert(check(""fine"") == ""not accepted"");]"
968,This is  a function to join the tuples if they have similar initial elements.,"```
#include <vector>

std::vector<std::vector<int>> joinTuples(const std::vector<std::vector<int>>& testList) {
    std::vector<std::vector<int>> res;
    for (const auto& sub : testList) {
        if (!res.empty() && res.back()[0] == sub[0]) {
            res.back().insert(res.back().end(), sub.begin() + 1, sub.end());
        }
        else {
            res.push_back(sub);
        }
    }
    return res;
}```",969,"[assert((joinTuples({ {5, 6}, {5, 7}, {6, 8}, {6, 10}, {7, 13} }) == std::vector<std::vector<int>>{ {5, 6, 7}, { 6, 8, 10 }, { 7, 13 }}));, assert((joinTuples({ {6, 7}, {6, 8}, {7, 9}, {7, 11}, {8, 14} }) == std::vector<std::vector<int>>{ {6, 7, 8}, { 7, 9, 11 }, { 8, 14 }}));, assert((joinTuples({ {7, 8}, {7, 9}, {8, 10}, {8, 12}, {9, 15} }) == std::vector<std::vector<int>>{ {7, 8, 9}, { 8, 10, 12 }, { 9, 15 }}));]"
969,This is  a function to find minimum of two numbers.,"```
int min_of_two(int x, int y) {
    if (x < y) {
        return x;
    }
    return y;
}
```",970,"[assert(min_of_two(10, 20) == 10);, assert(min_of_two(19, 15) == 15);, assert(min_of_two(-10, -20) == -20);]"
970,"This is  a function to find the maximum number of segments of lengths a, b and c that can be formed from n.","```
#include <cassert>
#include <vector>
#include <algorithm>

int maximumSegments(int n, int a, int b, int c) {
    std::vector<int> dp(n + 10, -1);
    dp[0] = 0;

    for (int i = 0; i < n; i++) {
        if (dp[i] != -1) {
            if (i + a <= n) {
                dp[i + a] = std::max(dp[i] + 1, dp[i + a]);
            }
            if (i + b <= n) {
                dp[i + b] = std::max(dp[i] + 1, dp[i + b]);
            }
            if (i + c <= n) {
                dp[i + c] = std::max(dp[i] + 1, dp[i + c]);
            }
        }
    }
    return dp[n];
}```",971,"[assert(maximumSegments(7, 5, 2, 5) == 2);, assert(maximumSegments(17, 2, 1, 3) == 17);, assert(maximumSegments(18, 16, 3, 6) == 6);]"
971,This is  a function to concatenate the given two tuples to a nested tuple.,"```
#include <tuple>
#include <cassert>
#include <vector>
#include <algorithm>

std::vector<int> concatenateNested(const std::vector<int>& testTup1, const std::vector<int>& testTup2) {
    std::vector<int> res = testTup1;
    res.insert(res.end(), testTup2.begin(), testTup2.end());
    return res;
}```",972,"[assert(concatenateNested({ 3, 4 }, { 5, 6 }) == std::vector<int>({ 3, 4, 5, 6 }));, assert(concatenateNested({ 1, 2 }, { 3, 4 }) == std::vector<int>({ 1, 2, 3, 4 }));, assert(concatenateNested({ 4, 5 }, { 6, 8 }) == std::vector<int>({ 4, 5, 6, 8 }));]"
972,This is  a C++ function to left rotate the string.,"```
#include <cassert>
#include <string>

std::string leftRotate(const std::string& s, int d) {
    std::string tmp = s.substr(d) + s.substr(0, d);
    return tmp;
}```",973,"[assert(leftRotate(""python"", 2) == ""thonpy"");, assert(leftRotate(""bigdata"", 3) == ""databig"");, assert(leftRotate(""hadoop"", 1) == ""adooph"");]"
973,This is  a function to find the minimum total path sum in the given triangle.,"```
#include <vector>
#include <cassert>
#include <algorithm>

int min_sum_path(const std::vector<std::vector<int>>& triangle) {
    int n = triangle.size();
    std::vector<int> dp(triangle[n - 1].begin(), triangle[n - 1].end());

    for (int i = n - 2; i >= 0; --i) {
        for (int j = 0; j <= i; ++j) {
            dp[j] = triangle[i][j] + std::min(dp[j], dp[j + 1]);
        }
    }

    return dp[0];
}```",974,"[assert(min_sum_path({ { 2 }, {3, 9 }, {1, 6, 7 } }) == 6);, assert(min_sum_path({ { 2 }, {3, 7 }, {8, 5, 6 } }) == 10);, assert(min_sum_path({ { 3 }, {6, 4 }, {5, 2, 7 } }) == 9);]"
974,"    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","```
#include <vector>
#include <cmath>
#include <cassert>

bool has_close_elements(const std::vector<double>& elements, double threshold) {
    for (size_t i = 0; i < elements.size(); ++i) {
        for (size_t j = i + 1; j < elements.size(); ++j) {
            if (std::fabs(elements[i] - elements[j]) <= threshold) {
                return true;
            }
        }
    }
    return false;
}```",975,"[assert(has_close_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3) == true);, assert(has_close_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05) == false);, assert(has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);, assert(has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) == false);, assert(has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1) == true);, assert(has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);, assert(has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);]"
975,"    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups(( ) (( )) (( )( )))
    [(), (()), (()())]
    """"""
","```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>

// Function to separate groups of nested parentheses
std::vector<std::string> separateParenGroups(const std::string& input) {
    std::vector<std::string> result;
    std::string group;
    int balance = 0;  // To keep track of the level of nesting
    
    for (char c : input) {
        if (c ==  ) {
            continue;  // Ignore spaces
        }
        
        group += c;  // Add the character to the current group
        
        if (c == () {
            balance++;  // Increase nesting level
        } else if (c == )) {
            balance--;  // Decrease nesting level
            if (balance == 0) {
                // When balance is 0, weve completed a group
                result.push_back(group);
                group.clear();  // Clear the group for the next one
            }
        }
    }
    
    return result;
}```",976," [assert(separateParenGroups(""( ) (( )) (( )( ))"") == std::vector<std::string>{""()"", ""(())"", ""(()())""});,
    assert(separateParenGroups(""(( ) ( ) ) ( ( ) )"") == std::vector<std::string>{""( )"", ""( )"", ""( )"", ""( )""});]"
977,"    """""" Youre given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","```
#include <vector>

bool below_zero(const std::vector<int>& operations) {
    int balance = 0;

    for (int op : operations) {
        balance += op;
        if (balance < 0) {
            return true;
        }
    }

    return false;
}```",978,"[assert(below_zero({}) == false);, assert(below_zero({ 1, 2, -3, 1, 2, -3 }) == false);, assert(below_zero({ 1, 2, -4, 5, 6 }) == true);, assert(below_zero({ 1, -1, 2, -2, 5, -5, 4, -4 }) == false);, assert(below_zero({ 1, -1, 2, -2, 5, -5, 4, -5 }) == true);]"
978,"    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","```
#include <vector>
#include <cmath>
#include <numeric>

double mean_absolute_deviation(const std::vector<double>& numbers) {
    double mean = std::accumulate(numbers.begin(), numbers.end(), 0.0) / numbers.size();
    double total_deviation = 0.0;
    for (const auto& x : numbers) {
        total_deviation += std::abs(x - mean);
    }
    return total_deviation / numbers.size();
}
```",979,"[assert(std::abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0 / 3.0) < 1e-6);, assert(std::abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-6);, assert(std::abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0 / 5.0) < 1e-6);]"
979,"    """""" Insert a number delimeter between every two consecutive elements of input list `numbers
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","```
#include <vector>

std::vector<int> intersperse(const std::vector<int>& numbers, int delimiter) {
    if (numbers.empty()) {
        return {};
    }

    std::vector<int> result;

    for (size_t i = 0; i < numbers.size() - 1; ++i) {
        result.push_back(numbers[i]);
        result.push_back(delimiter);
    }

    result.push_back(numbers.back());

    return result;
}
```",980,"[assert(intersperse({}, 7) == std::vector<int>{});, assert((intersperse({ 5, 6, 3, 2 }, 8) == std::vector<int>{5, 8, 6, 8, 3, 8, 2}));, assert((intersperse({ 2, 2, 2 }, 2) == std::vector<int>{2, 2, 2, 2, 2}));]"
980,"    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens((()()) ((())) () ((())()()))
    [2, 3, 1, 3]
    """"""
","```
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>

std::vector<int> parse_nested_parens(const std::string& paren_string) {
    auto parse_paren_group = [](const std::string& s) {
        int depth = 0;
        int max_depth = 0;
        for (char c : s) {
            if (c == () {
                depth++;
                max_depth = std::max(depth, max_depth);
            } else {
                depth--;
            }
        }
        return max_depth;
    };

    std::vector<int> result;
    std::istringstream iss(paren_string);
    std::string group;
    while (iss >> group) {
        if (!group.empty()) {
            result.push_back(parse_paren_group(group));
        }
    }
    return result;
}
```",981,"[assert((parse_nested_parens(""(()()) ((())) () ((())()())"") == std::vector<int>{2, 3, 1, 3}));, assert((parse_nested_parens(""() (()) ((())) (((())))"") == std::vector<int>{1, 2, 3, 4}));, assert(parse_nested_parens(""(()(())((())))"") == std::vector<int>{4});]"
981,"    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], a)
    []
    >>> filter_by_substring([abc, bacd, cde, array], a)
    [abc, bacd, array]
    """"""
","```
#include <vector>
#include <string>

std::vector<std::string> filter_by_substring(const std::vector<std::string>& strings, const std::string& substring) {
    std::vector<std::string> result;
    for (const auto& x : strings) {
        if (x.find(substring) != std::string::npos) {
            result.push_back(x);
        }
    }
    return result;
}
```",982,"[assert(filter_by_substring({}, ""john"") == std::vector<std::string>{});, assert((filter_by_substring({ ""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"" }, ""xxx"") == std::vector<std::string>{""xxx"", ""xxxAAA"", ""xxx""}));, assert((filter_by_substring({ ""xxx"", ""asd"", ""aaaxxy"", ""john doe"", ""xxxAAA"", ""xxx"" }, ""xx"") == std::vector<std::string>{""xxx"", ""aaaxxy"", ""xxxAAA"", ""xxx""}));]"
982,"    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","```
#include <iostream>
#include <vector>
#include <cassert>
#include <utility>

std::pair<int, int> sumProduct(const std::vector<int>& numbers) {
    int sumValue = 0;
    int prodValue = 1;

    for (int n : numbers) {
        sumValue += n;
        prodValue *= n;
    }

    return std::make_pair(sumValue, prodValue);
}```",983,"[assert(sumProduct({}) == std::make_pair(0, 1)); // Empty array, assert(sumProduct({ 1, 1, 1 }) == std::make_pair(3, 1)); // Sum = 3, Product = 1, assert(sumProduct({ 100, 0 }) == std::make_pair(100, 0)); // Sum = 100, Product = 0, assert(sumProduct({ 3, 5, 7 }) == std::make_pair(3 + 5 + 7, 3 * 5 * 7)); // Sum = 15, Product = 105, assert(sumProduct({ 10 }) == std::make_pair(10, 10)); // Sum = 10, Product = 10]"
983,"    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","```
#include <vector>
#include <algorithm>

std::vector<int> rolling_max(const std::vector<int>& numbers) {
    int running_max = -1; // assuming numbers are non-negative, otherwise use std::numeric_limits<int>::min()
    std::vector<int> result;

    for (int n : numbers) {
        if (running_max == -1) { // Check for initial case
            running_max = n;
        }
        else {
            running_max = std::max(running_max, n);
        }

        result.push_back(running_max);
    }

    return result;
}```",984,"[assert(rolling_max({}) == std::vector<int>{});, assert((rolling_max({ 1, 2, 3, 4 }) == std::vector<int>{1, 2, 3, 4}));, assert((rolling_max({ 4, 3, 2, 1 }) == std::vector<int>{4, 4, 4, 4}));]"
984,"    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome()
    
    >>> make_palindrome(cat)
    catac
    >>> make_palindrome(cata)
    catac
    """"""
","```
#include <iostream>
#include <string>

#include <algorithm>

// Declare the isPalindrome function before use
bool isPalindrome(const std::string& str);

std::string makePalindrome(const std::string& input) {
    if (input.empty()) {
        return """";
    }

    int beginningOfSuffix = 0;

    while (!isPalindrome(input.substr(beginningOfSuffix))) {
        beginningOfSuffix++;
    }

    return input + std::string(input.begin(), input.begin() + beginningOfSuffix);
}

bool isPalindrome(const std::string& str) {
    int left = 0;
    int right = str.length() - 1;
    while (left < right) {
        if (str[left] != str[right]) {
            return false;
        }
        left++;
        right--;
    }
    return true;
}```",985,"[assert(makePalindrome("""") == """");, assert(makePalindrome(""x"") == ""x"");, assert(makePalindrome(""xyx"") == ""xyx"");]"
985,"    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor(010, 110)
    100
    """"""
","```
#include <string>

std::string string_xor(const std::string& a, const std::string& b) {
    auto xor_func = [](char i, char j) {
        return (i == j) ? 0 : 1;
    };

    std::string result;
    for (size_t k = 0; k < a.size(); ++k) {
        result += xor_func(a[k], b[k]);
    }

    return result;
}
```",986,"[assert(string_xor(""111000"", ""101010"") == ""010010"");, assert(string_xor(""1"", ""1"") == ""0"");, assert(string_xor(""0101"", ""0000"") == ""0101"");]"
986,"    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest([a, b, c])
    a
    >>> longest([a, bb, ccc])
    ccc
    """"""
","```
#include <vector>
#include <cassert>
#include <vector>
#include <string>
#include <iostream>

std::string longest(const std::vector<std::string>& vec) {
    if (vec.empty()) return """";
    return *std::max_element(vec.begin(), vec.end(), [](const std::string& a, const std::string& b) {
        return a.size() < b.size();
        });
}```",987,"[assert(longest({}) == """");, assert(longest({ ""x"", ""y"", ""z"" }) == ""x"");, assert(longest({ ""x"", ""yyy"", ""zzzz"", ""www"", ""kkkk"", ""abc"" }) == ""zzzz"");]"
987,"    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","```
int greatest_common_divisor(int a, int b) {
    while (b) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
```",988,"[assert(greatest_common_divisor(3, 7) == 1);, assert(greatest_common_divisor(10, 15) == 5);, assert(greatest_common_divisor(49, 14) == 7);, assert(greatest_common_divisor(144, 60) == 12);]"
988,"    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes(abc)
    [a, ab, abc]
    """"""
","```
#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> all_prefixes(const std::string& str) {
    std::vector<std::string> prefixes;
    for (size_t i = 1; i <= str.size(); ++i) {
        prefixes.push_back(str.substr(0, i));
    }
    return prefixes;
}```",989,"[assert(all_prefixes("""").empty());, assert(all_prefixes(""asdfgh"") == std::vector<std::string>{""a"", ""as"", ""asd"", ""asdf"", ""asdfg"", ""asdfgh""});, assert(all_prefixes(""WWW"") == std::vector<std::string>{""W"", ""WW"", ""WWW""});]"
989,"    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    0
    >>> string_sequence(5)
    0 1 2 3 4 5
    """"""
","```
#include <iostream>
#include <string>
#include <sstream>

std::string string_sequence(int n) {
    std::ostringstream result;
    for (int x = 0; x <= n; ++x) {
        result << x;
        if (x < n) {
            result <<  ;
        }
    }
    return result.str();
}```",990,"[assert(string_sequence(0) == ""0"");, assert(string_sequence(3) == ""0 1 2 3"");, assert(string_sequence(10) == ""0 1 2 3 4 5 6 7 8 9 10"");]"
990,"    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters(xyzXYZ)
    3
    >>> count_distinct_characters(Jerry)
    4
    """"""
","```
#include <cassert>
#include <string>
#include <set>

int count_distinct_characters(const std::string& str) {
    std::set<char> distinct_chars;
    for (char c : str) {
        if (std::isalpha(c)) {
            distinct_chars.insert(std::tolower(c));
        }
    }
    return distinct_chars.size();
}```",991,"[assert(count_distinct_characters("""") == 0);, assert(count_distinct_characters(""abcde"") == 5);, assert(count_distinct_characters(""abcde"" + std::string(""cade"") + ""CADE"") == 5);, assert(count_distinct_characters(""aaaaAAAAaaaa"") == 1);, assert(count_distinct_characters(""Jerry jERRY JeRRRY"") == 4);]"
991,"    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    o - whole note, lasts four beats
    o| - half note, lasts two beats
    .| - quater note, lasts one beat

    >>> parse_music(o o| .| o| o| .| .| .| .| o o)
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","```
#include <map>
#include <vector>
#include <string>
#include <sstream>

std::vector<int> parse_music(const std::string& music_string) {
    std::map<std::string, int> note_map = {{""o"", 4}, {""o|"", 2}, {"".|"", 1}};
    std::vector<int> result;
    std::istringstream ss(music_string);
    std::string token;

    while (ss >> token) {
        if (note_map.find(token) != note_map.end()) {
            result.push_back(note_map[token]);
        }
    }

    return result;
}
```",992,"[assert(parse_music("""") == std::vector<int>{});, assert((parse_music(""o o o o"") == std::vector<int>{4, 4, 4, 4}));, assert((parse_music("".| .| .| .|"") == std::vector<int>{1, 1, 1, 1}));]"
992,"    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times(, a)
    0
    >>> how_many_times(aaa, a)
    3
    >>> how_many_times(aaaa, aa)
    3
    """"""
","```
#include <cassert>
#include <string>

int how_many_times(const std::string& str, const std::string& sub) {
    size_t count = 0;
    size_t pos = str.find(sub);
    while (pos != std::string::npos) {
        count++;
        pos = str.find(sub, pos + sub.length());
    }
    return count;
}```",993,"[assert(how_many_times("""", ""x"") == 0);, assert(how_many_times(""xyxyxyx"", ""x"") == 4);, assert(how_many_times(""john doe"", ""john"") == 1);]"
994,"    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","```
#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>

std::vector<double> findClosestElements(const std::vector<double>& numbers) {
    std::vector<double> closestPair;
    double distance = -1;

    for (size_t idx = 0; idx < numbers.size(); idx++) {
        for (size_t idx2 = 0; idx2 < numbers.size(); idx2++) {
            if (idx != idx2) {
                double newDistance = std::abs(numbers[idx] - numbers[idx2]);
                if (distance == -1 || newDistance < distance) {
                    distance = newDistance;
                    closestPair = { std::min(numbers[idx], numbers[idx2]), std::max(numbers[idx], numbers[idx2]) };
                }
            }
        }
    }
    return closestPair;
}```",995,"[assert((findClosestElements({ 1.0, 2.0, 3.9, 4.0, 5.0, 2.2 }) == std::vector<double>{3.9, 4.0}));, assert((findClosestElements({ 1.0, 2.0, 5.9, 4.0, 5.0 }) == std::vector<double>{5.0, 5.9}));, assert((findClosestElements({ 1.0, 2.0, 3.0, 4.0, 5.0, 2.2 }) == std::vector<double>{2.0, 2.2}));, assert((findClosestElements({ 1.0, 2.0, 3.0, 4.0, 5.0, 2.0 }) == std::vector<double>{2.0, 2.0}));, assert((findClosestElements({ 1.1, 2.2, 3.1, 4.1, 5.1 }) == std::vector<double>{2.2, 3.1}));]"
996,"    """""" Filter given list of any C++ values only for integers
    >>> filter_integers([a, 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, abc, {}, []])
    [1, 2, 3]
    """"""
","```
#include <vector>
#include <any>
#include <type_traits>

std::vector<int> filter_integers(const std::vector<std::any>& values) {
    std::vector<int> result;
    for (const auto& value : values) {
        if (value.type() == typeid(int)) {
            result.push_back(std::any_cast<int>(value));
        }
    }
    return result;
}
```",997,"[assert(filter_integers({}) == std::vector<int>{});, assert(filter_integers({4, {}, {}, 23.2, 9, ""adasd""}) == std::vector<int>{4, 9});, assert(filter_integers({3, ""c"", 3, 3, ""a"", ""b""}) == std::vector<int>{3, 3, 3});]"
998,"    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","```
int largest_divisor(int n) {
    for (int i = n - 1; i > 0; --i) {
        if (n % i == 0) {
            return i;
        }
    }
    return 1; // In case n is 1
}
```",999,"[assert(largest_divisor(3) == 1);, assert(largest_divisor(7) == 1);, assert(largest_divisor(10) == 5);, assert(largest_divisor(100) == 50);, assert(largest_divisor(49) == 7);]"
999,"    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","```
#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>

std::vector<int> factorize(int n) {
    std::vector<int> fact;
    int i = 2;
    while (i <= std::sqrt(n) + 1) {
        if (n % i == 0) {
            fact.push_back(i);
            n /= i;
        }
        else {
            i++;
        }
    }
    if (n > 1) {
        fact.push_back(n);
    }
    return fact;
}```",1000,"[assert((factorize(2) == std::vector<int>{2}));, assert((factorize(4) == std::vector<int>{2, 2}));, assert((factorize(8) == std::vector<int>{2, 2, 2}));, assert((factorize(3 * 19) == std::vector<int>{3, 19}));]"
1000,"    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","```
#include <iostream>
#include <vector>
#include <unordered_map>
#include <cassert>

// Function to remove duplicates
std::vector<int> removeDuplicates(const std::vector<int>& numbers) {
    std::unordered_map<int, int> countMap;

    // Count occurrences of each number
    for (int number : numbers) {
        countMap[number]++;
    }

    std::vector<int> result;
    // Add numbers with count 1 to the result vector
    for (int number : numbers) {
        if (countMap[number] == 1) {
            result.push_back(number);
        }
    }

    return result;
}```",1001,"[assert(removeDuplicates({}) == std::vector<int>{});, assert((removeDuplicates({ 1, 2, 3, 4 }) == std::vector<int>{1, 2, 3, 4}));, assert((removeDuplicates({ 1, 2, 3, 2, 4, 3, 5 }) == std::vector<int>{1, 4, 5}));]"
1001,"    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case(Hello)
    hELLO
    """"""
","```
#include <string>
#include <cctype>

std::string flip_case(const std::string& str) {
    std::string result;
    for (char ch : str) {
        if (std::isupper(ch)) {
            result += std::tolower(ch);
        } else {
            result += std::toupper(ch);
        }
    }
    return result;
}
```",1002,"[assert(flip_case("""") == """");, assert(flip_case(""Hello!"") == ""hELLO!"");, assert(flip_case(""These violent delights have violent ends"") == ""tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS"");]"
1002,"    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    
    >>> concatenate([a, b, c])
    abc
    """"""
","```
#include <cassert>
#include <vector>
#include <string>

std::string concatenate(const std::vector<std::string>& vec) {
    std::string result;
    for (const auto& str : vec) {
        result += str;
    }
    return result;
}```",1003,"[assert(concatenate({}) == """");, assert(concatenate({""x"", ""y"", ""z""}) == ""xyz"");, assert(concatenate({""x"", ""y"", ""z"", ""w"", ""k""}) == ""xyzwk"");]"
1003,"    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], a)
    []
    >>> filter_by_prefix([abc, bcd, cde, array], a)
    [abc, array]
    """"""
","```
#include <vector>
#include <string>
#include <cassert>

std::vector<std::string> filter_by_prefix(const std::vector<std::string>& input, const std::string& prefix) {
    std::vector<std::string> result;
    for (const auto& item : input) {
        if (item.rfind(prefix, 0) == 0) {
            result.push_back(item);
        }
    }
    return result;
}```",1004,"[assert(filter_by_prefix({}, ""john"") == std::vector<std::string>{});, assert((filter_by_prefix({ ""xxx"", ""asd"", ""xxy"", ""john doe"", ""xxxAAA"", ""xxx"" }, ""xxx"") == std::vector<std::string>{""xxx"", ""xxxAAA"", ""xxx""}));]"
1004,"    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","```
include <cassert>
#include <vector>

std::vector<int> get_positive(const std::vector<int>& nums) {
    std::vector<int> result;
    for (int num : nums) {
        if (num > 0) {
            result.push_back(num);
        }
    }
    return result;
}```",1005,"[assert(get_positive({ -1, -2, 4, 5, 6 }) == std::vector<int>({ 4, 5, 6 }));, assert(get_positive({ 5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10 }) == std::vector<int>({ 5, 3, 2, 3, 3, 9, 123, 1 }));, assert(get_positive({ -1, -2 }) == std::vector<int> {});, assert(get_positive({}) == std::vector<int> {});]"
1005,"    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","```
#include <cassert>

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) return false;
    }
    return true;
}```",1006,"[assert(is_prime(6) == false);, assert(is_prime(101) == true);, assert(is_prime(11) == true);, assert(is_prime(13441) == true);, assert(is_prime(61) == true);, assert(is_prime(4) == false);, assert(is_prime(1) == false);, assert(is_prime(5) == true);, assert(is_prime(11) == true);, assert(is_prime(17) == true);, assert(is_prime(5 * 17) == false);, assert(is_prime(11 * 7) == false);, assert(is_prime(13441 * 19) == false);]"
1007,"    """"""This function takes a list l and returns a list l such that
    l is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> sort_third(std::vector<int> vec) {
    std::sort(vec.begin(), vec.end());
    return vec;
}```",1008,"[assert(sort_third({ 1, 2, 3 }) == sort_third({ 1, 2, 3 }));, assert(sort_third({ 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 }) == sort_third({ 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 }));, assert(sort_third({ 5, 8, -12, 4, 23, 2, 3, 11, 12, -10 }) == sort_third({ 5, 8, -12, 4, 23, 2, 3, 11, 12, -10 }));]"
1008,"    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","```
#include <vector>
#include <iostream>
#include <algorithm>

std::vector<int> unique(const std::vector<int>& input) {
    std::vector<int> result = input;
    std::sort(result.begin(), result.end());
    auto it = std::unique(result.begin(), result.end());
    result.erase(it, result.end());
    return result;
}```",1009,"[assert(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) == std::vector<int>({0, 2, 3, 5, 9, 123}));]"
1009,"    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","```
#include <iostream>
#include <vector>
#include <cassert>

int max_element(const std::vector<int>& l) {
    int m = l[0];
    for (const auto& e : l) {
        if (e > m) {
            m = e;
        }
    }
    return m;
}```",1010,"[assert(max_element(std::vector<int>{1, 2, 3}) == 3); // Using max_element function, assert(max_element(std::vector<int>{5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}) == 124); // Using max_element function]"
1010,"    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","```
#include <vector>
#include <string>

int fizz_buzz(int n) {
    std::vector<int> ns;
    for (int i = 0; i < n; ++i) {
        if (i % 11 == 0 || i % 13 == 0) {
            ns.push_back(i);
        }
    }
    std::string s;
    for (int num : ns) {
        s += std::to_string(num);
    }
    int ans = 0;
    for (char c : s) {
        ans += (c == 7);
    }
    return ans;
}
```",1011,"[assert(fizz_buzz(50) == 0);, assert(fizz_buzz(78) == 2);, assert(fizz_buzz(79) == 3);, assert(fizz_buzz(100) == 3);, assert(fizz_buzz(200) == 6);, assert(fizz_buzz(4000) == 192);, assert(fizz_buzz(10000) == 639);, assert(fizz_buzz(100000) == 8026);]"
1011,"    """"""This function takes a list l and returns a list l such that
    l is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
using namespace std;

vector<int> sortEvenIndices(const vector<int>& input) {
    vector<int> evens;
    vector<int> result = input;

    // Extract elements at even indices
    for (size_t i = 0; i < input.size(); i += 2) {
        evens.push_back(input[i]);
    }

    // Sort the even-indexed elements
    sort(evens.begin(), evens.end());

    // Replace even indices in the result with sorted values
    int evenIndex = 0;
    for (size_t i = 0; i < result.size(); i += 2) {
        result[i] = evens[evenIndex++];
    }

    return result;
}```",1012,"[assert(sortEvenIndices({ 1, 2, 3 }) == vector<int>({ 1, 2, 3 }));, assert(sortEvenIndices({ 5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10 }) == vector<int>({ -10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123 }));, assert(sortEvenIndices({ 5, 8, -12, 4, 23, 2, 3, 11, 12, -10 }) == vector<int>({ -12, 8, 3, 4, 5, 2, 12, 11, 23, -10 }));]"
1012,"    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","```
#include <iostream>
#include <string>
#include <cassert>

std::string encodeCyclic(const std::string& s) {
    std::string encoded = s;
    for (char& c : encoded) {
        if (c >= a && c <= z) {
            c = (c - a + 1) % 26 + a;  // Shift each character by 1, wrapping around z to a
        }
    }
    return encoded;
}

std::string decodeCyclic(const std::string& s) {
    std::string decoded = s;
    for (char& c : decoded) {
        if (c >= a && c <= z) {
            c = (c - a - 1 + 26) % 26 + a;  // Shift each character back by 1
        }
    }
    return decoded;
}```",1013,"[assert(decodeCyclic(encodeCyclic(""some test string"")) == ""some test string"");]"
1013,"    """"""
    prime_fib returns n-th number that is a Fibonacci number and its also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","```

#include <iostream>
#include <vector>
#include <cmath>

bool is_prime(int p) {
    if (p < 2) {
        return false;
    }
    for (int k = 2; k < std::min(static_cast<int>(std::sqrt(p)) + 1, p - 1); ++k) {
        if (p % k == 0) {
            return false;
        }
    }
    return true;
}

int prime_fib(int n) {
    std::vector<int> f = { 0, 1 };
    while (true) {
        f.push_back(f[f.size() - 1] + f[f.size() - 2]);
        if (is_prime(f.back())) {
            n -= 1;
        }
        if (n == 0) {
            return f.back();
        }
    }
}```",1014,"[assert(prime_fib(1) == 2);, assert(prime_fib(2) == 3);, assert(prime_fib(3) == 5);, assert(prime_fib(4) == 13);, assert(prime_fib(5) == 89);, assert(prime_fib(6) == 233);, assert(prime_fib(7) == 1597);, assert(prime_fib(8) == 28657);, assert(prime_fib(9) == 514229);, assert(prime_fib(10) == 433494437);]"
1014,"    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","```
#include <vector>
#include <cassert>

bool triples_sum_to_zero(const std::vector<int>& nums) {
    int n = nums.size();
    for (int i = 0; i < n - 2; ++i) {
        for (int j = i + 1; j < n - 1; ++j) {
            for (int k = j + 1; k < n; ++k) {
                if (nums[i] + nums[j] + nums[k] == 0) {
                    return true;
                }
            }
        }
    }
    return false;
}```",1015,"[assert(triples_sum_to_zero({ 1, 3, 5, 0 }) == false);, assert(triples_sum_to_zero({ 1, 3, 5, -1 }) == false);, assert(triples_sum_to_zero({ 1, 3, -2, 1 }) == true);, assert(triples_sum_to_zero({ 1, 2, 3, 7 }) == false);, assert(triples_sum_to_zero({ 1, 2, 5, 7 }) == false);, assert(triples_sum_to_zero({ 2, 4, -5, 3, 9, 7 }) == true);, assert(triples_sum_to_zero({ 1 }) == false);, assert(triples_sum_to_zero({ 1, 3, 5, -100 }) == false);, assert(triples_sum_to_zero({ 100, 3, 5, -100 }) == false);]"
1015,"    """"""
    Imagine a road thats a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car thats moving left to right hits a car thats moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","```
int car_race_collision(int n) {
    return n * n;
}
```",1016,"[assert(car_race_collision(2) == 4);, assert(car_race_collision(3) == 9);, assert(car_race_collision(4) == 16);, assert(car_race_collision(8) == 64);, assert(car_race_collision(10) == 100);]"
1017,"    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","```
#include <vector>
#include <unordered_set>
#include <cassert>

bool pairs_sum_to_zero(const std::vector<int>& nums) {
    std::unordered_set<int> num_set;
    for (int num : nums) {
        if (num_set.count(-num)) {
            return true;
        }
        num_set.insert(num);
    }
    return false;
}```",1018,"[assert(pairs_sum_to_zero({1, 3, 5, 0}) == false);, assert(pairs_sum_to_zero({1, 3, -2, 1}) == false);, assert(pairs_sum_to_zero({1, 2, 3, 7}) == false);, assert(pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);, assert(pairs_sum_to_zero({1}) == false);, assert(pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);, assert(pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);, assert(pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);, assert(pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);]"
1018,"    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    22
    >>> change_base(8, 2)
    1000
    >>> change_base(7, 2)
    111
    """"""
","```
#include <string>

std::string change_base(int x, int base) {
    std::string ret = """";
    while (x > 0) {
        ret = std::to_string(x % base) + ret;
        x /= base;
    }
    return ret;
}```",1019,"[assert(change_base(8, 3) == ""22"");, assert(change_base(9, 3) == ""100"");, assert(change_base(234, 2) == ""11101010"");, assert(change_base(16, 2) == ""10000"");, assert(change_base(8, 2) == ""1000"");, assert(change_base(7, 2) == ""111"");]"
1019,"    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","```
#include <cassert>

double triangle_area(double base, double height) {
    return 0.5 * base * height;
}```",1020,"[assert(triangle_area(5, 3) == 7.5);, assert(triangle_area(2, 2) == 2.0);, assert(triangle_area(10, 8) == 40.0);]"
1020,"    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece thats defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please This is  a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","```
#include <vector>

int fib4(int n) {
    std::vector<int> results = { 0, 0, 2, 0 };
    if (n < 4) {
        return results[n];
    }

    for (int i = 4; i <= n; ++i) {
        results.push_back(results[results.size() - 1] + results[results.size() - 2] + results[results.size() - 3] + results[results.size() - 4]);
        results.erase(results.begin());
    }

    return results.back();
}```",1021,"[assert(fib4(5) == 4);, assert(fib4(8) == 28);, assert(fib4(10) == 104);, assert(fib4(12) == 386);]"
1022,"    """"""
    Checks if given string is a palindrome
    >>> is_palindrome()
    True
    >>> is_palindrome(aba)
    True
    >>> is_palindrome(aaaaa)
    True
    >>> is_palindrome(zbcd)
    False
    """"""
","```
#include <cassert>
#include <string>

bool is_palindrome(const std::string& s) {
    int left = 0;
    int right = s.length() - 1;
    while (left < right) {
        if (s[left] != s[right]) {
            return false;
        }
        left++;
        right--;
    }
    return true;
}```",1023,"[assert(is_palindrome("""") == true);, assert(is_palindrome(""aba"") == true);, assert(is_palindrome(""aaaaa"") == true);, assert(is_palindrome(""zbcd"") == false);, assert(is_palindrome(""xywyx"") == true);, assert(is_palindrome(""xywyz"") == false);, assert(is_palindrome(""xywzx"") == false);]"
1023,"    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","```
#include <iostream>
#include <string>
#include <cassert>

int modp(int a, int b) {
    return (a % b + b) % b; // Handles negative modulo cases correctly
}```",1024,"[assert(modp(3, 5) == 3);, assert(modp(0, 101) == 0);, assert(modp(3, 11) == 3);, assert(modp(100, 101) == 100);, assert(modp(30, 5) == 0);, assert(modp(31, 5) == 1);]"
1024,"    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","```
#include <iostream>
#include <string>
#include <cassert>

std::string encodeShift(const std::string& s) {
    std::string result;
    for (char ch : s) {
        if (ch >= a && ch <= z) { // Ensure only lowercase letters are shifted
            result += static_cast<char>(((ch - a - 5 + 26) % 26) + a);
        }
        else {
            result += ch; // Keep other characters unchanged
        }
    }
    return result;
}

std::string decodeShift(const std::string& s) {
    std::string result;
    for (char ch : s) {
        if (ch >= a && ch <= z) {
            result += static_cast<char>(((ch - a + 5) % 26) + a);
        }
        else {
            result += ch;
        }
    }
    return result;
}```",1025,"[assert(decodeShift(encodeShift(""gvpzkkokwwsokfimwz"")) == ""gvpzkkokwwsokfimwz"");, assert(decodeShift(encodeShift(""tiknbppkitogxjb"")) == ""tiknbppkitogxjb"");, assert(decodeShift(encodeShift(""fvkdoxsncu"")) == ""fvkdoxsncu"");, assert(decodeShift(encodeShift(""uzacipcltzywc"")) == ""uzacipcltzywc"");, assert(decodeShift(encodeShift(""afaysfaofdlpp"")) == ""afaysfaofdlpp"");, assert(decodeShift(encodeShift(""smhcupbongotjreuxf"")) == ""smhcupbongotjreuxf"");, assert(decodeShift(encodeShift(""brzxbscvgyfdwrqcmqea"")) == ""brzxbscvgyfdwrqcmqea"");, assert(decodeShift(encodeShift(""rzbkpuivbtplyc"")) == ""rzbkpuivbtplyc"");, assert(decodeShift(encodeShift(""vagbqwfmovfebq"")) == ""vagbqwfmovfebq"");, assert(decodeShift(encodeShift(""iqiaymawigsqfljqhst"")) == ""iqiaymawigsqfljqhst"");]"
1025,"    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels()
    
    >>> remove_vowels(""abcdef\nghijklm"")
    bcdf\nghjklm
    >>> remove_vowels(abcdef)
    bcdf
    >>> remove_vowels(aaaaa)
    
    >>> remove_vowels(aaBAA)
    B
    >>> remove_vowels(zbcd)
    zbcd
    """"""
","```
#include <cassert>
#include <string>

std::string remove_vowels(const std::string& s) {
    std::string result;
    std::string vowels = ""aeiouAEIOU"";
    for (char c : s) {
        if (vowels.find(c) == std::string::npos) { // Check if c is NOT in vowels
            result += c;
        }
    }
    return result;
}```",1026,"[assert(remove_vowels("""") == """");, assert(remove_vowels(""abcdef\\nghijklm"") == ""bcdf\\nghjklm"");, assert(remove_vowels(""fedcba"") == ""fdcb"");, assert(remove_vowels(""eeeee"") == """");, assert(remove_vowels(""acBAA"") == ""cB"");, assert(remove_vowels(""EcBOO"") == ""cB"");, assert(remove_vowels(""ybcd"") == ""ybcd"");]"
1026,"    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","```
#include <vector>
#include <cassert>

bool below_threshold(const std::vector<int>& nums, int threshold) {
    for (int num : nums) {
        if (num >= threshold) {
            return false;
        }
    }
    return true;
}```",1027,"[assert(below_threshold({1, 2, 4, 10}, 100));, assert(!below_threshold({1, 20, 4, 10}, 5));, assert(below_threshold({1, 20, 4, 10}, 21));, assert(below_threshold({1, 20, 4, 10}, 22));, assert(below_threshold({1, 8, 4, 10}, 11));, assert(!below_threshold({1, 8, 4, 10}, 10));]"
1027,"    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","```
int add(int x, int y) {
    return x + y;
}
```",1028,"[assert(add(0, 1) == 1);, assert(add(1, 0) == 1);, assert(add(2, 3) == 5);, assert(add(5, 7) == 12);, assert(add(7, 5) == 12);]"
1028,"    """"""
    Check if two words have the same characters.
    >>> same_chars(eabcdzzzz, dddzzzzzzzddeddabc)
    True
    >>> same_chars(abcd, dddddddabc)
    True
    >>> same_chars(dddddddabc, abcd)
    True
    >>> same_chars(eabcd, dddddddabc)
    False
    >>> same_chars(abcd, dddddddabce)
    False
    >>> same_chars(eabcdzzzz, dddzzzzzzzddddabc)
    False
    """"""
","```
#include <iostream>
#include <cassert>
#include <unordered_set>
#include <string>

bool same_chars(const std::string& str1, const std::string& str2) {
    std::unordered_set<char> chars1(str1.begin(), str1.end());
    std::unordered_set<char> chars2(str2.begin(), str2.end());
    return chars1 == chars2;
}```",1029,"[assert(same_chars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"") == true);, assert(same_chars(""abcd"", ""dddddddabc"") == true);, assert(same_chars(""dddddddabc"", ""abcd"") == true);, assert(same_chars(""eabcd"", ""dddddddabc"") == false);, assert(same_chars(""abcd"", ""dddddddabcf"") == false);, assert(same_chars(""eabcdzzzz"", ""dddzzzzzzzddddabc"") == false);, assert(same_chars(""aabb"", ""aaccc"") == false);]"
1029,"    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","```
#include <iostream>
using namespace std;

int fib(int n) {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
}
```",1030,"[assert(fib(10) == 55);, assert(fib(1) == 1);, assert(fib(8) == 21);, assert(fib(11) == 89);, assert(fib(12) == 144);]"
1030,"    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","```
bool correct_bracketing(const std::string &brackets) {
    int depth = 0;
    for (char b : brackets) {
        if (b == <) {
            depth += 1;
        } else {
            depth -= 1;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth == 0;
}
```",1031,"[assert(correct_bracketing(""<>""));, assert(correct_bracketing(""<<><>>""));, assert(correct_bracketing(""<><><<><>><>""));, assert(correct_bracketing(""<><><<<><><>><>><<><><<>>>""));, assert(!correct_bracketing(""<<<><>>>>""));, assert(!correct_bracketing(""><<>""));, assert(!correct_bracketing(""<""));, assert(!correct_bracketing(""<<<<""));, assert(!correct_bracketing("">""));, assert(!correct_bracketing(""<<>""));, assert(!correct_bracketing(""<><><<><>><>><<>""));, assert(!correct_bracketing(""<><><<><>><>>><>""));]"
1031,"    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","```
#include <vector>
#include <algorithm>

bool monotonic(std::vector<int> l) {
    return l == std::vector<int>(l.begin(), l.end()) || l == std::vector<int>(l.rbegin(), l.rend());
}
```",1032,"[assert(monotonic({ 1, 2, 4, 10 }) == true);, assert(monotonic({ 1, 2, 4, 20 }) == true);, assert(monotonic({ 4, 1, 0, -10 }) == true);, assert(monotonic({ 4, 1, 1, 0 }) == true);]"
1032,"    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","```
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

std::vector<int> common(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> result;
    std::vector<int> a_copy = a;
    std::vector<int> b_copy = b;
    std::sort(a_copy.begin(), a_copy.end());
    std::sort(b_copy.begin(), b_copy.end());
    std::set_intersection(a_copy.begin(), a_copy.end(), b_copy.begin(), b_copy.end(), std::back_inserter(result));
    return result;
}```",1033,"[assert(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) == std::vector<int>({1, 5, 653}));, assert(common({5, 3, 2, 8}, {3, 2}) == std::vector<int>({2, 3}));, assert(common({4, 3, 2, 8}, {3, 2, 4}) == std::vector<int>({2, 3, 4}));, assert(common({4, 3, 2, 8}, {}) == std::vector<int>({}));]"
1033,"    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","```
#include <iostream>
using namespace std;

bool is_prime(int k) {
    if (k < 2) {
        return false;
    }
    for (int i = 2; i < k; i++) {
        if (k % i == 0) {
            return false;
        }
    }
    return true;
}

int largest_prime_factor(int n) {
    int largest = 1;
    for (int j = 2; j <= n; j++) {
        if (n % j == 0 && is_prime(j)) {
            largest = max(largest, j);
        }
    }
    return largest;
}
```",1034,"[assert(largest_prime_factor(15) == 5);, assert(largest_prime_factor(27) == 3);, assert(largest_prime_factor(63) == 7);, assert(largest_prime_factor(330) == 11);, assert(largest_prime_factor(13195) == 29);]"
1034,"    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","```
#include <iostream>

int sum_to_n(int n) {
    int sum = 0;
    for (int i = 0; i <= n; ++i) {
        sum += i;
    }
    return sum;
}
```",1035,"[assert(sum_to_n(1) == 1);, assert(sum_to_n(6) == 21);, assert(sum_to_n(11) == 66);, assert(sum_to_n(30) == 465);, assert(sum_to_n(100) == 5050);]"
1035,"    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","```
#include <string>

bool correct_bracketing(const std::string& brackets) {
    int depth = 0;
    for (char b : brackets) {
        if (b == () {
            depth += 1;
        } else {
            depth -= 1;
        }
        if (depth < 0) {
            return false;
        }
    }
    return depth == 0;
}
```",1036,"[assert(correct_bracketing(""()""));, assert(correct_bracketing(""(()())""));, assert(correct_bracketing(""()()(()())()""));, assert(correct_bracketing(""()()((()()())())(()()(()))""));, assert(!correct_bracketing("")(()""));, assert(!correct_bracketing(""(""));, assert(!correct_bracketing(""((((""));, assert(!correct_bracketing("")""));, assert(!correct_bracketing(""(()""));, assert(!correct_bracketing(""()()(()())())(()""));]"
1036,"    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","```
#include <cassert>
#include <vector>

std::vector<int> derivative(const std::vector<int>& coeffs) {
    std::vector<int> result;
    for (size_t i = 1; i < coeffs.size(); ++i) {
        result.push_back(coeffs[i] * i);
    }
    return result;
}```",1037,"[assert(derivative({3, 1, 2, 4, 5}) == std::vector<int>({1, 4, 12, 20}));, assert(derivative({1, 2, 3}) == std::vector<int>({2, 6}));, assert(derivative({3, 2, 1}) == std::vector<int>({2, 2}));, assert(derivative({3, 2, 1, 0, 4}) == std::vector<int>({2, 2, 0, 16}));, assert(derivative({1}) == std::vector<int>({}));]"
1037,"    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece thats defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please This is  a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","```
#include <iostream>

int fibfib(int n) {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return 0;
    }
    if (n == 2) {
        return 1;
    }
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
}
```",1038,"[assert(fibfib(2) == 1);, assert(fibfib(1) == 0);, assert(fibfib(5) == 4);, assert(fibfib(8) == 24);, assert(fibfib(10) == 81);, assert(fibfib(12) == 274);, assert(fibfib(14) == 927);]"
1038,"    """"""This is  a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are a, e, i, o, u. Here, y is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","```
#include <cassert>
#include <string>

int vowels_count(const std::string& str) {
    int count = 0;
    for (char c : str) {
        if (c == a || c == e || c == i || c == o || c == u ||
            c == A || c == E || c == I || c == O || c == U) {
            count++;
        }
    }
    return count;
}```",1039,"[assert(vowels_count(""abcde"") == 2);, assert(vowels_count(""Alone"") == 3);, assert(vowels_count(""key"") == 1);, assert(vowels_count(""bye"") == 1);, assert(vowels_count(""keY"") == 1);]"
1039,"    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","```
#include <iostream>
#include <cassert>
#include <string>

std::string circular_shift(int number, int shift) {
    std::string num_str = std::to_string(number);
    shift = shift % num_str.length();
    std::string shifted = num_str.substr(num_str.length() - shift) + num_str.substr(0, num_str.length() - shift);
    return shifted;
}```",1040,"[assert(circular_shift(100, 2) == ""001"");, assert(circular_shift(12, 2) == ""12"");, assert(circular_shift(12, 1) == ""21""); // This prints if this assert fails 1 (good for debugging!), assert(circular_shift(11, 101) == ""11""); // This prints if this assert fails 2 (also good for debugging!)]"
1040,"    """"""Task
    This is  a function that takes a string as input and returns the sum of the upper characters only
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","```
#include <iostream>
#include <string>
#include <cassert>

int digitSum(const std::string& s) {
    if (s.empty()) return 0;
    int sum = 0;
    for (char ch : s) { // Fixed variable name
        if (isupper(ch)) {
            sum += static_cast<int>(ch);
        }
    }
    return sum;
}```",1041,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(digitSum("""") == 0 && ""Error"");, assert(digitSum(""abAB"") == 131 && ""Error"");, assert(digitSum(""abcCd"") == 67 && ""Error"");, assert(digitSum(""helloE"") == 69 && ""Error"");, assert(digitSum(""woArBld"") == 131 && ""Error"");, assert(digitSum(""aAaaaXa"") == 153 && ""Error"");, assert(true && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(digitSum("" How are yOu?"") == 151 && ""Error"");, assert(digitSum(""You arE Very Smart"") == 327 && ""Error"");]"
1041,"    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","```
#include <iostream>
#include <sstream>
#include <vector>
#include <string>
#include <cassert>
#include <algorithm> // Required for std::all_of

int fruit_distribution(const std::string& s, int n) {
    std::vector<int> lis;
    std::istringstream iss(s);
    std::string i;
    while (iss >> i) {
        if (std::all_of(i.begin(), i.end(), ::isdigit)) { // Checks if i contains only digits
            lis.push_back(std::stoi(i));
        }
    }
    int sum = 0;
    for (int num : lis) {
        sum += num;
    }
    return n - sum;
}```",1042,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(fruit_distribution(""5 apples and 6 oranges"", 19) == 8);, assert(fruit_distribution(""5 apples and 6 oranges"", 21) == 10);, assert(fruit_distribution(""0 apples and 1 oranges"", 3) == 2);, assert(fruit_distribution(""1 apples and 0 oranges"", 3) == 2);, assert(fruit_distribution(""2 apples and 3 oranges"", 100) == 95);, assert(fruit_distribution(""2 apples and 3 oranges"", 5) == 0);, assert(fruit_distribution(""1 apples and 100 oranges"", 120) == 19);]"
1042,"    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","```
#include <vector>
#include <algorithm>
#include <limits>

std::vector<int> pluck(const std::vector<int>& arr) {
    if (arr.empty()) return {};
    std::vector<int> evens;

    for (int x : arr) {
        if (x % 2 == 0) {
            evens.push_back(x);
        }
    }

    if (evens.empty()) return {};
    
    int min_even = *std::min_element(evens.begin(), evens.end());
    int index = std::distance(arr.begin(), std::find(arr.begin(), arr.end(), min_even));
    
    return {min_even, index};
}
```",1043,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(pluck({4, 2, 3}) == std::vector<int>{2, 1} && ""Error"");, assert(pluck({1, 2, 3}) == std::vector<int>{2, 1} && ""Error"");, assert(pluck({}) == std::vector<int>{} && ""Error"");, assert(pluck({5, 0, 3, 0, 4, 2}) == std::vector<int>{0, 1} && ""Error"");, assert(true && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(pluck({1, 2, 3, 0, 5, 3}) == std::vector<int>{0, 3} && ""Error"");, assert(pluck({5, 4, 8, 4, 8}) == std::vector<int>{4, 1} && ""Error"");, assert(pluck({7, 6, 7, 1}) == std::vector<int>{6, 1} && ""Error"");, assert(pluck({7, 9, 7, 1}) == std::vector<int>{} && ""Error"");]"
1045,"    
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    
","```
#include <cmath>
#include <iostream>

double triangle_area(double a, double b, double c) {
    if (a + b <= c || a + c <= b || b + c <= a) {
        return -1;
    }
    double s = (a + b + c) / 2;
    double area = sqrt(s * (s - a) * (s - b) * (s - c));
    area = round(area * 100) / 100; // rounding to 2 decimal places
    return area;
}
```",1046,"[assert(triangle_area(1, 2, 3) == -1);, assert(triangle_area(10, 5, 7) == 16.25);, assert(triangle_area(2, 6, 3) == -1);]"
1046,"    
    This is  a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if its balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but its unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # its balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and its balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and its balanced.
    
","```
#include <vector>
#include <numeric>

bool will_it_fly(const std::vector<int>& q, int w) {
    if (std::accumulate(q.begin(), q.end(), 0) > w) {
        return false;
    }

    int i = 0, j = q.size() - 1;
    while (i < j) {
        if (q[i] != q[j]) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}```",1047,"[assert(will_it_fly({3, 2, 3}, 9) == true);, assert(will_it_fly({1, 2}, 5) == false);, assert(will_it_fly({3}, 5) == true);]"
1047,"    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","```
#include <vector>

int smallest_change(std::vector<int>& arr) {
    int ans = 0;
    for (int i = 0; i < arr.size() / 2; i++) {
        if (arr[i] != arr[arr.size() - i - 1]) {
            ans += 1;
        }
    }
    return ans;
}
```",1048,"[assert(smallest_change({ 1, 2, 3, 5, 4, 7, 9, 6 }) == 4);, assert(smallest_change({ 1, 2, 3, 4, 3, 2, 2 }) == 1);, assert(smallest_change({ 1, 4, 2 }) == 1);]"
1048,"    
    This is  a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match([hi, admin], [hI, Hi]) ➞ [hI, Hi]
    total_match([hi, admin], [hi, hi, admin, project]) ➞ [hi, admin]
    total_match([hi, admin], [hI, hi, hi]) ➞ [hI, hi, hi]
    total_match([4], [1, 2, 3, 4, 5]) ➞ [4]
    
","```
#include <vector>
#include <string>

std::vector<std::string> total_match(const std::vector<std::string>& lst1, const std::vector<std::string>& lst2) {
    int l1 = 0;
    for (const auto& st : lst1) {
        l1 += st.length();
    }
    
    int l2 = 0;
    for (const auto& st : lst2) {
        l2 += st.length();
    }
    
    if (l1 <= l2) {
        return lst1;
    } else {
        return lst2;
    }
}
```",1049,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(total_match({}, {}) == std::vector<std::string>{});, assert((total_match({ ""hi"", ""admin"" }, { ""hi"", ""hi"", ""admin"", ""project"" }) == std::vector<std::string>{""hi"", ""admin""}));]"
1049,"    """"""This is  a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
","```
#include <iostream>

bool is_prime(int n) {
    for (int j = 2; j < n; j++) {
        if (n % j == 0) {
            return false;
        }
    }
    return true;
}

bool is_multiply_prime(int a) {
    for (int i = 2; i < 101; i++) {
        if (!is_prime(i)) continue;
        for (int j = 2; j < 101; j++) {
            if (!is_prime(j)) continue;
            for (int k = 2; k < 101; k++) {
                if (!is_prime(k)) continue;
                if (i * j * k == a) return true;
            }
        }
    }
    return false;
}```",1050,"[assert(is_multiply_prime(5) == false);, assert(is_multiply_prime(30) == true);, assert(is_multiply_prime(8) == true);]"
1050,"    """"""Your task is to This is  a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","```
bool is_simple_power(int x, int n) {
    if (n == 1) { 
        return (x == 1); 
    }
    int power = 1;
    while (power < x) { 
        power = power * n; 
    }
    return (power == x); 
}
```",1051,"[assert(is_simple_power(12, 6) == false && ""This prints if this assert fails 1 (good for debugging!)"");, assert(is_simple_power(1, 1) == true && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(is_simple_power(1, 12) == true && ""This prints if this assert fails 2 (also good for debugging!)"");]"
1051,"    
    This is  a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    
","```
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>
#include <cmath>
#include <cstdlib>

bool iscube(int a) {
    a = std::abs(a);
    int root = std::round(std::cbrt(a)); // More precise way to get the cube root
    return root * root * root == a;
}```",1052,"[assert(iscube(1) == true);, assert(iscube(2) == false);, assert(iscube(-1) == true);]"
1052,"    """"""You have been tasked to This is  a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","```
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>
#include <string>

int hex_key(const std::string& num) {
    const std::string primes = ""2357BD""; // The valid hex characters
    int total = 0;
    for (size_t i = 0; i < num.length(); ++i) {
        if (primes.find(num[i]) != std::string::npos) {
            total += 1;
        }
    }
    return total;
}```",1053,"[assert(hex_key(""1077E"") == 2); // Second test case, assert(hex_key(""ABED1A33"") == 4); // Third test case, assert(hex_key(""2020"") == 2); // Fourth test case]"
1053,"    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be 0 or 1.

    There will be an extra couple of characters db at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
","```
#include <iostream>
#include <cassert>
#include <bitset>

std::string decimalToBinary(int decimal) {
    std::string binary = std::bitset<32>(decimal).to_string();  // Convert to 32-bit binary string
    binary.erase(0, binary.find_first_not_of(0));  // Remove leading zeros
    return ""db"" + binary + ""db"";
}```",1054,"[assert(decimalToBinary(0) == ""db0db"");, assert(decimalToBinary(32) == ""db100000db"");, assert(decimalToBinary(103) == ""db1100111db"");]"
1054,"    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","```
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>
#include <string>
#include <iostream>

// Function to convert decimal number to binary string
std::string decimal_to_binary(int decimal) {
    if (decimal == 0) return ""db0db""; // Special case for zero

    std::string binary = """";
    while (decimal > 0) {
        binary = std::to_string(decimal % 2) + binary; // Prepend remainder (0 or 1)
        decimal /= 2;
    }
    return ""db"" + binary + ""db""; // Return the binary string wrapped in ""db""
}```",1055,"[assert(is_happy(""a"") == false && ""a"");, assert(is_happy(""aa"") == false && ""aa"");, assert(is_happy(""abcd"") == true && ""abcd"");]"
1055,"    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to This is  
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> [A+, B, C-, C, A-]
    """"""
","```
#include <iostream>
#include <vector>
#include <string>

std::vector<std::string> numerical_letter_grade(const std::vector<double>& grades) {
    std::vector<std::string> letter_grade;
    for (double gpa : grades) {
        if (gpa == 4.0) {
            letter_grade.push_back(""A+"");
        } else if (gpa > 3.7) {
            letter_grade.push_back(""A"");
        } else if (gpa > 3.3) {
            letter_grade.push_back(""A-"");
        } else if (gpa > 3.0) {
            letter_grade.push_back(""B+"");
        } else if (gpa > 2.7) {
            letter_grade.push_back(""B"");
        } else if (gpa > 2.3) {
            letter_grade.push_back(""B-"");
        } else if (gpa > 2.0) {
            letter_grade.push_back(""C+"");
        } else if (gpa > 1.7) {
            letter_grade.push_back(""C"");
        } else if (gpa > 1.3) {
            letter_grade.push_back(""C-"");
        } else if (gpa > 1.0) {
            letter_grade.push_back(""D+"");
        } else if (gpa > 0.7) {
            letter_grade.push_back(""D"");
        } else if (gpa > 0.0) {
            letter_grade.push_back(""D-"");
        } else {
            letter_grade.push_back(""E"");
        }
    }
    return letter_grade;
}
```",1056,"[assert(numerical_letter_grade({ 1.2 }) == std::vector<std::string>{""D+""});, assert(numerical_letter_grade({ 0.5 }) == std::vector<std::string>{""D-""});, assert(numerical_letter_grade({ 0.0 }) == std::vector<std::string>{""E""});]"
1056,"    """"""This is  a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length(Hello) == True
    prime_length(abcdcba) == True
    prime_length(kittens) == True
    prime_length(orange) == False
    """"""
","```
#include <string>

bool prime_length(const std::string& str) {
    int l = str.length();
    if (l == 0 || l == 1) {
        return false;
    }
    for (int i = 2; i < l; i++) {
        if (l % i == 0) {
            return false;
        }
    }
    return true;
}
```",1057,"[assert(prime_length(""orange"") == false);, assert(prime_length(""wow"") == true);, assert(prime_length(""world"") == true);, assert(prime_length(""MadaM"") == true);]"
1057,"    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
","```
#include <cmath>

int starts_one_ends(int n) {
    if (n == 1) return 1;
    return 18 * static_cast<int>(pow(10, n - 2));
}
```",1058,"[assert(starts_one_ends(1) == 1);, assert(starts_one_ends(2) == 18);, assert(starts_one_ends(3) == 180);]"
1058,"    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","```
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>
#include <string>
#include <bitset>

std::string solve(int N) {
    int sum = 0;
    // Sum the digits of N
    for (char digit : std::to_string(N)) {
        sum += digit - 0;
    }

    // Convert the sum to binary and remove leading zeros
    return std::bitset<32>(sum).to_string().substr(std::bitset<32>(sum).to_string().find(1));
}```",1059,"[assert(solve(1000) == ""1"" && ""Error"");, assert(solve(150) == ""110"" && ""Error"");, assert(solve(147) == ""1100"" && ""Error"");]"
1059,"    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","```
#include <vector>

int add(const std::vector<int>& lst) {
    int total = 0;
    for (size_t i = 1; i < lst.size(); i += 2) {
        if (lst[i] % 2 == 0) {
            total += lst[i];
        }
    }
    return total;
}
```",1060,"[assert(add({ 4, 88 }) == 4);  // Only the first element, 4, is checked (it is even), assert(add({ 4, 5, 6, 7, 2, 122 }) == 12); // Sum of even elements at indices 0, 2, 4, assert(add({ 4, 0, 6, 7 }) == 10); // Sum of even elements at indices 0 and 2 (4 + 6)]"
1060,"    """"""
    This is  a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle(Hi) returns Hi
    anti_shuffle(hello) returns ehllo
    anti_shuffle(Hello World!!!) returns Hello !!!Wdlor
    """"""
","```
#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>

std::string anti_shuffle(const std::string& s) {
    std::istringstream iss(s);
    std::string word;
    std::vector<std::string> sorted_words;

    while (iss >> word) {
        std::sort(word.begin(), word.end());
        sorted_words.push_back(word);
    }

    std::ostringstream oss;
    for (size_t i = 0; i < sorted_words.size(); ++i) {
        oss << sorted_words[i];
        if (i < sorted_words.size() - 1) {
            oss <<  ;
        }
    }

    return oss.str();
}
```",1061,"[assert(anti_shuffle(""Hi"") == ""Hi"");, assert(anti_shuffle(""hello"") == ""ehllo"");, assert(anti_shuffle(""number"") == ""bemnru"");]"
1061,"    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","```#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>

// Helper function to compare two 2D vectors
bool areVectorsEqual(const std::vector<std::vector<int>>& v1, const std::vector<std::vector<int>>& v2) {
    return v1 == v2; // Direct comparison of vectors (C++ automatically supports this for std::vector)
}

std::vector<std::vector<int>> getRow(const std::vector<std::vector<int>>& matrix, int target) {
    std::vector<std::vector<int>> coords;

    // Traverse the matrix to find occurrences of the target
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[i].size(); ++j) {
            if (matrix[i][j] == target) {
                coords.push_back({ i, j });
            }
        }
    }

    // Sort the coordinates based on row first, then column in descending order
    std::sort(coords.begin(), coords.end(), [](const std::vector<int>& a, const std::vector<int>& b) {
        if (a[0] == b[0]) {
            return a[1] > b[1]; // Sort by column in descending order
        }
        return a[0] < b[0]; // Sort by row in ascending order
        });

    return coords;```",1062,"[assert(areVectorsEqual(getRow({ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1} }, 1), { {0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0} }));, assert(areVectorsEqual(getRow({ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6} }, 2), { {0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1} }));, assert(areVectorsEqual(getRow({ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1} }, 1), { {0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0} }));, assert(areVectorsEqual(getRow({}, 1), {}));]"
1062,"    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * dont change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
","```
#include <vector>
#include <algorithm>

std::vector<int> sort_array(const std::vector<int>& array) {
    if (array.empty()) {
        return {};
    }
    std::vector<int> sorted_array = array;
    bool reverse_sort = (array[0] + array[array.size() - 1]) % 2 == 0;
    std::sort(sorted_array.begin(), sorted_array.end(), [reverse_sort](int a, int b) {
        return reverse_sort ? a > b : a < b;
    });
    return sorted_array;
}
```",1063,"[assert(sort_array({}) == std::vector<int>{}, ""Error"");, assert(sort_array({ 5 }) == std::vector<int>{5}, ""Error"");, assert((sort_array({ 2, 4, 3, 0, 1, 5 }) == std::vector<int>{0, 1, 2, 3, 4, 5}, ""Error""));]"
1063,"    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt(hi) returns lm
    encrypt(asdfghjkl) returns ewhjklnop
    encrypt(gf) returns kj
    encrypt(et) returns ix
    """"""
","```
#include <iostream>
#include <string>

std::string encrypt(const std::string& s) {
    std::string d = ""abcdefghijklmnopqrstuvwxyz"";
    std::string out = """";
    for (char c : s) {
        if (d.find(c) != std::string::npos) {
            out += d[(d.find(c) + 2 * 2) % 26];
        } else {
            out += c;
        }
    }
    return out;
}
```",1064,"[assert(encrypt(""faewfawefaewg"") == ""jeiajeaijeiak"" && ""This prints if this assert fails 1 (good for debugging!)"");, assert(encrypt(""hellomyfriend"") == ""lippsqcjvmirh"" && ""This prints if this assert fails 2 (good for debugging!)"");, assert(encrypt(""dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh"") == ""hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl"" && ""This prints if this assert fails 3 (good for debugging!)"");, assert(encrypt(""a"") == ""e"" && ""This prints if this assert fails 2 (also good for debugging!)"");]"
1064,"    """"""
    You are given a list of integers.
    This is  a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","```
#include <vector>
#include <set>
#include <algorithm>
#include <iostream>

int next_smallest(std::vector<int> lst) {
    std::set<int> unique_elements(lst.begin(), lst.end());
    std::vector<int> sorted_lst(unique_elements.begin(), unique_elements.end());

    return sorted_lst.size() < 2 ? -1 : sorted_lst[1]; // Return -1 instead of None for C++
}
```",1065,"[assert(next_smallest({ 1, 2, 3, 4, 5 }) == 2);, assert(next_smallest({ 5, 1, 4, 3, 2 }) == 2);]"
1065,"    """"""
    Youll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by ., ? or !.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","```
#include <iostream>
#include <sstream>
#include <vector>
#include <regex>

int is_bored(const std::string& S) {
    std::regex re(""[.?!]\\s*"");
    std::sregex_token_iterator it(S.begin(), S.end(), re, -1);
    std::sregex_token_iterator end;

    int count = 0;
    for (; it != end; ++it) {
        std::string sentence = *it;
        if (sentence.substr(0, 2) == ""I "") {
            count++;
        }
    }
    return count;
}
```",1066,"[assert(is_bored(""Hello world"") == 0 && ""Test 1"");, assert(is_bored(""Is the sky blue?"") == 0 && ""Test 2"");, assert(is_bored(""I love It !"") == 1 && ""Test 3"");]"
1066,"    
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    
","```
#include <iostream>
#include <typeinfo>

bool any_int(int x, int y, int z) {
    if (typeid(x) == typeid(int) && typeid(y) == typeid(int) && typeid(z) == typeid(int)) {
        if ((x + y == z) || (x + z == y) || (y + z == x)) {
            return true;
        }
        return false;
    }
    return false;
}
```",1067,"[assert(any_int(2, 1, 1) == true && ""This prints if this assert fails 8 (also good for debugging!)"");, assert(any_int(3, 4, 7) == true && ""This prints if this assert fails 9 (also good for debugging!)"");, assert(any_int(-4, 6, 2) == true && ""This prints if this assert fails 7 (good for debugging!)"");]"
1067,"    """"""
    This is  a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode(test)
    TGST
    >>> encode(This is a message)
    tHKS KS C MGSSCGG
    """"""
","```
#include <vector>
#include <algorithm>
#include <limits>
#include <cassert>
#include <string>
#include <bitset>

std::string solve(int N) {
    int sum = 0;
    // Sum the digits of N
    for (char digit : std::to_string(N)) {
        sum += digit - 0;
    }

    // Convert the sum to binary and remove leading zeros
    return std::bitset<32>(sum).to_string().substr(std::bitset<32>(sum).to_string().find(1));
}```",1068,"[assert(solve(1000) == ""1"" && ""Error"");, assert(solve(150) == ""110"" && ""Error"");, assert(solve(147) == ""1100"" && ""Error"");]"
1068,"    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","```
#include <vector>
#include <cmath>
#include <string>

int skjkasdkd(const std::vector<int>& lst) {
    auto isPrime = [](int n) {
        if (n < 2) return false;
        for (int i = 2; i <= std::sqrt(n); ++i) {
            if (n % i == 0) return false;
        }
        return true;
    };

    int maxx = 0;
    size_t i = 0;
    while (i < lst.size()) {
        if (lst[i] > maxx && isPrime(lst[i])) {
            maxx = lst[i];
        }
        i++;
    }

    int result = 0;
    for (char digit : std::to_string(maxx)) {
        result += digit - 0;
    }
    return result;
}
```",1069,"[assert(skjkasdkd({8191}) == 19 && ""This prints if this assert fails 7 (also good for debugging!)"");, assert(skjkasdkd({8191, 123456, 127, 7}) == 19 && ""This prints if this assert fails 8 (also good for debugging!)"");, assert(skjkasdkd({127, 97, 8192}) == 10 && ""This prints if this assert fails 9 (also good for debugging!)"");]"
1069,"    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","```
#include <vector>
#include <cassert>
#include <string>
#include <iostream>
#include <map>
#include <cctype>  // For isalpha, isupper, islower
#include <algorithm>  // For std::all_of

bool check_dict_case(const std::map<std::string, std::string>& dict) {
    if (dict.empty()) {
        return false;
    }

    std::string state = ""start""; // Initialize the state to ""start""

    for (const auto& pair : dict) {
        const std::string& key = pair.first;

        // Check if all characters in the key are alphabetic
        if (!std::all_of(key.begin(), key.end(), ::isalpha)) {
            return false;  // If the key contains non-alphabetic characters, return false
        }

        if (state == ""start"") {
            // Determine the initial state based on the first key
            if (std::all_of(key.begin(), key.end(), ::isupper)) {
                state = ""upper"";
            } else if (std::all_of(key.begin(), key.end(), ::islower)) {
                state = ""lower"";
            } else {
                return false;  // If the case is mixed for the first key, return false
            }
        }
        else if ((state == ""upper"" && !std::all_of(key.begin(), key.end(), ::isupper)) ||
                 (state == ""lower"" && !std::all_of(key.begin(), key.end(), ::islower))) {
            return false;  // If case inconsistency is found, return false
        }
    }

    return true;  // If we finished checking without finding any issue, return true
}```",1070,"[assert(check_dict_case({ {""Name"", ""John""}, {""Age"", ""36""}, {""City"", ""Houston""} }) == false && ""Fourth test error"");, assert(check_dict_case({ {""STATE"", ""NC""}, {""ZIP"", ""12345""} }) == true && ""Fifth test error"");, assert(check_dict_case({ {""fruit"", ""Orange""}, {""taste"", ""Sweet""} }) == true && ""Sixth test error"");, assert(check_dict_case({}) == false && ""Empty dictionary test error"");]"
1071,"    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","```
#include <cmath>

int multiply(int a, int b) {
    return std::abs(a % 10) * std::abs(b % 10);
}
```",1072,"[assert(multiply(17, 27) == 49 );, assert(multiply(0, 1) == 0 );, assert(multiply(0, 0) == 0 );]"
1072,"    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper(aBCdEf) returns 1
    count_upper(abcdefg) returns 0
    count_upper(dBBE) returns 0
    """"""
","```
#include <string>

int count_upper(const std::string& s) {
    int count = 0;
    for (size_t i = 0; i < s.length(); ++i) {
        char ch = s[i];
        if (ch == A || ch == E || ch == I || ch == O || ch == U) {
            count++;
        }
    }
    return count;
}```",1073,"[assert(count_upper(""aBCdEf"") == 1);, assert(count_upper(""abcdefg"") == 0);, assert(count_upper(""dBBE"") == 0);]"
1073,"    
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    
","```
#include <iostream>
#include <string>
#include <cmath>

int closest_integer(const std::string& value) {
    std::string str = value;

    if (std::count(str.begin(), str.end(), .) == 1) {
        // remove trailing zeros
        while (!str.empty() && str.back() == 0) {
            str.pop_back();
        }
        if (!str.empty() && str.back() == .) {
            str.pop_back();
        }
    }

    double num = std::stod(str);
    int res;

    if (str.size() >= 2 && str.substr(str.size() - 2) == "".5"") {
        if (num > 0) {
            res = std::ceil(num);
        } else {
            res = std::floor(num);
        }
    } else if (str.size() > 0) {
        res = static_cast<int>(std::round(num));
    } else {
        res = 0;
    }

    return res;
}
```",1074,"[assert(closest_integer(""10"") == 10 && ""Test 1"");, assert(closest_integer(""14.5"") == 15 && ""Test 2"");, assert(closest_integer(""-15.5"") == -16 && ""Test 3"");]"
1074,"    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","```
#include <vector>
#include <cassert>
#include <string>
#include <iostream>
#include <map>
#include <cctype> // For isalpha, isupper, islower

std::vector<int> make_a_pile(int n) {
    std::vector<int> pile;
    for (int i = 0; i < n; ++i) {
        pile.push_back(2 * i + (n - 1));
    }
    return pile;
}

bool vectors_are_equal(const std::vector<int>& v1, const std::vector<int>& v2) {
    if (v1.size() != v2.size()) {
        return false;
    }
    for (size_t i = 0; i < v1.size(); ++i) {
        if (v1[i] != v2[i]) {
            return false;
        }
    }
    return true;
}```",1075,"[assert(make_a_pile(3) == std::vector<int> {3, 5, 7});, assert(make_a_pile(4) == std::vector<int> {4, 6, 8, 10});, assert(make_a_pile(5) == std::vector<int> {5, 7, 9, 11, 13});]"
1075,"    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","```
#include <cassert>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>

std::vector<std::string> words_string(const std::string& str) {
    std::vector<std::string> result;
    std::stringstream ss(str);
    std::string item;

    while (std::getline(ss, item, ,)) {
        item.erase(item.begin(), std::find_if(item.begin(), item.end(), [](unsigned char ch) {
            return !std::isspace(ch);
            }));
        item.erase(std::find_if(item.rbegin(), item.rend(), [](unsigned char ch) {
            return !std::isspace(ch);
            }).base(), item.end());
        if (!item.empty()) {
            result.push_back(item);
        }
    }
    return result;
}```",1076,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(true && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(words_string("""").empty());]"
1076,"    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    theres no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","```
int choose_num(int x, int y) {
    if (x > y) {
        return -1;
    }
    if (y % 2 == 0) {
        return y;
    }
    if (x == y) {
        return -1;
    }
    return y - 1;
}
```",1077,"[assert(choose_num(12, 15) == 14);, assert(choose_num(13, 12) == -1);, assert(choose_num(33, 12354) == 12354);]"
1077,"    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","```
#include <iostream>
#include <cmath>
#include <bitset>

std::string rounded_avg(int n, int m) {
    if (m < n) {
        return ""-1"";
    }
    int summation = 0;
    for (int i = n; i <= m; i++) {
        summation += i;
    }
    return std::bitset<32>(std::round(static_cast<double>(summation) / (m - n + 1))).to_string();
}
```",1078,"[assert(rounded_avg(1, 5) == ""0b11"");, assert(rounded_avg(7, 13) == ""0b1010"");, assert(rounded_avg(964, 977) == ""0b1111001010"");]"
1078,"    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasnt any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","```
#include <vector>
#include <string>
#include <algorithm>
#include<cassert>

std::vector<int> unique_digits(const std::vector<int>& x) {
    std::vector<int> odd_digit_elements;
    for (int i : x) {
        std::string str_i = std::to_string(i);
        bool all_odd = true;
        for (char c : str_i) {
            if ((c - 0) % 2 == 0) {
                all_odd = false;
                break;
            }
        }
        if (all_odd) {
            odd_digit_elements.push_back(i);
        }
    }
    std::sort(odd_digit_elements.begin(), odd_digit_elements.end());
    return odd_digit_elements;
}```",1079,"[assert(unique_digits({ 12345, 2033, 111, 151 }) == std::vector<int>({ 111, 151 }));, assert(unique_digits({ 135, 103, 31 }) == std::vector<int>({ 31, 135 }));]"
1079,"    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = [One]
    """"""
","```
#include <iostream>
#include <vector>
#include <map>
#include<cassert>
#include <algorithm>

std::vector<std::string> by_length(const std::vector<int>& arr) {
    std::map<int, std::string> dic = {
        {1, ""One""},
        {2, ""Two""},
        {3, ""Three""},
        {4, ""Four""},
        {5, ""Five""},
        {6, ""Six""},
        {7, ""Seven""},
        {8, ""Eight""},
        {9, ""Nine""},
    };

    std::vector<int> sorted_arr = arr;
    std::sort(sorted_arr.rbegin(), sorted_arr.rend());

    std::vector<std::string> new_arr;
    for (const auto& var : sorted_arr) {
        if (dic.find(var) != dic.end()) {
            new_arr.push_back(dic[var]);
        }
    }

    return new_arr;
}```",1080,"[assert(true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(by_length({}) == std::vector<std::string>{});, assert(by_length({ 1, -1, 55 }) == std::vector<std::string>{""One""});]"
1080,"    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
","```
#include <iostream>
#include <vector>

std::vector<int> f(int n) {
    std::vector<int> ret;
    for (int i = 1; i <= n; ++i) {
        if (i % 2 == 0) {
            int x = 1;
            for (int j = 1; j <= i; ++j) x *= j;
            ret.push_back(x);
        }
        else {
            int x = 0;
            for (int j = 1; j <= i; ++j) x += j;
            ret.push_back(x);
        }
    }
    return ret;
}```",1081,"[assert((f(5) == std::vector<int>{1, 2, 6, 24, 15}));, assert((f(7) == std::vector<int>{1, 2, 6, 24, 15, 720, 28}));, assert(f(1) == std::vector<int>{1});]"
1081,"    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
","```
#include <iostream>
#include <string>

std::pair<int, int> even_odd_palindrome(int n) {
    auto is_palindrome = [](int n) {
        std::string s = std::to_string(n);
        std::string reversed_s = std::string(s.rbegin(), s.rend());
        return s == reversed_s;
    };

    int even_palindrome_count = 0;
    int odd_palindrome_count = 0;

    for (int i = 1; i <= n; ++i) {
        if (i % 2 == 1 && is_palindrome(i)) {
            odd_palindrome_count++;
        } else if (i % 2 == 0 && is_palindrome(i)) {
            even_palindrome_count++;
        }
    }
    return {even_palindrome_count, odd_palindrome_count};
}
```",1082,"[assert(even_odd_palindrome(123) == std::make_pair(8, 13));, assert(even_odd_palindrome(12) == std::make_pair(4, 6));, assert(even_odd_palindrome(3) == std::make_pair(1, 2));]"
1082,"    """"""
    This is  a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","```
#include <vector>
#include <string>
#include <algorithm>
#include <numeric>

int digits_sum(int n) {
    int neg = 1;
    if (n < 0) {
        n = -n;
        neg = -1;
    }
    std::string str_n = std::to_string(n);
    std::vector<int> digits;
    for (char c : str_n) {
        digits.push_back(c - 0);
    }
    digits[0] *= neg;
    return std::accumulate(digits.begin(), digits.end(), 0);
}

int count_nums(const std::vector<int>& arr) {
    return std::count_if(arr.begin(), arr.end(), [](int x) {
        return digits_sum(x) > 0;
    });
}
```",1083,"[assert(count_nums({-1, -2, 0}) == 0);, assert(count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);, assert(count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);]"
1083,"    """"""We have an array arr of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","```
#include <vector>
#include <algorithm>

bool move_one_ball(std::vector<int>& arr) {
    if (arr.empty()) {
        return true;
    }
    
    std::vector<int> sorted_array = arr;
    std::sort(sorted_array.begin(), sorted_array.end());
    std::vector<int> my_arr;
    
    int min_value = *std::min_element(arr.begin(), arr.end());
    int min_index = std::find(arr.begin(), arr.end(), min_value) - arr.begin();
    
    my_arr.insert(my_arr.end(), arr.begin() + min_index, arr.end());
    my_arr.insert(my_arr.end(), arr.begin(), arr.begin() + min_index);
    
    for (size_t i = 0; i < arr.size(); ++i) {
        if (my_arr[i] != sorted_array[i]) {
            return false;
        }
    }
    return true;
}
```",1084,"[assert(move_one_ball({3, 4, 5, 1, 2}) == true && ""This prints if this assert fails 1 (good for debugging!)"");, assert(move_one_ball({3, 5, 10, 1, 2}) == true);, assert(move_one_ball({4, 3, 1, 2}) == false);]"
1084,"    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","```
#include <vector>
#include <string>

std::string exchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {
    int odd = 0;
    int even = 0;
    for (int i : lst1) {
        if (i % 2 == 1) {
            odd++;
        }
    }
    for (int i : lst2) {
        if (i % 2 == 0) {
            even++;
        }
    }
    if (even >= odd) {
        return ""YES"";
    }
    return ""NO"";
}```",1085,"[assert(exchange({ 1, 2, 3, 4 }, { 1, 2, 3, 4 }) == ""YES"");, assert(exchange({ 1, 2, 3, 4 }, { 1, 5, 3, 4 }) == ""NO"");, assert(exchange({ 1, 2, 3, 4 }, { 2, 1, 4, 3 }) == ""YES"");]"
1085,"    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram(a b c) == {a: 1, b: 1, c: 1}
    histogram(a b b a) == {a: 2, b: 2}
    histogram(a b c a b) == {a: 2, b: 2}
    histogram(b b b b a) == {b: 4}
    histogram() == {}

    """"""
","```
#include <iostream>
#include <sstream>
#include <map>
#include <vector>
#include <algorithm>

std::map<std::string, int> histogram(const std::string& test) {
    std::map<std::string, int> dict1;
    std::istringstream iss(test);
    std::string word;
    std::vector<std::string> list1;
    
    while (iss >> word) {
        list1.push_back(word);
    }

    int t = 0;

    for (const auto& i : list1) {
        if (std::count(list1.begin(), list1.end(), i) > t && i != """") {
            t = std::count(list1.begin(), list1.end(), i);
        }
    }

    if (t > 0) {
        for (const auto& i : list1) {
            if (std::count(list1.begin(), list1.end(), i) == t) {
                dict1[i] = t;
            }
        }
    }
    return dict1;
}
```",1086,"[assert((histogram(""a b b a"") == std::map<std::string, int>{ {""a"", 2}, { ""b"", 2 }} && ""This prints if this assert fails 1 (good for debugging!)""));, assert((histogram(""a b c a b"") == std::map<std::string, int>{ {""a"", 2}, { ""b"", 2 }, { ""c"", 1 }} && ""This prints if this assert fails 2 (good for debugging!)""));, assert((histogram(""a b c d g"") == std::map<std::string, int>{ {""a"", 1}, { ""b"", 1 }, { ""c"", 1 }, { ""d"", 1 }, { ""g"", 1 }} && ""This prints if this assert fails 3 (good for debugging!)""));]"
1086,"    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be (bcd,False)
    For s = ""abcdef"", c = ""b""  the result should be (acdef,False)
    For s = ""abcdedcba"", c = ""ab"", the result should be (cdedc,True)
    """"""
","```
#include <iostream>
#include <string>
#include <cassert>
#include <algorithm>
#include <utility>

// Custom comparison operator for std::pair
bool operator==(const std::pair<std::string, bool>& lhs, const std::pair<std::string, bool>& rhs) {
    return lhs.first == rhs.first && lhs.second == rhs.second;
}

std::pair<std::string, bool> reverseDelete(const std::string& s, const std::string& c) {
    // Filter out characters from s that are in c
    std::string filtered;
    for (char charS : s) {
        if (c.find(charS) == std::string::npos) {
            filtered.push_back(charS);
        }
    }

    // Check if the result is a palindrome
    std::string reversed = filtered;
    std::reverse(reversed.begin(), reversed.end());
    bool isPalindrome = (reversed == filtered);

    return { filtered, isPalindrome };
}```",1087,"[assert(reverseDelete(""abcde"", ""ae"") == std::make_pair(""bcd"", false));, assert(reverseDelete(""abcdef"", ""b"") == std::make_pair(""acdef"", false));, assert(reverseDelete(""abcdedcba"", ""ab"") == std::make_pair(""cdedc"", true));]"
1087,"    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the is should be replaced by the number
    of odd digits in the ith string of the input.

    >>> odd_count([1234567])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count([3,""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","```
#include <iostream>
#include <vector>
#include <string>
#include <cassert>

using namespace std;

vector<string> oddCount(const vector<string>& lst) {
    vector<string> res;
    for (const string& arr : lst) {
        int n = 0;
        for (char d : arr) {
            if (isdigit(d) && (d - 0) % 2 == 1) {
                n++;
            }
        }
        res.push_back(""the number of odd elements "" + to_string(n) +
            "" in the str"" + to_string(n) +
            ""ng "" + to_string(n) +
            "" of the "" + to_string(n) +
            ""nput."");
    }
    return res;
}```",1088,"[assert(oddCount({ ""1234567"" }) == vector<string>{""the number of odd elements 4 in the str4ng 4 of the 4nput.""});, assert((oddCount({ ""3"", ""11111111"" }) == vector<string>{ ""the number of odd elements 1 in the str1ng 1 of the 1nput."", ""the number of odd elements 8 in the str8ng 8 of the 8nput."" }));, assert((oddCount({ ""271"", ""137"", ""314"" }) == vector<string>{ ""the number of odd elements 2 in the str2ng 2 of the 2nput."", ""the number of odd elements 3 in the str3ng 3 of the 3nput."", ""the number of odd elements 2 in the str2ng 2 of the 2nput."" }));]"
1088,"    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","```
#include <vector>
#include <algorithm>

int minSubArraySum(std::vector<int> nums) {
    int max_sum = 0;
    int s = 0;
    for (int num : nums) {
        s += -num;
        if (s < 0) {
            s = 0;
        }
        max_sum = std::max(s, max_sum);
    }
    if (max_sum == 0) {
        max_sum = *std::max_element(nums.begin(), nums.end(), [](int a, int b) { return -a < -b; });
    }
    int min_sum = -max_sum;
    return min_sum;
}```",1089,"[assert(minSubArraySum({ -10 }) == -10 );, assert(minSubArraySum({ 1, -1 }) == -1);]"
1089,"    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","```
#include <vector>
#include <cmath>

int max_fill(const std::vector<std::vector<int>>& grid, int capacity) {
    int total = 0;
    for (const auto& arr : grid) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        total += std::ceil(static_cast<double>(sum) / capacity);
    }
    return total;
}```",1090,"[assert(max_fill({ {0,0,1,0}, {0,1,0,0}, {1,1,1,1} }, 1) == 6 && ""Error"");, assert(max_fill({ {0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1} }, 2) == 5 && ""Error"");]"
1090,"    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","```
#include <algorithm>
#include <vector>
#include <bitset>
#include <functional>

std::vector<int> sort_array(std::vector<int> arr) {
    std::sort(arr.begin(), arr.end());
    std::stable_sort(arr.begin(), arr.end(), [](int x, int y) {
        return std::bitset<32>(x).count() < std::bitset<32>(y).count();
        });
    return arr;
}```",1091,"[assert((sort_array({ 3, 6, 44, 12, 32, 5 }) == std::vector<int>{32, 3, 5, 6, 12, 44}));, assert((sort_array({ 2, 4, 8, 16, 32 }) == std::vector<int>{2, 4, 8, 16, 32}));, assert((sort_array({ 2, 4, 8, 16, 32 }) == std::vector<int>{2, 4, 8, 16, 32}));]"
1091,"    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","```
#include <iostream>
#include <sstream>
#include <vector>
#include <cctype>

std::vector<std::string> select_words(const std::string& s, int n) {
    std::vector<std::string> result;
    std::istringstream stream(s);
    std::string word;

    while (stream >> word) {
        int n_consonants = 0;
        for (char c : word) {
            if (std::tolower(c) != a && std::tolower(c) != e && 
                std::tolower(c) != i && std::tolower(c) != o && 
                std::tolower(c) != u) {
                n_consonants++;
            }
        }
        if (n_consonants == n) {
            result.push_back(word);
        }
    }
    return result;
}
```",1092,"[assert(select_words(""Hello world"", 4) == std::vector<std::string>{""world""}, ""Fourth test error: "" + std::to_string(select_words(""Hello world"", 4)));, assert(select_words(""Uncle sam"", 3) == std::vector<std::string>{""Uncle""}, ""Fifth test error: "" + std::to_string(select_words(""Uncle sam"", 3)));, assert(select_words("""", 4) == std::vector<std::string>{}, ""1st edge test error: "" + std::to_string(select_words("""", 4)));]"
1092,"    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesnt count. Return empty string if you didnt
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","```
#include <string>
#include <unordered_set>

std::string get_closest_vowel(const std::string& word) {
    if (word.length() < 3) {
        return """";
    }

    std::unordered_set<char> vowels = { a, e, i, o, u, A, E, O, U, I };
    for (int i = word.length() - 2; i > 0; --i) {
        if (vowels.find(word[i]) != vowels.end()) {
            if (vowels.find(word[i + 1]) == vowels.end() && vowels.find(word[i - 1]) == vowels.end()) {
                return std::string(1, word[i]);
            }
        }
    }
    return """";
}```",1093,"[assert(get_closest_vowel(""anime"") == ""i"");, assert(get_closest_vowel(""Asia"") == """");, assert(get_closest_vowel(""Above"") == ""o"");]"
1093,"    
    You are given a list of two strings, both strings consist of open
    parentheses ( or close parentheses ) only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string (())() is good, while the string
    ()) is not.
    Return Yes if theres a way to make a good string, and return No otherwise.

    Examples:
    match_parens([()(, )]) == Yes
    match_parens([), )]) == No
    
","```
#include <vector>
#include <string>

std::string match_parens(const std::vector<std::string>& lst) {
    auto check = [](const std::string& s) {
        int val = 0;
        for (char i : s) {
            if (i == () {
                val += 1;
            } else {
                val -= 1;
            }
            if (val < 0) {
                return false;
            }
        }
        return val == 0;
    };

    std::string S1 = lst[0] + lst[1];
    std::string S2 = lst[1] + lst[0];
    return check(S1) || check(S2) ? ""Yes"" : ""No"";
}
```",1094,"[assert(match_parens({""()("", "")""}) == ""Yes"");, assert(match_parens({"")"", "")""}) == ""No"");, assert(match_parens({""(()(())"", ""())())""}) == ""No"");]"
1094,"    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","```
#include <vector>
#include <algorithm>

std::vector<int> maximum(std::vector<int>& arr, int k) {
    if (k == 0) {
        return {};
    }
    std::sort(arr.begin(), arr.end());
    std::vector<int> ans(arr.end() - k, arr.end());
    return ans;
}
```",1095,"[assert(maximum({ -3, 2, 1, 2, -1, -2, 1 }, 1) == std::vector<int>{2});, assert(maximum({ 1, 0, 5, -7 }, 1) == std::vector<int>{5});, assert(maximum({ 1, 2, 3, -23, 243, -400, 0 }, 0) == std::vector<int>{});]"
1095,"    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","```
#include <vector>

int solution(const std::vector<int>& lst) {
    int sum = 0;
    for (size_t idx = 0; idx < lst.size(); ++idx) {
        if (idx % 2 == 0 && lst[idx] % 2 == 1) {
            sum += lst[idx];
        }
    }
    return sum;
}
```",1096,"[assert(solution({5, 8, 7, 1}) == 12);, assert(solution({3, 3, 3, 3, 3}) == 9);, assert(solution({30, 13, 24, 321}) == 0);]"
1096,"    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","```
#include <cassert>
#include <vector>

int add_elements(const std::vector<int>& elements, int count) {
    int sum = 0;
    for (int i = 0; i < count && i < elements.size(); ++i) {
        sum += elements[i];
    }
    return sum;
}```",1097,"[assert(add_elements({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3) == -4);, assert(add_elements({111, 121, 3, 4000, 5, 6}, 2) == 0);, assert(add_elements({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4) == 125);]"
1097,"    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
","```
#include <vector>
#include <algorithm>

std::vector<int> get_odd_collatz(int n) {
    std::vector<int> odd_collatz;
    if (n % 2 == 1) {
        odd_collatz.push_back(n);
    }
    while (n > 1) {
        if (n % 2 == 0) {
            n = n / 2;
        } else {
            n = n * 3 + 1;
        }
        
        if (n % 2 == 1) {
            odd_collatz.push_back(n);
        }
    }
    std::sort(odd_collatz.begin(), odd_collatz.end());
    return odd_collatz;
}
```",1098,"[assert((get_odd_collatz(14) == std::vector<int>{1, 5, 7, 11, 13, 17}));, assert((get_odd_collatz(5) == std::vector<int>{1, 5}));, assert((get_odd_collatz(12) == std::vector<int>{1, 3, 5}));]"
1098,"    """"""You have to This is  a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date(03-11-2000) => True

    valid_date(15-01-2012) => False

    valid_date(04-0-2040) => False

    valid_date(06-04-2020) => True

    valid_date(06/04/2020) => False
    """"""
","```
#include <cassert>
#include <vector>
#include <string>
#include <sstream>
#include <iostream>

bool valid_date(const std::string& date) {
    // Trim leading and trailing spaces
    std::string trimmed_date = date;
    trimmed_date.erase(0, trimmed_date.find_first_not_of("" \t""));
    trimmed_date.erase(trimmed_date.find_last_not_of("" \t"") + 1);

    // Parse date
    std::istringstream iss(trimmed_date);
    std::string month_str, day_str, year_str;
    std::getline(iss, month_str, -);
    std::getline(iss, day_str, -);
    std::getline(iss, year_str);

    // Ensure all components are extracted
    if (month_str.empty() || day_str.empty() || year_str.empty()) {
        return false;
    }

    // Convert to integers
    int month, day, year;
    try {
        month = std::stoi(month_str);
        day = std::stoi(day_str);
        year = std::stoi(year_str);
    }
    catch (...) {
        return false;  // Catch conversion errors (e.g., empty or non-numeric input)
    }

    // Validate month
    if (month < 1 || month > 12) {
        return false;
    }

    // Validate day based on month
    if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && (day < 1 || day > 31)) {
        return false;
    }
    if ((month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day > 30)) {
        return false;
    }

    // Leap year check for February
    bool is_leap = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    if (month == 2) {
        if (is_leap && (day < 1 || day > 29)) {
            return false;
        }
        if (!is_leap && (day < 1 || day > 28)) {
            return false;
        }
    }

    return true;  // If all checks pass, return true
}```",1099,"[assert(valid_date(""03-11-2000"") == true);, assert(valid_date(""02-29-2020"") == true);  // Leap year case, assert(valid_date(""15-01-2012"") == false); // Invalid month, assert(valid_date(""04-0-2040"") == false);  // Invalid day]"
1099,"    
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas , if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord(a) = 0, ord(b) = 1, ... ord(z) = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    
","```
#include <iostream>
#include <sstream>
#include <vector>
#include<cassert>
#include <string>
#include <cctype>
#include <algorithm>  // Needed for std::replace

std::vector<std::string> split_words(const std::string& txt) {
    if (txt.find("" "") != std::string::npos) {
        std::istringstream iss(txt);
        std::vector<std::string> words;
        std::string word;
        while (iss >> word) {
            words.push_back(word);
        }
        return words;
    }
    else if (txt.find("","") != std::string::npos) {
        // Create a modifiable copy of the input string
        std::string modified_txt = txt;
        std::replace(modified_txt.begin(), modified_txt.end(), ,,  );  // Replace commas with spaces

        std::istringstream iss(modified_txt);
        std::vector<std::string> words;
        std::string word;
        while (iss >> word) {
            words.push_back(word);
        }
        return words;
    }
    else {
        int count = 0;
        for (char i : txt) {
            if (std::islower(i) && (static_cast<int>(i) % 2 == 0)) {
                count++;
            }
        }
        return std::vector<std::string>{std::to_string(count)};
    }
}```",1100,"[assert((split_words(""Hello world!"") == std::vector<std::string>{""Hello"", ""world!""}));, assert((split_words(""Hello,world!"") == std::vector<std::string>{""Hello"", ""world!""}));, assert((split_words(""Hello world,!"") == std::vector<std::string>{""Hello"", ""world,!""}));]"
1100,"    
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    
","```
#include <vector>
#include <unordered_map>
#include <algorithm>

bool is_sorted(const std::vector<int>& lst) {
    std::unordered_map<int, int> count_digit;
    for (int i : lst) {
        count_digit[i] += 1;
    }
    for (const auto& pair : count_digit) {
        if (pair.second > 2) {
            return false;
        }
    }
    for (size_t i = 1; i < lst.size(); ++i) {
        if (lst[i - 1] > lst[i]) {
            return false;
        }
    }
    return true;
}
```",1101,"[assert(is_sorted({1, 2, 3, 4, 5, 6}) == true);, assert(is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);, assert(is_sorted({1, 3, 2, 4, 5, 6, 7}) == false && ""This prints if this assert fails 1 (good for debugging);]"
1101,"    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals dont intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","```
#include <algorithm>
#include <string>
#include<cassert>

std::string intersection(std::pair<int, int> interval1, std::pair<int, int> interval2) {
    auto is_prime = [](int num) {
        if (num == 1 || num == 0) return false;
        if (num == 2) return true;
        for (int i = 2; i < num; i++) {
            if (num % i == 0) return false;
        }
        return true;
    };

    int l = std::max(interval1.first, interval2.first);
    int r = std::min(interval1.second, interval2.second);
    int length = r - l;
    if (length > 0 && is_prime(length)) {
        return ""YES"";
    }
    return ""NO"";
}```",1102,"[assert((intersection({ 1, 2 }, { 2, 3 }) == ""NO""));, assert(intersection({ -1, 1 }, { 0, 4 }) == ""NO"");, assert(intersection({ -3, -1 }, { -5, 5 }) == ""YES"");]"
1102,"    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","```
#include <vector>
#include <numeric>

int prod_signs(const std::vector<int>& arr) {
    if (arr.empty()) return 0;
    bool has_zero = std::find(arr.begin(), arr.end(), 0) != arr.end();
    int prod = has_zero ? 0 : (std::count_if(arr.begin(), arr.end(), [](int x) { return x < 0; }) % 2 == 0 ? 1 : -1);
    return prod * std::accumulate(arr.begin(), arr.end(), 0, [](int sum, int x) { return sum + std::abs(x); });
}
```",1103,"[assert(prod_signs({1, 2, 2, -4}) == -9);, assert(prod_signs({0, 1}) == 0);, assert(prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);]"
1103,"    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (lets call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","```
#include <vector>
#include <algorithm>
#include <iostream>

std::vector<int> minPath(std::vector<std::vector<int>>& grid, int k) {
    int n = grid.size();
    int val = n * n + 1;
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] == 1) {
                std::vector<int> temp;
                if (i != 0) {
                    temp.push_back(grid[i - 1][j]);
                }
                if (j != 0) {
                    temp.push_back(grid[i][j - 1]);
                }
                if (i != n - 1) {
                    temp.push_back(grid[i + 1][j]);
                }
                if (j != n - 1) {
                    temp.push_back(grid[i][j + 1]);
                }
                if (!temp.empty()) {
                    val = *std::min_element(temp.begin(), temp.end());
                }
            }
        }
    }

    std::vector<int> ans;
    for (int i = 0; i < k; ++i) {
        if (i % 2 == 0) {
            ans.push_back(1);
        } else {
            ans.push_back(val);
        }
    }
    return ans;
}
```",1104,"[assert(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) == std::vector<int>{1, 2, 1});, assert(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) == std::vector<int>{1});, assert(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) == std::vector<int>{1, 2, 1, 2});, assert(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) == std::vector<int>{1, 10, 1, 10, 1, 10, 1});, assert(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) == std::vector<int>{1, 7, 1, 7, 1});, assert(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) == std::vector<int>{1, 6, 1, 6, 1, 6, 1, 6, 1});, assert(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) == std::vector<int>{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6});, assert(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) == std::vector<int>{1, 3, 1, 3, 1, 3, 1, 3});, assert(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) == std::vector<int>{1, 5, 1, 5, 1, 5, 1, 5});, assert(minPath({{1, 2}, {3, 4}}, 10) == std::vector<int>{1, 2, 1, 2, 1, 2, 1, 2, 1, 2});, assert(minPath({{1, 3}, {3, 2}}, 10) == std::vector<int>{1, 3, 1, 3, 1, 3, 1, 3, 1, 3});]"
1104,"    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people dont know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
","```
#include <vector>

std::vector<double> tri(int n) {
    if (n == 0) {
        return {1};
    }
    std::vector<double> my_tri = {1, 3};
    for (int i = 2; i <= n; ++i) {
        if (i % 2 == 0) {
            my_tri.push_back(i / 2.0 + 1);
        } else {
            my_tri.push_back(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0);
        }
    }
    return my_tri;
}
```",1105,"[assert((tri(3) == std::vector<double>{1, 3, 2.0, 8.0}));, assert((tri(4) == std::vector<double>{1, 3, 2.0, 8.0, 3.0}));, assert((tri(5) == std::vector<double>{1, 3, 2.0, 8.0, 3.0, 15.0}));]"
1105,"    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","```
#include <iostream>
#include <string>

int digits(int n) {
    int product = 1;
    int odd_count = 0;
    std::string str_n = std::to_string(n);
    for (char digit : str_n) {
        int int_digit = digit - 0;
        if (int_digit % 2 == 1) {
            product = product * int_digit;
            odd_count++;
        }
    }
    if (odd_count == 0) {
        return 0;
    } else {
        return product;
    }
}
```",1106,"[assert(digits(5) == 5);, assert(digits(54) == 5);, assert(digits(120) == 1);]"
1106,"    
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested([[]]) ➞ True
    is_nested([]]]]]]][[[[[]) ➞ False
    is_nested([][]) ➞ False
    is_nested([]) ➞ False
    is_nested([[][]]) ➞ True
    is_nested([[]][[) ➞ True
    
","```
#include <iostream>
#include <vector>
#include <algorithm>

bool is_nested(const std::string& str) {
    std::vector<int> opening_bracket_index;
    std::vector<int> closing_bracket_index;

    for (int i = 0; i < str.length(); i++) {
        if (str[i] == [) {
            opening_bracket_index.push_back(i);
        } else {
            closing_bracket_index.push_back(i);
        }
    }
    
    std::reverse(closing_bracket_index.begin(), closing_bracket_index.end());
    int cnt = 0;
    int i = 0;
    int l = closing_bracket_index.size();

    for (int idx : opening_bracket_index) {
        if (i < l && idx < closing_bracket_index[i]) {
            cnt++;
            i++;
        }
    }
    
    return cnt >= 2;
}
```",1107,"[assert(is_nested(""[[]]"") == true && ""This prints if this assert fails 1 (good for debugging!)"");]"
1107,"    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","```
#include <cmath>
#include <vector>

int sum_squares(const std::vector<double>& lst) {
    int squared = 0;
    for (const auto& i : lst) {
        squared += static_cast<int>(std::ceil(i)) * static_cast<int>(std::ceil(i));
    }
    return squared;
}
```",1108,"[assert(sum_squares({0}) == 0 && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(sum_squares({-1}) == 1 && ""This prints if this assert fails 2 (also good for debugging!)"");, assert(sum_squares({-1, 1, 0}) == 2 && ""This prints if this assert fails 2 (also good for debugging!)"");]"
1108,"    
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    
","```
#include <string>
#include <cctype>

bool check_if_last_char_is_a_letter(const std::string& txt) {
    std::string::size_type pos = txt.find_last_of( );
    std::string check = (pos == std::string::npos) ? txt : txt.substr(pos + 1);
    return (check.length() == 1 && std::islower(check[0]));
}
```",1109,"[assert(check_if_last_char_is_a_letter(""apple"") == false);, assert(check_if_last_char_is_a_letter(""apple pi e"") == true);, assert(check_if_last_char_is_a_letter(""eeeee"") == false);]"
1109,"    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","```
#include <vector>

int can_arrange(std::vector<int>& arr) {
    int ind = -1;
    int i = 1;
    while (i < arr.size()) {
        if (arr[i] < arr[i - 1]) {
            ind = i;
        }
        i++;
    }
    return ind;
}
```",1110,"[assert(can_arrange({1, 2, 4, 3, 5}) == 3);, assert(can_arrange({1, 2, 4, 5}) == -1);, assert(can_arrange({1, 4, 2, 5, 6, 7, 8, 9, 10}) == 2);]"
1110,"    
    Create a function that returns a tuple (a, b), where a is
    the largest of negative integers, and b is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    
","```
#include <vector>
#include <algorithm>
#include <optional>

std::pair<std::optional<int>, std::optional<int>> largest_smallest_integers(const std::vector<int>& lst) {
    std::vector<int> smallest;
    std::vector<int> largest;

    for (int x : lst) {
        if (x < 0) {
            smallest.push_back(x);
        } else if (x > 0) {
            largest.push_back(x);
        }
    }

    std::optional<int> max_smallest = smallest.empty() ? std::nullopt : std::make_optional(*std::max_element(smallest.begin(), smallest.end()));
    std::optional<int> min_largest = largest.empty() ? std::nullopt : std::make_optional(*std::min_element(largest.begin(), largest.end()));

    return {max_smallest, min_largest};
}
```",1111,"[assert(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) == std::make_tuple(-2, 1));, assert(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) == std::make_tuple(-7, 2));, assert(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) == std::make_tuple(-9, 2));]"
1111,"    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","```
#include <algorithm>
#include <string>
#include <cassert>
#include <iostream>

std::string compare_one(const std::string& a, const std::string& b) {
    std::string temp_a = a, temp_b = b;

    // Replace , with . for decimal conversion
    std::replace(temp_a.begin(), temp_a.end(), ,, .);
    std::replace(temp_b.begin(), temp_b.end(), ,, .);

    // Convert to double and compare
    double num_a = std::stod(temp_a);
    double num_b = std::stod(temp_b);

    if (num_a == num_b)
        return """";

    return num_a > num_b ? a : b;
}
```",1112,"[assert(compare_one(""1"", ""2"") == ""2"");, assert(compare_one(""1"", ""2.5"") == ""2.5"");, assert(compare_one(""2"", ""3"") == ""3"");]"
1113,"    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","```
long long special_factorial(int n) {
    long long fact_i = 1;
    long long special_fact = 1;
    for (int i = 1; i <= n; ++i) {
        fact_i *= i;
        special_fact *= fact_i;
    }
    return special_fact;
}
```",1114,"[assert(special_factorial(4) == 288 );, assert(special_factorial(5) == 34560 );, assert(special_factorial(7) == 125411328000);]"
1115,"    """"""Create a function which takes a string representing a files name, and returns
    Yes if the the files name is valid, and returns No otherwise.
    A files name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits (0-9) in the files name.
    - The files name contains exactly one dot .
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet (a-z and A-Z).
    - The substring after the dot should be one of these: [txt, exe, dll]
    Examples:
    file_name_check(""example.txt"") # => Yes
    file_name_check(""1example.dll"") # => No (the name should start with a latin alphapet letter)
    """"""
","```
#include <string>
#include <vector>

std::string file_name_check(const std::string& file_name) {
    std::vector<std::string> suf = {""txt"", ""exe"", ""dll""};
    size_t pos = file_name.find(.);
    if (pos == std::string::npos || pos == 0 || pos == file_name.length() - 1) {
        return ""No"";
    }
    std::string name = file_name.substr(0, pos);
    std::string extension = file_name.substr(pos + 1);

    if (std::find(suf.begin(), suf.end(), extension) == suf.end()) {
        return ""No"";
    }
    if (!std::isalpha(name[0])) {
        return ""No"";
    }
    
    int digit_count = 0;
    for (char c : name) {
        if (std::isdigit(c)) {
            digit_count++;
        }
    }

    if (digit_count > 3) {
        return ""No"";
    }
    return ""Yes"";
}
```",1116,"[assert(file_name_check(""_f4indsartal132."") == ""No"");, assert(file_name_check("".txt"") == ""No"");, assert(file_name_check(""s."") == ""No"");]"
1116,"    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","```
#include <vector>
#include <numeric>

int sum_squares(const std::vector<int>& lst) {
    std::vector<int> result;
    for (size_t i = 0; i < lst.size(); ++i) {
        if (i % 3 == 0) {
            result.push_back(lst[i] * lst[i]);
        } else if (i % 4 == 0 && i % 3 != 0) {
            result.push_back(lst[i] * lst[i] * lst[i]);
        } else {
            result.push_back(lst[i]);
        }
    }
    return std::accumulate(result.begin(), result.end(), 0);
}
```",1117,"[assert(sum_squares({1, 2, 3}) == 6);, assert(sum_squares({1, 4, 9}) == 14);, assert(sum_squares({}) == 0);]"
1117,"    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","```
#include <iostream>
#include <sstream>
#include <vector>
#include <string>

std::string words_in_sentence(const std::string& sentence) {
    std::vector<std::string> new_lst;
    std::istringstream iss(sentence);
    std::string word;

    while (iss >> word) {
        bool flg = false;
        if (word.length() == 1) {
            flg = true;
        }
        for (size_t i = 2; i < word.length(); ++i) {
            if (word.length() % i == 0) {
                flg = true;
                break;
            }
        }
        if (!flg || word.length() == 2) {
            new_lst.push_back(word);
        }
    }

    std::string result;
    for (size_t i = 0; i < new_lst.size(); ++i) {
        result += new_lst[i];
        if (i < new_lst.size() - 1) {
            result += "" "";
        }
    }
    return result;
}
```",1118,"[assert(words_in_sentence(""This is a test"") == ""is"");, assert(words_in_sentence(""lets go for swimming"") == ""go for"");, assert(words_in_sentence(""there is no place available here"") == ""there is no place"");]"
1118,"    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","```
#include <iostream>
#include <string>

bool simplify(std::string x, std::string n) {
    size_t pos1 = x.find(""/"");
    size_t pos2 = n.find(""/"");
    
    int a = std::stoi(x.substr(0, pos1));
    int b = std::stoi(x.substr(pos1 + 1));
    int c = std::stoi(n.substr(0, pos2));
    int d = std::stoi(n.substr(pos2 + 1));
    
    int numerator = a * c;
    int denom = b * d;
    
    return (numerator / denom) == (int)(numerator / denom);
}
```",1119,"[assert(simplify(""1/5"", ""5/1"") == true && ""test1"");, assert(simplify(""1/6"", ""2/1"") == false && ""test2"");, assert(simplify(""5/1"", ""3/1"") == true && ""test3"");]"
1119,"    """"""
    This is  a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","```
#include <vector>
#include <algorithm>
#include <numeric>

int digits_sum(int n) {
    int neg = 1;
    if (n < 0) {
        n = -n;
        neg = -1;
    }
    std::vector<int> digits;
    while (n > 0) {
        digits.push_back(n % 10);
        n /= 10;
    }
    if (neg == -1) {
        digits[0] *= neg;
    }
    return std::accumulate(digits.begin(), digits.end(), 0);
}

std::vector<int> order_by_points(std::vector<int> nums) {
    std::sort(nums.begin(), nums.end(), [](int a, int b) {
        return digits_sum(a) < digits_sum(b);
    });
    return nums;
}
```",1120,"[assert(order_by_points({1, 11, -1, -11, -12}) == std::vector<int>{-1, -11, 1, -12, 11});, assert(order_by_points({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}) == std::vector<int>{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457});, assert(order_by_points({}) == std::vector<int>{});]"
1120,"    """"""This is  a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","```
#include <vector>
#include <string>

int specialFilter(const std::vector<int>& nums) {
    int count = 0;
    for (int num : nums) {
        if (num > 10) {
            int odd_digits[] = {1, 3, 5, 7, 9};
            std::string number_as_string = std::to_string(num);
            if (std::find(std::begin(odd_digits), std::end(odd_digits), number_as_string[0] - 0) != std::end(odd_digits) &&
                std::find(std::begin(odd_digits), std::end(odd_digits), number_as_string[number_as_string.length() - 1] - 0) != std::end(odd_digits)) {
                count += 1;
            }
        }
    }
    return count;
}
```",1121,"[assert(specialFilter({5, -2, 1, -5}) == 0);, assert(specialFilter({15, -73, 14, -15}) == 1);, assert(specialFilter({33, -2, -3, 45, 21, 109}) == 2);]"
1121,"    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
","```
#include <vector>

int get_max_triples(int n) {
    std::vector<int> A(n);
    for (int i = 1; i <= n; ++i) {
        A[i-1] = i * i - i + 1;
    }
    std::vector<std::tuple<int, int, int>> ans;
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            for (int k = j + 1; k < n; ++k) {
                if ((A[i] + A[j] + A[k]) % 3 == 0) {
                    ans.emplace_back(A[i], A[j], A[k]);
                }
            }
        }
    }
    return ans.size();
}
```",1122,"[assert(get_max_triples(5) == 1);, assert(get_max_triples(6) == 4);, assert(get_max_triples(10) == 36);]"
1123,"    """"""This is  a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","```
#include <algorithm>
#include <string>
#include <cassert>
#include <iostream>
#include <vector>
#include <tuple>

std::tuple<std::vector<std::string>> bf(const std::string& planet1, const std::string& planet2) {
    std::vector<std::string> planet_names = {
        ""Mercury"", ""Venus"", ""Earth"", ""Mars"",
        ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""
    };

    // Check if both planets exist in the list and are different
    if (std::find(planet_names.begin(), planet_names.end(), planet1) == planet_names.end() ||
        std::find(planet_names.begin(), planet_names.end(), planet2) == planet_names.end() ||
        planet1 == planet2) {
        return std::make_tuple(std::vector<std::string>{});
    }

    auto planet1_index = std::find(planet_names.begin(), planet_names.end(), planet1) - planet_names.begin();
    auto planet2_index = std::find(planet_names.begin(), planet_names.end(), planet2) - planet_names.begin();

    if (planet1_index < planet2_index) {
        return std::make_tuple(std::vector<std::string>(planet_names.begin() + planet1_index + 1, planet_names.begin() + planet2_index));
    }
    else {
        return std::make_tuple(std::vector<std::string>(planet_names.begin() + planet2_index + 1, planet_names.begin() + planet1_index));
    }
}```",1124,"[assert(std::get<0>(bf(""Earth"", ""Mercury"")) == std::vector<std::string>{""Venus""});, assert(std::get<0>(bf(""Earth"", ""Earth"")).empty());, assert(std::get<0>(bf(""Mars"", ""Earth"")).empty());, assert(std::get<0>(bf(""Jupiter"", ""Makemake"")).empty());]"
1125,"    
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    
","```
#include <vector>
#include <cmath>
#include <string>

int double_the_difference(const std::vector<int>& lst) {
    int sum = 0;
    for (int i : lst) {
        if (i > 0 && i % 2 != 0) {
            sum += std::pow(i, 2);
        }
    }
    return sum;
}
```",1126,"[assert(double_the_difference({}) == 0 && ""This prints if this assert fails 1 (good for debugging!)"");, assert(double_the_difference({5, 4}) == 25 && ""This prints if this assert fails 2 (good for debugging!)"");, assert(double_the_difference({0.1, 0.2, 0.3}) == 0 && ""This prints if this assert fails 3 (good for debugging!)"");]"
1126,"    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","```
#include <vector>
#include <cmath>

#include <iostream>
#include <vector>
#include <cassert>

std::vector<int> compare(const std::vector<int>& a, const std::vector<int>& b) {
    std::vector<int> result;
    for (size_t i = 0; i < a.size(); ++i) {
        result.push_back(a[i] - b[i]);
    }
    return result;
}```",1127,"[assert(compare({1,2,3,4,5,1}, {1,2,3,4,2,-2}) == std::vector<int>({0,0,0,0,3,3})); // This prints if this assert fails 1 (good for debugging!), assert(compare({0,0,0,0,0,0}, {0,0,0,0,0,0}) == std::vector<int>({0,0,0,0,0,0})); // This prints if this assert fails 1 (good for debugging!), assert(compare({1,2,3}, {-1,-2,-3}) == std::vector<int>({2,4,6}));]"
1127,"    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extensions name, and let SM be the number of lowercase letters 
    in the extensions name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: [SErviNGSliCes, Cheese, StuFfed] then you should
    return Slices.SErviNGSliCes since SErviNGSliCes is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension(my_class, [AA, Be, CC]) == my_class.AA
    """"""
","```
#include <iostream>
#include <vector>
#include <string>

std::string Strongest_Extension(const std::string& class_name, const std::vector<std::string>& extensions) {
    std::string strong = extensions[0];
    int my_val = 0;

    for (char x : extensions[0]) {
        if (isalpha(x)) {
            if (isupper(x)) my_val++;
            else my_val--;
        }
    }

    for (const auto& s : extensions) {
        int val = 0;
        for (char x : s) {
            if (isalpha(x)) {
                if (isupper(x)) val++;
                else val--;
            }
        }
        if (val > my_val) {
            strong = s;
            my_val = val;
        }
    }

    return class_name + ""."" + strong;
}
```",1128,"[assert(Strongest_Extension(""finNNalLLly"", {""Die"", ""NowW"", ""Wow"", ""WoW""}) == ""finNNalLLly.WoW"");, assert(Strongest_Extension(""_"", {""Bb"", ""91245""}) == ""_.Bb"");, assert(Strongest_Extension(""Sp"", {""671235"", ""Bb""}) == ""Sp.671235"");]"
1128,"    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","```
#include <string>

bool cycpattern_check(const std::string& a, const std::string& b) {
    int l = b.length();
    std::string pat = b + b;
    for (int i = 0; i <= a.length() - l; i++) {
        for (int j = 0; j <= l; j++) {
            if (a.substr(i, l) == pat.substr(j, l)) {
                return true;
            }
        }
    }
    return false;
}
```",1129,"[assert(cycpattern_check(""efef"", ""fee"") == true && ""test #3"");, assert(cycpattern_check(""abab"", ""aabb"") == false && ""test #4"");, assert(cycpattern_check(""winemtt"", ""tinem"") == true && ""test #5"");]"
1129,"    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","```
#include <iostream>
#include <string>
#include <cmath>

std::pair<int, int> even_odd_count(int num) {
    int even_count = 0;
    int odd_count = 0;
    std::string str_num = std::to_string(std::abs(num));
    
    for (char i : str_num) {
        if ((i - 0) % 2 == 0) {
            even_count += 1;
        } else {
            odd_count += 1;
        }
    }
    return std::make_pair(even_count, odd_count);
}
```",1130,"[assert(even_odd_count(7) == std::make_tuple(0, 1));, assert(even_odd_count(-78) == std::make_tuple(1, 1));, assert(even_odd_count(3452) == std::make_tuple(2, 2));]"
1130,"    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == xix
    >>> int_to_mini_roman(152) == clii
    >>> int_to_mini_roman(426) == cdxxvi
    """"""
","```
#include <iostream>
#include <vector>
#include <string>
#include<cassert>

std::string int_to_mini_roman(int number) {
    std::vector<int> num = { 1, 4, 5, 9, 10, 40, 50, 90,
                             100, 400, 500, 900, 1000 };
    std::vector<std::string> sym = { ""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",
                                     ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M"" };
    int i = 12;
    std::string res = """";
    while (number) {
        int div = number / num[i];
        number %= num[i];
        while (div) {
            res += sym[i];
            div -= 1;
        }
        i -= 1;
    }
    for (auto& c : res) c = tolower(c);
    return res;
}```",1131,"[assert(int_to_mini_roman(152) == ""clii"");, assert(int_to_mini_roman(251) == ""ccli"");, assert(int_to_mini_roman(426) == ""cdxxvi"");]"
1131,"    
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    
","```
bool right_angle_triangle(int a, int b, int c) {
    return a*a == b*b + c*c || b*b == a*a + c*c || c*c == a*a + b*b;
}
```",1132,"[assert(right_angle_triangle(3, 4, 5) == true "");, assert(right_angle_triangle(1, 2, 3) == false);, assert(right_angle_triangle(10, 6, 8) == true);, assert(right_angle_triangle(2, 2, 2) == false);]"
1132,"    """"""This is  a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","```
#include <vector>
#include <string>
#include <algorithm>
#include <set>

std::string find_max(const std::vector<std::string>& words) {
    auto cmp = [](const std::string& a, const std::string& b) {
        std::set<char> set_a(a.begin(), a.end());
        std::set<char> set_b(b.begin(), b.end());
        if (set_a.size() != set_b.size()) {
            return set_a.size() > set_b.size();
        }
        return a < b;
    };
    
    auto sorted_words = words;
    std::sort(sorted_words.begin(), sorted_words.end(), cmp);
    return sorted_words[0];
}
```",1133,"[assert(find_max({""name"", ""of"", ""string""}) == ""string""); // t1, assert(find_max({""name"", ""enam"", ""game""}) == ""enam""); // t2, assert(find_max({""aaaaaaa"", ""bb"", ""cc""}) == ""aaaaaaa""); // t3]"
1133,"    """"""
    Youre a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the days meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","```
#include <vector>

std::vector<int> eat(int number, int need, int remaining) {
    if (need <= remaining) {
        return { number + need, remaining - need };
    } else {
        return { number + remaining, 0 };
    }
}
```",1134,"[assert((eat(5, 6, 10) == std::vector<int>{11, 4} && ""Error""));, assert((eat(4, 8, 9) == std::vector<int>{12, 1} && ""Error""));, assert((eat(1, 10, 10) == std::vector<int>{11, 0} && ""Error""));]"
1134,"    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator[+, *, -]
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","```
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <stdexcept>
#include <cassert>
#include <cmath>

// Helper function to evaluate simple mathematical expressions
double eval(const std::string& expression) {
    std::istringstream stream(expression);
    double result;
    stream >> result;

    double num;
    char op;
    while (stream >> op >> num) {
        switch (op) {
        case +: result += num; break;
        case -: result -= num; break;
        case *: result *= num; break;
        case /:
            if (num == 0) throw std::runtime_error(""Division by zero"");
            result /= num;
            break;
        default: throw std::runtime_error(""Unsupported operator"");
        }
    }

    return result;
}

// Function to perform algebraic operations
double do_algebra(const std::vector<std::string>& oper, const std::vector<double>& opern) {
    if (oper.size() + 1 != opern.size()) {
        throw std::invalid_argument(""Mismatched operators and operands"");
    }

    double result = opern[0];
    for (size_t i = 0; i < oper.size(); ++i) {
        const std::string& op = oper[i];
        double rhs = opern[i + 1];

        if (op == ""**"") {  // Exponentiation
            result = std::pow(result, rhs);
        }
        else if (op == ""//"") {  // Integer division
            if (rhs == 0) throw std::runtime_error(""Division by zero"");
            result = static_cast<int>(result / rhs);
        }
        else if (op == ""+"") {
            result += rhs;
        }
        else if (op == ""-"") {
            result -= rhs;
        }
        else if (op == ""*"") {
            result *= rhs;
        }
        else if (op == ""/"") {
            if (rhs == 0) throw std::runtime_error(""Division by zero"");
            result /= rhs;
        }
        else {
            throw std::runtime_error(""Unsupported operator: "" + op);
        }
    }

    return result;
}```",1135,"[assert(std::abs(do_algebra({ ""**"", ""*"", ""+"" }, { 2, 3, 4, 5 }) - 37.0) < 1e-6);, assert(std::abs(do_algebra({ ""//"", ""*"" }, { 7, 3, 4 }) - 8.0) < 1e-6);]"
1135,"    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","```
#include <iostream>
#include <string>
#include <cctype>

std::string solve(std::string s) {
    int flg = 0;
    int idx = 0;
    std::string new_str = s;
    
    for (char i : s) {
        if (isalpha(i)) {
            new_str[idx] = (isupper(i)) ? tolower(i) : toupper(i);
            flg = 1;
        }
        idx++;
    }
    
    if (flg == 0) {
        std::reverse(s.begin(), s.end());
        return s;
    }
    
    return new_str;
}
```",1136,"[assert(solve(""AsDf"") == ""aSdF"");, assert(solve(""1234"") == ""4321"");, assert(solve(""ab"") == ""AB"");, assert(solve(""#a@C"") == ""#A@c"");, assert(solve(""#AsdfW^45"") == ""#aSDFw^45"");, assert(solve(""#6@2"") == ""2@6#"");, assert(solve(""#$a^D"") == ""#$A^d"");, assert(solve(""#ccc"") == ""#CCC"");]"
1136,"    """"""
    Given a string text, return its md5 hash equivalent string.
    If text is an empty string, return None.

    >>> string_to_md5(Hello world) == 3e25960a79dbc69b674cd4ec67a72c62
    """"""
","```
#include <iostream>
#include <string>
#include <openssl/md5.h>

std::string string_to_md5(const std::string& text) {
    if (text.empty()) return """";

    unsigned char digest[MD5_DIGEST_LENGTH];
    MD5((unsigned char*)text.c_str(), text.size(), digest);

    char md5String[33];
    for (int i = 0; i < 16; i++) {
        sprintf(&md5String[i * 2], ""%02x"", (unsigned int)digest[i]);
    }
    return std::string(md5String);
}
```",1137,"[assert(string_to_md5(""Hello world"") == ""3e25960a79dbc69b674cd4ec67a72c62"");, assert(string_to_md5("""") == """");, assert(string_to_md5(""A B C"") == ""0ef78513b0cb8cef12743f5aeb35f888"");, assert(string_to_md5(""password"") == ""5f4dcc3b5aa765d61d8327deb882cf99"");, assert(true);]"
